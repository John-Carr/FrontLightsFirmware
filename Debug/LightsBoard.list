
LightsBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000128a4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c08  08012964  08012964  00022964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801356c  0801356c  00030240  2**0
                  CONTENTS
  4 .ARM          00000000  0801356c  0801356c  00030240  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801356c  0801356c  00030240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801356c  0801356c  0002356c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08013574  08013574  00023574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0801357c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003560  20000240  080137bc  00030240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200037a0  080137bc  000337a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005f1c7  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008d6d  00000000  00000000  0008f42f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003518  00000000  00000000  000981a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000032b0  00000000  00000000  0009b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027589  00000000  00000000  0009e968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035738  00000000  00000000  000c5ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ceabb  00000000  00000000  000fb629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ca0e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d098  00000000  00000000  001ca138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000240 	.word	0x20000240
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801294c 	.word	0x0801294c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000244 	.word	0x20000244
 8000104:	0801294c 	.word	0x0801294c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_fmul>:
 8000234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000236:	4657      	mov	r7, sl
 8000238:	464e      	mov	r6, r9
 800023a:	4645      	mov	r5, r8
 800023c:	46de      	mov	lr, fp
 800023e:	0244      	lsls	r4, r0, #9
 8000240:	b5e0      	push	{r5, r6, r7, lr}
 8000242:	0045      	lsls	r5, r0, #1
 8000244:	1c0f      	adds	r7, r1, #0
 8000246:	0a64      	lsrs	r4, r4, #9
 8000248:	0e2d      	lsrs	r5, r5, #24
 800024a:	0fc6      	lsrs	r6, r0, #31
 800024c:	2d00      	cmp	r5, #0
 800024e:	d047      	beq.n	80002e0 <__aeabi_fmul+0xac>
 8000250:	2dff      	cmp	r5, #255	; 0xff
 8000252:	d04d      	beq.n	80002f0 <__aeabi_fmul+0xbc>
 8000254:	2300      	movs	r3, #0
 8000256:	2080      	movs	r0, #128	; 0x80
 8000258:	469a      	mov	sl, r3
 800025a:	469b      	mov	fp, r3
 800025c:	00e4      	lsls	r4, r4, #3
 800025e:	04c0      	lsls	r0, r0, #19
 8000260:	4304      	orrs	r4, r0
 8000262:	3d7f      	subs	r5, #127	; 0x7f
 8000264:	0278      	lsls	r0, r7, #9
 8000266:	0a43      	lsrs	r3, r0, #9
 8000268:	4699      	mov	r9, r3
 800026a:	007a      	lsls	r2, r7, #1
 800026c:	0ffb      	lsrs	r3, r7, #31
 800026e:	4698      	mov	r8, r3
 8000270:	0e12      	lsrs	r2, r2, #24
 8000272:	464b      	mov	r3, r9
 8000274:	d044      	beq.n	8000300 <__aeabi_fmul+0xcc>
 8000276:	2aff      	cmp	r2, #255	; 0xff
 8000278:	d011      	beq.n	800029e <__aeabi_fmul+0x6a>
 800027a:	00d8      	lsls	r0, r3, #3
 800027c:	2380      	movs	r3, #128	; 0x80
 800027e:	04db      	lsls	r3, r3, #19
 8000280:	4303      	orrs	r3, r0
 8000282:	4699      	mov	r9, r3
 8000284:	2000      	movs	r0, #0
 8000286:	3a7f      	subs	r2, #127	; 0x7f
 8000288:	18ad      	adds	r5, r5, r2
 800028a:	4647      	mov	r7, r8
 800028c:	4653      	mov	r3, sl
 800028e:	4077      	eors	r7, r6
 8000290:	1c69      	adds	r1, r5, #1
 8000292:	2b0f      	cmp	r3, #15
 8000294:	d83f      	bhi.n	8000316 <__aeabi_fmul+0xe2>
 8000296:	4a72      	ldr	r2, [pc, #456]	; (8000460 <__aeabi_fmul+0x22c>)
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	58d3      	ldr	r3, [r2, r3]
 800029c:	469f      	mov	pc, r3
 800029e:	35ff      	adds	r5, #255	; 0xff
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d000      	beq.n	80002a6 <__aeabi_fmul+0x72>
 80002a4:	e079      	b.n	800039a <__aeabi_fmul+0x166>
 80002a6:	4652      	mov	r2, sl
 80002a8:	2302      	movs	r3, #2
 80002aa:	431a      	orrs	r2, r3
 80002ac:	4692      	mov	sl, r2
 80002ae:	2002      	movs	r0, #2
 80002b0:	e7eb      	b.n	800028a <__aeabi_fmul+0x56>
 80002b2:	4647      	mov	r7, r8
 80002b4:	464c      	mov	r4, r9
 80002b6:	4683      	mov	fp, r0
 80002b8:	465b      	mov	r3, fp
 80002ba:	2b02      	cmp	r3, #2
 80002bc:	d028      	beq.n	8000310 <__aeabi_fmul+0xdc>
 80002be:	2b03      	cmp	r3, #3
 80002c0:	d100      	bne.n	80002c4 <__aeabi_fmul+0x90>
 80002c2:	e0c6      	b.n	8000452 <__aeabi_fmul+0x21e>
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d14f      	bne.n	8000368 <__aeabi_fmul+0x134>
 80002c8:	2000      	movs	r0, #0
 80002ca:	2400      	movs	r4, #0
 80002cc:	05c0      	lsls	r0, r0, #23
 80002ce:	07ff      	lsls	r7, r7, #31
 80002d0:	4320      	orrs	r0, r4
 80002d2:	4338      	orrs	r0, r7
 80002d4:	bcf0      	pop	{r4, r5, r6, r7}
 80002d6:	46bb      	mov	fp, r7
 80002d8:	46b2      	mov	sl, r6
 80002da:	46a9      	mov	r9, r5
 80002dc:	46a0      	mov	r8, r4
 80002de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002e0:	2c00      	cmp	r4, #0
 80002e2:	d171      	bne.n	80003c8 <__aeabi_fmul+0x194>
 80002e4:	2304      	movs	r3, #4
 80002e6:	469a      	mov	sl, r3
 80002e8:	3b03      	subs	r3, #3
 80002ea:	2500      	movs	r5, #0
 80002ec:	469b      	mov	fp, r3
 80002ee:	e7b9      	b.n	8000264 <__aeabi_fmul+0x30>
 80002f0:	2c00      	cmp	r4, #0
 80002f2:	d163      	bne.n	80003bc <__aeabi_fmul+0x188>
 80002f4:	2308      	movs	r3, #8
 80002f6:	469a      	mov	sl, r3
 80002f8:	3b06      	subs	r3, #6
 80002fa:	25ff      	movs	r5, #255	; 0xff
 80002fc:	469b      	mov	fp, r3
 80002fe:	e7b1      	b.n	8000264 <__aeabi_fmul+0x30>
 8000300:	2b00      	cmp	r3, #0
 8000302:	d150      	bne.n	80003a6 <__aeabi_fmul+0x172>
 8000304:	4652      	mov	r2, sl
 8000306:	3301      	adds	r3, #1
 8000308:	431a      	orrs	r2, r3
 800030a:	4692      	mov	sl, r2
 800030c:	2001      	movs	r0, #1
 800030e:	e7bc      	b.n	800028a <__aeabi_fmul+0x56>
 8000310:	20ff      	movs	r0, #255	; 0xff
 8000312:	2400      	movs	r4, #0
 8000314:	e7da      	b.n	80002cc <__aeabi_fmul+0x98>
 8000316:	4648      	mov	r0, r9
 8000318:	0c26      	lsrs	r6, r4, #16
 800031a:	0424      	lsls	r4, r4, #16
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	0404      	lsls	r4, r0, #16
 8000320:	0c24      	lsrs	r4, r4, #16
 8000322:	464b      	mov	r3, r9
 8000324:	0020      	movs	r0, r4
 8000326:	0c1b      	lsrs	r3, r3, #16
 8000328:	4350      	muls	r0, r2
 800032a:	4374      	muls	r4, r6
 800032c:	435a      	muls	r2, r3
 800032e:	435e      	muls	r6, r3
 8000330:	1912      	adds	r2, r2, r4
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	189b      	adds	r3, r3, r2
 8000336:	429c      	cmp	r4, r3
 8000338:	d903      	bls.n	8000342 <__aeabi_fmul+0x10e>
 800033a:	2280      	movs	r2, #128	; 0x80
 800033c:	0252      	lsls	r2, r2, #9
 800033e:	4694      	mov	ip, r2
 8000340:	4466      	add	r6, ip
 8000342:	0400      	lsls	r0, r0, #16
 8000344:	041a      	lsls	r2, r3, #16
 8000346:	0c00      	lsrs	r0, r0, #16
 8000348:	1812      	adds	r2, r2, r0
 800034a:	0194      	lsls	r4, r2, #6
 800034c:	1e60      	subs	r0, r4, #1
 800034e:	4184      	sbcs	r4, r0
 8000350:	0c1b      	lsrs	r3, r3, #16
 8000352:	0e92      	lsrs	r2, r2, #26
 8000354:	199b      	adds	r3, r3, r6
 8000356:	4314      	orrs	r4, r2
 8000358:	019b      	lsls	r3, r3, #6
 800035a:	431c      	orrs	r4, r3
 800035c:	011b      	lsls	r3, r3, #4
 800035e:	d572      	bpl.n	8000446 <__aeabi_fmul+0x212>
 8000360:	2001      	movs	r0, #1
 8000362:	0863      	lsrs	r3, r4, #1
 8000364:	4004      	ands	r4, r0
 8000366:	431c      	orrs	r4, r3
 8000368:	0008      	movs	r0, r1
 800036a:	307f      	adds	r0, #127	; 0x7f
 800036c:	2800      	cmp	r0, #0
 800036e:	dd3c      	ble.n	80003ea <__aeabi_fmul+0x1b6>
 8000370:	0763      	lsls	r3, r4, #29
 8000372:	d004      	beq.n	800037e <__aeabi_fmul+0x14a>
 8000374:	230f      	movs	r3, #15
 8000376:	4023      	ands	r3, r4
 8000378:	2b04      	cmp	r3, #4
 800037a:	d000      	beq.n	800037e <__aeabi_fmul+0x14a>
 800037c:	3404      	adds	r4, #4
 800037e:	0123      	lsls	r3, r4, #4
 8000380:	d503      	bpl.n	800038a <__aeabi_fmul+0x156>
 8000382:	3180      	adds	r1, #128	; 0x80
 8000384:	0008      	movs	r0, r1
 8000386:	4b37      	ldr	r3, [pc, #220]	; (8000464 <__aeabi_fmul+0x230>)
 8000388:	401c      	ands	r4, r3
 800038a:	28fe      	cmp	r0, #254	; 0xfe
 800038c:	dcc0      	bgt.n	8000310 <__aeabi_fmul+0xdc>
 800038e:	01a4      	lsls	r4, r4, #6
 8000390:	0a64      	lsrs	r4, r4, #9
 8000392:	b2c0      	uxtb	r0, r0
 8000394:	e79a      	b.n	80002cc <__aeabi_fmul+0x98>
 8000396:	0037      	movs	r7, r6
 8000398:	e78e      	b.n	80002b8 <__aeabi_fmul+0x84>
 800039a:	4652      	mov	r2, sl
 800039c:	2303      	movs	r3, #3
 800039e:	431a      	orrs	r2, r3
 80003a0:	4692      	mov	sl, r2
 80003a2:	2003      	movs	r0, #3
 80003a4:	e771      	b.n	800028a <__aeabi_fmul+0x56>
 80003a6:	4648      	mov	r0, r9
 80003a8:	f000 f8c4 	bl	8000534 <__clzsi2>
 80003ac:	464a      	mov	r2, r9
 80003ae:	1f43      	subs	r3, r0, #5
 80003b0:	409a      	lsls	r2, r3
 80003b2:	1a2d      	subs	r5, r5, r0
 80003b4:	4691      	mov	r9, r2
 80003b6:	2000      	movs	r0, #0
 80003b8:	3d76      	subs	r5, #118	; 0x76
 80003ba:	e766      	b.n	800028a <__aeabi_fmul+0x56>
 80003bc:	230c      	movs	r3, #12
 80003be:	469a      	mov	sl, r3
 80003c0:	3b09      	subs	r3, #9
 80003c2:	25ff      	movs	r5, #255	; 0xff
 80003c4:	469b      	mov	fp, r3
 80003c6:	e74d      	b.n	8000264 <__aeabi_fmul+0x30>
 80003c8:	0020      	movs	r0, r4
 80003ca:	f000 f8b3 	bl	8000534 <__clzsi2>
 80003ce:	2576      	movs	r5, #118	; 0x76
 80003d0:	1f43      	subs	r3, r0, #5
 80003d2:	409c      	lsls	r4, r3
 80003d4:	2300      	movs	r3, #0
 80003d6:	426d      	negs	r5, r5
 80003d8:	469a      	mov	sl, r3
 80003da:	469b      	mov	fp, r3
 80003dc:	1a2d      	subs	r5, r5, r0
 80003de:	e741      	b.n	8000264 <__aeabi_fmul+0x30>
 80003e0:	2480      	movs	r4, #128	; 0x80
 80003e2:	2700      	movs	r7, #0
 80003e4:	20ff      	movs	r0, #255	; 0xff
 80003e6:	03e4      	lsls	r4, r4, #15
 80003e8:	e770      	b.n	80002cc <__aeabi_fmul+0x98>
 80003ea:	2301      	movs	r3, #1
 80003ec:	1a1b      	subs	r3, r3, r0
 80003ee:	2b1b      	cmp	r3, #27
 80003f0:	dd00      	ble.n	80003f4 <__aeabi_fmul+0x1c0>
 80003f2:	e769      	b.n	80002c8 <__aeabi_fmul+0x94>
 80003f4:	319e      	adds	r1, #158	; 0x9e
 80003f6:	0020      	movs	r0, r4
 80003f8:	408c      	lsls	r4, r1
 80003fa:	40d8      	lsrs	r0, r3
 80003fc:	1e63      	subs	r3, r4, #1
 80003fe:	419c      	sbcs	r4, r3
 8000400:	4304      	orrs	r4, r0
 8000402:	0763      	lsls	r3, r4, #29
 8000404:	d004      	beq.n	8000410 <__aeabi_fmul+0x1dc>
 8000406:	230f      	movs	r3, #15
 8000408:	4023      	ands	r3, r4
 800040a:	2b04      	cmp	r3, #4
 800040c:	d000      	beq.n	8000410 <__aeabi_fmul+0x1dc>
 800040e:	3404      	adds	r4, #4
 8000410:	0163      	lsls	r3, r4, #5
 8000412:	d51a      	bpl.n	800044a <__aeabi_fmul+0x216>
 8000414:	2001      	movs	r0, #1
 8000416:	2400      	movs	r4, #0
 8000418:	e758      	b.n	80002cc <__aeabi_fmul+0x98>
 800041a:	2080      	movs	r0, #128	; 0x80
 800041c:	03c0      	lsls	r0, r0, #15
 800041e:	4204      	tst	r4, r0
 8000420:	d009      	beq.n	8000436 <__aeabi_fmul+0x202>
 8000422:	464b      	mov	r3, r9
 8000424:	4203      	tst	r3, r0
 8000426:	d106      	bne.n	8000436 <__aeabi_fmul+0x202>
 8000428:	464c      	mov	r4, r9
 800042a:	4304      	orrs	r4, r0
 800042c:	0264      	lsls	r4, r4, #9
 800042e:	4647      	mov	r7, r8
 8000430:	20ff      	movs	r0, #255	; 0xff
 8000432:	0a64      	lsrs	r4, r4, #9
 8000434:	e74a      	b.n	80002cc <__aeabi_fmul+0x98>
 8000436:	2080      	movs	r0, #128	; 0x80
 8000438:	03c0      	lsls	r0, r0, #15
 800043a:	4304      	orrs	r4, r0
 800043c:	0264      	lsls	r4, r4, #9
 800043e:	0037      	movs	r7, r6
 8000440:	20ff      	movs	r0, #255	; 0xff
 8000442:	0a64      	lsrs	r4, r4, #9
 8000444:	e742      	b.n	80002cc <__aeabi_fmul+0x98>
 8000446:	0029      	movs	r1, r5
 8000448:	e78e      	b.n	8000368 <__aeabi_fmul+0x134>
 800044a:	01a4      	lsls	r4, r4, #6
 800044c:	2000      	movs	r0, #0
 800044e:	0a64      	lsrs	r4, r4, #9
 8000450:	e73c      	b.n	80002cc <__aeabi_fmul+0x98>
 8000452:	2080      	movs	r0, #128	; 0x80
 8000454:	03c0      	lsls	r0, r0, #15
 8000456:	4304      	orrs	r4, r0
 8000458:	0264      	lsls	r4, r4, #9
 800045a:	20ff      	movs	r0, #255	; 0xff
 800045c:	0a64      	lsrs	r4, r4, #9
 800045e:	e735      	b.n	80002cc <__aeabi_fmul+0x98>
 8000460:	08013280 	.word	0x08013280
 8000464:	f7ffffff 	.word	0xf7ffffff

08000468 <__aeabi_f2iz>:
 8000468:	0241      	lsls	r1, r0, #9
 800046a:	0042      	lsls	r2, r0, #1
 800046c:	0fc3      	lsrs	r3, r0, #31
 800046e:	0a49      	lsrs	r1, r1, #9
 8000470:	2000      	movs	r0, #0
 8000472:	0e12      	lsrs	r2, r2, #24
 8000474:	2a7e      	cmp	r2, #126	; 0x7e
 8000476:	d903      	bls.n	8000480 <__aeabi_f2iz+0x18>
 8000478:	2a9d      	cmp	r2, #157	; 0x9d
 800047a:	d902      	bls.n	8000482 <__aeabi_f2iz+0x1a>
 800047c:	4a09      	ldr	r2, [pc, #36]	; (80004a4 <__aeabi_f2iz+0x3c>)
 800047e:	1898      	adds	r0, r3, r2
 8000480:	4770      	bx	lr
 8000482:	2080      	movs	r0, #128	; 0x80
 8000484:	0400      	lsls	r0, r0, #16
 8000486:	4301      	orrs	r1, r0
 8000488:	2a95      	cmp	r2, #149	; 0x95
 800048a:	dc07      	bgt.n	800049c <__aeabi_f2iz+0x34>
 800048c:	2096      	movs	r0, #150	; 0x96
 800048e:	1a82      	subs	r2, r0, r2
 8000490:	40d1      	lsrs	r1, r2
 8000492:	4248      	negs	r0, r1
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1f3      	bne.n	8000480 <__aeabi_f2iz+0x18>
 8000498:	0008      	movs	r0, r1
 800049a:	e7f1      	b.n	8000480 <__aeabi_f2iz+0x18>
 800049c:	3a96      	subs	r2, #150	; 0x96
 800049e:	4091      	lsls	r1, r2
 80004a0:	e7f7      	b.n	8000492 <__aeabi_f2iz+0x2a>
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	7fffffff 	.word	0x7fffffff

080004a8 <__aeabi_i2f>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2800      	cmp	r0, #0
 80004ac:	d013      	beq.n	80004d6 <__aeabi_i2f+0x2e>
 80004ae:	17c3      	asrs	r3, r0, #31
 80004b0:	18c5      	adds	r5, r0, r3
 80004b2:	405d      	eors	r5, r3
 80004b4:	0fc4      	lsrs	r4, r0, #31
 80004b6:	0028      	movs	r0, r5
 80004b8:	f000 f83c 	bl	8000534 <__clzsi2>
 80004bc:	239e      	movs	r3, #158	; 0x9e
 80004be:	0001      	movs	r1, r0
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	2b96      	cmp	r3, #150	; 0x96
 80004c4:	dc0f      	bgt.n	80004e6 <__aeabi_i2f+0x3e>
 80004c6:	2808      	cmp	r0, #8
 80004c8:	dd01      	ble.n	80004ce <__aeabi_i2f+0x26>
 80004ca:	3908      	subs	r1, #8
 80004cc:	408d      	lsls	r5, r1
 80004ce:	026d      	lsls	r5, r5, #9
 80004d0:	0a6d      	lsrs	r5, r5, #9
 80004d2:	b2d8      	uxtb	r0, r3
 80004d4:	e002      	b.n	80004dc <__aeabi_i2f+0x34>
 80004d6:	2400      	movs	r4, #0
 80004d8:	2000      	movs	r0, #0
 80004da:	2500      	movs	r5, #0
 80004dc:	05c0      	lsls	r0, r0, #23
 80004de:	4328      	orrs	r0, r5
 80004e0:	07e4      	lsls	r4, r4, #31
 80004e2:	4320      	orrs	r0, r4
 80004e4:	bd70      	pop	{r4, r5, r6, pc}
 80004e6:	2b99      	cmp	r3, #153	; 0x99
 80004e8:	dd0b      	ble.n	8000502 <__aeabi_i2f+0x5a>
 80004ea:	2205      	movs	r2, #5
 80004ec:	002e      	movs	r6, r5
 80004ee:	1a12      	subs	r2, r2, r0
 80004f0:	40d6      	lsrs	r6, r2
 80004f2:	0002      	movs	r2, r0
 80004f4:	321b      	adds	r2, #27
 80004f6:	4095      	lsls	r5, r2
 80004f8:	0028      	movs	r0, r5
 80004fa:	1e45      	subs	r5, r0, #1
 80004fc:	41a8      	sbcs	r0, r5
 80004fe:	0035      	movs	r5, r6
 8000500:	4305      	orrs	r5, r0
 8000502:	2905      	cmp	r1, #5
 8000504:	dd01      	ble.n	800050a <__aeabi_i2f+0x62>
 8000506:	1f4a      	subs	r2, r1, #5
 8000508:	4095      	lsls	r5, r2
 800050a:	002a      	movs	r2, r5
 800050c:	4e08      	ldr	r6, [pc, #32]	; (8000530 <__aeabi_i2f+0x88>)
 800050e:	4032      	ands	r2, r6
 8000510:	0768      	lsls	r0, r5, #29
 8000512:	d009      	beq.n	8000528 <__aeabi_i2f+0x80>
 8000514:	200f      	movs	r0, #15
 8000516:	4028      	ands	r0, r5
 8000518:	2804      	cmp	r0, #4
 800051a:	d005      	beq.n	8000528 <__aeabi_i2f+0x80>
 800051c:	3204      	adds	r2, #4
 800051e:	0150      	lsls	r0, r2, #5
 8000520:	d502      	bpl.n	8000528 <__aeabi_i2f+0x80>
 8000522:	239f      	movs	r3, #159	; 0x9f
 8000524:	4032      	ands	r2, r6
 8000526:	1a5b      	subs	r3, r3, r1
 8000528:	0192      	lsls	r2, r2, #6
 800052a:	0a55      	lsrs	r5, r2, #9
 800052c:	b2d8      	uxtb	r0, r3
 800052e:	e7d5      	b.n	80004dc <__aeabi_i2f+0x34>
 8000530:	fbffffff 	.word	0xfbffffff

08000534 <__clzsi2>:
 8000534:	211c      	movs	r1, #28
 8000536:	2301      	movs	r3, #1
 8000538:	041b      	lsls	r3, r3, #16
 800053a:	4298      	cmp	r0, r3
 800053c:	d301      	bcc.n	8000542 <__clzsi2+0xe>
 800053e:	0c00      	lsrs	r0, r0, #16
 8000540:	3910      	subs	r1, #16
 8000542:	0a1b      	lsrs	r3, r3, #8
 8000544:	4298      	cmp	r0, r3
 8000546:	d301      	bcc.n	800054c <__clzsi2+0x18>
 8000548:	0a00      	lsrs	r0, r0, #8
 800054a:	3908      	subs	r1, #8
 800054c:	091b      	lsrs	r3, r3, #4
 800054e:	4298      	cmp	r0, r3
 8000550:	d301      	bcc.n	8000556 <__clzsi2+0x22>
 8000552:	0900      	lsrs	r0, r0, #4
 8000554:	3904      	subs	r1, #4
 8000556:	a202      	add	r2, pc, #8	; (adr r2, 8000560 <__clzsi2+0x2c>)
 8000558:	5c10      	ldrb	r0, [r2, r0]
 800055a:	1840      	adds	r0, r0, r1
 800055c:	4770      	bx	lr
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	02020304 	.word	0x02020304
 8000564:	01010101 	.word	0x01010101
	...

08000570 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <BSP_I2C2_Init+0x70>)
 800057c:	4a19      	ldr	r2, [pc, #100]	; (80005e4 <BSP_I2C2_Init+0x74>)
 800057e:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <BSP_I2C2_Init+0x78>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	1c59      	adds	r1, r3, #1
 8000586:	4a18      	ldr	r2, [pc, #96]	; (80005e8 <BSP_I2C2_Init+0x78>)
 8000588:	6011      	str	r1, [r2, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d123      	bne.n	80005d6 <BSP_I2C2_Init+0x66>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <BSP_I2C2_Init+0x70>)
 8000590:	0018      	movs	r0, r3
 8000592:	f003 fcd3 	bl	8003f3c <HAL_I2C_GetState>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d11d      	bne.n	80005d6 <BSP_I2C2_Init+0x66>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <BSP_I2C2_Init+0x70>)
 800059c:	0018      	movs	r0, r3
 800059e:	f000 f91d 	bl	80007dc <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d116      	bne.n	80005d6 <BSP_I2C2_Init+0x66>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 80005a8:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <BSP_I2C2_Init+0x70>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f8c6 	bl	800073c <MX_I2C2_Init>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d003      	beq.n	80005bc <BSP_I2C2_Init+0x4c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80005b4:	2308      	movs	r3, #8
 80005b6:	425b      	negs	r3, r3
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	e00c      	b.n	80005d6 <BSP_I2C2_Init+0x66>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <BSP_I2C2_Init+0x70>)
 80005be:	2100      	movs	r1, #0
 80005c0:	0018      	movs	r0, r3
 80005c2:	f003 ff23 	bl	800440c <HAL_I2CEx_ConfigAnalogFilter>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d003      	beq.n	80005d2 <BSP_I2C2_Init+0x62>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80005ca:	2308      	movs	r3, #8
 80005cc:	425b      	negs	r3, r3
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	e001      	b.n	80005d6 <BSP_I2C2_Init+0x66>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80005d6:	687b      	ldr	r3, [r7, #4]
}
 80005d8:	0018      	movs	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	b002      	add	sp, #8
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200021e4 	.word	0x200021e4
 80005e4:	40005800 	.word	0x40005800
 80005e8:	2000025c 	.word	0x2000025c

080005ec <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <BSP_I2C2_DeInit+0x48>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d015      	beq.n	800062a <BSP_I2C2_DeInit+0x3e>
  {
    if (--I2C2InitCounter == 0)
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <BSP_I2C2_DeInit+0x48>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	1e5a      	subs	r2, r3, #1
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <BSP_I2C2_DeInit+0x48>)
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <BSP_I2C2_DeInit+0x48>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d10c      	bne.n	800062a <BSP_I2C2_DeInit+0x3e>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <BSP_I2C2_DeInit+0x4c>)
 8000612:	0018      	movs	r0, r3
 8000614:	f000 f93a 	bl	800088c <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <BSP_I2C2_DeInit+0x4c>)
 800061a:	0018      	movs	r0, r3
 800061c:	f003 f9ec 	bl	80039f8 <HAL_I2C_DeInit>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d002      	beq.n	800062a <BSP_I2C2_DeInit+0x3e>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000624:	2308      	movs	r3, #8
 8000626:	425b      	negs	r3, r3
 8000628:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800062a:	687b      	ldr	r3, [r7, #4]
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	b002      	add	sp, #8
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000025c 	.word	0x2000025c
 8000638:	200021e4 	.word	0x200021e4

0800063c <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800063c:	b5b0      	push	{r4, r5, r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af04      	add	r7, sp, #16
 8000642:	0004      	movs	r4, r0
 8000644:	0008      	movs	r0, r1
 8000646:	60ba      	str	r2, [r7, #8]
 8000648:	0019      	movs	r1, r3
 800064a:	250e      	movs	r5, #14
 800064c:	197b      	adds	r3, r7, r5
 800064e:	1c22      	adds	r2, r4, #0
 8000650:	801a      	strh	r2, [r3, #0]
 8000652:	240c      	movs	r4, #12
 8000654:	193b      	adds	r3, r7, r4
 8000656:	1c02      	adds	r2, r0, #0
 8000658:	801a      	strh	r2, [r3, #0]
 800065a:	1dbb      	adds	r3, r7, #6
 800065c:	1c0a      	adds	r2, r1, #0
 800065e:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8000664:	193b      	adds	r3, r7, r4
 8000666:	881a      	ldrh	r2, [r3, #0]
 8000668:	197b      	adds	r3, r7, r5
 800066a:	8819      	ldrh	r1, [r3, #0]
 800066c:	4810      	ldr	r0, [pc, #64]	; (80006b0 <BSP_I2C2_WriteReg+0x74>)
 800066e:	2380      	movs	r3, #128	; 0x80
 8000670:	015b      	lsls	r3, r3, #5
 8000672:	9302      	str	r3, [sp, #8]
 8000674:	1dbb      	adds	r3, r7, #6
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	f003 f9fa 	bl	8003a78 <HAL_I2C_Mem_Write>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d00d      	beq.n	80006a4 <BSP_I2C2_WriteReg+0x68>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <BSP_I2C2_WriteReg+0x74>)
 800068a:	0018      	movs	r0, r3
 800068c:	f003 fc62 	bl	8003f54 <HAL_I2C_GetError>
 8000690:	0003      	movs	r3, r0
 8000692:	2b04      	cmp	r3, #4
 8000694:	d103      	bne.n	800069e <BSP_I2C2_WriteReg+0x62>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000696:	2366      	movs	r3, #102	; 0x66
 8000698:	425b      	negs	r3, r3
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	e002      	b.n	80006a4 <BSP_I2C2_WriteReg+0x68>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800069e:	2304      	movs	r3, #4
 80006a0:	425b      	negs	r3, r3
 80006a2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80006a4:	697b      	ldr	r3, [r7, #20]
}
 80006a6:	0018      	movs	r0, r3
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b006      	add	sp, #24
 80006ac:	bdb0      	pop	{r4, r5, r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	200021e4 	.word	0x200021e4

080006b4 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80006b4:	b5b0      	push	{r4, r5, r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af04      	add	r7, sp, #16
 80006ba:	0004      	movs	r4, r0
 80006bc:	0008      	movs	r0, r1
 80006be:	60ba      	str	r2, [r7, #8]
 80006c0:	0019      	movs	r1, r3
 80006c2:	250e      	movs	r5, #14
 80006c4:	197b      	adds	r3, r7, r5
 80006c6:	1c22      	adds	r2, r4, #0
 80006c8:	801a      	strh	r2, [r3, #0]
 80006ca:	240c      	movs	r4, #12
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	1c02      	adds	r2, r0, #0
 80006d0:	801a      	strh	r2, [r3, #0]
 80006d2:	1dbb      	adds	r3, r7, #6
 80006d4:	1c0a      	adds	r2, r1, #0
 80006d6:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	881a      	ldrh	r2, [r3, #0]
 80006e0:	197b      	adds	r3, r7, r5
 80006e2:	8819      	ldrh	r1, [r3, #0]
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <BSP_I2C2_ReadReg+0x74>)
 80006e6:	2380      	movs	r3, #128	; 0x80
 80006e8:	015b      	lsls	r3, r3, #5
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	1dbb      	adds	r3, r7, #6
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2301      	movs	r3, #1
 80006f8:	f003 faec 	bl	8003cd4 <HAL_I2C_Mem_Read>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d00d      	beq.n	800071c <BSP_I2C2_ReadReg+0x68>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <BSP_I2C2_ReadReg+0x74>)
 8000702:	0018      	movs	r0, r3
 8000704:	f003 fc26 	bl	8003f54 <HAL_I2C_GetError>
 8000708:	0003      	movs	r3, r0
 800070a:	2b04      	cmp	r3, #4
 800070c:	d103      	bne.n	8000716 <BSP_I2C2_ReadReg+0x62>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800070e:	2366      	movs	r3, #102	; 0x66
 8000710:	425b      	negs	r3, r3
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	e002      	b.n	800071c <BSP_I2C2_ReadReg+0x68>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000716:	2304      	movs	r3, #4
 8000718:	425b      	negs	r3, r3
 800071a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800071c:	697b      	ldr	r3, [r7, #20]
}
 800071e:	0018      	movs	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	b006      	add	sp, #24
 8000724:	bdb0      	pop	{r4, r5, r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	200021e4 	.word	0x200021e4

0800072c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000730:	f001 fe90 	bl	8002454 <HAL_GetTick>
 8000734:	0003      	movs	r3, r0
}
 8000736:	0018      	movs	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000744:	240f      	movs	r4, #15
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]

  hi2c->Instance = I2C2;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <MX_I2C2_Init+0x98>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00401A58;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a20      	ldr	r2, [pc, #128]	; (80007d8 <MX_I2C2_Init+0x9c>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2201      	movs	r2, #1
 8000762:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	0018      	movs	r0, r3
 8000786:	f003 f8a1 	bl	80038cc <HAL_I2C_Init>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d002      	beq.n	8000794 <MX_I2C2_Init+0x58>
  {
    ret = HAL_ERROR;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	015a      	lsls	r2, r3, #5
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	0011      	movs	r1, r2
 800079c:	0018      	movs	r0, r3
 800079e:	f003 fe35 	bl	800440c <HAL_I2CEx_ConfigAnalogFilter>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d003      	beq.n	80007ae <MX_I2C2_Init+0x72>
  {
    ret = HAL_ERROR;
 80007a6:	230f      	movs	r3, #15
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2100      	movs	r1, #0
 80007b2:	0018      	movs	r0, r3
 80007b4:	f003 fe76 	bl	80044a4 <HAL_I2CEx_ConfigDigitalFilter>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d003      	beq.n	80007c4 <MX_I2C2_Init+0x88>
  {
    ret = HAL_ERROR;
 80007bc:	230f      	movs	r3, #15
 80007be:	18fb      	adds	r3, r7, r3
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80007c4:	230f      	movs	r3, #15
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	781b      	ldrb	r3, [r3, #0]
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b005      	add	sp, #20
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	40005800 	.word	0x40005800
 80007d8:	00401a58 	.word	0x00401a58

080007dc <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b08b      	sub	sp, #44	; 0x2c
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e4:	4b27      	ldr	r3, [pc, #156]	; (8000884 <I2C2_MspInit+0xa8>)
 80007e6:	695a      	ldr	r2, [r3, #20]
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <I2C2_MspInit+0xa8>)
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	02c9      	lsls	r1, r1, #11
 80007ee:	430a      	orrs	r2, r1
 80007f0:	615a      	str	r2, [r3, #20]
 80007f2:	4b24      	ldr	r3, [pc, #144]	; (8000884 <I2C2_MspInit+0xa8>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	02db      	lsls	r3, r3, #11
 80007fa:	4013      	ands	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8000800:	2114      	movs	r1, #20
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	00d2      	lsls	r2, r2, #3
 8000808:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080a:	000c      	movs	r4, r1
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2212      	movs	r2, #18
 8000810:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	193b      	adds	r3, r7, r4
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000818:	193b      	adds	r3, r7, r4
 800081a:	2203      	movs	r2, #3
 800081c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2201      	movs	r2, #1
 8000822:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000824:	193b      	adds	r3, r7, r4
 8000826:	4a18      	ldr	r2, [pc, #96]	; (8000888 <I2C2_MspInit+0xac>)
 8000828:	0019      	movs	r1, r3
 800082a:	0010      	movs	r0, r2
 800082c:	f002 fdc6 	bl	80033bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8000830:	0021      	movs	r1, r4
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2212      	movs	r2, #18
 800083e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2203      	movs	r2, #3
 800084a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2201      	movs	r2, #1
 8000850:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000852:	187b      	adds	r3, r7, r1
 8000854:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <I2C2_MspInit+0xac>)
 8000856:	0019      	movs	r1, r3
 8000858:	0010      	movs	r0, r2
 800085a:	f002 fdaf 	bl	80033bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <I2C2_MspInit+0xa8>)
 8000860:	69da      	ldr	r2, [r3, #28]
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <I2C2_MspInit+0xa8>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	03c9      	lsls	r1, r1, #15
 8000868:	430a      	orrs	r2, r1
 800086a:	61da      	str	r2, [r3, #28]
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <I2C2_MspInit+0xa8>)
 800086e:	69da      	ldr	r2, [r3, #28]
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	03db      	lsls	r3, r3, #15
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b00b      	add	sp, #44	; 0x2c
 8000880:	bd90      	pop	{r4, r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	40021000 	.word	0x40021000
 8000888:	48000400 	.word	0x48000400

0800088c <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <I2C2_MspDeInit+0x38>)
 8000896:	69da      	ldr	r2, [r3, #28]
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <I2C2_MspDeInit+0x38>)
 800089a:	490b      	ldr	r1, [pc, #44]	; (80008c8 <I2C2_MspDeInit+0x3c>)
 800089c:	400a      	ands	r2, r1
 800089e:	61da      	str	r2, [r3, #28]

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	4a09      	ldr	r2, [pc, #36]	; (80008cc <I2C2_MspDeInit+0x40>)
 80008a6:	0019      	movs	r1, r3
 80008a8:	0010      	movs	r0, r2
 80008aa:	f002 feff 	bl	80036ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	011b      	lsls	r3, r3, #4
 80008b2:	4a06      	ldr	r2, [pc, #24]	; (80008cc <I2C2_MspDeInit+0x40>)
 80008b4:	0019      	movs	r1, r3
 80008b6:	0010      	movs	r0, r2
 80008b8:	f002 fef8 	bl	80036ac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b002      	add	sp, #8
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40021000 	.word	0x40021000
 80008c8:	ffbfffff 	.word	0xffbfffff
 80008cc:	48000400 	.word	0x48000400

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d4:	f001 fd98 	bl	8002408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d8:	f000 f82c 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008dc:	f000 f8f4 	bl	8000ac8 <MX_GPIO_Init>
  MX_CAN_Init();
 80008e0:	f000 f87c 	bl	80009dc <MX_CAN_Init>
  MX_SPI1_Init();
 80008e4:	f000 f8b2 	bl	8000a4c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008e8:	f00c ffba 	bl	800d860 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <main+0x4c>)
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <main+0x50>)
 80008f0:	2100      	movs	r1, #0
 80008f2:	0018      	movs	r0, r3
 80008f4:	f00d f80e 	bl	800d914 <osThreadNew>
 80008f8:	0002      	movs	r2, r0
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <main+0x54>)
 80008fc:	601a      	str	r2, [r3, #0]

  /* creation of Blink */
  BlinkHandle = osThreadNew(StartBlink, NULL, &Blink_attributes);
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <main+0x58>)
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <main+0x5c>)
 8000902:	2100      	movs	r1, #0
 8000904:	0018      	movs	r0, r3
 8000906:	f00d f805 	bl	800d914 <osThreadNew>
 800090a:	0002      	movs	r2, r0
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <main+0x60>)
 800090e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  CPP_UserSetup();
 8000910:	f000 fbd2 	bl	80010b8 <CPP_UserSetup>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000914:	f00c ffd0 	bl	800d8b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000918:	e7fe      	b.n	8000918 <main+0x48>
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	080132c0 	.word	0x080132c0
 8000920:	08000c09 	.word	0x08000c09
 8000924:	20002230 	.word	0x20002230
 8000928:	080132e4 	.word	0x080132e4
 800092c:	08000c1d 	.word	0x08000c1d
 8000930:	20002234 	.word	0x20002234

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b099      	sub	sp, #100	; 0x64
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	242c      	movs	r4, #44	; 0x2c
 800093c:	193b      	adds	r3, r7, r4
 800093e:	0018      	movs	r0, r3
 8000940:	2334      	movs	r3, #52	; 0x34
 8000942:	001a      	movs	r2, r3
 8000944:	2100      	movs	r1, #0
 8000946:	f011 f837 	bl	80119b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094a:	231c      	movs	r3, #28
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	0018      	movs	r0, r3
 8000950:	2310      	movs	r3, #16
 8000952:	001a      	movs	r2, r3
 8000954:	2100      	movs	r1, #0
 8000956:	f011 f82f 	bl	80119b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800095a:	003b      	movs	r3, r7
 800095c:	0018      	movs	r0, r3
 800095e:	231c      	movs	r3, #28
 8000960:	001a      	movs	r2, r3
 8000962:	2100      	movs	r1, #0
 8000964:	f011 f828 	bl	80119b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2220      	movs	r2, #32
 800096c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2201      	movs	r2, #1
 8000972:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	193b      	adds	r3, r7, r4
 800097c:	0018      	movs	r0, r3
 800097e:	f005 fc4f 	bl	8006220 <HAL_RCC_OscConfig>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000986:	f000 f96d 	bl	8000c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	211c      	movs	r1, #28
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2207      	movs	r2, #7
 8000990:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2203      	movs	r2, #3
 8000996:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2101      	movs	r1, #1
 80009a8:	0018      	movs	r0, r3
 80009aa:	f005 ffbf 	bl	800692c <HAL_RCC_ClockConfig>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009b2:	f000 f957 	bl	8000c64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80009b6:	003b      	movs	r3, r7
 80009b8:	2280      	movs	r2, #128	; 0x80
 80009ba:	0292      	lsls	r2, r2, #10
 80009bc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80009be:	003b      	movs	r3, r7
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c4:	003b      	movs	r3, r7
 80009c6:	0018      	movs	r0, r3
 80009c8:	f006 f954 	bl	8006c74 <HAL_RCCEx_PeriphCLKConfig>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80009d0:	f000 f948 	bl	8000c64 <Error_Handler>
  }
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b019      	add	sp, #100	; 0x64
 80009da:	bd90      	pop	{r4, r7, pc}

080009dc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_CAN_Init+0x68>)
 80009e2:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <MX_CAN_Init+0x6c>)
 80009e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_CAN_Init+0x68>)
 80009e8:	2206      	movs	r2, #6
 80009ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_CAN_Init+0x68>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_CAN_Init+0x68>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_CAN_Init+0x68>)
 80009fa:	22c0      	movs	r2, #192	; 0xc0
 80009fc:	0312      	lsls	r2, r2, #12
 80009fe:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_CAN_Init+0x68>)
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	0352      	lsls	r2, r2, #13
 8000a06:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_CAN_Init+0x68>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <MX_CAN_Init+0x68>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_CAN_Init+0x68>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_CAN_Init+0x68>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_CAN_Init+0x68>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_CAN_Init+0x68>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <MX_CAN_Init+0x68>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f001 fd1a 	bl	8002468 <HAL_CAN_Init>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000a38:	f000 f914 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	20002238 	.word	0x20002238
 8000a48:	40006400 	.word	0x40006400

08000a4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a52:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <MX_SPI1_Init+0x78>)
 8000a54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a58:	2282      	movs	r2, #130	; 0x82
 8000a5a:	0052      	lsls	r2, r2, #1
 8000a5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a66:	22e0      	movs	r2, #224	; 0xe0
 8000a68:	00d2      	lsls	r2, r2, #3
 8000a6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a7a:	2280      	movs	r2, #128	; 0x80
 8000a7c:	0092      	lsls	r2, r2, #2
 8000a7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a82:	2208      	movs	r2, #8
 8000a84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a9a:	2207      	movs	r2, #7
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000aac:	0018      	movs	r0, r3
 8000aae:	f006 f9df 	bl	8006e70 <HAL_SPI_Init>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d001      	beq.n	8000aba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ab6:	f000 f8d5 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200026bc 	.word	0x200026bc
 8000ac4:	40013000 	.word	0x40013000

08000ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b089      	sub	sp, #36	; 0x24
 8000acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	240c      	movs	r4, #12
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2314      	movs	r3, #20
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	2100      	movs	r1, #0
 8000ada:	f010 ff6d 	bl	80119b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b46      	ldr	r3, [pc, #280]	; (8000bf8 <MX_GPIO_Init+0x130>)
 8000ae0:	695a      	ldr	r2, [r3, #20]
 8000ae2:	4b45      	ldr	r3, [pc, #276]	; (8000bf8 <MX_GPIO_Init+0x130>)
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	0289      	lsls	r1, r1, #10
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	4b42      	ldr	r3, [pc, #264]	; (8000bf8 <MX_GPIO_Init+0x130>)
 8000aee:	695a      	ldr	r2, [r3, #20]
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	029b      	lsls	r3, r3, #10
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	4b3f      	ldr	r3, [pc, #252]	; (8000bf8 <MX_GPIO_Init+0x130>)
 8000afc:	695a      	ldr	r2, [r3, #20]
 8000afe:	4b3e      	ldr	r3, [pc, #248]	; (8000bf8 <MX_GPIO_Init+0x130>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	0309      	lsls	r1, r1, #12
 8000b04:	430a      	orrs	r2, r1
 8000b06:	615a      	str	r2, [r3, #20]
 8000b08:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <MX_GPIO_Init+0x130>)
 8000b0a:	695a      	ldr	r2, [r3, #20]
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	031b      	lsls	r3, r3, #12
 8000b10:	4013      	ands	r3, r2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <MX_GPIO_Init+0x130>)
 8000b18:	695a      	ldr	r2, [r3, #20]
 8000b1a:	4b37      	ldr	r3, [pc, #220]	; (8000bf8 <MX_GPIO_Init+0x130>)
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	02c9      	lsls	r1, r1, #11
 8000b20:	430a      	orrs	r2, r1
 8000b22:	615a      	str	r2, [r3, #20]
 8000b24:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <MX_GPIO_Init+0x130>)
 8000b26:	695a      	ldr	r2, [r3, #20]
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	02db      	lsls	r3, r3, #11
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_EN_Pin|LED2_EN_Pin|LED3_EN_Pin|Break_CS_Pin, GPIO_PIN_RESET);
 8000b32:	2390      	movs	r3, #144	; 0x90
 8000b34:	05db      	lsls	r3, r3, #23
 8000b36:	2200      	movs	r2, #0
 8000b38:	210f      	movs	r1, #15
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f002 fe8e 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Throttle_CS_Pin|Board_Ok_Pin|LED4_EN_Pin, GPIO_PIN_RESET);
 8000b40:	238c      	movs	r3, #140	; 0x8c
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	482d      	ldr	r0, [pc, #180]	; (8000bfc <MX_GPIO_Init+0x134>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	0019      	movs	r1, r3
 8000b4a:	f002 fe87 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Error_Pin|LED6_EN_Pin|LED5_EN_Pin, GPIO_PIN_RESET);
 8000b4e:	492c      	ldr	r1, [pc, #176]	; (8000c00 <MX_GPIO_Init+0x138>)
 8000b50:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	0018      	movs	r0, r3
 8000b56:	f002 fe81 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_EN_Pin LED2_EN_Pin LED3_EN_Pin Break_CS_Pin */
  GPIO_InitStruct.Pin = LED1_EN_Pin|LED2_EN_Pin|LED3_EN_Pin|Break_CS_Pin;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	220f      	movs	r2, #15
 8000b5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2201      	movs	r2, #1
 8000b64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	193a      	adds	r2, r7, r4
 8000b74:	2390      	movs	r3, #144	; 0x90
 8000b76:	05db      	lsls	r3, r3, #23
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f002 fc1e 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Throttle_CS_Pin Board_Ok_Pin LED4_EN_Pin */
  GPIO_InitStruct.Pin = Throttle_CS_Pin|Board_Ok_Pin|LED4_EN_Pin;
 8000b80:	0021      	movs	r1, r4
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	228c      	movs	r2, #140	; 0x8c
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	000c      	movs	r4, r1
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	2201      	movs	r2, #1
 8000b90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <MX_GPIO_Init+0x134>)
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	0010      	movs	r0, r2
 8000ba6:	f002 fc09 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Error_Pin LED6_EN_Pin LED5_EN_Pin */
  GPIO_InitStruct.Pin = Error_Pin|LED6_EN_Pin|LED5_EN_Pin;
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <MX_GPIO_Init+0x138>)
 8000bae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	0010      	movs	r0, r2
 8000bca:	f002 fbf7 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_IMU_Pin Aux_C1_Pin Aux_C2_Pin Aux_C3_Pin
                           Aux_C4_Pin Aux_C5_Pin */
  GPIO_InitStruct.Pin = INT_IMU_Pin|Aux_C1_Pin|Aux_C2_Pin|Aux_C3_Pin
 8000bce:	0021      	movs	r1, r4
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	22fc      	movs	r2, #252	; 0xfc
 8000bd4:	601a      	str	r2, [r3, #0]
                          |Aux_C4_Pin|Aux_C5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2288      	movs	r2, #136	; 0x88
 8000bda:	0352      	lsls	r2, r2, #13
 8000bdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000be8:	0019      	movs	r1, r3
 8000bea:	0010      	movs	r0, r2
 8000bec:	f002 fbe6 	bl	80033bc <HAL_GPIO_Init>

}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b009      	add	sp, #36	; 0x24
 8000bf6:	bd90      	pop	{r4, r7, pc}
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48000800 	.word	0x48000800
 8000c00:	00003001 	.word	0x00003001
 8000c04:	48000400 	.word	0x48000400

08000c08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c10:	f010 f92c 	bl	8010e6c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f00c ff25 	bl	800da64 <osDelay>
 8000c1a:	e7fb      	b.n	8000c14 <StartDefaultTask+0xc>

08000c1c <StartBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(Board_Ok_GPIO_Port, Board_Ok_Pin);
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <StartBlink+0x20>)
 8000c26:	2120      	movs	r1, #32
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f002 fe34 	bl	8003896 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000c2e:	23fa      	movs	r3, #250	; 0xfa
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	0018      	movs	r0, r3
 8000c34:	f00c ff16 	bl	800da64 <osDelay>
    HAL_GPIO_TogglePin(Board_Ok_GPIO_Port, Board_Ok_Pin);
 8000c38:	e7f4      	b.n	8000c24 <StartBlink+0x8>
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	48000800 	.word	0x48000800

08000c40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d101      	bne.n	8000c56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c52:	f001 fbed 	bl	8002430 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	40014800 	.word	0x40014800

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    HAL_GPIO_TogglePin(Error_GPIO_Port, Error_Pin);
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <Error_Handler+0x20>)
 8000c6e:	2101      	movs	r1, #1
 8000c70:	0018      	movs	r0, r3
 8000c72:	f002 fe10 	bl	8003896 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000c76:	23fa      	movs	r3, #250	; 0xfa
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f00c fef2 	bl	800da64 <osDelay>
    HAL_GPIO_TogglePin(Error_GPIO_Port, Error_Pin);
 8000c80:	e7f4      	b.n	8000c6c <Error_Handler+0x8>
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	48000400 	.word	0x48000400

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_MspInit+0x50>)
 8000c90:	699a      	ldr	r2, [r3, #24]
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_MspInit+0x50>)
 8000c94:	2101      	movs	r1, #1
 8000c96:	430a      	orrs	r2, r1
 8000c98:	619a      	str	r2, [r3, #24]
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_MspInit+0x50>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_MspInit+0x50>)
 8000ca8:	69da      	ldr	r2, [r3, #28]
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_MspInit+0x50>)
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	0549      	lsls	r1, r1, #21
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	61da      	str	r2, [r3, #28]
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_MspInit+0x50>)
 8000cb6:	69da      	ldr	r2, [r3, #28]
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	055b      	lsls	r3, r3, #21
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	425b      	negs	r3, r3
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2103      	movs	r1, #3
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f002 fb50 	bl	8003370 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b08b      	sub	sp, #44	; 0x2c
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	2414      	movs	r4, #20
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	0018      	movs	r0, r3
 8000cea:	2314      	movs	r3, #20
 8000cec:	001a      	movs	r2, r3
 8000cee:	2100      	movs	r1, #0
 8000cf0:	f010 fe62 	bl	80119b8 <memset>
  if(hcan->Instance==CAN)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a20      	ldr	r2, [pc, #128]	; (8000d7c <HAL_CAN_MspInit+0xa0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d13a      	bne.n	8000d74 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cfe:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <HAL_CAN_MspInit+0xa4>)
 8000d00:	69da      	ldr	r2, [r3, #28]
 8000d02:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <HAL_CAN_MspInit+0xa4>)
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	0489      	lsls	r1, r1, #18
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	61da      	str	r2, [r3, #28]
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <HAL_CAN_MspInit+0xa4>)
 8000d0e:	69da      	ldr	r2, [r3, #28]
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	049b      	lsls	r3, r3, #18
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_CAN_MspInit+0xa4>)
 8000d1c:	695a      	ldr	r2, [r3, #20]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_CAN_MspInit+0xa4>)
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	02c9      	lsls	r1, r1, #11
 8000d24:	430a      	orrs	r2, r1
 8000d26:	615a      	str	r2, [r3, #20]
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_CAN_MspInit+0xa4>)
 8000d2a:	695a      	ldr	r2, [r3, #20]
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	02db      	lsls	r3, r3, #11
 8000d30:	4013      	ands	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	22c0      	movs	r2, #192	; 0xc0
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	0021      	movs	r1, r4
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2202      	movs	r2, #2
 8000d44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2204      	movs	r2, #4
 8000d56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_CAN_MspInit+0xa8>)
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	0010      	movs	r0, r2
 8000d60:	f002 fb2c 	bl	80033bc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 3, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2103      	movs	r1, #3
 8000d68:	201e      	movs	r0, #30
 8000d6a:	f002 fb01 	bl	8003370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000d6e:	201e      	movs	r0, #30
 8000d70:	f002 fb13 	bl	800339a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b00b      	add	sp, #44	; 0x2c
 8000d7a:	bd90      	pop	{r4, r7, pc}
 8000d7c:	40006400 	.word	0x40006400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	48000400 	.word	0x48000400

08000d88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b08b      	sub	sp, #44	; 0x2c
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	2414      	movs	r4, #20
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	0018      	movs	r0, r3
 8000d96:	2314      	movs	r3, #20
 8000d98:	001a      	movs	r2, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f010 fe0c 	bl	80119b8 <memset>
  if(hspi->Instance==SPI1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <HAL_SPI_MspInit+0x90>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d132      	bne.n	8000e10 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <HAL_SPI_MspInit+0x94>)
 8000dac:	699a      	ldr	r2, [r3, #24]
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <HAL_SPI_MspInit+0x94>)
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	0149      	lsls	r1, r1, #5
 8000db4:	430a      	orrs	r2, r1
 8000db6:	619a      	str	r2, [r3, #24]
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_SPI_MspInit+0x94>)
 8000dba:	699a      	ldr	r2, [r3, #24]
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	015b      	lsls	r3, r3, #5
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_SPI_MspInit+0x94>)
 8000dc8:	695a      	ldr	r2, [r3, #20]
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_SPI_MspInit+0x94>)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	0289      	lsls	r1, r1, #10
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	615a      	str	r2, [r3, #20]
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_SPI_MspInit+0x94>)
 8000dd6:	695a      	ldr	r2, [r3, #20]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	029b      	lsls	r3, r3, #10
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000de2:	0021      	movs	r1, r4
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	22e0      	movs	r2, #224	; 0xe0
 8000de8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2202      	movs	r2, #2
 8000dee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	187a      	adds	r2, r7, r1
 8000e04:	2390      	movs	r3, #144	; 0x90
 8000e06:	05db      	lsls	r3, r3, #23
 8000e08:	0011      	movs	r1, r2
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f002 fad6 	bl	80033bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b00b      	add	sp, #44	; 0x2c
 8000e16:	bd90      	pop	{r4, r7, pc}
 8000e18:	40013000 	.word	0x40013000
 8000e1c:	40021000 	.word	0x40021000

08000e20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	0019      	movs	r1, r3
 8000e36:	2016      	movs	r0, #22
 8000e38:	f002 fa9a 	bl	8003370 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000e3c:	2016      	movs	r0, #22
 8000e3e:	f002 faac 	bl	800339a <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000e44:	699a      	ldr	r2, [r3, #24]
 8000e46:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	02c9      	lsls	r1, r1, #11
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	619a      	str	r2, [r3, #24]
 8000e50:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000e52:	699a      	ldr	r2, [r3, #24]
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	02db      	lsls	r3, r3, #11
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e5e:	230c      	movs	r3, #12
 8000e60:	18fa      	adds	r2, r7, r3
 8000e62:	2310      	movs	r3, #16
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	0011      	movs	r1, r2
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f005 fed9 	bl	8006c20 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e6e:	f005 fec1 	bl	8006bf4 <HAL_RCC_GetPCLK1Freq>
 8000e72:	0003      	movs	r3, r0
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	4914      	ldr	r1, [pc, #80]	; (8000ecc <HAL_InitTick+0xac>)
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff f94e 	bl	800011c <__udivsi3>
 8000e80:	0003      	movs	r3, r0
 8000e82:	3b01      	subs	r3, #1
 8000e84:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0xb0>)
 8000e88:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <HAL_InitTick+0xb4>)
 8000e8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <HAL_InitTick+0xb0>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <HAL_InitTick+0xb8>)
 8000e90:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_InitTick+0xb0>)
 8000e94:	6a3a      	ldr	r2, [r7, #32]
 8000e96:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_InitTick+0xb0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_InitTick+0xb0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_InitTick+0xb0>)
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f006 fd8c 	bl	80079c4 <HAL_TIM_Base_Init>
 8000eac:	1e03      	subs	r3, r0, #0
 8000eae:	d105      	bne.n	8000ebc <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_InitTick+0xb0>)
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f006 fdde 	bl	8007a74 <HAL_TIM_Base_Start_IT>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	e000      	b.n	8000ebe <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
}
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b00a      	add	sp, #40	; 0x28
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	000f4240 	.word	0x000f4240
 8000ed0:	2000277c 	.word	0x2000277c
 8000ed4:	40014800 	.word	0x40014800
 8000ed8:	000003e7 	.word	0x000003e7

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <TIM17_IRQHandler+0x14>)
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f006 fe12 	bl	8007b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	2000277c 	.word	0x2000277c

08000f00 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <CEC_CAN_IRQHandler+0x14>)
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 ff96 	bl	8002e38 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	20002238 	.word	0x20002238

08000f18 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <USB_IRQHandler+0x14>)
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f003 fc42 	bl	80047a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	2000349c 	.word	0x2000349c

08000f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	return 1;
 8000f34:	2301      	movs	r3, #1
}
 8000f36:	0018      	movs	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_kill>:

int _kill(int pid, int sig)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f46:	f010 fcdf 	bl	8011908 <__errno>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	2216      	movs	r2, #22
 8000f4e:	601a      	str	r2, [r3, #0]
	return -1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	425b      	negs	r3, r3
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <_exit>:

void _exit (int status)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f64:	2301      	movs	r3, #1
 8000f66:	425a      	negs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff ffe5 	bl	8000f3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f72:	e7fe      	b.n	8000f72 <_exit+0x16>

08000f74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e00a      	b.n	8000f9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f86:	e000      	b.n	8000f8a <_read+0x16>
 8000f88:	bf00      	nop
 8000f8a:	0001      	movs	r1, r0
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	b2ca      	uxtb	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf0      	blt.n	8000f86 <_read+0x12>
	}

return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b006      	add	sp, #24
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e009      	b.n	8000fd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	60ba      	str	r2, [r7, #8]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	0018      	movs	r0, r3
 8000fca:	e000      	b.n	8000fce <_write+0x20>
 8000fcc:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbf1      	blt.n	8000fc0 <_write+0x12>
	}
	return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	0018      	movs	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b006      	add	sp, #24
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_close>:

int _close(int file)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	return -1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	425b      	negs	r3, r3
}
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b002      	add	sp, #8
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	0192      	lsls	r2, r2, #6
 800100a:	605a      	str	r2, [r3, #4]
	return 0;
 800100c:	2300      	movs	r3, #0
}
 800100e:	0018      	movs	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	b002      	add	sp, #8
 8001014:	bd80      	pop	{r7, pc}

08001016 <_isatty>:

int _isatty(int file)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
	return 1;
 800101e:	2301      	movs	r3, #1
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}

08001028 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
	return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	0018      	movs	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	18d3      	adds	r3, r2, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f010 fc4a 	bl	8011908 <__errno>
 8001074:	0003      	movs	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	2301      	movs	r3, #1
 800107c:	425b      	negs	r3, r3
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	18d2      	adds	r2, r2, r3
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	b006      	add	sp, #24
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20004000 	.word	0x20004000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	20000260 	.word	0x20000260
 80010a8:	200037a0 	.word	0x200037a0

080010ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <CPP_UserSetup>:
osTimerAttr_t can_tx_timer_attr =
{
    .name = "CAN Tx"
};
void CPP_UserSetup(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  CANController.AddRxModule(&LightsState);
 80010bc:	4a47      	ldr	r2, [pc, #284]	; (80011dc <CPP_UserSetup+0x124>)
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <CPP_UserSetup+0x128>)
 80010c0:	0011      	movs	r1, r2
 80010c2:	0018      	movs	r0, r3
 80010c4:	f009 fe03 	bl	800acce <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  // Start Thread that Handles Turn Signal LEDs
  signal_timer_id = osTimerNew((osThreadFunc_t)UpdateSignals, osTimerPeriodic, NULL, &signal_timer_attr);
 80010c8:	4b46      	ldr	r3, [pc, #280]	; (80011e4 <CPP_UserSetup+0x12c>)
 80010ca:	4847      	ldr	r0, [pc, #284]	; (80011e8 <CPP_UserSetup+0x130>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	2101      	movs	r1, #1
 80010d0:	f00c fd08 	bl	800dae4 <osTimerNew>
 80010d4:	0002      	movs	r2, r0
 80010d6:	4b45      	ldr	r3, [pc, #276]	; (80011ec <CPP_UserSetup+0x134>)
 80010d8:	601a      	str	r2, [r3, #0]
  if (signal_timer_id == NULL)
 80010da:	4b44      	ldr	r3, [pc, #272]	; (80011ec <CPP_UserSetup+0x134>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <CPP_UserSetup+0x2e>
  {
      Error_Handler();
 80010e2:	f7ff fdbf 	bl	8000c64 <Error_Handler>
  }
  osTimerStart(signal_timer_id, 500);
 80010e6:	4b41      	ldr	r3, [pc, #260]	; (80011ec <CPP_UserSetup+0x134>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	22fa      	movs	r2, #250	; 0xfa
 80010ec:	0052      	lsls	r2, r2, #1
 80010ee:	0011      	movs	r1, r2
 80010f0:	0018      	movs	r0, r3
 80010f2:	f00c fd7f 	bl	800dbf4 <osTimerStart>
  // Start Thread that Handles Reads the IMU
  imu_timer_id = osTimerNew((osThreadFunc_t)ReadIMU, osTimerPeriodic, NULL, &imu_timer_attr);
 80010f6:	4b3e      	ldr	r3, [pc, #248]	; (80011f0 <CPP_UserSetup+0x138>)
 80010f8:	483e      	ldr	r0, [pc, #248]	; (80011f4 <CPP_UserSetup+0x13c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	2101      	movs	r1, #1
 80010fe:	f00c fcf1 	bl	800dae4 <osTimerNew>
 8001102:	0002      	movs	r2, r0
 8001104:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <CPP_UserSetup+0x140>)
 8001106:	601a      	str	r2, [r3, #0]
  if (imu_timer_id == NULL)
 8001108:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <CPP_UserSetup+0x140>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <CPP_UserSetup+0x5c>
  {
      Error_Handler();
 8001110:	f7ff fda8 	bl	8000c64 <Error_Handler>
  }

  if(LSM6DSR_RegisterBusIO(&imu, &imu_bus))
 8001114:	4a39      	ldr	r2, [pc, #228]	; (80011fc <CPP_UserSetup+0x144>)
 8001116:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <CPP_UserSetup+0x148>)
 8001118:	0011      	movs	r1, r2
 800111a:	0018      	movs	r0, r3
 800111c:	f000 fa1c 	bl	8001558 <LSM6DSR_RegisterBusIO>
 8001120:	0003      	movs	r3, r0
 8001122:	1e5a      	subs	r2, r3, #1
 8001124:	4193      	sbcs	r3, r2
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <CPP_UserSetup+0x78>
  {
    Error_Handler();
 800112c:	f7ff fd9a 	bl	8000c64 <Error_Handler>
  }
  if(LSM6DSR_Init(&imu))
 8001130:	4b33      	ldr	r3, [pc, #204]	; (8001200 <CPP_UserSetup+0x148>)
 8001132:	0018      	movs	r0, r3
 8001134:	f000 fa76 	bl	8001624 <LSM6DSR_Init>
 8001138:	0003      	movs	r3, r0
 800113a:	1e5a      	subs	r2, r3, #1
 800113c:	4193      	sbcs	r3, r2
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <CPP_UserSetup+0x90>
  {
    Error_Handler();
 8001144:	f7ff fd8e 	bl	8000c64 <Error_Handler>
  }
  if(LSM6DSR_ACC_Enable(&imu))
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <CPP_UserSetup+0x148>)
 800114a:	0018      	movs	r0, r3
 800114c:	f000 fad7 	bl	80016fe <LSM6DSR_ACC_Enable>
 8001150:	0003      	movs	r3, r0
 8001152:	1e5a      	subs	r2, r3, #1
 8001154:	4193      	sbcs	r3, r2
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <CPP_UserSetup+0xa8>
  {
    Error_Handler();
 800115c:	f7ff fd82 	bl	8000c64 <Error_Handler>
  }
  osTimerStart(imu_timer_id, 500);
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <CPP_UserSetup+0x140>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	22fa      	movs	r2, #250	; 0xfa
 8001166:	0052      	lsls	r2, r2, #1
 8001168:	0011      	movs	r1, r2
 800116a:	0018      	movs	r0, r3
 800116c:	f00c fd42 	bl	800dbf4 <osTimerStart>
  // Start Thread that Handles Reads the IMU
  adc_timer_id = osTimerNew((osThreadFunc_t)ReadADC, osTimerPeriodic, NULL, &adc_timer_attr);
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <CPP_UserSetup+0x14c>)
 8001172:	4825      	ldr	r0, [pc, #148]	; (8001208 <CPP_UserSetup+0x150>)
 8001174:	2200      	movs	r2, #0
 8001176:	2101      	movs	r1, #1
 8001178:	f00c fcb4 	bl	800dae4 <osTimerNew>
 800117c:	0002      	movs	r2, r0
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <CPP_UserSetup+0x154>)
 8001180:	601a      	str	r2, [r3, #0]
  if (adc_timer_id == NULL)
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <CPP_UserSetup+0x154>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <CPP_UserSetup+0xd6>
  {
      Error_Handler();
 800118a:	f7ff fd6b 	bl	8000c64 <Error_Handler>
  }
  break_adc.Init();
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <CPP_UserSetup+0x158>)
 8001190:	0018      	movs	r0, r3
 8001192:	f009 fbb1 	bl	800a8f8 <_ZN11SolarGators7Drivers7ADCS7474InitEv>
  throttle_adc.Init();
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <CPP_UserSetup+0x15c>)
 8001198:	0018      	movs	r0, r3
 800119a:	f009 fbad 	bl	800a8f8 <_ZN11SolarGators7Drivers7ADCS7474InitEv>
  osTimerStart(adc_timer_id, 500);
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <CPP_UserSetup+0x154>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	22fa      	movs	r2, #250	; 0xfa
 80011a4:	0052      	lsls	r2, r2, #1
 80011a6:	0011      	movs	r1, r2
 80011a8:	0018      	movs	r0, r3
 80011aa:	f00c fd23 	bl	800dbf4 <osTimerStart>
  // Start Thread that sends CAN Data
  can_tx_timer_id = osTimerNew((osThreadFunc_t)SendCanMsgs, osTimerPeriodic, NULL, &can_tx_timer_attr);
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <CPP_UserSetup+0x160>)
 80011b0:	481a      	ldr	r0, [pc, #104]	; (800121c <CPP_UserSetup+0x164>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	2101      	movs	r1, #1
 80011b6:	f00c fc95 	bl	800dae4 <osTimerNew>
 80011ba:	0002      	movs	r2, r0
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <CPP_UserSetup+0x168>)
 80011be:	601a      	str	r2, [r3, #0]
  if (can_tx_timer_id == NULL)
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <CPP_UserSetup+0x168>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <CPP_UserSetup+0x114>
  {
      Error_Handler();
 80011c8:	f7ff fd4c 	bl	8000c64 <Error_Handler>
  }
  CANController.Init();
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <CPP_UserSetup+0x128>)
 80011ce:	0018      	movs	r0, r3
 80011d0:	f009 fc30 	bl	800aa34 <_ZN11SolarGators7Drivers9CANDriver4InitEv>
//  osTimerStart(can_tx_timer_id, 100);
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	20000264 	.word	0x20000264
 80011e0:	200002e8 	.word	0x200002e8
 80011e4:	20000020 	.word	0x20000020
 80011e8:	08001245 	.word	0x08001245
 80011ec:	200006a8 	.word	0x200006a8
 80011f0:	20000030 	.word	0x20000030
 80011f4:	08001359 	.word	0x08001359
 80011f8:	200006ac 	.word	0x200006ac
 80011fc:	20000004 	.word	0x20000004
 8001200:	2000060c 	.word	0x2000060c
 8001204:	20000040 	.word	0x20000040
 8001208:	08001379 	.word	0x08001379
 800120c:	200006b0 	.word	0x200006b0
 8001210:	20000654 	.word	0x20000654
 8001214:	2000063c 	.word	0x2000063c
 8001218:	20000050 	.word	0x20000050
 800121c:	08001225 	.word	0x08001225
 8001220:	200006b4 	.word	0x200006b4

08001224 <_Z11SendCanMsgsv>:

void SendCanMsgs()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  CANController.Send(&LightsState);
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <_Z11SendCanMsgsv+0x18>)
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <_Z11SendCanMsgsv+0x1c>)
 800122c:	0011      	movs	r1, r2
 800122e:	0018      	movs	r0, r3
 8001230:	f009 fcee 	bl	800ac10 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE>
}
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	20000264 	.word	0x20000264
 8001240:	200002e8 	.word	0x200002e8

08001244 <_Z13UpdateSignalsv>:

void UpdateSignals(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  osMutexAcquire(LightsState.mutex_id_, osWaitForever);
 8001248:	4b40      	ldr	r3, [pc, #256]	; (800134c <_Z13UpdateSignalsv+0x108>)
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	2201      	movs	r2, #1
 800124e:	4252      	negs	r2, r2
 8001250:	0011      	movs	r1, r2
 8001252:	0018      	movs	r0, r3
 8001254:	f00c feac 	bl	800dfb0 <osMutexAcquire>
  if(LightsState.GetHazardsStatus())
 8001258:	4b3c      	ldr	r3, [pc, #240]	; (800134c <_Z13UpdateSignalsv+0x108>)
 800125a:	0018      	movs	r0, r3
 800125c:	f008 ff1c 	bl	800a098 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>
 8001260:	1e03      	subs	r3, r0, #0
 8001262:	d017      	beq.n	8001294 <_Z13UpdateSignalsv+0x50>
  {
    if (lt_indicator.IsOn())
 8001264:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <_Z13UpdateSignalsv+0x10c>)
 8001266:	0018      	movs	r0, r3
 8001268:	f00a fdd7 	bl	800be1a <_ZN11SolarGators7Drivers3LED4IsOnEv>
 800126c:	1e03      	subs	r3, r0, #0
 800126e:	d008      	beq.n	8001282 <_Z13UpdateSignalsv+0x3e>
    {
      lt_indicator.TurnOff();
 8001270:	4b37      	ldr	r3, [pc, #220]	; (8001350 <_Z13UpdateSignalsv+0x10c>)
 8001272:	0018      	movs	r0, r3
 8001274:	f00a fda7 	bl	800bdc6 <_ZN11SolarGators7Drivers3LED7TurnOffEv>
      rt_indicator.TurnOff();
 8001278:	4b36      	ldr	r3, [pc, #216]	; (8001354 <_Z13UpdateSignalsv+0x110>)
 800127a:	0018      	movs	r0, r3
 800127c:	f00a fda3 	bl	800bdc6 <_ZN11SolarGators7Drivers3LED7TurnOffEv>
 8001280:	e01d      	b.n	80012be <_Z13UpdateSignalsv+0x7a>
    }
    else
    {
      lt_indicator.TurnOn();
 8001282:	4b33      	ldr	r3, [pc, #204]	; (8001350 <_Z13UpdateSignalsv+0x10c>)
 8001284:	0018      	movs	r0, r3
 8001286:	f00a fd8b 	bl	800bda0 <_ZN11SolarGators7Drivers3LED6TurnOnEv>
      rt_indicator.TurnOn();
 800128a:	4b32      	ldr	r3, [pc, #200]	; (8001354 <_Z13UpdateSignalsv+0x110>)
 800128c:	0018      	movs	r0, r3
 800128e:	f00a fd87 	bl	800bda0 <_ZN11SolarGators7Drivers3LED6TurnOnEv>
 8001292:	e014      	b.n	80012be <_Z13UpdateSignalsv+0x7a>
    }
  }
  else if(LightsState.GetRightTurnStatus())
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <_Z13UpdateSignalsv+0x108>)
 8001296:	0018      	movs	r0, r3
 8001298:	f008 fef3 	bl	800a082 <_ZNK11SolarGators11DataModules8Steering18GetRightTurnStatusEv>
 800129c:	1e03      	subs	r3, r0, #0
 800129e:	d004      	beq.n	80012aa <_Z13UpdateSignalsv+0x66>
    rt_indicator.Toggle();
 80012a0:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <_Z13UpdateSignalsv+0x110>)
 80012a2:	0018      	movs	r0, r3
 80012a4:	f00a fda2 	bl	800bdec <_ZN11SolarGators7Drivers3LED6ToggleEv>
 80012a8:	e009      	b.n	80012be <_Z13UpdateSignalsv+0x7a>
  else if(LightsState.GetLeftTurnStatus())
 80012aa:	4b28      	ldr	r3, [pc, #160]	; (800134c <_Z13UpdateSignalsv+0x108>)
 80012ac:	0018      	movs	r0, r3
 80012ae:	f008 fedd 	bl	800a06c <_ZNK11SolarGators11DataModules8Steering17GetLeftTurnStatusEv>
 80012b2:	1e03      	subs	r3, r0, #0
 80012b4:	d003      	beq.n	80012be <_Z13UpdateSignalsv+0x7a>
    lt_indicator.Toggle();
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <_Z13UpdateSignalsv+0x10c>)
 80012b8:	0018      	movs	r0, r3
 80012ba:	f00a fd97 	bl	800bdec <_ZN11SolarGators7Drivers3LED6ToggleEv>

  if(!LightsState.GetHazardsStatus() && !LightsState.GetRightTurnStatus())
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <_Z13UpdateSignalsv+0x108>)
 80012c0:	0018      	movs	r0, r3
 80012c2:	f008 fee9 	bl	800a098 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>
 80012c6:	0003      	movs	r3, r0
 80012c8:	001a      	movs	r2, r3
 80012ca:	2301      	movs	r3, #1
 80012cc:	4053      	eors	r3, r2
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00c      	beq.n	80012ee <_Z13UpdateSignalsv+0xaa>
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <_Z13UpdateSignalsv+0x108>)
 80012d6:	0018      	movs	r0, r3
 80012d8:	f008 fed3 	bl	800a082 <_ZNK11SolarGators11DataModules8Steering18GetRightTurnStatusEv>
 80012dc:	0003      	movs	r3, r0
 80012de:	001a      	movs	r2, r3
 80012e0:	2301      	movs	r3, #1
 80012e2:	4053      	eors	r3, r2
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <_Z13UpdateSignalsv+0xaa>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <_Z13UpdateSignalsv+0xac>
 80012ee:	2300      	movs	r3, #0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <_Z13UpdateSignalsv+0xb8>
    rt_indicator.TurnOff();
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <_Z13UpdateSignalsv+0x110>)
 80012f6:	0018      	movs	r0, r3
 80012f8:	f00a fd65 	bl	800bdc6 <_ZN11SolarGators7Drivers3LED7TurnOffEv>

  if(!LightsState.GetHazardsStatus() && !LightsState.GetLeftTurnStatus())
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <_Z13UpdateSignalsv+0x108>)
 80012fe:	0018      	movs	r0, r3
 8001300:	f008 feca 	bl	800a098 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>
 8001304:	0003      	movs	r3, r0
 8001306:	001a      	movs	r2, r3
 8001308:	2301      	movs	r3, #1
 800130a:	4053      	eors	r3, r2
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00c      	beq.n	800132c <_Z13UpdateSignalsv+0xe8>
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <_Z13UpdateSignalsv+0x108>)
 8001314:	0018      	movs	r0, r3
 8001316:	f008 fea9 	bl	800a06c <_ZNK11SolarGators11DataModules8Steering17GetLeftTurnStatusEv>
 800131a:	0003      	movs	r3, r0
 800131c:	001a      	movs	r2, r3
 800131e:	2301      	movs	r3, #1
 8001320:	4053      	eors	r3, r2
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <_Z13UpdateSignalsv+0xe8>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <_Z13UpdateSignalsv+0xea>
 800132c:	2300      	movs	r3, #0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <_Z13UpdateSignalsv+0xf6>
    lt_indicator.TurnOff();
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <_Z13UpdateSignalsv+0x10c>)
 8001334:	0018      	movs	r0, r3
 8001336:	f00a fd46 	bl	800bdc6 <_ZN11SolarGators7Drivers3LED7TurnOffEv>
  osMutexRelease(LightsState.mutex_id_);
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <_Z13UpdateSignalsv+0x108>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	0018      	movs	r0, r3
 8001340:	f00c fe92 	bl	800e068 <osMutexRelease>
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	20000264 	.word	0x20000264
 8001350:	2000066c 	.word	0x2000066c
 8001354:	20000680 	.word	0x20000680

08001358 <_Z7ReadIMUv>:
    osDelay(50);
  }
}

void ReadIMU()
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
  LSM6DSR_Axes_t accel_info;
  LSM6DSR_ACC_GetAxes(&imu, &accel_info);
 800135e:	1d3a      	adds	r2, r7, #4
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <_Z7ReadIMUv+0x1c>)
 8001362:	0011      	movs	r1, r2
 8001364:	0018      	movs	r0, r3
 8001366:	f000 fa31 	bl	80017cc <LSM6DSR_ACC_GetAxes>
}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	b004      	add	sp, #16
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	2000060c 	.word	0x2000060c

08001378 <_Z7ReadADCv>:

void ReadADC()
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  BREAK_VAL = break_adc.GetVoltage();
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <_Z7ReadADCv+0x2c>)
 800137e:	0018      	movs	r0, r3
 8001380:	f009 fae7 	bl	800a952 <_ZN11SolarGators7Drivers7ADCS74710GetVoltageEv>
 8001384:	0003      	movs	r3, r0
 8001386:	001a      	movs	r2, r3
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <_Z7ReadADCv+0x30>)
 800138a:	701a      	strb	r2, [r3, #0]
  THROTTLE_VAL = throttle_adc.GetVoltage();
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <_Z7ReadADCv+0x34>)
 800138e:	0018      	movs	r0, r3
 8001390:	f009 fadf 	bl	800a952 <_ZN11SolarGators7Drivers7ADCS74710GetVoltageEv>
 8001394:	0003      	movs	r3, r0
 8001396:	001a      	movs	r2, r3
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <_Z7ReadADCv+0x38>)
 800139a:	701a      	strb	r2, [r3, #0]
}
 800139c:	46c0      	nop			; (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	20000654 	.word	0x20000654
 80013a8:	20000650 	.word	0x20000650
 80013ac:	2000063c 	.word	0x2000063c
 80013b0:	20000668 	.word	0x20000668

080013b4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  CANController.SetRxFlag();
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80013be:	0018      	movs	r0, r3
 80013c0:	f009 fcab 	bl	800ad1a <_ZN11SolarGators7Drivers9CANDriver9SetRxFlagEv>
  HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2102      	movs	r1, #2
 80013c8:	0018      	movs	r0, r3
 80013ca:	f001 fd0a 	bl	8002de2 <HAL_CAN_DeactivateNotification>
}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b002      	add	sp, #8
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	200002e8 	.word	0x200002e8

080013dc <_Z41__static_initialization_and_destruction_0ii>:
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d12f      	bne.n	800144c <_Z41__static_initialization_and_destruction_0ii+0x70>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	4a2b      	ldr	r2, [pc, #172]	; (800149c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d12b      	bne.n	800144c <_Z41__static_initialization_and_destruction_0ii+0x70>
#include "CAN.hpp"
#include "LED.hpp"
#include "MPU6050.hpp"
#include "ADCS747.hpp"

SolarGators::DataModules::Steering LightsState;
 80013f4:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80013f6:	0018      	movs	r0, r3
 80013f8:	f008 fdd0 	bl	8009f9c <_ZN11SolarGators11DataModules8SteeringC1Ev>
extern CAN_HandleTypeDef hcan;
SolarGators::Drivers::CANDriver CANController(&hcan, 0);
 80013fc:	4929      	ldr	r1, [pc, #164]	; (80014a4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80013fe:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8001400:	2200      	movs	r2, #0
 8001402:	0018      	movs	r0, r3
 8001404:	f009 faca 	bl	800a99c <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm>
LSM6DSR_Object_t imu;

SolarGators::Drivers::fpoint_3d_t ACCEL;
extern SPI_HandleTypeDef hspi1;
// Break
SolarGators::Drivers::ADCS747 throttle_adc(&hspi1, Break_CS_GPIO_Port, Break_CS_Pin);
 8001408:	2390      	movs	r3, #144	; 0x90
 800140a:	05da      	lsls	r2, r3, #23
 800140c:	4927      	ldr	r1, [pc, #156]	; (80014ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800140e:	4828      	ldr	r0, [pc, #160]	; (80014b0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8001410:	2308      	movs	r3, #8
 8001412:	f009 fa2f 	bl	800a874 <_ZN11SolarGators7Drivers7ADCS747C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
uint8_t BREAK_VAL;
// Throttle
SolarGators::Drivers::ADCS747 break_adc(&hspi1, Throttle_CS_GPIO_Port, Throttle_CS_Pin);
 8001416:	4a27      	ldr	r2, [pc, #156]	; (80014b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8001418:	4924      	ldr	r1, [pc, #144]	; (80014ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800141a:	4827      	ldr	r0, [pc, #156]	; (80014b8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800141c:	2310      	movs	r3, #16
 800141e:	f009 fa29 	bl	800a874 <_ZN11SolarGators7Drivers7ADCS747C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
uint8_t THROTTLE_VAL;

// Leds
SolarGators::Drivers::LED lt_indicator    ("LT Indicator", LT_GPIO_Port, LT_GPIO_Pin);
 8001422:	2390      	movs	r3, #144	; 0x90
 8001424:	05da      	lsls	r2, r3, #23
 8001426:	4925      	ldr	r1, [pc, #148]	; (80014bc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8001428:	4825      	ldr	r0, [pc, #148]	; (80014c0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800142a:	2301      	movs	r3, #1
 800142c:	f00a fc74 	bl	800bd18 <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
SolarGators::Drivers::LED rt_indicator    ("RT Indicator", RT_GPIO_Port, RT_GPIO_Pin);
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8001436:	4923      	ldr	r1, [pc, #140]	; (80014c4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8001438:	4823      	ldr	r0, [pc, #140]	; (80014c8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800143a:	f00a fc6d 	bl	800bd18 <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
SolarGators::Drivers::LED hl_indicator    ("HL Indicator", LED2_EN_GPIO_Port, LED2_EN_Pin);
 800143e:	2390      	movs	r3, #144	; 0x90
 8001440:	05da      	lsls	r2, r3, #23
 8001442:	4922      	ldr	r1, [pc, #136]	; (80014cc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8001444:	4822      	ldr	r0, [pc, #136]	; (80014d0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8001446:	2302      	movs	r3, #2
 8001448:	f00a fc66 	bl	800bd18 <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d11f      	bne.n	8001492 <_Z41__static_initialization_and_destruction_0ii+0xb6>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	4a11      	ldr	r2, [pc, #68]	; (800149c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d11b      	bne.n	8001492 <_Z41__static_initialization_and_destruction_0ii+0xb6>
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800145c:	0018      	movs	r0, r3
 800145e:	f00a fc7f 	bl	800bd60 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED rt_indicator    ("RT Indicator", RT_GPIO_Port, RT_GPIO_Pin);
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8001464:	0018      	movs	r0, r3
 8001466:	f00a fc7b 	bl	800bd60 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED lt_indicator    ("LT Indicator", LT_GPIO_Port, LT_GPIO_Pin);
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800146c:	0018      	movs	r0, r3
 800146e:	f00a fc77 	bl	800bd60 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::ADCS747 break_adc(&hspi1, Throttle_CS_GPIO_Port, Throttle_CS_Pin);
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8001474:	0018      	movs	r0, r3
 8001476:	f009 fa1f 	bl	800a8b8 <_ZN11SolarGators7Drivers7ADCS747D1Ev>
SolarGators::Drivers::ADCS747 throttle_adc(&hspi1, Break_CS_GPIO_Port, Break_CS_Pin);
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800147c:	0018      	movs	r0, r3
 800147e:	f009 fa1b 	bl	800a8b8 <_ZN11SolarGators7Drivers7ADCS747D1Ev>
SolarGators::Drivers::CANDriver CANController(&hcan, 0);
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8001484:	0018      	movs	r0, r3
 8001486:	f009 fb2d 	bl	800aae4 <_ZN11SolarGators7Drivers9CANDriverD1Ev>
SolarGators::DataModules::Steering LightsState;
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800148c:	0018      	movs	r0, r3
 800148e:	f008 fdc9 	bl	800a024 <_ZN11SolarGators11DataModules8SteeringD1Ev>
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	46bd      	mov	sp, r7
 8001496:	b002      	add	sp, #8
 8001498:	bd80      	pop	{r7, pc}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	0000ffff 	.word	0x0000ffff
 80014a0:	20000264 	.word	0x20000264
 80014a4:	20002238 	.word	0x20002238
 80014a8:	200002e8 	.word	0x200002e8
 80014ac:	200026bc 	.word	0x200026bc
 80014b0:	2000063c 	.word	0x2000063c
 80014b4:	48000800 	.word	0x48000800
 80014b8:	20000654 	.word	0x20000654
 80014bc:	0801299c 	.word	0x0801299c
 80014c0:	2000066c 	.word	0x2000066c
 80014c4:	080129ac 	.word	0x080129ac
 80014c8:	20000680 	.word	0x20000680
 80014cc:	080129bc 	.word	0x080129bc
 80014d0:	20000694 	.word	0x20000694

080014d4 <_GLOBAL__sub_I_LightsState>:
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <_GLOBAL__sub_I_LightsState+0x14>)
 80014da:	0019      	movs	r1, r3
 80014dc:	2001      	movs	r0, #1
 80014de:	f7ff ff7d 	bl	80013dc <_Z41__static_initialization_and_destruction_0ii>
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	0000ffff 	.word	0x0000ffff

080014ec <_GLOBAL__sub_D_LightsState>:
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <_GLOBAL__sub_D_LightsState+0x14>)
 80014f2:	0019      	movs	r1, r3
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff ff71 	bl	80013dc <_Z41__static_initialization_and_destruction_0ii>
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	0000ffff 	.word	0x0000ffff

08001504 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001506:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001508:	480d      	ldr	r0, [pc, #52]	; (8001540 <LoopForever+0x6>)
  ldr r1, =_edata
 800150a:	490e      	ldr	r1, [pc, #56]	; (8001544 <LoopForever+0xa>)
  ldr r2, =_sidata
 800150c:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <LoopForever+0xe>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0b      	ldr	r2, [pc, #44]	; (800154c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001520:	4c0b      	ldr	r4, [pc, #44]	; (8001550 <LoopForever+0x16>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800152e:	f7ff fdbd 	bl	80010ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001532:	f010 f9ff 	bl	8011934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001536:	f7ff f9cb 	bl	80008d0 <main>

0800153a <LoopForever>:

LoopForever:
    b LoopForever
 800153a:	e7fe      	b.n	800153a <LoopForever>
  ldr   r0, =_estack
 800153c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8001548:	0801357c 	.word	0x0801357c
  ldr r2, =_sbss
 800154c:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8001550:	200037a0 	.word	0x200037a0

08001554 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC1_COMP_IRQHandler>
	...

08001558 <LSM6DSR_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_RegisterBusIO(LSM6DSR_Object_t *pObj, LSM6DSR_IO_t *pIO)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d103      	bne.n	8001574 <LSM6DSR_RegisterBusIO+0x1c>
  {
    ret = LSM6DSR_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	425b      	negs	r3, r3
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	e04e      	b.n	8001612 <LSM6DSR_RegisterBusIO+0xba>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	7b1a      	ldrb	r2, [r3, #12]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	695a      	ldr	r2, [r3, #20]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	699a      	ldr	r2, [r3, #24]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a1b      	ldr	r2, [pc, #108]	; (800161c <LSM6DSR_RegisterBusIO+0xc4>)
 80015b0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a1a      	ldr	r2, [pc, #104]	; (8001620 <LSM6DSR_RegisterBusIO+0xc8>)
 80015b6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d103      	bne.n	80015ce <LSM6DSR_RegisterBusIO+0x76>
    {
      ret = LSM6DSR_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	425b      	negs	r3, r3
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	e021      	b.n	8001612 <LSM6DSR_RegisterBusIO+0xba>
    }
    else if (pObj->IO.Init() != LSM6DSR_OK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4798      	blx	r3
 80015d4:	1e03      	subs	r3, r0, #0
 80015d6:	d003      	beq.n	80015e0 <LSM6DSR_RegisterBusIO+0x88>
    {
      ret = LSM6DSR_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	425b      	negs	r3, r3
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	e018      	b.n	8001612 <LSM6DSR_RegisterBusIO+0xba>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d114      	bne.n	8001612 <LSM6DSR_RegisterBusIO+0xba>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2228      	movs	r2, #40	; 0x28
 80015ec:	5c9b      	ldrb	r3, [r3, r2]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10f      	bne.n	8001612 <LSM6DSR_RegisterBusIO+0xba>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80015f2:	210b      	movs	r1, #11
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	220c      	movs	r2, #12
 80015f8:	701a      	strb	r2, [r3, #0]

          if (LSM6DSR_Write_Reg(pObj, LSM6DSR_CTRL3_C, data) != LSM6DSR_OK)
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2112      	movs	r1, #18
 8001602:	0018      	movs	r0, r3
 8001604:	f000 f941 	bl	800188a <LSM6DSR_Write_Reg>
 8001608:	1e03      	subs	r3, r0, #0
 800160a:	d002      	beq.n	8001612 <LSM6DSR_RegisterBusIO+0xba>
          {
            ret = LSM6DSR_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	425b      	negs	r3, r3
 8001610:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b004      	add	sp, #16
 800161a:	bd80      	pop	{r7, pc}
 800161c:	080018c9 	.word	0x080018c9
 8001620:	0800190d 	.word	0x0800190d

08001624 <LSM6DSR_Init>:
 * @brief  Initialize the LSM6DSR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_Init(LSM6DSR_Object_t *pObj)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dsr_i3c_disable_set(&(pObj->Ctx), LSM6DSR_I3C_DISABLE) != LSM6DSR_OK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	331c      	adds	r3, #28
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	0018      	movs	r0, r3
 8001634:	f000 fdde 	bl	80021f4 <lsm6dsr_i3c_disable_set>
 8001638:	1e03      	subs	r3, r0, #0
 800163a:	d002      	beq.n	8001642 <LSM6DSR_Init+0x1e>
  {
    return LSM6DSR_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	425b      	negs	r3, r3
 8001640:	e059      	b.n	80016f6 <LSM6DSR_Init+0xd2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsr_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSR_OK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	331c      	adds	r3, #28
 8001646:	2101      	movs	r1, #1
 8001648:	0018      	movs	r0, r3
 800164a:	f000 fda3 	bl	8002194 <lsm6dsr_auto_increment_set>
 800164e:	1e03      	subs	r3, r0, #0
 8001650:	d002      	beq.n	8001658 <LSM6DSR_Init+0x34>
  {
    return LSM6DSR_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	425b      	negs	r3, r3
 8001656:	e04e      	b.n	80016f6 <LSM6DSR_Init+0xd2>
  }

  /* Enable BDU */
  if (lsm6dsr_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSR_OK)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	331c      	adds	r3, #28
 800165c:	2101      	movs	r1, #1
 800165e:	0018      	movs	r0, r3
 8001660:	f000 fce7 	bl	8002032 <lsm6dsr_block_data_update_set>
 8001664:	1e03      	subs	r3, r0, #0
 8001666:	d002      	beq.n	800166e <LSM6DSR_Init+0x4a>
  {
    return LSM6DSR_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	425b      	negs	r3, r3
 800166c:	e043      	b.n	80016f6 <LSM6DSR_Init+0xd2>
  }

  /* FIFO mode selection */
  if (lsm6dsr_fifo_mode_set(&(pObj->Ctx), LSM6DSR_BYPASS_MODE) != LSM6DSR_OK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	331c      	adds	r3, #28
 8001672:	2100      	movs	r1, #0
 8001674:	0018      	movs	r0, r3
 8001676:	f000 fe18 	bl	80022aa <lsm6dsr_fifo_mode_set>
 800167a:	1e03      	subs	r3, r0, #0
 800167c:	d002      	beq.n	8001684 <LSM6DSR_Init+0x60>
  {
    return LSM6DSR_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	425b      	negs	r3, r3
 8001682:	e038      	b.n	80016f6 <LSM6DSR_Init+0xd2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSR_XL_ODR_104Hz;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	222b      	movs	r2, #43	; 0x2b
 8001688:	2104      	movs	r1, #4
 800168a:	5499      	strb	r1, [r3, r2]

  /* Output data rate selection - power down. */
  if (lsm6dsr_xl_data_rate_set(&(pObj->Ctx), LSM6DSR_XL_ODR_OFF) != LSM6DSR_OK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	331c      	adds	r3, #28
 8001690:	2100      	movs	r1, #0
 8001692:	0018      	movs	r0, r3
 8001694:	f000 fa05 	bl	8001aa2 <lsm6dsr_xl_data_rate_set>
 8001698:	1e03      	subs	r3, r0, #0
 800169a:	d002      	beq.n	80016a2 <LSM6DSR_Init+0x7e>
  {
    return LSM6DSR_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	425b      	negs	r3, r3
 80016a0:	e029      	b.n	80016f6 <LSM6DSR_Init+0xd2>
  }

  /* Full scale selection. */
  if (lsm6dsr_xl_full_scale_set(&(pObj->Ctx), LSM6DSR_2g) != LSM6DSR_OK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	331c      	adds	r3, #28
 80016a6:	2100      	movs	r1, #0
 80016a8:	0018      	movs	r0, r3
 80016aa:	f000 f993 	bl	80019d4 <lsm6dsr_xl_full_scale_set>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d002      	beq.n	80016b8 <LSM6DSR_Init+0x94>
  {
    return LSM6DSR_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	425b      	negs	r3, r3
 80016b6:	e01e      	b.n	80016f6 <LSM6DSR_Init+0xd2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSR_GY_ODR_104Hz;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	222c      	movs	r2, #44	; 0x2c
 80016bc:	2104      	movs	r1, #4
 80016be:	5499      	strb	r1, [r3, r2]

  /* Output data rate selection - power down. */
  if (lsm6dsr_gy_data_rate_set(&(pObj->Ctx), LSM6DSR_GY_ODR_OFF) != LSM6DSR_OK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	331c      	adds	r3, #28
 80016c4:	2100      	movs	r1, #0
 80016c6:	0018      	movs	r0, r3
 80016c8:	f000 fb67 	bl	8001d9a <lsm6dsr_gy_data_rate_set>
 80016cc:	1e03      	subs	r3, r0, #0
 80016ce:	d002      	beq.n	80016d6 <LSM6DSR_Init+0xb2>
  {
    return LSM6DSR_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	425b      	negs	r3, r3
 80016d4:	e00f      	b.n	80016f6 <LSM6DSR_Init+0xd2>
  }

  /* Full scale selection. */
  if (lsm6dsr_gy_full_scale_set(&(pObj->Ctx), LSM6DSR_2000dps) != LSM6DSR_OK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	331c      	adds	r3, #28
 80016da:	210c      	movs	r1, #12
 80016dc:	0018      	movs	r0, r3
 80016de:	f000 fb2c 	bl	8001d3a <lsm6dsr_gy_full_scale_set>
 80016e2:	1e03      	subs	r3, r0, #0
 80016e4:	d002      	beq.n	80016ec <LSM6DSR_Init+0xc8>
  {
    return LSM6DSR_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	425b      	negs	r3, r3
 80016ea:	e004      	b.n	80016f6 <LSM6DSR_Init+0xd2>
  }

  pObj->is_initialized = 1;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2228      	movs	r2, #40	; 0x28
 80016f0:	2101      	movs	r1, #1
 80016f2:	5499      	strb	r1, [r3, r2]

  return LSM6DSR_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	0018      	movs	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b002      	add	sp, #8
 80016fc:	bd80      	pop	{r7, pc}

080016fe <LSM6DSR_ACC_Enable>:
 * @brief  Enable the LSM6DSR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_Enable(LSM6DSR_Object_t *pObj)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2229      	movs	r2, #41	; 0x29
 800170a:	5c9b      	ldrb	r3, [r3, r2]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <LSM6DSR_ACC_Enable+0x16>
  {
    return LSM6DSR_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	e013      	b.n	800173c <LSM6DSR_ACC_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lsm6dsr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSR_OK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	331c      	adds	r3, #28
 8001718:	001a      	movs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	212b      	movs	r1, #43	; 0x2b
 800171e:	5c5b      	ldrb	r3, [r3, r1]
 8001720:	0019      	movs	r1, r3
 8001722:	0010      	movs	r0, r2
 8001724:	f000 f9bd 	bl	8001aa2 <lsm6dsr_xl_data_rate_set>
 8001728:	1e03      	subs	r3, r0, #0
 800172a:	d002      	beq.n	8001732 <LSM6DSR_ACC_Enable+0x34>
  {
    return LSM6DSR_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	425b      	negs	r3, r3
 8001730:	e004      	b.n	800173c <LSM6DSR_ACC_Enable+0x3e>
  }

  pObj->acc_is_enabled = 1;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2229      	movs	r2, #41	; 0x29
 8001736:	2101      	movs	r1, #1
 8001738:	5499      	strb	r1, [r3, r2]

  return LSM6DSR_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}

08001744 <LSM6DSR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_GetSensitivity(LSM6DSR_Object_t *pObj, float *Sensitivity)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
  lsm6dsr_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsr_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSR_OK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	331c      	adds	r3, #28
 8001756:	220b      	movs	r2, #11
 8001758:	18ba      	adds	r2, r7, r2
 800175a:	0011      	movs	r1, r2
 800175c:	0018      	movs	r0, r3
 800175e:	f000 f969 	bl	8001a34 <lsm6dsr_xl_full_scale_get>
 8001762:	1e03      	subs	r3, r0, #0
 8001764:	d002      	beq.n	800176c <LSM6DSR_ACC_GetSensitivity+0x28>
  {
    return LSM6DSR_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	425b      	negs	r3, r3
 800176a:	e022      	b.n	80017b2 <LSM6DSR_ACC_GetSensitivity+0x6e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800176c:	230b      	movs	r3, #11
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d010      	beq.n	8001798 <LSM6DSR_ACC_GetSensitivity+0x54>
 8001776:	dc17      	bgt.n	80017a8 <LSM6DSR_ACC_GetSensitivity+0x64>
 8001778:	2b02      	cmp	r3, #2
 800177a:	d009      	beq.n	8001790 <LSM6DSR_ACC_GetSensitivity+0x4c>
 800177c:	dc14      	bgt.n	80017a8 <LSM6DSR_ACC_GetSensitivity+0x64>
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <LSM6DSR_ACC_GetSensitivity+0x44>
 8001782:	2b01      	cmp	r3, #1
 8001784:	d00c      	beq.n	80017a0 <LSM6DSR_ACC_GetSensitivity+0x5c>
 8001786:	e00f      	b.n	80017a8 <LSM6DSR_ACC_GetSensitivity+0x64>
  {
    case LSM6DSR_2g:
      *Sensitivity = LSM6DSR_ACC_SENSITIVITY_FS_2G;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	4a0c      	ldr	r2, [pc, #48]	; (80017bc <LSM6DSR_ACC_GetSensitivity+0x78>)
 800178c:	601a      	str	r2, [r3, #0]
      break;
 800178e:	e00f      	b.n	80017b0 <LSM6DSR_ACC_GetSensitivity+0x6c>

    case LSM6DSR_4g:
      *Sensitivity = LSM6DSR_ACC_SENSITIVITY_FS_4G;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <LSM6DSR_ACC_GetSensitivity+0x7c>)
 8001794:	601a      	str	r2, [r3, #0]
      break;
 8001796:	e00b      	b.n	80017b0 <LSM6DSR_ACC_GetSensitivity+0x6c>

    case LSM6DSR_8g:
      *Sensitivity = LSM6DSR_ACC_SENSITIVITY_FS_8G;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <LSM6DSR_ACC_GetSensitivity+0x80>)
 800179c:	601a      	str	r2, [r3, #0]
      break;
 800179e:	e007      	b.n	80017b0 <LSM6DSR_ACC_GetSensitivity+0x6c>

    case LSM6DSR_16g:
      *Sensitivity = LSM6DSR_ACC_SENSITIVITY_FS_16G;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <LSM6DSR_ACC_GetSensitivity+0x84>)
 80017a4:	601a      	str	r2, [r3, #0]
      break;
 80017a6:	e003      	b.n	80017b0 <LSM6DSR_ACC_GetSensitivity+0x6c>

    default:
      ret = LSM6DSR_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	425b      	negs	r3, r3
 80017ac:	60fb      	str	r3, [r7, #12]
      break;
 80017ae:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80017b0:	68fb      	ldr	r3, [r7, #12]
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b004      	add	sp, #16
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	3d79db23 	.word	0x3d79db23
 80017c0:	3df9db23 	.word	0x3df9db23
 80017c4:	3e79db23 	.word	0x3e79db23
 80017c8:	3ef9db23 	.word	0x3ef9db23

080017cc <LSM6DSR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_GetAxes(LSM6DSR_Object_t *pObj, LSM6DSR_Axes_t *Acceleration)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  lsm6dsr_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSR_OK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	331c      	adds	r3, #28
 80017de:	2210      	movs	r2, #16
 80017e0:	18ba      	adds	r2, r7, r2
 80017e2:	0011      	movs	r1, r2
 80017e4:	0018      	movs	r0, r3
 80017e6:	f000 fc54 	bl	8002092 <lsm6dsr_acceleration_raw_get>
 80017ea:	1e03      	subs	r3, r0, #0
 80017ec:	d002      	beq.n	80017f4 <LSM6DSR_ACC_GetAxes+0x28>
  {
    return LSM6DSR_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	425b      	negs	r3, r3
 80017f2:	e046      	b.n	8001882 <LSM6DSR_ACC_GetAxes+0xb6>
  }

  /* Get LSM6DSR actual sensitivity. */
  if (LSM6DSR_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSR_OK)
 80017f4:	230c      	movs	r3, #12
 80017f6:	18fa      	adds	r2, r7, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	0011      	movs	r1, r2
 80017fc:	0018      	movs	r0, r3
 80017fe:	f7ff ffa1 	bl	8001744 <LSM6DSR_ACC_GetSensitivity>
 8001802:	1e03      	subs	r3, r0, #0
 8001804:	d002      	beq.n	800180c <LSM6DSR_ACC_GetAxes+0x40>
  {
    return LSM6DSR_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	425b      	negs	r3, r3
 800180a:	e03a      	b.n	8001882 <LSM6DSR_ACC_GetAxes+0xb6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800180c:	2410      	movs	r4, #16
 800180e:	193b      	adds	r3, r7, r4
 8001810:	2200      	movs	r2, #0
 8001812:	5e9b      	ldrsh	r3, [r3, r2]
 8001814:	0018      	movs	r0, r3
 8001816:	f7fe fe47 	bl	80004a8 <__aeabi_i2f>
 800181a:	1c02      	adds	r2, r0, #0
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1c19      	adds	r1, r3, #0
 8001820:	1c10      	adds	r0, r2, #0
 8001822:	f7fe fd07 	bl	8000234 <__aeabi_fmul>
 8001826:	1c03      	adds	r3, r0, #0
 8001828:	1c18      	adds	r0, r3, #0
 800182a:	f7fe fe1d 	bl	8000468 <__aeabi_f2iz>
 800182e:	0002      	movs	r2, r0
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001834:	193b      	adds	r3, r7, r4
 8001836:	2202      	movs	r2, #2
 8001838:	5e9b      	ldrsh	r3, [r3, r2]
 800183a:	0018      	movs	r0, r3
 800183c:	f7fe fe34 	bl	80004a8 <__aeabi_i2f>
 8001840:	1c02      	adds	r2, r0, #0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1c19      	adds	r1, r3, #0
 8001846:	1c10      	adds	r0, r2, #0
 8001848:	f7fe fcf4 	bl	8000234 <__aeabi_fmul>
 800184c:	1c03      	adds	r3, r0, #0
 800184e:	1c18      	adds	r0, r3, #0
 8001850:	f7fe fe0a 	bl	8000468 <__aeabi_f2iz>
 8001854:	0002      	movs	r2, r0
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800185a:	193b      	adds	r3, r7, r4
 800185c:	2204      	movs	r2, #4
 800185e:	5e9b      	ldrsh	r3, [r3, r2]
 8001860:	0018      	movs	r0, r3
 8001862:	f7fe fe21 	bl	80004a8 <__aeabi_i2f>
 8001866:	1c02      	adds	r2, r0, #0
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1c19      	adds	r1, r3, #0
 800186c:	1c10      	adds	r0, r2, #0
 800186e:	f7fe fce1 	bl	8000234 <__aeabi_fmul>
 8001872:	1c03      	adds	r3, r0, #0
 8001874:	1c18      	adds	r0, r3, #0
 8001876:	f7fe fdf7 	bl	8000468 <__aeabi_f2iz>
 800187a:	0002      	movs	r2, r0
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	609a      	str	r2, [r3, #8]

  return LSM6DSR_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	0018      	movs	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	b007      	add	sp, #28
 8001888:	bd90      	pop	{r4, r7, pc}

0800188a <LSM6DSR_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_Write_Reg(LSM6DSR_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	0008      	movs	r0, r1
 8001894:	0011      	movs	r1, r2
 8001896:	1cfb      	adds	r3, r7, #3
 8001898:	1c02      	adds	r2, r0, #0
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	1cbb      	adds	r3, r7, #2
 800189e:	1c0a      	adds	r2, r1, #0
 80018a0:	701a      	strb	r2, [r3, #0]
  if (lsm6dsr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSR_OK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	331c      	adds	r3, #28
 80018a6:	0018      	movs	r0, r3
 80018a8:	1cba      	adds	r2, r7, #2
 80018aa:	1cfb      	adds	r3, r7, #3
 80018ac:	7819      	ldrb	r1, [r3, #0]
 80018ae:	2301      	movs	r3, #1
 80018b0:	f000 f86f 	bl	8001992 <lsm6dsr_write_reg>
 80018b4:	1e03      	subs	r3, r0, #0
 80018b6:	d002      	beq.n	80018be <LSM6DSR_Write_Reg+0x34>
  {
    return LSM6DSR_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	425b      	negs	r3, r3
 80018bc:	e000      	b.n	80018c0 <LSM6DSR_Write_Reg+0x36>
  }

  return LSM6DSR_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b002      	add	sp, #8
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80018c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	0008      	movs	r0, r1
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	0019      	movs	r1, r3
 80018d6:	250b      	movs	r5, #11
 80018d8:	197b      	adds	r3, r7, r5
 80018da:	1c02      	adds	r2, r0, #0
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	2608      	movs	r6, #8
 80018e0:	19bb      	adds	r3, r7, r6
 80018e2:	1c0a      	adds	r2, r1, #0
 80018e4:	801a      	strh	r2, [r3, #0]
  LSM6DSR_Object_t *pObj = (LSM6DSR_Object_t *)Handle;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	695c      	ldr	r4, [r3, #20]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	7b1b      	ldrb	r3, [r3, #12]
 80018f2:	b298      	uxth	r0, r3
 80018f4:	197b      	adds	r3, r7, r5
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b299      	uxth	r1, r3
 80018fa:	19bb      	adds	r3, r7, r6
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	47a0      	blx	r4
 8001902:	0003      	movs	r3, r0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b007      	add	sp, #28
 800190a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800190c <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800190c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	0008      	movs	r0, r1
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	0019      	movs	r1, r3
 800191a:	250b      	movs	r5, #11
 800191c:	197b      	adds	r3, r7, r5
 800191e:	1c02      	adds	r2, r0, #0
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	2608      	movs	r6, #8
 8001924:	19bb      	adds	r3, r7, r6
 8001926:	1c0a      	adds	r2, r1, #0
 8001928:	801a      	strh	r2, [r3, #0]
  LSM6DSR_Object_t *pObj = (LSM6DSR_Object_t *)Handle;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	691c      	ldr	r4, [r3, #16]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	7b1b      	ldrb	r3, [r3, #12]
 8001936:	b298      	uxth	r0, r3
 8001938:	197b      	adds	r3, r7, r5
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b299      	uxth	r1, r3
 800193e:	19bb      	adds	r3, r7, r6
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	47a0      	blx	r4
 8001946:	0003      	movs	r3, r0
}
 8001948:	0018      	movs	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	b007      	add	sp, #28
 800194e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001950 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	0008      	movs	r0, r1
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	0019      	movs	r1, r3
 800195e:	260b      	movs	r6, #11
 8001960:	19bb      	adds	r3, r7, r6
 8001962:	1c02      	adds	r2, r0, #0
 8001964:	701a      	strb	r2, [r3, #0]
 8001966:	2508      	movs	r5, #8
 8001968:	197b      	adds	r3, r7, r5
 800196a:	1c0a      	adds	r2, r1, #0
 800196c:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	685c      	ldr	r4, [r3, #4]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6898      	ldr	r0, [r3, #8]
 8001976:	197b      	adds	r3, r7, r5
 8001978:	881d      	ldrh	r5, [r3, #0]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	19bb      	adds	r3, r7, r6
 800197e:	7819      	ldrb	r1, [r3, #0]
 8001980:	002b      	movs	r3, r5
 8001982:	47a0      	blx	r4
 8001984:	0003      	movs	r3, r0
 8001986:	617b      	str	r3, [r7, #20]
  return ret;
 8001988:	697b      	ldr	r3, [r7, #20]
}
 800198a:	0018      	movs	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	b007      	add	sp, #28
 8001990:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001992 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001992:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001994:	b087      	sub	sp, #28
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	0008      	movs	r0, r1
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	0019      	movs	r1, r3
 80019a0:	260b      	movs	r6, #11
 80019a2:	19bb      	adds	r3, r7, r6
 80019a4:	1c02      	adds	r2, r0, #0
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	2508      	movs	r5, #8
 80019aa:	197b      	adds	r3, r7, r5
 80019ac:	1c0a      	adds	r2, r1, #0
 80019ae:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681c      	ldr	r4, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6898      	ldr	r0, [r3, #8]
 80019b8:	197b      	adds	r3, r7, r5
 80019ba:	881d      	ldrh	r5, [r3, #0]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	19bb      	adds	r3, r7, r6
 80019c0:	7819      	ldrb	r1, [r3, #0]
 80019c2:	002b      	movs	r3, r5
 80019c4:	47a0      	blx	r4
 80019c6:	0003      	movs	r3, r0
 80019c8:	617b      	str	r3, [r7, #20]
  return ret;
 80019ca:	697b      	ldr	r3, [r7, #20]
}
 80019cc:	0018      	movs	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b007      	add	sp, #28
 80019d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019d4 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	000a      	movs	r2, r1
 80019de:	1cfb      	adds	r3, r7, #3
 80019e0:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80019e2:	2408      	movs	r4, #8
 80019e4:	193a      	adds	r2, r7, r4
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	2301      	movs	r3, #1
 80019ea:	2110      	movs	r1, #16
 80019ec:	f7ff ffb0 	bl	8001950 <lsm6dsr_read_reg>
 80019f0:	0003      	movs	r3, r0
 80019f2:	60fb      	str	r3, [r7, #12]
                         1);

  if (ret == 0) {
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d117      	bne.n	8001a2a <lsm6dsr_xl_full_scale_set+0x56>
    ctrl1_xl.fs_xl = (uint8_t)val;
 80019fa:	1cfb      	adds	r3, r7, #3
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2203      	movs	r2, #3
 8001a00:	4013      	ands	r3, r2
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	193b      	adds	r3, r7, r4
 8001a06:	2103      	movs	r1, #3
 8001a08:	400a      	ands	r2, r1
 8001a0a:	0090      	lsls	r0, r2, #2
 8001a0c:	781a      	ldrb	r2, [r3, #0]
 8001a0e:	210c      	movs	r1, #12
 8001a10:	438a      	bics	r2, r1
 8001a12:	1c11      	adds	r1, r2, #0
 8001a14:	1c02      	adds	r2, r0, #0
 8001a16:	430a      	orrs	r2, r1
 8001a18:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8001a1a:	193a      	adds	r2, r7, r4
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	2110      	movs	r1, #16
 8001a22:	f7ff ffb6 	bl	8001992 <lsm6dsr_write_reg>
 8001a26:	0003      	movs	r3, r0
 8001a28:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b005      	add	sp, #20
 8001a32:	bd90      	pop	{r4, r7, pc}

08001a34 <lsm6dsr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t *val)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8001a3e:	2408      	movs	r4, #8
 8001a40:	193a      	adds	r2, r7, r4
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	2301      	movs	r3, #1
 8001a46:	2110      	movs	r1, #16
 8001a48:	f7ff ff82 	bl	8001950 <lsm6dsr_read_reg>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	60fb      	str	r3, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8001a50:	193b      	adds	r3, r7, r4
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	071b      	lsls	r3, r3, #28
 8001a56:	0f9b      	lsrs	r3, r3, #30
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d014      	beq.n	8001a88 <lsm6dsr_xl_full_scale_get+0x54>
 8001a5e:	dc17      	bgt.n	8001a90 <lsm6dsr_xl_full_scale_get+0x5c>
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d00d      	beq.n	8001a80 <lsm6dsr_xl_full_scale_get+0x4c>
 8001a64:	dc14      	bgt.n	8001a90 <lsm6dsr_xl_full_scale_get+0x5c>
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <lsm6dsr_xl_full_scale_get+0x3c>
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d004      	beq.n	8001a78 <lsm6dsr_xl_full_scale_get+0x44>
 8001a6e:	e00f      	b.n	8001a90 <lsm6dsr_xl_full_scale_get+0x5c>
    case LSM6DSR_2g:
      *val = LSM6DSR_2g;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
      break;
 8001a76:	e00f      	b.n	8001a98 <lsm6dsr_xl_full_scale_get+0x64>

    case LSM6DSR_16g:
      *val = LSM6DSR_16g;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
      break;
 8001a7e:	e00b      	b.n	8001a98 <lsm6dsr_xl_full_scale_get+0x64>

    case LSM6DSR_4g:
      *val = LSM6DSR_4g;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2202      	movs	r2, #2
 8001a84:	701a      	strb	r2, [r3, #0]
      break;
 8001a86:	e007      	b.n	8001a98 <lsm6dsr_xl_full_scale_get+0x64>

    case LSM6DSR_8g:
      *val = LSM6DSR_8g;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	701a      	strb	r2, [r3, #0]
      break;
 8001a8e:	e003      	b.n	8001a98 <lsm6dsr_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSR_2g;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
      break;
 8001a96:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8001a98:	68fb      	ldr	r3, [r7, #12]
}
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b005      	add	sp, #20
 8001aa0:	bd90      	pop	{r4, r7, pc}

08001aa2 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8001aa2:	b590      	push	{r4, r7, lr}
 8001aa4:	b087      	sub	sp, #28
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	000a      	movs	r2, r1
 8001aac:	1cfb      	adds	r3, r7, #3
 8001aae:	701a      	strb	r2, [r3, #0]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8001ab0:	2317      	movs	r3, #23
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	1cfa      	adds	r2, r7, #3
 8001ab6:	7812      	ldrb	r2, [r2, #0]
 8001ab8:	701a      	strb	r2, [r3, #0]
  lsm6dsr_emb_fsm_enable_t fsm_enable;
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8001aba:	240c      	movs	r4, #12
 8001abc:	193a      	adds	r2, r7, r4
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	0011      	movs	r1, r2
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f000 fc21 	bl	800230a <lsm6dsr_fsm_enable_get>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	613b      	str	r3, [r7, #16]

  if (ret == 0) {
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d000      	beq.n	8001ad4 <lsm6dsr_xl_data_rate_set+0x32>
 8001ad2:	e105      	b.n	8001ce0 <lsm6dsr_xl_data_rate_set+0x23e>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8001ad4:	0021      	movs	r1, r4
 8001ad6:	187b      	adds	r3, r7, r1
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	07db      	lsls	r3, r3, #31
 8001adc:	0fdb      	lsrs	r3, r3, #31
 8001ade:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8001ae0:	187b      	adds	r3, r7, r1
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	079b      	lsls	r3, r3, #30
 8001ae6:	0fdb      	lsrs	r3, r3, #31
 8001ae8:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8001aee:	187b      	adds	r3, r7, r1
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	075b      	lsls	r3, r3, #29
 8001af4:	0fdb      	lsrs	r3, r3, #31
 8001af6:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	071b      	lsls	r3, r3, #28
 8001b02:	0fdb      	lsrs	r3, r3, #31
 8001b04:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	06db      	lsls	r3, r3, #27
 8001b10:	0fdb      	lsrs	r3, r3, #31
 8001b12:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8001b18:	187b      	adds	r3, r7, r1
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	069b      	lsls	r3, r3, #26
 8001b1e:	0fdb      	lsrs	r3, r3, #31
 8001b20:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8001b22:	4313      	orrs	r3, r2
 8001b24:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	065b      	lsls	r3, r3, #25
 8001b2c:	0fdb      	lsrs	r3, r3, #31
 8001b2e:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8001b34:	187b      	adds	r3, r7, r1
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	061b      	lsls	r3, r3, #24
 8001b3a:	0fdb      	lsrs	r3, r3, #31
 8001b3c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	785b      	ldrb	r3, [r3, #1]
 8001b46:	07db      	lsls	r3, r3, #31
 8001b48:	0fdb      	lsrs	r3, r3, #31
 8001b4a:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	785b      	ldrb	r3, [r3, #1]
 8001b54:	079b      	lsls	r3, r3, #30
 8001b56:	0fdb      	lsrs	r3, r3, #31
 8001b58:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	785b      	ldrb	r3, [r3, #1]
 8001b62:	075b      	lsls	r3, r3, #29
 8001b64:	0fdb      	lsrs	r3, r3, #31
 8001b66:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	071b      	lsls	r3, r3, #28
 8001b72:	0fdb      	lsrs	r3, r3, #31
 8001b74:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8001b76:	4313      	orrs	r3, r2
 8001b78:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	06db      	lsls	r3, r3, #27
 8001b80:	0fdb      	lsrs	r3, r3, #31
 8001b82:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8001b84:	4313      	orrs	r3, r2
 8001b86:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	785b      	ldrb	r3, [r3, #1]
 8001b8c:	069b      	lsls	r3, r3, #26
 8001b8e:	0fdb      	lsrs	r3, r3, #31
 8001b90:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	785b      	ldrb	r3, [r3, #1]
 8001b9a:	065b      	lsls	r3, r3, #25
 8001b9c:	0fdb      	lsrs	r3, r3, #31
 8001b9e:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	785b      	ldrb	r3, [r3, #1]
 8001ba8:	061b      	lsls	r3, r3, #24
 8001baa:	0fdb      	lsrs	r3, r3, #31
 8001bac:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d000      	beq.n	8001bb8 <lsm6dsr_xl_data_rate_set+0x116>
 8001bb6:	e093      	b.n	8001ce0 <lsm6dsr_xl_data_rate_set+0x23e>
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8001bb8:	240b      	movs	r4, #11
 8001bba:	193a      	adds	r2, r7, r4
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	0011      	movs	r1, r2
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f000 fbd4 	bl	800236e <lsm6dsr_fsm_data_rate_get>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	613b      	str	r3, [r7, #16]

      if (ret == 0) {
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d000      	beq.n	8001bd2 <lsm6dsr_xl_data_rate_set+0x130>
 8001bd0:	e086      	b.n	8001ce0 <lsm6dsr_xl_data_rate_set+0x23e>
        switch (fsm_odr) {
 8001bd2:	193b      	adds	r3, r7, r4
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d052      	beq.n	8001c80 <lsm6dsr_xl_data_rate_set+0x1de>
 8001bda:	dd00      	ble.n	8001bde <lsm6dsr_xl_data_rate_set+0x13c>
 8001bdc:	e07a      	b.n	8001cd4 <lsm6dsr_xl_data_rate_set+0x232>
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d02d      	beq.n	8001c3e <lsm6dsr_xl_data_rate_set+0x19c>
 8001be2:	dd00      	ble.n	8001be6 <lsm6dsr_xl_data_rate_set+0x144>
 8001be4:	e076      	b.n	8001cd4 <lsm6dsr_xl_data_rate_set+0x232>
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <lsm6dsr_xl_data_rate_set+0x14e>
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d00f      	beq.n	8001c0e <lsm6dsr_xl_data_rate_set+0x16c>
 8001bee:	e071      	b.n	8001cd4 <lsm6dsr_xl_data_rate_set+0x232>
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8001bf0:	1cfb      	adds	r3, r7, #3
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d104      	bne.n	8001c02 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8001bf8:	2317      	movs	r3, #23
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]

            else {
              odr_xl = val;
            }

            break;
 8001c00:	e06f      	b.n	8001ce2 <lsm6dsr_xl_data_rate_set+0x240>
              odr_xl = val;
 8001c02:	2317      	movs	r3, #23
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	1cfa      	adds	r2, r7, #3
 8001c08:	7812      	ldrb	r2, [r2, #0]
 8001c0a:	701a      	strb	r2, [r3, #0]
            break;
 8001c0c:	e069      	b.n	8001ce2 <lsm6dsr_xl_data_rate_set+0x240>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8001c0e:	1cfb      	adds	r3, r7, #3
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d104      	bne.n	8001c20 <lsm6dsr_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8001c16:	2317      	movs	r3, #23
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	701a      	strb	r2, [r3, #0]

            else {
              odr_xl = val;
            }

            break;
 8001c1e:	e060      	b.n	8001ce2 <lsm6dsr_xl_data_rate_set+0x240>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 8001c20:	1cfb      	adds	r3, r7, #3
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d104      	bne.n	8001c32 <lsm6dsr_xl_data_rate_set+0x190>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8001c28:	2317      	movs	r3, #23
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	701a      	strb	r2, [r3, #0]
            break;
 8001c30:	e057      	b.n	8001ce2 <lsm6dsr_xl_data_rate_set+0x240>
              odr_xl = val;
 8001c32:	2317      	movs	r3, #23
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	1cfa      	adds	r2, r7, #3
 8001c38:	7812      	ldrb	r2, [r2, #0]
 8001c3a:	701a      	strb	r2, [r3, #0]
            break;
 8001c3c:	e051      	b.n	8001ce2 <lsm6dsr_xl_data_rate_set+0x240>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8001c3e:	1cfb      	adds	r3, r7, #3
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d104      	bne.n	8001c50 <lsm6dsr_xl_data_rate_set+0x1ae>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8001c46:	2317      	movs	r3, #23
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	701a      	strb	r2, [r3, #0]

            else {
              odr_xl = val;
            }

            break;
 8001c4e:	e048      	b.n	8001ce2 <lsm6dsr_xl_data_rate_set+0x240>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 8001c50:	1cfb      	adds	r3, r7, #3
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d104      	bne.n	8001c62 <lsm6dsr_xl_data_rate_set+0x1c0>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8001c58:	2317      	movs	r3, #23
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	701a      	strb	r2, [r3, #0]
            break;
 8001c60:	e03f      	b.n	8001ce2 <lsm6dsr_xl_data_rate_set+0x240>
            else if (val == LSM6DSR_XL_ODR_26Hz) {
 8001c62:	1cfb      	adds	r3, r7, #3
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d104      	bne.n	8001c74 <lsm6dsr_xl_data_rate_set+0x1d2>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8001c6a:	2317      	movs	r3, #23
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	2203      	movs	r2, #3
 8001c70:	701a      	strb	r2, [r3, #0]
            break;
 8001c72:	e036      	b.n	8001ce2 <lsm6dsr_xl_data_rate_set+0x240>
              odr_xl = val;
 8001c74:	2317      	movs	r3, #23
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	1cfa      	adds	r2, r7, #3
 8001c7a:	7812      	ldrb	r2, [r2, #0]
 8001c7c:	701a      	strb	r2, [r3, #0]
            break;
 8001c7e:	e030      	b.n	8001ce2 <lsm6dsr_xl_data_rate_set+0x240>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8001c80:	1cfb      	adds	r3, r7, #3
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d104      	bne.n	8001c92 <lsm6dsr_xl_data_rate_set+0x1f0>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8001c88:	2317      	movs	r3, #23
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	701a      	strb	r2, [r3, #0]

            else {
              odr_xl = val;
            }

            break;
 8001c90:	e027      	b.n	8001ce2 <lsm6dsr_xl_data_rate_set+0x240>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 8001c92:	1cfb      	adds	r3, r7, #3
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d104      	bne.n	8001ca4 <lsm6dsr_xl_data_rate_set+0x202>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8001c9a:	2317      	movs	r3, #23
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	701a      	strb	r2, [r3, #0]
            break;
 8001ca2:	e01e      	b.n	8001ce2 <lsm6dsr_xl_data_rate_set+0x240>
            else if (val == LSM6DSR_XL_ODR_26Hz) {
 8001ca4:	1cfb      	adds	r3, r7, #3
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d104      	bne.n	8001cb6 <lsm6dsr_xl_data_rate_set+0x214>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8001cac:	2317      	movs	r3, #23
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	701a      	strb	r2, [r3, #0]
            break;
 8001cb4:	e015      	b.n	8001ce2 <lsm6dsr_xl_data_rate_set+0x240>
            else if (val == LSM6DSR_XL_ODR_52Hz) {
 8001cb6:	1cfb      	adds	r3, r7, #3
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d104      	bne.n	8001cc8 <lsm6dsr_xl_data_rate_set+0x226>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8001cbe:	2317      	movs	r3, #23
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	701a      	strb	r2, [r3, #0]
            break;
 8001cc6:	e00c      	b.n	8001ce2 <lsm6dsr_xl_data_rate_set+0x240>
              odr_xl = val;
 8001cc8:	2317      	movs	r3, #23
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	1cfa      	adds	r2, r7, #3
 8001cce:	7812      	ldrb	r2, [r2, #0]
 8001cd0:	701a      	strb	r2, [r3, #0]
            break;
 8001cd2:	e006      	b.n	8001ce2 <lsm6dsr_xl_data_rate_set+0x240>

          default:
            odr_xl = val;
 8001cd4:	2317      	movs	r3, #23
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	1cfa      	adds	r2, r7, #3
 8001cda:	7812      	ldrb	r2, [r2, #0]
 8001cdc:	701a      	strb	r2, [r3, #0]
            break;
 8001cde:	e000      	b.n	8001ce2 <lsm6dsr_xl_data_rate_set+0x240>
        }
      }
 8001ce0:	46c0      	nop			; (mov r8, r8)
    }
  }

  if (ret == 0) {
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d108      	bne.n	8001cfa <lsm6dsr_xl_data_rate_set+0x258>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8001ce8:	2308      	movs	r3, #8
 8001cea:	18fa      	adds	r2, r7, r3
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	2301      	movs	r3, #1
 8001cf0:	2110      	movs	r1, #16
 8001cf2:	f7ff fe2d 	bl	8001950 <lsm6dsr_read_reg>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	613b      	str	r3, [r7, #16]
                           1);
  }

  if (ret == 0) {
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d117      	bne.n	8001d30 <lsm6dsr_xl_data_rate_set+0x28e>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8001d00:	2317      	movs	r3, #23
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	220f      	movs	r2, #15
 8001d08:	4013      	ands	r3, r2
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	2408      	movs	r4, #8
 8001d0e:	193b      	adds	r3, r7, r4
 8001d10:	0110      	lsls	r0, r2, #4
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	210f      	movs	r1, #15
 8001d16:	400a      	ands	r2, r1
 8001d18:	1c11      	adds	r1, r2, #0
 8001d1a:	1c02      	adds	r2, r0, #0
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8001d20:	193a      	adds	r2, r7, r4
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	2301      	movs	r3, #1
 8001d26:	2110      	movs	r1, #16
 8001d28:	f7ff fe33 	bl	8001992 <lsm6dsr_write_reg>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	613b      	str	r3, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001d30:	693b      	ldr	r3, [r7, #16]
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b007      	add	sp, #28
 8001d38:	bd90      	pop	{r4, r7, pc}

08001d3a <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8001d3a:	b590      	push	{r4, r7, lr}
 8001d3c:	b085      	sub	sp, #20
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	000a      	movs	r2, r1
 8001d44:	1cfb      	adds	r3, r7, #3
 8001d46:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001d48:	2408      	movs	r4, #8
 8001d4a:	193a      	adds	r2, r7, r4
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	2111      	movs	r1, #17
 8001d52:	f7ff fdfd 	bl	8001950 <lsm6dsr_read_reg>
 8001d56:	0003      	movs	r3, r0
 8001d58:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d117      	bne.n	8001d90 <lsm6dsr_gy_full_scale_set+0x56>
    ctrl2_g.fs_g = (uint8_t)val;
 8001d60:	1cfb      	adds	r3, r7, #3
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	220f      	movs	r2, #15
 8001d66:	4013      	ands	r3, r2
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	193b      	adds	r3, r7, r4
 8001d6c:	210f      	movs	r1, #15
 8001d6e:	400a      	ands	r2, r1
 8001d70:	0010      	movs	r0, r2
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	210f      	movs	r1, #15
 8001d76:	438a      	bics	r2, r1
 8001d78:	1c11      	adds	r1, r2, #0
 8001d7a:	1c02      	adds	r2, r0, #0
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001d80:	193a      	adds	r2, r7, r4
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	2301      	movs	r3, #1
 8001d86:	2111      	movs	r1, #17
 8001d88:	f7ff fe03 	bl	8001992 <lsm6dsr_write_reg>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001d90:	68fb      	ldr	r3, [r7, #12]
}
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b005      	add	sp, #20
 8001d98:	bd90      	pop	{r4, r7, pc}

08001d9a <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8001d9a:	b590      	push	{r4, r7, lr}
 8001d9c:	b087      	sub	sp, #28
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	000a      	movs	r2, r1
 8001da4:	1cfb      	adds	r3, r7, #3
 8001da6:	701a      	strb	r2, [r3, #0]
  lsm6dsr_odr_g_t odr_gy =  val;
 8001da8:	2317      	movs	r3, #23
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	1cfa      	adds	r2, r7, #3
 8001dae:	7812      	ldrb	r2, [r2, #0]
 8001db0:	701a      	strb	r2, [r3, #0]
  lsm6dsr_emb_fsm_enable_t fsm_enable;
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8001db2:	240c      	movs	r4, #12
 8001db4:	193a      	adds	r2, r7, r4
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	0011      	movs	r1, r2
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f000 faa5 	bl	800230a <lsm6dsr_fsm_enable_get>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	613b      	str	r3, [r7, #16]

  if (ret == 0) {
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d000      	beq.n	8001dcc <lsm6dsr_gy_data_rate_set+0x32>
 8001dca:	e105      	b.n	8001fd8 <lsm6dsr_gy_data_rate_set+0x23e>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8001dcc:	0021      	movs	r1, r4
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	07db      	lsls	r3, r3, #31
 8001dd4:	0fdb      	lsrs	r3, r3, #31
 8001dd6:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8001dd8:	187b      	adds	r3, r7, r1
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	079b      	lsls	r3, r3, #30
 8001dde:	0fdb      	lsrs	r3, r3, #31
 8001de0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8001de2:	4313      	orrs	r3, r2
 8001de4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	075b      	lsls	r3, r3, #29
 8001dec:	0fdb      	lsrs	r3, r3, #31
 8001dee:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8001df0:	4313      	orrs	r3, r2
 8001df2:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	071b      	lsls	r3, r3, #28
 8001dfa:	0fdb      	lsrs	r3, r3, #31
 8001dfc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8001e02:	187b      	adds	r3, r7, r1
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	06db      	lsls	r3, r3, #27
 8001e08:	0fdb      	lsrs	r3, r3, #31
 8001e0a:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8001e10:	187b      	adds	r3, r7, r1
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	069b      	lsls	r3, r3, #26
 8001e16:	0fdb      	lsrs	r3, r3, #31
 8001e18:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8001e1e:	187b      	adds	r3, r7, r1
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	065b      	lsls	r3, r3, #25
 8001e24:	0fdb      	lsrs	r3, r3, #31
 8001e26:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	0fdb      	lsrs	r3, r3, #31
 8001e34:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8001e36:	4313      	orrs	r3, r2
 8001e38:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8001e3a:	187b      	adds	r3, r7, r1
 8001e3c:	785b      	ldrb	r3, [r3, #1]
 8001e3e:	07db      	lsls	r3, r3, #31
 8001e40:	0fdb      	lsrs	r3, r3, #31
 8001e42:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8001e44:	4313      	orrs	r3, r2
 8001e46:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	785b      	ldrb	r3, [r3, #1]
 8001e4c:	079b      	lsls	r3, r3, #30
 8001e4e:	0fdb      	lsrs	r3, r3, #31
 8001e50:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8001e56:	187b      	adds	r3, r7, r1
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	075b      	lsls	r3, r3, #29
 8001e5c:	0fdb      	lsrs	r3, r3, #31
 8001e5e:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8001e60:	4313      	orrs	r3, r2
 8001e62:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	785b      	ldrb	r3, [r3, #1]
 8001e68:	071b      	lsls	r3, r3, #28
 8001e6a:	0fdb      	lsrs	r3, r3, #31
 8001e6c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8001e72:	187b      	adds	r3, r7, r1
 8001e74:	785b      	ldrb	r3, [r3, #1]
 8001e76:	06db      	lsls	r3, r3, #27
 8001e78:	0fdb      	lsrs	r3, r3, #31
 8001e7a:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8001e80:	187b      	adds	r3, r7, r1
 8001e82:	785b      	ldrb	r3, [r3, #1]
 8001e84:	069b      	lsls	r3, r3, #26
 8001e86:	0fdb      	lsrs	r3, r3, #31
 8001e88:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8001e8e:	187b      	adds	r3, r7, r1
 8001e90:	785b      	ldrb	r3, [r3, #1]
 8001e92:	065b      	lsls	r3, r3, #25
 8001e94:	0fdb      	lsrs	r3, r3, #31
 8001e96:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	785b      	ldrb	r3, [r3, #1]
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	0fdb      	lsrs	r3, r3, #31
 8001ea4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d000      	beq.n	8001eb0 <lsm6dsr_gy_data_rate_set+0x116>
 8001eae:	e093      	b.n	8001fd8 <lsm6dsr_gy_data_rate_set+0x23e>
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8001eb0:	240b      	movs	r4, #11
 8001eb2:	193a      	adds	r2, r7, r4
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	0011      	movs	r1, r2
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f000 fa58 	bl	800236e <lsm6dsr_fsm_data_rate_get>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	613b      	str	r3, [r7, #16]

      if (ret == 0) {
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d000      	beq.n	8001eca <lsm6dsr_gy_data_rate_set+0x130>
 8001ec8:	e086      	b.n	8001fd8 <lsm6dsr_gy_data_rate_set+0x23e>
        switch (fsm_odr) {
 8001eca:	193b      	adds	r3, r7, r4
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d052      	beq.n	8001f78 <lsm6dsr_gy_data_rate_set+0x1de>
 8001ed2:	dd00      	ble.n	8001ed6 <lsm6dsr_gy_data_rate_set+0x13c>
 8001ed4:	e07a      	b.n	8001fcc <lsm6dsr_gy_data_rate_set+0x232>
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d02d      	beq.n	8001f36 <lsm6dsr_gy_data_rate_set+0x19c>
 8001eda:	dd00      	ble.n	8001ede <lsm6dsr_gy_data_rate_set+0x144>
 8001edc:	e076      	b.n	8001fcc <lsm6dsr_gy_data_rate_set+0x232>
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <lsm6dsr_gy_data_rate_set+0x14e>
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d00f      	beq.n	8001f06 <lsm6dsr_gy_data_rate_set+0x16c>
 8001ee6:	e071      	b.n	8001fcc <lsm6dsr_gy_data_rate_set+0x232>
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF) {
 8001ee8:	1cfb      	adds	r3, r7, #3
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d104      	bne.n	8001efa <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8001ef0:	2317      	movs	r3, #23
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]

            else {
              odr_gy = val;
            }

            break;
 8001ef8:	e06f      	b.n	8001fda <lsm6dsr_gy_data_rate_set+0x240>
              odr_gy = val;
 8001efa:	2317      	movs	r3, #23
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	1cfa      	adds	r2, r7, #3
 8001f00:	7812      	ldrb	r2, [r2, #0]
 8001f02:	701a      	strb	r2, [r3, #0]
            break;
 8001f04:	e069      	b.n	8001fda <lsm6dsr_gy_data_rate_set+0x240>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 8001f06:	1cfb      	adds	r3, r7, #3
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d104      	bne.n	8001f18 <lsm6dsr_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8001f0e:	2317      	movs	r3, #23
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	2202      	movs	r2, #2
 8001f14:	701a      	strb	r2, [r3, #0]

            else {
              odr_gy = val;
            }

            break;
 8001f16:	e060      	b.n	8001fda <lsm6dsr_gy_data_rate_set+0x240>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 8001f18:	1cfb      	adds	r3, r7, #3
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d104      	bne.n	8001f2a <lsm6dsr_gy_data_rate_set+0x190>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8001f20:	2317      	movs	r3, #23
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	2202      	movs	r2, #2
 8001f26:	701a      	strb	r2, [r3, #0]
            break;
 8001f28:	e057      	b.n	8001fda <lsm6dsr_gy_data_rate_set+0x240>
              odr_gy = val;
 8001f2a:	2317      	movs	r3, #23
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	1cfa      	adds	r2, r7, #3
 8001f30:	7812      	ldrb	r2, [r2, #0]
 8001f32:	701a      	strb	r2, [r3, #0]
            break;
 8001f34:	e051      	b.n	8001fda <lsm6dsr_gy_data_rate_set+0x240>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 8001f36:	1cfb      	adds	r3, r7, #3
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d104      	bne.n	8001f48 <lsm6dsr_gy_data_rate_set+0x1ae>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8001f3e:	2317      	movs	r3, #23
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	2203      	movs	r2, #3
 8001f44:	701a      	strb	r2, [r3, #0]

            else {
              odr_gy = val;
            }

            break;
 8001f46:	e048      	b.n	8001fda <lsm6dsr_gy_data_rate_set+0x240>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 8001f48:	1cfb      	adds	r3, r7, #3
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d104      	bne.n	8001f5a <lsm6dsr_gy_data_rate_set+0x1c0>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8001f50:	2317      	movs	r3, #23
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	2203      	movs	r2, #3
 8001f56:	701a      	strb	r2, [r3, #0]
            break;
 8001f58:	e03f      	b.n	8001fda <lsm6dsr_gy_data_rate_set+0x240>
            else if (val == LSM6DSR_GY_ODR_26Hz) {
 8001f5a:	1cfb      	adds	r3, r7, #3
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d104      	bne.n	8001f6c <lsm6dsr_gy_data_rate_set+0x1d2>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8001f62:	2317      	movs	r3, #23
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	2203      	movs	r2, #3
 8001f68:	701a      	strb	r2, [r3, #0]
            break;
 8001f6a:	e036      	b.n	8001fda <lsm6dsr_gy_data_rate_set+0x240>
              odr_gy = val;
 8001f6c:	2317      	movs	r3, #23
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	1cfa      	adds	r2, r7, #3
 8001f72:	7812      	ldrb	r2, [r2, #0]
 8001f74:	701a      	strb	r2, [r3, #0]
            break;
 8001f76:	e030      	b.n	8001fda <lsm6dsr_gy_data_rate_set+0x240>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 8001f78:	1cfb      	adds	r3, r7, #3
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d104      	bne.n	8001f8a <lsm6dsr_gy_data_rate_set+0x1f0>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8001f80:	2317      	movs	r3, #23
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	2204      	movs	r2, #4
 8001f86:	701a      	strb	r2, [r3, #0]

            else {
              odr_gy = val;
            }

            break;
 8001f88:	e027      	b.n	8001fda <lsm6dsr_gy_data_rate_set+0x240>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 8001f8a:	1cfb      	adds	r3, r7, #3
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d104      	bne.n	8001f9c <lsm6dsr_gy_data_rate_set+0x202>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8001f92:	2317      	movs	r3, #23
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	2204      	movs	r2, #4
 8001f98:	701a      	strb	r2, [r3, #0]
            break;
 8001f9a:	e01e      	b.n	8001fda <lsm6dsr_gy_data_rate_set+0x240>
            else if (val == LSM6DSR_GY_ODR_26Hz) {
 8001f9c:	1cfb      	adds	r3, r7, #3
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d104      	bne.n	8001fae <lsm6dsr_gy_data_rate_set+0x214>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8001fa4:	2317      	movs	r3, #23
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2204      	movs	r2, #4
 8001faa:	701a      	strb	r2, [r3, #0]
            break;
 8001fac:	e015      	b.n	8001fda <lsm6dsr_gy_data_rate_set+0x240>
            else if (val == LSM6DSR_GY_ODR_52Hz) {
 8001fae:	1cfb      	adds	r3, r7, #3
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d104      	bne.n	8001fc0 <lsm6dsr_gy_data_rate_set+0x226>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8001fb6:	2317      	movs	r3, #23
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	2204      	movs	r2, #4
 8001fbc:	701a      	strb	r2, [r3, #0]
            break;
 8001fbe:	e00c      	b.n	8001fda <lsm6dsr_gy_data_rate_set+0x240>
              odr_gy = val;
 8001fc0:	2317      	movs	r3, #23
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	1cfa      	adds	r2, r7, #3
 8001fc6:	7812      	ldrb	r2, [r2, #0]
 8001fc8:	701a      	strb	r2, [r3, #0]
            break;
 8001fca:	e006      	b.n	8001fda <lsm6dsr_gy_data_rate_set+0x240>

          default:
            odr_gy = val;
 8001fcc:	2317      	movs	r3, #23
 8001fce:	18fb      	adds	r3, r7, r3
 8001fd0:	1cfa      	adds	r2, r7, #3
 8001fd2:	7812      	ldrb	r2, [r2, #0]
 8001fd4:	701a      	strb	r2, [r3, #0]
            break;
 8001fd6:	e000      	b.n	8001fda <lsm6dsr_gy_data_rate_set+0x240>
        }
      }
 8001fd8:	46c0      	nop			; (mov r8, r8)
    }
  }

  if (ret == 0) {
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d108      	bne.n	8001ff2 <lsm6dsr_gy_data_rate_set+0x258>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	18fa      	adds	r2, r7, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	2111      	movs	r1, #17
 8001fea:	f7ff fcb1 	bl	8001950 <lsm6dsr_read_reg>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0) {
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d117      	bne.n	8002028 <lsm6dsr_gy_data_rate_set+0x28e>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8001ff8:	2317      	movs	r3, #23
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	220f      	movs	r2, #15
 8002000:	4013      	ands	r3, r2
 8002002:	b2da      	uxtb	r2, r3
 8002004:	2408      	movs	r4, #8
 8002006:	193b      	adds	r3, r7, r4
 8002008:	0110      	lsls	r0, r2, #4
 800200a:	781a      	ldrb	r2, [r3, #0]
 800200c:	210f      	movs	r1, #15
 800200e:	400a      	ands	r2, r1
 8002010:	1c11      	adds	r1, r2, #0
 8002012:	1c02      	adds	r2, r0, #0
 8002014:	430a      	orrs	r2, r1
 8002016:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002018:	193a      	adds	r2, r7, r4
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	2301      	movs	r3, #1
 800201e:	2111      	movs	r1, #17
 8002020:	f7ff fcb7 	bl	8001992 <lsm6dsr_write_reg>
 8002024:	0003      	movs	r3, r0
 8002026:	613b      	str	r3, [r7, #16]
  }

  return ret;
 8002028:	693b      	ldr	r3, [r7, #16]
}
 800202a:	0018      	movs	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	b007      	add	sp, #28
 8002030:	bd90      	pop	{r4, r7, pc}

08002032 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002032:	b590      	push	{r4, r7, lr}
 8002034:	b085      	sub	sp, #20
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	000a      	movs	r2, r1
 800203c:	1cfb      	adds	r3, r7, #3
 800203e:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002040:	2408      	movs	r4, #8
 8002042:	193a      	adds	r2, r7, r4
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	2301      	movs	r3, #1
 8002048:	2112      	movs	r1, #18
 800204a:	f7ff fc81 	bl	8001950 <lsm6dsr_read_reg>
 800204e:	0003      	movs	r3, r0
 8002050:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d117      	bne.n	8002088 <lsm6dsr_block_data_update_set+0x56>
    ctrl3_c.bdu = (uint8_t)val;
 8002058:	1cfb      	adds	r3, r7, #3
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2201      	movs	r2, #1
 800205e:	4013      	ands	r3, r2
 8002060:	b2da      	uxtb	r2, r3
 8002062:	193b      	adds	r3, r7, r4
 8002064:	2101      	movs	r1, #1
 8002066:	400a      	ands	r2, r1
 8002068:	0190      	lsls	r0, r2, #6
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	2140      	movs	r1, #64	; 0x40
 800206e:	438a      	bics	r2, r1
 8002070:	1c11      	adds	r1, r2, #0
 8002072:	1c02      	adds	r2, r0, #0
 8002074:	430a      	orrs	r2, r1
 8002076:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002078:	193a      	adds	r2, r7, r4
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	2301      	movs	r3, #1
 800207e:	2112      	movs	r1, #18
 8002080:	f7ff fc87 	bl	8001992 <lsm6dsr_write_reg>
 8002084:	0003      	movs	r3, r0
 8002086:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002088:	68fb      	ldr	r3, [r7, #12]
}
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b005      	add	sp, #20
 8002090:	bd90      	pop	{r4, r7, pc}

08002092 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002092:	b590      	push	{r4, r7, lr}
 8002094:	b087      	sub	sp, #28
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 800209c:	240c      	movs	r4, #12
 800209e:	193a      	adds	r2, r7, r4
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	2306      	movs	r3, #6
 80020a4:	2128      	movs	r1, #40	; 0x28
 80020a6:	f7ff fc53 	bl	8001950 <lsm6dsr_read_reg>
 80020aa:	0003      	movs	r3, r0
 80020ac:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 80020ae:	0021      	movs	r1, r4
 80020b0:	187b      	adds	r3, r7, r1
 80020b2:	785b      	ldrb	r3, [r3, #1]
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2200      	movs	r2, #0
 80020be:	5e9b      	ldrsh	r3, [r3, r2]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	187b      	adds	r3, r7, r1
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	18d3      	adds	r3, r2, r3
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	b21a      	sxth	r2, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80020d6:	187b      	adds	r3, r7, r1
 80020d8:	78da      	ldrb	r2, [r3, #3]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	3302      	adds	r3, #2
 80020de:	b212      	sxth	r2, r2
 80020e0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	3302      	adds	r3, #2
 80020e6:	2200      	movs	r2, #0
 80020e8:	5e9b      	ldrsh	r3, [r3, r2]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	789b      	ldrb	r3, [r3, #2]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	18d3      	adds	r3, r2, r3
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	3302      	adds	r3, #2
 80020fe:	b212      	sxth	r2, r2
 8002100:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002102:	187b      	adds	r3, r7, r1
 8002104:	795a      	ldrb	r2, [r3, #5]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	3304      	adds	r3, #4
 800210a:	b212      	sxth	r2, r2
 800210c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	3304      	adds	r3, #4
 8002112:	2200      	movs	r2, #0
 8002114:	5e9b      	ldrsh	r3, [r3, r2]
 8002116:	b29b      	uxth	r3, r3
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b29a      	uxth	r2, r3
 800211c:	187b      	adds	r3, r7, r1
 800211e:	791b      	ldrb	r3, [r3, #4]
 8002120:	b29b      	uxth	r3, r3
 8002122:	18d3      	adds	r3, r2, r3
 8002124:	b29a      	uxth	r2, r3
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	3304      	adds	r3, #4
 800212a:	b212      	sxth	r2, r2
 800212c:	801a      	strh	r2, [r3, #0]
  return ret;
 800212e:	697b      	ldr	r3, [r7, #20]
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b007      	add	sp, #28
 8002136:	bd90      	pop	{r4, r7, pc}

08002138 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8002138:	b590      	push	{r4, r7, lr}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	000a      	movs	r2, r1
 8002142:	1cfb      	adds	r3, r7, #3
 8002144:	701a      	strb	r2, [r3, #0]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8002146:	2408      	movs	r4, #8
 8002148:	193a      	adds	r2, r7, r4
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	2301      	movs	r3, #1
 800214e:	2101      	movs	r1, #1
 8002150:	f7ff fbfe 	bl	8001950 <lsm6dsr_read_reg>
 8002154:	0003      	movs	r3, r0
 8002156:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d115      	bne.n	800218a <lsm6dsr_mem_bank_set+0x52>
    func_cfg_access.reg_access = (uint8_t)val;
 800215e:	1cfb      	adds	r3, r7, #3
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2203      	movs	r2, #3
 8002164:	4013      	ands	r3, r2
 8002166:	b2da      	uxtb	r2, r3
 8002168:	193b      	adds	r3, r7, r4
 800216a:	0190      	lsls	r0, r2, #6
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	213f      	movs	r1, #63	; 0x3f
 8002170:	400a      	ands	r2, r1
 8002172:	1c11      	adds	r1, r2, #0
 8002174:	1c02      	adds	r2, r0, #0
 8002176:	430a      	orrs	r2, r1
 8002178:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800217a:	193a      	adds	r2, r7, r4
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	2301      	movs	r3, #1
 8002180:	2101      	movs	r1, #1
 8002182:	f7ff fc06 	bl	8001992 <lsm6dsr_write_reg>
 8002186:	0003      	movs	r3, r0
 8002188:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	b005      	add	sp, #20
 8002192:	bd90      	pop	{r4, r7, pc}

08002194 <lsm6dsr_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	000a      	movs	r2, r1
 800219e:	1cfb      	adds	r3, r7, #3
 80021a0:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80021a2:	2408      	movs	r4, #8
 80021a4:	193a      	adds	r2, r7, r4
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	2301      	movs	r3, #1
 80021aa:	2112      	movs	r1, #18
 80021ac:	f7ff fbd0 	bl	8001950 <lsm6dsr_read_reg>
 80021b0:	0003      	movs	r3, r0
 80021b2:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d117      	bne.n	80021ea <lsm6dsr_auto_increment_set+0x56>
    ctrl3_c.if_inc = (uint8_t)val;
 80021ba:	1cfb      	adds	r3, r7, #3
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2201      	movs	r2, #1
 80021c0:	4013      	ands	r3, r2
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	193b      	adds	r3, r7, r4
 80021c6:	2101      	movs	r1, #1
 80021c8:	400a      	ands	r2, r1
 80021ca:	0090      	lsls	r0, r2, #2
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	2104      	movs	r1, #4
 80021d0:	438a      	bics	r2, r1
 80021d2:	1c11      	adds	r1, r2, #0
 80021d4:	1c02      	adds	r2, r0, #0
 80021d6:	430a      	orrs	r2, r1
 80021d8:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80021da:	193a      	adds	r2, r7, r4
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	2301      	movs	r3, #1
 80021e0:	2112      	movs	r1, #18
 80021e2:	f7ff fbd6 	bl	8001992 <lsm6dsr_write_reg>
 80021e6:	0003      	movs	r3, r0
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	0018      	movs	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b005      	add	sp, #20
 80021f2:	bd90      	pop	{r4, r7, pc}

080021f4 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	000a      	movs	r2, r1
 80021fe:	1cfb      	adds	r3, r7, #3
 8002200:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl,
 8002202:	2410      	movs	r4, #16
 8002204:	193a      	adds	r2, r7, r4
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	2301      	movs	r3, #1
 800220a:	2118      	movs	r1, #24
 800220c:	f7ff fba0 	bl	8001950 <lsm6dsr_read_reg>
 8002210:	0003      	movs	r3, r0
 8002212:	617b      	str	r3, [r7, #20]
                         1);

  if (ret == 0) {
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d11a      	bne.n	8002250 <lsm6dsr_i3c_disable_set+0x5c>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800221a:	1cfb      	adds	r3, r7, #3
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	09db      	lsrs	r3, r3, #7
 8002220:	b2db      	uxtb	r3, r3
 8002222:	1c1a      	adds	r2, r3, #0
 8002224:	2301      	movs	r3, #1
 8002226:	4013      	ands	r3, r2
 8002228:	b2da      	uxtb	r2, r3
 800222a:	193b      	adds	r3, r7, r4
 800222c:	2101      	movs	r1, #1
 800222e:	400a      	ands	r2, r1
 8002230:	1890      	adds	r0, r2, r2
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	2102      	movs	r1, #2
 8002236:	438a      	bics	r2, r1
 8002238:	1c11      	adds	r1, r2, #0
 800223a:	1c02      	adds	r2, r0, #0
 800223c:	430a      	orrs	r2, r1
 800223e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 8002240:	193a      	adds	r2, r7, r4
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	2301      	movs	r3, #1
 8002246:	2118      	movs	r1, #24
 8002248:	f7ff fba3 	bl	8001992 <lsm6dsr_write_reg>
 800224c:	0003      	movs	r3, r0
 800224e:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0) {
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d108      	bne.n	8002268 <lsm6dsr_i3c_disable_set+0x74>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8002256:	230c      	movs	r3, #12
 8002258:	18fa      	adds	r2, r7, r3
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	2301      	movs	r3, #1
 800225e:	2162      	movs	r1, #98	; 0x62
 8002260:	f7ff fb76 	bl	8001950 <lsm6dsr_read_reg>
 8002264:	0003      	movs	r3, r0
 8002266:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0) {
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d118      	bne.n	80022a0 <lsm6dsr_i3c_disable_set+0xac>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800226e:	1cfb      	adds	r3, r7, #3
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2203      	movs	r2, #3
 8002274:	4013      	ands	r3, r2
 8002276:	b2da      	uxtb	r2, r3
 8002278:	240c      	movs	r4, #12
 800227a:	193b      	adds	r3, r7, r4
 800227c:	2103      	movs	r1, #3
 800227e:	400a      	ands	r2, r1
 8002280:	00d0      	lsls	r0, r2, #3
 8002282:	781a      	ldrb	r2, [r3, #0]
 8002284:	2118      	movs	r1, #24
 8002286:	438a      	bics	r2, r1
 8002288:	1c11      	adds	r1, r2, #0
 800228a:	1c02      	adds	r2, r0, #0
 800228c:	430a      	orrs	r2, r1
 800228e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8002290:	193a      	adds	r2, r7, r4
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	2301      	movs	r3, #1
 8002296:	2162      	movs	r1, #98	; 0x62
 8002298:	f7ff fb7b 	bl	8001992 <lsm6dsr_write_reg>
 800229c:	0003      	movs	r3, r0
 800229e:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 80022a0:	697b      	ldr	r3, [r7, #20]
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b007      	add	sp, #28
 80022a8:	bd90      	pop	{r4, r7, pc}

080022aa <lsm6dsr_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsr_fifo_mode_t val)
{
 80022aa:	b590      	push	{r4, r7, lr}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	000a      	movs	r2, r1
 80022b4:	1cfb      	adds	r3, r7, #3
 80022b6:	701a      	strb	r2, [r3, #0]
  lsm6dsr_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FIFO_CTRL4,
 80022b8:	2408      	movs	r4, #8
 80022ba:	193a      	adds	r2, r7, r4
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	2301      	movs	r3, #1
 80022c0:	210a      	movs	r1, #10
 80022c2:	f7ff fb45 	bl	8001950 <lsm6dsr_read_reg>
 80022c6:	0003      	movs	r3, r0
 80022c8:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d117      	bne.n	8002300 <lsm6dsr_fifo_mode_set+0x56>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 80022d0:	1cfb      	adds	r3, r7, #3
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2207      	movs	r2, #7
 80022d6:	4013      	ands	r3, r2
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	193b      	adds	r3, r7, r4
 80022dc:	2107      	movs	r1, #7
 80022de:	400a      	ands	r2, r1
 80022e0:	0010      	movs	r0, r2
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	2107      	movs	r1, #7
 80022e6:	438a      	bics	r2, r1
 80022e8:	1c11      	adds	r1, r2, #0
 80022ea:	1c02      	adds	r2, r0, #0
 80022ec:	430a      	orrs	r2, r1
 80022ee:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FIFO_CTRL4,
 80022f0:	193a      	adds	r2, r7, r4
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	2301      	movs	r3, #1
 80022f6:	210a      	movs	r1, #10
 80022f8:	f7ff fb4b 	bl	8001992 <lsm6dsr_write_reg>
 80022fc:	0003      	movs	r3, r0
 80022fe:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8002300:	68fb      	ldr	r3, [r7, #12]
}
 8002302:	0018      	movs	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	b005      	add	sp, #20
 8002308:	bd90      	pop	{r4, r7, pc}

0800230a <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2102      	movs	r1, #2
 8002318:	0018      	movs	r0, r3
 800231a:	f7ff ff0d 	bl	8002138 <lsm6dsr_mem_bank_set>
 800231e:	0003      	movs	r3, r0
 8002320:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d107      	bne.n	8002338 <lsm6dsr_fsm_enable_get+0x2e>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8002328:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	2301      	movs	r3, #1
 800232e:	2146      	movs	r1, #70	; 0x46
 8002330:	f7ff fb0e 	bl	8001950 <lsm6dsr_read_reg>
 8002334:	0003      	movs	r3, r0
 8002336:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0) {
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d108      	bne.n	8002350 <lsm6dsr_fsm_enable_get+0x46>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	2301      	movs	r3, #1
 8002346:	2147      	movs	r1, #71	; 0x47
 8002348:	f7ff fb02 	bl	8001950 <lsm6dsr_read_reg>
 800234c:	0003      	movs	r3, r0
 800234e:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0) {
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <lsm6dsr_fsm_enable_get+0x5a>
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2100      	movs	r1, #0
 800235a:	0018      	movs	r0, r3
 800235c:	f7ff feec 	bl	8002138 <lsm6dsr_mem_bank_set>
 8002360:	0003      	movs	r3, r0
 8002362:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002364:	68fb      	ldr	r3, [r7, #12]
}
 8002366:	0018      	movs	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	b004      	add	sp, #16
 800236c:	bd80      	pop	{r7, pc}

0800236e <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2102      	movs	r1, #2
 800237c:	0018      	movs	r0, r3
 800237e:	f7ff fedb 	bl	8002138 <lsm6dsr_mem_bank_set>
 8002382:	0003      	movs	r3, r0
 8002384:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d108      	bne.n	800239e <lsm6dsr_fsm_data_rate_get+0x30>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800238c:	2308      	movs	r3, #8
 800238e:	18fa      	adds	r2, r7, r3
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	2301      	movs	r3, #1
 8002394:	215f      	movs	r1, #95	; 0x5f
 8002396:	f7ff fadb 	bl	8001950 <lsm6dsr_read_reg>
 800239a:	0003      	movs	r3, r0
 800239c:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d106      	bne.n	80023b2 <lsm6dsr_fsm_data_rate_get+0x44>
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2100      	movs	r1, #0
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7ff fec5 	bl	8002138 <lsm6dsr_mem_bank_set>
 80023ae:	0003      	movs	r3, r0
 80023b0:	60fb      	str	r3, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 80023b2:	2308      	movs	r3, #8
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	06db      	lsls	r3, r3, #27
 80023ba:	0f9b      	lsrs	r3, r3, #30
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d014      	beq.n	80023ec <lsm6dsr_fsm_data_rate_get+0x7e>
 80023c2:	dc17      	bgt.n	80023f4 <lsm6dsr_fsm_data_rate_get+0x86>
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d00d      	beq.n	80023e4 <lsm6dsr_fsm_data_rate_get+0x76>
 80023c8:	dc14      	bgt.n	80023f4 <lsm6dsr_fsm_data_rate_get+0x86>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <lsm6dsr_fsm_data_rate_get+0x66>
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d004      	beq.n	80023dc <lsm6dsr_fsm_data_rate_get+0x6e>
 80023d2:	e00f      	b.n	80023f4 <lsm6dsr_fsm_data_rate_get+0x86>
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
      break;
 80023da:	e00f      	b.n	80023fc <lsm6dsr_fsm_data_rate_get+0x8e>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
      break;
 80023e2:	e00b      	b.n	80023fc <lsm6dsr_fsm_data_rate_get+0x8e>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2202      	movs	r2, #2
 80023e8:	701a      	strb	r2, [r3, #0]
      break;
 80023ea:	e007      	b.n	80023fc <lsm6dsr_fsm_data_rate_get+0x8e>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2203      	movs	r2, #3
 80023f0:	701a      	strb	r2, [r3, #0]
      break;
 80023f2:	e003      	b.n	80023fc <lsm6dsr_fsm_data_rate_get+0x8e>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
      break;
 80023fa:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80023fc:	68fb      	ldr	r3, [r7, #12]
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	b004      	add	sp, #16
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <HAL_Init+0x24>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_Init+0x24>)
 8002412:	2110      	movs	r1, #16
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002418:	2003      	movs	r0, #3
 800241a:	f7fe fd01 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800241e:	f7fe fc33 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	40022000 	.word	0x40022000

08002430 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_IncTick+0x1c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	001a      	movs	r2, r3
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_IncTick+0x20>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	18d2      	adds	r2, r2, r3
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <HAL_IncTick+0x20>)
 8002442:	601a      	str	r2, [r3, #0]
}
 8002444:	46c0      	nop			; (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	20000060 	.word	0x20000060
 8002450:	200027c4 	.word	0x200027c4

08002454 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  return uwTick;
 8002458:	4b02      	ldr	r3, [pc, #8]	; (8002464 <HAL_GetTick+0x10>)
 800245a:	681b      	ldr	r3, [r3, #0]
}
 800245c:	0018      	movs	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	200027c4 	.word	0x200027c4

08002468 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0f0      	b.n	800265c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2220      	movs	r2, #32
 800247e:	5c9b      	ldrb	r3, [r3, r2]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	0018      	movs	r0, r3
 800248a:	f7fe fc27 	bl	8000cdc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2101      	movs	r1, #1
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800249e:	f7ff ffd9 	bl	8002454 <HAL_GetTick>
 80024a2:	0003      	movs	r3, r0
 80024a4:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024a6:	e013      	b.n	80024d0 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024a8:	f7ff ffd4 	bl	8002454 <HAL_GetTick>
 80024ac:	0002      	movs	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b0a      	cmp	r3, #10
 80024b4:	d90c      	bls.n	80024d0 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	2280      	movs	r2, #128	; 0x80
 80024bc:	0292      	lsls	r2, r2, #10
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2220      	movs	r2, #32
 80024c8:	2105      	movs	r1, #5
 80024ca:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0c5      	b.n	800265c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	4013      	ands	r3, r2
 80024da:	d0e5      	beq.n	80024a8 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2102      	movs	r1, #2
 80024e8:	438a      	bics	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ec:	f7ff ffb2 	bl	8002454 <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024f4:	e013      	b.n	800251e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024f6:	f7ff ffad 	bl	8002454 <HAL_GetTick>
 80024fa:	0002      	movs	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b0a      	cmp	r3, #10
 8002502:	d90c      	bls.n	800251e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	2280      	movs	r2, #128	; 0x80
 800250a:	0292      	lsls	r2, r2, #10
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	2105      	movs	r1, #5
 8002518:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e09e      	b.n	800265c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2202      	movs	r2, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d1e5      	bne.n	80024f6 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7e1b      	ldrb	r3, [r3, #24]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d108      	bne.n	8002544 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	430a      	orrs	r2, r1
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	e007      	b.n	8002554 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	438a      	bics	r2, r1
 8002552:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7e5b      	ldrb	r3, [r3, #25]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d108      	bne.n	800256e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2140      	movs	r1, #64	; 0x40
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	e007      	b.n	800257e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2140      	movs	r1, #64	; 0x40
 800257a:	438a      	bics	r2, r1
 800257c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7e9b      	ldrb	r3, [r3, #26]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d108      	bne.n	8002598 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2120      	movs	r1, #32
 8002592:	430a      	orrs	r2, r1
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e007      	b.n	80025a8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2120      	movs	r1, #32
 80025a4:	438a      	bics	r2, r1
 80025a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7edb      	ldrb	r3, [r3, #27]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d108      	bne.n	80025c2 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2110      	movs	r1, #16
 80025bc:	438a      	bics	r2, r1
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e007      	b.n	80025d2 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2110      	movs	r1, #16
 80025ce:	430a      	orrs	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7f1b      	ldrb	r3, [r3, #28]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d108      	bne.n	80025ec <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2108      	movs	r1, #8
 80025e6:	430a      	orrs	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e007      	b.n	80025fc <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2108      	movs	r1, #8
 80025f8:	438a      	bics	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7f5b      	ldrb	r3, [r3, #29]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d108      	bne.n	8002616 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2104      	movs	r1, #4
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e007      	b.n	8002626 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2104      	movs	r1, #4
 8002622:	438a      	bics	r2, r1
 8002624:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	431a      	orrs	r2, r3
 800263c:	0011      	movs	r1, r2
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	1e5a      	subs	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2220      	movs	r2, #32
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b004      	add	sp, #16
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002674:	2013      	movs	r0, #19
 8002676:	183b      	adds	r3, r7, r0
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	2120      	movs	r1, #32
 800267c:	5c52      	ldrb	r2, [r2, r1]
 800267e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002680:	0002      	movs	r2, r0
 8002682:	18bb      	adds	r3, r7, r2
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d004      	beq.n	8002694 <HAL_CAN_ConfigFilter+0x30>
 800268a:	18bb      	adds	r3, r7, r2
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d000      	beq.n	8002694 <HAL_CAN_ConfigFilter+0x30>
 8002692:	e0cd      	b.n	8002830 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	58d3      	ldr	r3, [r2, r3]
 800269c:	2201      	movs	r2, #1
 800269e:	431a      	orrs	r2, r3
 80026a0:	0011      	movs	r1, r2
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	221f      	movs	r2, #31
 80026b0:	4013      	ands	r3, r2
 80026b2:	2201      	movs	r2, #1
 80026b4:	409a      	lsls	r2, r3
 80026b6:	0013      	movs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	2387      	movs	r3, #135	; 0x87
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	58d3      	ldr	r3, [r2, r3]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	43d2      	mvns	r2, r2
 80026c6:	401a      	ands	r2, r3
 80026c8:	0011      	movs	r1, r2
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	2387      	movs	r3, #135	; 0x87
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d129      	bne.n	800272e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	2383      	movs	r3, #131	; 0x83
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	58d3      	ldr	r3, [r2, r3]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	43d2      	mvns	r2, r2
 80026e6:	401a      	ands	r2, r3
 80026e8:	0011      	movs	r1, r2
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	2383      	movs	r3, #131	; 0x83
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	041b      	lsls	r3, r3, #16
 80026fe:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002704:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3248      	adds	r2, #72	; 0x48
 800270a:	00d2      	lsls	r2, r2, #3
 800270c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002720:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002722:	6979      	ldr	r1, [r7, #20]
 8002724:	3348      	adds	r3, #72	; 0x48
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	18cb      	adds	r3, r1, r3
 800272a:	3304      	adds	r3, #4
 800272c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d128      	bne.n	8002788 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	2383      	movs	r3, #131	; 0x83
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	58d2      	ldr	r2, [r2, r3]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	431a      	orrs	r2, r3
 8002742:	0011      	movs	r1, r2
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	2383      	movs	r3, #131	; 0x83
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	041b      	lsls	r3, r3, #16
 8002758:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800275e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	3248      	adds	r2, #72	; 0x48
 8002764:	00d2      	lsls	r2, r2, #3
 8002766:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	041b      	lsls	r3, r3, #16
 8002774:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800277a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800277c:	6979      	ldr	r1, [r7, #20]
 800277e:	3348      	adds	r3, #72	; 0x48
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	18cb      	adds	r3, r1, r3
 8002784:	3304      	adds	r3, #4
 8002786:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10c      	bne.n	80027aa <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	2381      	movs	r3, #129	; 0x81
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	58d3      	ldr	r3, [r2, r3]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	43d2      	mvns	r2, r2
 800279c:	401a      	ands	r2, r3
 800279e:	0011      	movs	r1, r2
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	2381      	movs	r3, #129	; 0x81
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	50d1      	str	r1, [r2, r3]
 80027a8:	e00a      	b.n	80027c0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	2381      	movs	r3, #129	; 0x81
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	58d2      	ldr	r2, [r2, r3]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	0011      	movs	r1, r2
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	2381      	movs	r3, #129	; 0x81
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10c      	bne.n	80027e2 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	2385      	movs	r3, #133	; 0x85
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	58d3      	ldr	r3, [r2, r3]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	43d2      	mvns	r2, r2
 80027d4:	401a      	ands	r2, r3
 80027d6:	0011      	movs	r1, r2
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	2385      	movs	r3, #133	; 0x85
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	50d1      	str	r1, [r2, r3]
 80027e0:	e00a      	b.n	80027f8 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	2385      	movs	r3, #133	; 0x85
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	58d2      	ldr	r2, [r2, r3]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	0011      	movs	r1, r2
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	2385      	movs	r3, #133	; 0x85
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d10a      	bne.n	8002816 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	2387      	movs	r3, #135	; 0x87
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	58d2      	ldr	r2, [r2, r3]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	431a      	orrs	r2, r3
 800280c:	0011      	movs	r1, r2
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	2387      	movs	r3, #135	; 0x87
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	58d3      	ldr	r3, [r2, r3]
 800281e:	2201      	movs	r2, #1
 8002820:	4393      	bics	r3, r2
 8002822:	0019      	movs	r1, r3
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	e007      	b.n	8002840 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	2280      	movs	r2, #128	; 0x80
 8002836:	02d2      	lsls	r2, r2, #11
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
  }
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b006      	add	sp, #24
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	5c9b      	ldrb	r3, [r3, r2]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d12f      	bne.n	80028bc <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	2102      	movs	r1, #2
 8002862:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2101      	movs	r1, #1
 8002870:	438a      	bics	r2, r1
 8002872:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002874:	f7ff fdee 	bl	8002454 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800287c:	e013      	b.n	80028a6 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800287e:	f7ff fde9 	bl	8002454 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b0a      	cmp	r3, #10
 800288a:	d90c      	bls.n	80028a6 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	2280      	movs	r2, #128	; 0x80
 8002892:	0292      	lsls	r2, r2, #10
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2220      	movs	r2, #32
 800289e:	2105      	movs	r1, #5
 80028a0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e012      	b.n	80028cc <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	d1e5      	bne.n	800287e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e007      	b.n	80028cc <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	0312      	lsls	r2, r2, #12
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
  }
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b004      	add	sp, #16
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80028e2:	201f      	movs	r0, #31
 80028e4:	183b      	adds	r3, r7, r0
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	2120      	movs	r1, #32
 80028ea:	5c52      	ldrb	r2, [r2, r1]
 80028ec:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80028f6:	183b      	adds	r3, r7, r0
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d004      	beq.n	8002908 <HAL_CAN_AddTxMessage+0x34>
 80028fe:	183b      	adds	r3, r7, r0
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d000      	beq.n	8002908 <HAL_CAN_AddTxMessage+0x34>
 8002906:	e0b7      	b.n	8002a78 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	04db      	lsls	r3, r3, #19
 800290e:	4013      	ands	r3, r2
 8002910:	d10a      	bne.n	8002928 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	051b      	lsls	r3, r3, #20
 8002918:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800291a:	d105      	bne.n	8002928 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	055b      	lsls	r3, r3, #21
 8002922:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002924:	d100      	bne.n	8002928 <HAL_CAN_AddTxMessage+0x54>
 8002926:	e09e      	b.n	8002a66 <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	0e1b      	lsrs	r3, r3, #24
 800292c:	2203      	movs	r2, #3
 800292e:	4013      	ands	r3, r2
 8002930:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d908      	bls.n	800294a <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	0412      	lsls	r2, r2, #16
 8002940:	431a      	orrs	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e09e      	b.n	8002a88 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800294a:	2201      	movs	r2, #1
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	409a      	lsls	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10c      	bne.n	8002976 <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4311      	orrs	r1, r2
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	3218      	adds	r2, #24
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	50d1      	str	r1, [r2, r3]
 8002974:	e00f      	b.n	8002996 <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002980:	431a      	orrs	r2, r3
 8002982:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 800298c:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	3218      	adds	r2, #24
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6819      	ldr	r1, [r3, #0]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3318      	adds	r3, #24
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	18cb      	adds	r3, r1, r3
 80029a6:	3304      	adds	r3, #4
 80029a8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	7d1b      	ldrb	r3, [r3, #20]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d112      	bne.n	80029d8 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	3318      	adds	r3, #24
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	18d3      	adds	r3, r2, r3
 80029be:	3304      	adds	r3, #4
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6819      	ldr	r1, [r3, #0]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	431a      	orrs	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	3318      	adds	r3, #24
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	18cb      	adds	r3, r1, r3
 80029d4:	3304      	adds	r3, #4
 80029d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3307      	adds	r3, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	061a      	lsls	r2, r3, #24
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3306      	adds	r3, #6
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	041b      	lsls	r3, r3, #16
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3305      	adds	r3, #5
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	0019      	movs	r1, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	6979      	ldr	r1, [r7, #20]
 8002a04:	23c6      	movs	r3, #198	; 0xc6
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	0109      	lsls	r1, r1, #4
 8002a0a:	1841      	adds	r1, r0, r1
 8002a0c:	18cb      	adds	r3, r1, r3
 8002a0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3303      	adds	r3, #3
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	061a      	lsls	r2, r3, #24
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3301      	adds	r3, #1
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	0019      	movs	r1, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	6979      	ldr	r1, [r7, #20]
 8002a3a:	23c4      	movs	r3, #196	; 0xc4
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	0109      	lsls	r1, r1, #4
 8002a40:	1841      	adds	r1, r0, r1
 8002a42:	18cb      	adds	r3, r1, r3
 8002a44:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	3218      	adds	r2, #24
 8002a4e:	0112      	lsls	r2, r2, #4
 8002a50:	58d2      	ldr	r2, [r2, r3]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2101      	movs	r1, #1
 8002a58:	4311      	orrs	r1, r2
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	3218      	adds	r2, #24
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e010      	b.n	8002a88 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	2280      	movs	r2, #128	; 0x80
 8002a6c:	0392      	lsls	r2, r2, #14
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e007      	b.n	8002a88 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	2280      	movs	r2, #128	; 0x80
 8002a7e:	02d2      	lsls	r2, r2, #11
 8002a80:	431a      	orrs	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
  }
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b008      	add	sp, #32
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a9c:	200b      	movs	r0, #11
 8002a9e:	183b      	adds	r3, r7, r0
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	2120      	movs	r1, #32
 8002aa4:	5c52      	ldrb	r2, [r2, r1]
 8002aa6:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	18bb      	adds	r3, r7, r2
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d003      	beq.n	8002aba <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8002ab2:	18bb      	adds	r3, r7, r2
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d11d      	bne.n	8002af6 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	04db      	lsls	r3, r3, #19
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d002      	beq.n	8002ace <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3301      	adds	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	051b      	lsls	r3, r3, #20
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d002      	beq.n	8002ae2 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	055b      	lsls	r3, r3, #21
 8002aec:	4013      	ands	r3, r2
 8002aee:	d002      	beq.n	8002af6 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	3301      	adds	r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b004      	add	sp, #16
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b0e:	2017      	movs	r0, #23
 8002b10:	183b      	adds	r3, r7, r0
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	2120      	movs	r1, #32
 8002b16:	5c52      	ldrb	r2, [r2, r1]
 8002b18:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b1a:	0002      	movs	r2, r0
 8002b1c:	18bb      	adds	r3, r7, r2
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d004      	beq.n	8002b2e <HAL_CAN_GetRxMessage+0x2e>
 8002b24:	18bb      	adds	r3, r7, r2
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d000      	beq.n	8002b2e <HAL_CAN_GetRxMessage+0x2e>
 8002b2c:	e0f8      	b.n	8002d20 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10e      	bne.n	8002b52 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d117      	bne.n	8002b70 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	0392      	lsls	r2, r2, #14
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e0ee      	b.n	8002d30 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2203      	movs	r2, #3
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d108      	bne.n	8002b70 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	0392      	lsls	r2, r2, #14
 8002b66:	431a      	orrs	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0df      	b.n	8002d30 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	321b      	adds	r2, #27
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	58d3      	ldr	r3, [r2, r3]
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	401a      	ands	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	321b      	adds	r2, #27
 8002b94:	0112      	lsls	r2, r2, #4
 8002b96:	58d3      	ldr	r3, [r2, r3]
 8002b98:	0d5b      	lsrs	r3, r3, #21
 8002b9a:	055b      	lsls	r3, r3, #21
 8002b9c:	0d5a      	lsrs	r2, r3, #21
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	e00a      	b.n	8002bba <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	321b      	adds	r2, #27
 8002bac:	0112      	lsls	r2, r2, #4
 8002bae:	58d3      	ldr	r3, [r2, r3]
 8002bb0:	08db      	lsrs	r3, r3, #3
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	08da      	lsrs	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	321b      	adds	r2, #27
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	58d3      	ldr	r3, [r2, r3]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	401a      	ands	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	331b      	adds	r3, #27
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	18d3      	adds	r3, r2, r3
 8002bda:	3304      	adds	r3, #4
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	220f      	movs	r2, #15
 8002be0:	401a      	ands	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	331b      	adds	r3, #27
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	18d3      	adds	r3, r2, r3
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0a1b      	lsrs	r3, r3, #8
 8002bf8:	22ff      	movs	r2, #255	; 0xff
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	331b      	adds	r3, #27
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	18d3      	adds	r3, r2, r3
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	0c1a      	lsrs	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6819      	ldr	r1, [r3, #0]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	23dc      	movs	r3, #220	; 0xdc
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	0112      	lsls	r2, r2, #4
 8002c26:	188a      	adds	r2, r1, r2
 8002c28:	18d3      	adds	r3, r2, r3
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6819      	ldr	r1, [r3, #0]
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	23dc      	movs	r3, #220	; 0xdc
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	0112      	lsls	r2, r2, #4
 8002c3e:	188a      	adds	r2, r1, r2
 8002c40:	18d3      	adds	r3, r2, r3
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0a1a      	lsrs	r2, r3, #8
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	23dc      	movs	r3, #220	; 0xdc
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	188a      	adds	r2, r1, r2
 8002c5c:	18d3      	adds	r3, r2, r3
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0c1a      	lsrs	r2, r3, #16
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	3302      	adds	r3, #2
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	23dc      	movs	r3, #220	; 0xdc
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	0112      	lsls	r2, r2, #4
 8002c76:	188a      	adds	r2, r1, r2
 8002c78:	18d3      	adds	r3, r2, r3
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0e1a      	lsrs	r2, r3, #24
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	3303      	adds	r3, #3
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6819      	ldr	r1, [r3, #0]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	23de      	movs	r3, #222	; 0xde
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	0112      	lsls	r2, r2, #4
 8002c92:	188a      	adds	r2, r1, r2
 8002c94:	18d3      	adds	r3, r2, r3
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6819      	ldr	r1, [r3, #0]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	23de      	movs	r3, #222	; 0xde
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	0112      	lsls	r2, r2, #4
 8002cac:	188a      	adds	r2, r1, r2
 8002cae:	18d3      	adds	r3, r2, r3
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0a1a      	lsrs	r2, r3, #8
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	3305      	adds	r3, #5
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6819      	ldr	r1, [r3, #0]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	23de      	movs	r3, #222	; 0xde
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	0112      	lsls	r2, r2, #4
 8002cc8:	188a      	adds	r2, r1, r2
 8002cca:	18d3      	adds	r3, r2, r3
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	0c1a      	lsrs	r2, r3, #16
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	3306      	adds	r3, #6
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	23de      	movs	r3, #222	; 0xde
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	188a      	adds	r2, r1, r2
 8002ce6:	18d3      	adds	r3, r2, r3
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	0e1a      	lsrs	r2, r3, #24
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	3307      	adds	r3, #7
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d108      	bne.n	8002d0c <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2120      	movs	r1, #32
 8002d06:	430a      	orrs	r2, r1
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	e007      	b.n	8002d1c <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2120      	movs	r1, #32
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e007      	b.n	8002d30 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	02d2      	lsls	r2, r2, #11
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
  }
}
 8002d30:	0018      	movs	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b006      	add	sp, #24
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d46:	200b      	movs	r0, #11
 8002d48:	183b      	adds	r3, r7, r0
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	2120      	movs	r1, #32
 8002d4e:	5c52      	ldrb	r2, [r2, r1]
 8002d50:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d52:	0002      	movs	r2, r0
 8002d54:	18bb      	adds	r3, r7, r2
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d003      	beq.n	8002d64 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8002d5c:	18bb      	adds	r3, r7, r2
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d10f      	bne.n	8002d84 <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2203      	movs	r2, #3
 8002d72:	4013      	ands	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	e005      	b.n	8002d84 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2203      	movs	r2, #3
 8002d80:	4013      	ands	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002d84:	68fb      	ldr	r3, [r7, #12]
}
 8002d86:	0018      	movs	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b004      	add	sp, #16
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d98:	200f      	movs	r0, #15
 8002d9a:	183b      	adds	r3, r7, r0
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	2120      	movs	r1, #32
 8002da0:	5c52      	ldrb	r2, [r2, r1]
 8002da2:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002da4:	0002      	movs	r2, r0
 8002da6:	18bb      	adds	r3, r7, r2
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d003      	beq.n	8002db6 <HAL_CAN_ActivateNotification+0x28>
 8002dae:	18bb      	adds	r3, r7, r2
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d109      	bne.n	8002dca <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6959      	ldr	r1, [r3, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e007      	b.n	8002dda <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	02d2      	lsls	r2, r2, #11
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
  }
}
 8002dda:	0018      	movs	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b004      	add	sp, #16
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dec:	200f      	movs	r0, #15
 8002dee:	183b      	adds	r3, r7, r0
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	2120      	movs	r1, #32
 8002df4:	5c52      	ldrb	r2, [r2, r1]
 8002df6:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002df8:	0002      	movs	r2, r0
 8002dfa:	18bb      	adds	r3, r7, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d003      	beq.n	8002e0a <HAL_CAN_DeactivateNotification+0x28>
 8002e02:	18bb      	adds	r3, r7, r2
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d10a      	bne.n	8002e20 <HAL_CAN_DeactivateNotification+0x3e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	43d9      	mvns	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	400a      	ands	r2, r1
 8002e1a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e007      	b.n	8002e30 <HAL_CAN_DeactivateNotification+0x4e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	02d2      	lsls	r2, r2, #11
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
  }
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b004      	add	sp, #16
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	2201      	movs	r2, #1
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d100      	bne.n	8002e7e <HAL_CAN_IRQHandler+0x46>
 8002e7c:	e084      	b.n	8002f88 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2201      	movs	r2, #1
 8002e82:	4013      	ands	r3, r2
 8002e84:	d024      	beq.n	8002ed0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2202      	movs	r2, #2
 8002e92:	4013      	ands	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f000 f981 	bl	80031a0 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e9e:	e017      	b.n	8002ed0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d005      	beq.n	8002eb4 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	0112      	lsls	r2, r2, #4
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb2:	e00d      	b.n	8002ed0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d005      	beq.n	8002ec8 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	2280      	movs	r2, #128	; 0x80
 8002ec0:	0152      	lsls	r2, r2, #5
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec6:	e003      	b.n	8002ed0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 f980 	bl	80031d0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d028      	beq.n	8002f2c <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	0052      	lsls	r2, r2, #1
 8002ee2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f000 f95d 	bl	80031b0 <HAL_CAN_TxMailbox1CompleteCallback>
 8002ef6:	e019      	b.n	8002f2c <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4013      	ands	r3, r2
 8002f00:	d005      	beq.n	8002f0e <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	2280      	movs	r2, #128	; 0x80
 8002f06:	0192      	lsls	r2, r2, #6
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0c:	e00e      	b.n	8002f2c <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	4013      	ands	r3, r2
 8002f16:	d005      	beq.n	8002f24 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	2280      	movs	r2, #128	; 0x80
 8002f1c:	01d2      	lsls	r2, r2, #7
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
 8002f22:	e003      	b.n	8002f2c <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 f95a 	bl	80031e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	025b      	lsls	r3, r3, #9
 8002f32:	4013      	ands	r3, r2
 8002f34:	d028      	beq.n	8002f88 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	0252      	lsls	r2, r2, #9
 8002f3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	029b      	lsls	r3, r3, #10
 8002f46:	4013      	ands	r3, r2
 8002f48:	d004      	beq.n	8002f54 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 f937 	bl	80031c0 <HAL_CAN_TxMailbox2CompleteCallback>
 8002f52:	e019      	b.n	8002f88 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	02db      	lsls	r3, r3, #11
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d005      	beq.n	8002f6a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	2280      	movs	r2, #128	; 0x80
 8002f62:	0212      	lsls	r2, r2, #8
 8002f64:	4313      	orrs	r3, r2
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
 8002f68:	e00e      	b.n	8002f88 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	031b      	lsls	r3, r3, #12
 8002f70:	4013      	ands	r3, r2
 8002f72:	d005      	beq.n	8002f80 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	2280      	movs	r2, #128	; 0x80
 8002f78:	0252      	lsls	r2, r2, #9
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7e:	e003      	b.n	8002f88 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 f934 	bl	80031f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d00c      	beq.n	8002faa <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2210      	movs	r2, #16
 8002f94:	4013      	ands	r3, r2
 8002f96:	d008      	beq.n	8002faa <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	2280      	movs	r2, #128	; 0x80
 8002f9c:	0092      	lsls	r2, r2, #2
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2210      	movs	r2, #16
 8002fa8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	2204      	movs	r2, #4
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d00b      	beq.n	8002fca <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d007      	beq.n	8002fca <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2208      	movs	r2, #8
 8002fc0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f000 f91b 	bl	8003200 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2203      	movs	r2, #3
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d003      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7fe f9e7 	bl	80013b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	2240      	movs	r2, #64	; 0x40
 8002fea:	4013      	ands	r3, r2
 8002fec:	d00c      	beq.n	8003008 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d008      	beq.n	8003008 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	00d2      	lsls	r2, r2, #3
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2210      	movs	r2, #16
 8003006:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	2220      	movs	r2, #32
 800300c:	4013      	ands	r3, r2
 800300e:	d00b      	beq.n	8003028 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2208      	movs	r2, #8
 8003014:	4013      	ands	r3, r2
 8003016:	d007      	beq.n	8003028 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2208      	movs	r2, #8
 800301e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0018      	movs	r0, r3
 8003024:	f000 f8fc 	bl	8003220 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	2210      	movs	r2, #16
 800302c:	4013      	ands	r3, r2
 800302e:	d009      	beq.n	8003044 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2203      	movs	r2, #3
 8003038:	4013      	ands	r3, r2
 800303a:	d003      	beq.n	8003044 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	0018      	movs	r0, r3
 8003040:	f000 f8e6 	bl	8003210 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003044:	6a3a      	ldr	r2, [r7, #32]
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	029b      	lsls	r3, r3, #10
 800304a:	4013      	ands	r3, r2
 800304c:	d00b      	beq.n	8003066 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	2210      	movs	r2, #16
 8003052:	4013      	ands	r3, r2
 8003054:	d007      	beq.n	8003066 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2210      	movs	r2, #16
 800305c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0018      	movs	r0, r3
 8003062:	f000 f8e5 	bl	8003230 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003066:	6a3a      	ldr	r2, [r7, #32]
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	025b      	lsls	r3, r3, #9
 800306c:	4013      	ands	r3, r2
 800306e:	d00b      	beq.n	8003088 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2208      	movs	r2, #8
 8003074:	4013      	ands	r3, r2
 8003076:	d007      	beq.n	8003088 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2208      	movs	r2, #8
 800307e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	0018      	movs	r0, r3
 8003084:	f000 f8dc 	bl	8003240 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003088:	6a3a      	ldr	r2, [r7, #32]
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	4013      	ands	r3, r2
 8003090:	d100      	bne.n	8003094 <HAL_CAN_IRQHandler+0x25c>
 8003092:	e074      	b.n	800317e <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2204      	movs	r2, #4
 8003098:	4013      	ands	r3, r2
 800309a:	d100      	bne.n	800309e <HAL_CAN_IRQHandler+0x266>
 800309c:	e06b      	b.n	8003176 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800309e:	6a3a      	ldr	r2, [r7, #32]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4013      	ands	r3, r2
 80030a6:	d007      	beq.n	80030b8 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030ae:	d003      	beq.n	80030b8 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	2201      	movs	r2, #1
 80030b4:	4313      	orrs	r3, r2
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80030b8:	6a3a      	ldr	r2, [r7, #32]
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4013      	ands	r3, r2
 80030c0:	d007      	beq.n	80030d2 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2202      	movs	r2, #2
 80030c6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80030c8:	d003      	beq.n	80030d2 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	2202      	movs	r2, #2
 80030ce:	4313      	orrs	r3, r2
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80030d2:	6a3a      	ldr	r2, [r7, #32]
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4013      	ands	r3, r2
 80030da:	d007      	beq.n	80030ec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2204      	movs	r2, #4
 80030e0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80030e2:	d003      	beq.n	80030ec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	2204      	movs	r2, #4
 80030e8:	4313      	orrs	r3, r2
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030ec:	6a3a      	ldr	r2, [r7, #32]
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	4013      	ands	r3, r2
 80030f4:	d03f      	beq.n	8003176 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2270      	movs	r2, #112	; 0x70
 80030fa:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030fc:	d03b      	beq.n	8003176 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2270      	movs	r2, #112	; 0x70
 8003102:	4013      	ands	r3, r2
 8003104:	2b60      	cmp	r3, #96	; 0x60
 8003106:	d027      	beq.n	8003158 <HAL_CAN_IRQHandler+0x320>
 8003108:	d82c      	bhi.n	8003164 <HAL_CAN_IRQHandler+0x32c>
 800310a:	2b50      	cmp	r3, #80	; 0x50
 800310c:	d01f      	beq.n	800314e <HAL_CAN_IRQHandler+0x316>
 800310e:	d829      	bhi.n	8003164 <HAL_CAN_IRQHandler+0x32c>
 8003110:	2b40      	cmp	r3, #64	; 0x40
 8003112:	d017      	beq.n	8003144 <HAL_CAN_IRQHandler+0x30c>
 8003114:	d826      	bhi.n	8003164 <HAL_CAN_IRQHandler+0x32c>
 8003116:	2b30      	cmp	r3, #48	; 0x30
 8003118:	d00f      	beq.n	800313a <HAL_CAN_IRQHandler+0x302>
 800311a:	d823      	bhi.n	8003164 <HAL_CAN_IRQHandler+0x32c>
 800311c:	2b10      	cmp	r3, #16
 800311e:	d002      	beq.n	8003126 <HAL_CAN_IRQHandler+0x2ee>
 8003120:	2b20      	cmp	r3, #32
 8003122:	d005      	beq.n	8003130 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003124:	e01e      	b.n	8003164 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	2208      	movs	r2, #8
 800312a:	4313      	orrs	r3, r2
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800312e:	e01a      	b.n	8003166 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	2210      	movs	r2, #16
 8003134:	4313      	orrs	r3, r2
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003138:	e015      	b.n	8003166 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	2220      	movs	r2, #32
 800313e:	4313      	orrs	r3, r2
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003142:	e010      	b.n	8003166 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	2240      	movs	r2, #64	; 0x40
 8003148:	4313      	orrs	r3, r2
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800314c:	e00b      	b.n	8003166 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	2280      	movs	r2, #128	; 0x80
 8003152:	4313      	orrs	r3, r2
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003156:	e006      	b.n	8003166 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	2280      	movs	r2, #128	; 0x80
 800315c:	0052      	lsls	r2, r2, #1
 800315e:	4313      	orrs	r3, r2
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003162:	e000      	b.n	8003166 <HAL_CAN_IRQHandler+0x32e>
            break;
 8003164:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	699a      	ldr	r2, [r3, #24]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2170      	movs	r1, #112	; 0x70
 8003172:	438a      	bics	r2, r1
 8003174:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2204      	movs	r2, #4
 800317c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	2b00      	cmp	r3, #0
 8003182:	d009      	beq.n	8003198 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	0018      	movs	r0, r3
 8003194:	f000 f85c 	bl	8003250 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b00a      	add	sp, #40	; 0x28
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b002      	add	sp, #8
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80031b8:	46c0      	nop			; (mov r8, r8)
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b002      	add	sp, #8
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b002      	add	sp, #8
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b002      	add	sp, #8
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003208:	46c0      	nop			; (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	b002      	add	sp, #8
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	46bd      	mov	sp, r7
 800321c:	b002      	add	sp, #8
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003228:	46c0      	nop			; (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b002      	add	sp, #8
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b002      	add	sp, #8
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	b002      	add	sp, #8
 800325e:	bd80      	pop	{r7, pc}

08003260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	0002      	movs	r2, r0
 8003268:	1dfb      	adds	r3, r7, #7
 800326a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800326c:	1dfb      	adds	r3, r7, #7
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b7f      	cmp	r3, #127	; 0x7f
 8003272:	d809      	bhi.n	8003288 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003274:	1dfb      	adds	r3, r7, #7
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	001a      	movs	r2, r3
 800327a:	231f      	movs	r3, #31
 800327c:	401a      	ands	r2, r3
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <__NVIC_EnableIRQ+0x30>)
 8003280:	2101      	movs	r1, #1
 8003282:	4091      	lsls	r1, r2
 8003284:	000a      	movs	r2, r1
 8003286:	601a      	str	r2, [r3, #0]
  }
}
 8003288:	46c0      	nop			; (mov r8, r8)
 800328a:	46bd      	mov	sp, r7
 800328c:	b002      	add	sp, #8
 800328e:	bd80      	pop	{r7, pc}
 8003290:	e000e100 	.word	0xe000e100

08003294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	0002      	movs	r2, r0
 800329c:	6039      	str	r1, [r7, #0]
 800329e:	1dfb      	adds	r3, r7, #7
 80032a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032a2:	1dfb      	adds	r3, r7, #7
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b7f      	cmp	r3, #127	; 0x7f
 80032a8:	d828      	bhi.n	80032fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032aa:	4a2f      	ldr	r2, [pc, #188]	; (8003368 <__NVIC_SetPriority+0xd4>)
 80032ac:	1dfb      	adds	r3, r7, #7
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b25b      	sxtb	r3, r3
 80032b2:	089b      	lsrs	r3, r3, #2
 80032b4:	33c0      	adds	r3, #192	; 0xc0
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	589b      	ldr	r3, [r3, r2]
 80032ba:	1dfa      	adds	r2, r7, #7
 80032bc:	7812      	ldrb	r2, [r2, #0]
 80032be:	0011      	movs	r1, r2
 80032c0:	2203      	movs	r2, #3
 80032c2:	400a      	ands	r2, r1
 80032c4:	00d2      	lsls	r2, r2, #3
 80032c6:	21ff      	movs	r1, #255	; 0xff
 80032c8:	4091      	lsls	r1, r2
 80032ca:	000a      	movs	r2, r1
 80032cc:	43d2      	mvns	r2, r2
 80032ce:	401a      	ands	r2, r3
 80032d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	019b      	lsls	r3, r3, #6
 80032d6:	22ff      	movs	r2, #255	; 0xff
 80032d8:	401a      	ands	r2, r3
 80032da:	1dfb      	adds	r3, r7, #7
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	0018      	movs	r0, r3
 80032e0:	2303      	movs	r3, #3
 80032e2:	4003      	ands	r3, r0
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032e8:	481f      	ldr	r0, [pc, #124]	; (8003368 <__NVIC_SetPriority+0xd4>)
 80032ea:	1dfb      	adds	r3, r7, #7
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	b25b      	sxtb	r3, r3
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	430a      	orrs	r2, r1
 80032f4:	33c0      	adds	r3, #192	; 0xc0
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80032fa:	e031      	b.n	8003360 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032fc:	4a1b      	ldr	r2, [pc, #108]	; (800336c <__NVIC_SetPriority+0xd8>)
 80032fe:	1dfb      	adds	r3, r7, #7
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	0019      	movs	r1, r3
 8003304:	230f      	movs	r3, #15
 8003306:	400b      	ands	r3, r1
 8003308:	3b08      	subs	r3, #8
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	3306      	adds	r3, #6
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	18d3      	adds	r3, r2, r3
 8003312:	3304      	adds	r3, #4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	1dfa      	adds	r2, r7, #7
 8003318:	7812      	ldrb	r2, [r2, #0]
 800331a:	0011      	movs	r1, r2
 800331c:	2203      	movs	r2, #3
 800331e:	400a      	ands	r2, r1
 8003320:	00d2      	lsls	r2, r2, #3
 8003322:	21ff      	movs	r1, #255	; 0xff
 8003324:	4091      	lsls	r1, r2
 8003326:	000a      	movs	r2, r1
 8003328:	43d2      	mvns	r2, r2
 800332a:	401a      	ands	r2, r3
 800332c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	019b      	lsls	r3, r3, #6
 8003332:	22ff      	movs	r2, #255	; 0xff
 8003334:	401a      	ands	r2, r3
 8003336:	1dfb      	adds	r3, r7, #7
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	0018      	movs	r0, r3
 800333c:	2303      	movs	r3, #3
 800333e:	4003      	ands	r3, r0
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003344:	4809      	ldr	r0, [pc, #36]	; (800336c <__NVIC_SetPriority+0xd8>)
 8003346:	1dfb      	adds	r3, r7, #7
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	001c      	movs	r4, r3
 800334c:	230f      	movs	r3, #15
 800334e:	4023      	ands	r3, r4
 8003350:	3b08      	subs	r3, #8
 8003352:	089b      	lsrs	r3, r3, #2
 8003354:	430a      	orrs	r2, r1
 8003356:	3306      	adds	r3, #6
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	18c3      	adds	r3, r0, r3
 800335c:	3304      	adds	r3, #4
 800335e:	601a      	str	r2, [r3, #0]
}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b003      	add	sp, #12
 8003366:	bd90      	pop	{r4, r7, pc}
 8003368:	e000e100 	.word	0xe000e100
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
 800337a:	210f      	movs	r1, #15
 800337c:	187b      	adds	r3, r7, r1
 800337e:	1c02      	adds	r2, r0, #0
 8003380:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	187b      	adds	r3, r7, r1
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	b25b      	sxtb	r3, r3
 800338a:	0011      	movs	r1, r2
 800338c:	0018      	movs	r0, r3
 800338e:	f7ff ff81 	bl	8003294 <__NVIC_SetPriority>
}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b004      	add	sp, #16
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	0002      	movs	r2, r0
 80033a2:	1dfb      	adds	r3, r7, #7
 80033a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a6:	1dfb      	adds	r3, r7, #7
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b25b      	sxtb	r3, r3
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7ff ff57 	bl	8003260 <__NVIC_EnableIRQ>
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b002      	add	sp, #8
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ca:	e155      	b.n	8003678 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2101      	movs	r1, #1
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4091      	lsls	r1, r2
 80033d6:	000a      	movs	r2, r1
 80033d8:	4013      	ands	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d100      	bne.n	80033e4 <HAL_GPIO_Init+0x28>
 80033e2:	e146      	b.n	8003672 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2203      	movs	r2, #3
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d005      	beq.n	80033fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2203      	movs	r2, #3
 80033f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d130      	bne.n	800345e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	2203      	movs	r2, #3
 8003408:	409a      	lsls	r2, r3
 800340a:	0013      	movs	r3, r2
 800340c:	43da      	mvns	r2, r3
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4013      	ands	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	409a      	lsls	r2, r3
 800341e:	0013      	movs	r3, r2
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003432:	2201      	movs	r2, #1
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	409a      	lsls	r2, r3
 8003438:	0013      	movs	r3, r2
 800343a:	43da      	mvns	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	2201      	movs	r2, #1
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	409a      	lsls	r2, r3
 8003450:	0013      	movs	r3, r2
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2203      	movs	r2, #3
 8003464:	4013      	ands	r3, r2
 8003466:	2b03      	cmp	r3, #3
 8003468:	d017      	beq.n	800349a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	2203      	movs	r2, #3
 8003476:	409a      	lsls	r2, r3
 8003478:	0013      	movs	r3, r2
 800347a:	43da      	mvns	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4013      	ands	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	409a      	lsls	r2, r3
 800348c:	0013      	movs	r3, r2
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2203      	movs	r2, #3
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d123      	bne.n	80034ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	08da      	lsrs	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3208      	adds	r2, #8
 80034ae:	0092      	lsls	r2, r2, #2
 80034b0:	58d3      	ldr	r3, [r2, r3]
 80034b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2207      	movs	r2, #7
 80034b8:	4013      	ands	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	220f      	movs	r2, #15
 80034be:	409a      	lsls	r2, r3
 80034c0:	0013      	movs	r3, r2
 80034c2:	43da      	mvns	r2, r3
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2107      	movs	r1, #7
 80034d2:	400b      	ands	r3, r1
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	409a      	lsls	r2, r3
 80034d8:	0013      	movs	r3, r2
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	08da      	lsrs	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3208      	adds	r2, #8
 80034e8:	0092      	lsls	r2, r2, #2
 80034ea:	6939      	ldr	r1, [r7, #16]
 80034ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	2203      	movs	r2, #3
 80034fa:	409a      	lsls	r2, r3
 80034fc:	0013      	movs	r3, r2
 80034fe:	43da      	mvns	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2203      	movs	r2, #3
 800350c:	401a      	ands	r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	409a      	lsls	r2, r3
 8003514:	0013      	movs	r3, r2
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	23c0      	movs	r3, #192	; 0xc0
 8003528:	029b      	lsls	r3, r3, #10
 800352a:	4013      	ands	r3, r2
 800352c:	d100      	bne.n	8003530 <HAL_GPIO_Init+0x174>
 800352e:	e0a0      	b.n	8003672 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003530:	4b57      	ldr	r3, [pc, #348]	; (8003690 <HAL_GPIO_Init+0x2d4>)
 8003532:	699a      	ldr	r2, [r3, #24]
 8003534:	4b56      	ldr	r3, [pc, #344]	; (8003690 <HAL_GPIO_Init+0x2d4>)
 8003536:	2101      	movs	r1, #1
 8003538:	430a      	orrs	r2, r1
 800353a:	619a      	str	r2, [r3, #24]
 800353c:	4b54      	ldr	r3, [pc, #336]	; (8003690 <HAL_GPIO_Init+0x2d4>)
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	2201      	movs	r2, #1
 8003542:	4013      	ands	r3, r2
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003548:	4a52      	ldr	r2, [pc, #328]	; (8003694 <HAL_GPIO_Init+0x2d8>)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	089b      	lsrs	r3, r3, #2
 800354e:	3302      	adds	r3, #2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	589b      	ldr	r3, [r3, r2]
 8003554:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2203      	movs	r2, #3
 800355a:	4013      	ands	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	220f      	movs	r2, #15
 8003560:	409a      	lsls	r2, r3
 8003562:	0013      	movs	r3, r2
 8003564:	43da      	mvns	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	2390      	movs	r3, #144	; 0x90
 8003570:	05db      	lsls	r3, r3, #23
 8003572:	429a      	cmp	r2, r3
 8003574:	d019      	beq.n	80035aa <HAL_GPIO_Init+0x1ee>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a47      	ldr	r2, [pc, #284]	; (8003698 <HAL_GPIO_Init+0x2dc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_GPIO_Init+0x1ea>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a46      	ldr	r2, [pc, #280]	; (800369c <HAL_GPIO_Init+0x2e0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00d      	beq.n	80035a2 <HAL_GPIO_Init+0x1e6>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a45      	ldr	r2, [pc, #276]	; (80036a0 <HAL_GPIO_Init+0x2e4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <HAL_GPIO_Init+0x1e2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a44      	ldr	r2, [pc, #272]	; (80036a4 <HAL_GPIO_Init+0x2e8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_GPIO_Init+0x1de>
 8003596:	2304      	movs	r3, #4
 8003598:	e008      	b.n	80035ac <HAL_GPIO_Init+0x1f0>
 800359a:	2305      	movs	r3, #5
 800359c:	e006      	b.n	80035ac <HAL_GPIO_Init+0x1f0>
 800359e:	2303      	movs	r3, #3
 80035a0:	e004      	b.n	80035ac <HAL_GPIO_Init+0x1f0>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e002      	b.n	80035ac <HAL_GPIO_Init+0x1f0>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_GPIO_Init+0x1f0>
 80035aa:	2300      	movs	r3, #0
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	2103      	movs	r1, #3
 80035b0:	400a      	ands	r2, r1
 80035b2:	0092      	lsls	r2, r2, #2
 80035b4:	4093      	lsls	r3, r2
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035bc:	4935      	ldr	r1, [pc, #212]	; (8003694 <HAL_GPIO_Init+0x2d8>)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	089b      	lsrs	r3, r3, #2
 80035c2:	3302      	adds	r3, #2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ca:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <HAL_GPIO_Init+0x2ec>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	43da      	mvns	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	025b      	lsls	r3, r3, #9
 80035e2:	4013      	ands	r3, r2
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035ee:	4b2e      	ldr	r3, [pc, #184]	; (80036a8 <HAL_GPIO_Init+0x2ec>)
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80035f4:	4b2c      	ldr	r3, [pc, #176]	; (80036a8 <HAL_GPIO_Init+0x2ec>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	43da      	mvns	r2, r3
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	029b      	lsls	r3, r3, #10
 800360c:	4013      	ands	r3, r2
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003618:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_GPIO_Init+0x2ec>)
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800361e:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <HAL_GPIO_Init+0x2ec>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	43da      	mvns	r2, r3
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4013      	ands	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	2380      	movs	r3, #128	; 0x80
 8003634:	035b      	lsls	r3, r3, #13
 8003636:	4013      	ands	r3, r2
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003642:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_GPIO_Init+0x2ec>)
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003648:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <HAL_GPIO_Init+0x2ec>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	43da      	mvns	r2, r3
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	039b      	lsls	r3, r3, #14
 8003660:	4013      	ands	r3, r2
 8003662:	d003      	beq.n	800366c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800366c:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <HAL_GPIO_Init+0x2ec>)
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	3301      	adds	r3, #1
 8003676:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	40da      	lsrs	r2, r3
 8003680:	1e13      	subs	r3, r2, #0
 8003682:	d000      	beq.n	8003686 <HAL_GPIO_Init+0x2ca>
 8003684:	e6a2      	b.n	80033cc <HAL_GPIO_Init+0x10>
  } 
}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	b006      	add	sp, #24
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40021000 	.word	0x40021000
 8003694:	40010000 	.word	0x40010000
 8003698:	48000400 	.word	0x48000400
 800369c:	48000800 	.word	0x48000800
 80036a0:	48000c00 	.word	0x48000c00
 80036a4:	48001000 	.word	0x48001000
 80036a8:	40010400 	.word	0x40010400

080036ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80036ba:	e0b7      	b.n	800382c <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80036bc:	2201      	movs	r2, #1
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	409a      	lsls	r2, r3
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	4013      	ands	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d100      	bne.n	80036d0 <HAL_GPIO_DeInit+0x24>
 80036ce:	e0aa      	b.n	8003826 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80036d0:	4a5c      	ldr	r2, [pc, #368]	; (8003844 <HAL_GPIO_DeInit+0x198>)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	089b      	lsrs	r3, r3, #2
 80036d6:	3302      	adds	r3, #2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	589b      	ldr	r3, [r3, r2]
 80036dc:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2203      	movs	r2, #3
 80036e2:	4013      	ands	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	220f      	movs	r2, #15
 80036e8:	409a      	lsls	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4013      	ands	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	2390      	movs	r3, #144	; 0x90
 80036f4:	05db      	lsls	r3, r3, #23
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d019      	beq.n	800372e <HAL_GPIO_DeInit+0x82>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a52      	ldr	r2, [pc, #328]	; (8003848 <HAL_GPIO_DeInit+0x19c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_GPIO_DeInit+0x7e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a51      	ldr	r2, [pc, #324]	; (800384c <HAL_GPIO_DeInit+0x1a0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00d      	beq.n	8003726 <HAL_GPIO_DeInit+0x7a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a50      	ldr	r2, [pc, #320]	; (8003850 <HAL_GPIO_DeInit+0x1a4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <HAL_GPIO_DeInit+0x76>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4f      	ldr	r2, [pc, #316]	; (8003854 <HAL_GPIO_DeInit+0x1a8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_GPIO_DeInit+0x72>
 800371a:	2304      	movs	r3, #4
 800371c:	e008      	b.n	8003730 <HAL_GPIO_DeInit+0x84>
 800371e:	2305      	movs	r3, #5
 8003720:	e006      	b.n	8003730 <HAL_GPIO_DeInit+0x84>
 8003722:	2303      	movs	r3, #3
 8003724:	e004      	b.n	8003730 <HAL_GPIO_DeInit+0x84>
 8003726:	2302      	movs	r3, #2
 8003728:	e002      	b.n	8003730 <HAL_GPIO_DeInit+0x84>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <HAL_GPIO_DeInit+0x84>
 800372e:	2300      	movs	r3, #0
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	2103      	movs	r1, #3
 8003734:	400a      	ands	r2, r1
 8003736:	0092      	lsls	r2, r2, #2
 8003738:	4093      	lsls	r3, r2
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	429a      	cmp	r2, r3
 800373e:	d132      	bne.n	80037a6 <HAL_GPIO_DeInit+0xfa>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003740:	4b45      	ldr	r3, [pc, #276]	; (8003858 <HAL_GPIO_DeInit+0x1ac>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	43d9      	mvns	r1, r3
 8003748:	4b43      	ldr	r3, [pc, #268]	; (8003858 <HAL_GPIO_DeInit+0x1ac>)
 800374a:	400a      	ands	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800374e:	4b42      	ldr	r3, [pc, #264]	; (8003858 <HAL_GPIO_DeInit+0x1ac>)
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	43d9      	mvns	r1, r3
 8003756:	4b40      	ldr	r3, [pc, #256]	; (8003858 <HAL_GPIO_DeInit+0x1ac>)
 8003758:	400a      	ands	r2, r1
 800375a:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800375c:	4b3e      	ldr	r3, [pc, #248]	; (8003858 <HAL_GPIO_DeInit+0x1ac>)
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	43d9      	mvns	r1, r3
 8003764:	4b3c      	ldr	r3, [pc, #240]	; (8003858 <HAL_GPIO_DeInit+0x1ac>)
 8003766:	400a      	ands	r2, r1
 8003768:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800376a:	4b3b      	ldr	r3, [pc, #236]	; (8003858 <HAL_GPIO_DeInit+0x1ac>)
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	43d9      	mvns	r1, r3
 8003772:	4b39      	ldr	r3, [pc, #228]	; (8003858 <HAL_GPIO_DeInit+0x1ac>)
 8003774:	400a      	ands	r2, r1
 8003776:	60da      	str	r2, [r3, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2203      	movs	r2, #3
 800377c:	4013      	ands	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	220f      	movs	r2, #15
 8003782:	409a      	lsls	r2, r3
 8003784:	0013      	movs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003788:	4a2e      	ldr	r2, [pc, #184]	; (8003844 <HAL_GPIO_DeInit+0x198>)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	089b      	lsrs	r3, r3, #2
 800378e:	3302      	adds	r3, #2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	589a      	ldr	r2, [r3, r2]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	43d9      	mvns	r1, r3
 8003798:	482a      	ldr	r0, [pc, #168]	; (8003844 <HAL_GPIO_DeInit+0x198>)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	089b      	lsrs	r3, r3, #2
 800379e:	400a      	ands	r2, r1
 80037a0:	3302      	adds	r3, #2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	0052      	lsls	r2, r2, #1
 80037ae:	2103      	movs	r1, #3
 80037b0:	4091      	lsls	r1, r2
 80037b2:	000a      	movs	r2, r1
 80037b4:	43d2      	mvns	r2, r2
 80037b6:	401a      	ands	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	08da      	lsrs	r2, r3, #3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3208      	adds	r2, #8
 80037c4:	0092      	lsls	r2, r2, #2
 80037c6:	58d3      	ldr	r3, [r2, r3]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	2107      	movs	r1, #7
 80037cc:	400a      	ands	r2, r1
 80037ce:	0092      	lsls	r2, r2, #2
 80037d0:	210f      	movs	r1, #15
 80037d2:	4091      	lsls	r1, r2
 80037d4:	000a      	movs	r2, r1
 80037d6:	43d1      	mvns	r1, r2
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	08d2      	lsrs	r2, r2, #3
 80037dc:	4019      	ands	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3208      	adds	r2, #8
 80037e2:	0092      	lsls	r2, r2, #2
 80037e4:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	0052      	lsls	r2, r2, #1
 80037ee:	2103      	movs	r1, #3
 80037f0:	4091      	lsls	r1, r2
 80037f2:	000a      	movs	r2, r1
 80037f4:	43d2      	mvns	r2, r2
 80037f6:	401a      	ands	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2101      	movs	r1, #1
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4091      	lsls	r1, r2
 8003806:	000a      	movs	r2, r1
 8003808:	43d2      	mvns	r2, r2
 800380a:	401a      	ands	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	0052      	lsls	r2, r2, #1
 8003818:	2103      	movs	r1, #3
 800381a:	4091      	lsls	r1, r2
 800381c:	000a      	movs	r2, r1
 800381e:	43d2      	mvns	r2, r2
 8003820:	401a      	ands	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	609a      	str	r2, [r3, #8]

    }

    position++;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3301      	adds	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	40da      	lsrs	r2, r3
 8003832:	1e13      	subs	r3, r2, #0
 8003834:	d000      	beq.n	8003838 <HAL_GPIO_DeInit+0x18c>
 8003836:	e741      	b.n	80036bc <HAL_GPIO_DeInit+0x10>
  }
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	b006      	add	sp, #24
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	40010000 	.word	0x40010000
 8003848:	48000400 	.word	0x48000400
 800384c:	48000800 	.word	0x48000800
 8003850:	48000c00 	.word	0x48000c00
 8003854:	48001000 	.word	0x48001000
 8003858:	40010400 	.word	0x40010400

0800385c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	0008      	movs	r0, r1
 8003866:	0011      	movs	r1, r2
 8003868:	1cbb      	adds	r3, r7, #2
 800386a:	1c02      	adds	r2, r0, #0
 800386c:	801a      	strh	r2, [r3, #0]
 800386e:	1c7b      	adds	r3, r7, #1
 8003870:	1c0a      	adds	r2, r1, #0
 8003872:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003874:	1c7b      	adds	r3, r7, #1
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800387c:	1cbb      	adds	r3, r7, #2
 800387e:	881a      	ldrh	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003884:	e003      	b.n	800388e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003886:	1cbb      	adds	r3, r7, #2
 8003888:	881a      	ldrh	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b002      	add	sp, #8
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	000a      	movs	r2, r1
 80038a0:	1cbb      	adds	r3, r7, #2
 80038a2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038aa:	1cbb      	adds	r3, r7, #2
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4013      	ands	r3, r2
 80038b2:	041a      	lsls	r2, r3, #16
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	43db      	mvns	r3, r3
 80038b8:	1cb9      	adds	r1, r7, #2
 80038ba:	8809      	ldrh	r1, [r1, #0]
 80038bc:	400b      	ands	r3, r1
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	619a      	str	r2, [r3, #24]
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b004      	add	sp, #16
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e082      	b.n	80039e4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2241      	movs	r2, #65	; 0x41
 80038e2:	5c9b      	ldrb	r3, [r3, r2]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d107      	bne.n	80038fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2240      	movs	r2, #64	; 0x40
 80038ee:	2100      	movs	r1, #0
 80038f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 f8af 	bl	8003a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2241      	movs	r2, #65	; 0x41
 80038fe:	2124      	movs	r1, #36	; 0x24
 8003900:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2101      	movs	r1, #1
 800390e:	438a      	bics	r2, r1
 8003910:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4934      	ldr	r1, [pc, #208]	; (80039ec <HAL_I2C_Init+0x120>)
 800391c:	400a      	ands	r2, r1
 800391e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4931      	ldr	r1, [pc, #196]	; (80039f0 <HAL_I2C_Init+0x124>)
 800392c:	400a      	ands	r2, r1
 800392e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d108      	bne.n	800394a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2180      	movs	r1, #128	; 0x80
 8003942:	0209      	lsls	r1, r1, #8
 8003944:	430a      	orrs	r2, r1
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	e007      	b.n	800395a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2184      	movs	r1, #132	; 0x84
 8003954:	0209      	lsls	r1, r1, #8
 8003956:	430a      	orrs	r2, r1
 8003958:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d104      	bne.n	800396c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	0112      	lsls	r2, r2, #4
 800396a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	491f      	ldr	r1, [pc, #124]	; (80039f4 <HAL_I2C_Init+0x128>)
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	491a      	ldr	r1, [pc, #104]	; (80039f0 <HAL_I2C_Init+0x124>)
 8003988:	400a      	ands	r2, r1
 800398a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	431a      	orrs	r2, r3
 8003996:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69d9      	ldr	r1, [r3, #28]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1a      	ldr	r2, [r3, #32]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2101      	movs	r1, #1
 80039c2:	430a      	orrs	r2, r1
 80039c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2241      	movs	r2, #65	; 0x41
 80039d0:	2120      	movs	r1, #32
 80039d2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2242      	movs	r2, #66	; 0x42
 80039de:	2100      	movs	r1, #0
 80039e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	0018      	movs	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	f0ffffff 	.word	0xf0ffffff
 80039f0:	ffff7fff 	.word	0xffff7fff
 80039f4:	02008000 	.word	0x02008000

080039f8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e022      	b.n	8003a50 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2241      	movs	r2, #65	; 0x41
 8003a0e:	2124      	movs	r1, #36	; 0x24
 8003a10:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	438a      	bics	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f000 f81f 	bl	8003a68 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2241      	movs	r2, #65	; 0x41
 8003a34:	2100      	movs	r1, #0
 8003a36:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2242      	movs	r2, #66	; 0x42
 8003a42:	2100      	movs	r1, #0
 8003a44:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2240      	movs	r2, #64	; 0x40
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b002      	add	sp, #8
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b002      	add	sp, #8
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b002      	add	sp, #8
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a78:	b590      	push	{r4, r7, lr}
 8003a7a:	b089      	sub	sp, #36	; 0x24
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	000c      	movs	r4, r1
 8003a82:	0010      	movs	r0, r2
 8003a84:	0019      	movs	r1, r3
 8003a86:	230a      	movs	r3, #10
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	1c22      	adds	r2, r4, #0
 8003a8c:	801a      	strh	r2, [r3, #0]
 8003a8e:	2308      	movs	r3, #8
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	1c02      	adds	r2, r0, #0
 8003a94:	801a      	strh	r2, [r3, #0]
 8003a96:	1dbb      	adds	r3, r7, #6
 8003a98:	1c0a      	adds	r2, r1, #0
 8003a9a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2241      	movs	r2, #65	; 0x41
 8003aa0:	5c9b      	ldrb	r3, [r3, r2]
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d000      	beq.n	8003aaa <HAL_I2C_Mem_Write+0x32>
 8003aa8:	e10c      	b.n	8003cc4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d004      	beq.n	8003aba <HAL_I2C_Mem_Write+0x42>
 8003ab0:	232c      	movs	r3, #44	; 0x2c
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d105      	bne.n	8003ac6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	0092      	lsls	r2, r2, #2
 8003ac0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e0ff      	b.n	8003cc6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2240      	movs	r2, #64	; 0x40
 8003aca:	5c9b      	ldrb	r3, [r3, r2]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_I2C_Mem_Write+0x5c>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e0f8      	b.n	8003cc6 <HAL_I2C_Mem_Write+0x24e>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2240      	movs	r2, #64	; 0x40
 8003ad8:	2101      	movs	r1, #1
 8003ada:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003adc:	f7fe fcba 	bl	8002454 <HAL_GetTick>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	0219      	lsls	r1, r3, #8
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	2319      	movs	r3, #25
 8003af0:	2201      	movs	r2, #1
 8003af2:	f000 fb21 	bl	8004138 <I2C_WaitOnFlagUntilTimeout>
 8003af6:	1e03      	subs	r3, r0, #0
 8003af8:	d001      	beq.n	8003afe <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e0e3      	b.n	8003cc6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2241      	movs	r2, #65	; 0x41
 8003b02:	2121      	movs	r1, #33	; 0x21
 8003b04:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2242      	movs	r2, #66	; 0x42
 8003b0a:	2140      	movs	r1, #64	; 0x40
 8003b0c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	222c      	movs	r2, #44	; 0x2c
 8003b1e:	18ba      	adds	r2, r7, r2
 8003b20:	8812      	ldrh	r2, [r2, #0]
 8003b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b2a:	1dbb      	adds	r3, r7, #6
 8003b2c:	881c      	ldrh	r4, [r3, #0]
 8003b2e:	2308      	movs	r3, #8
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	881a      	ldrh	r2, [r3, #0]
 8003b34:	230a      	movs	r3, #10
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	8819      	ldrh	r1, [r3, #0]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	0023      	movs	r3, r4
 8003b46:	f000 fa0f 	bl	8003f68 <I2C_RequestMemoryWrite>
 8003b4a:	1e03      	subs	r3, r0, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2240      	movs	r2, #64	; 0x40
 8003b52:	2100      	movs	r1, #0
 8003b54:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e0b5      	b.n	8003cc6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2bff      	cmp	r3, #255	; 0xff
 8003b62:	d911      	bls.n	8003b88 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	22ff      	movs	r2, #255	; 0xff
 8003b68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	045c      	lsls	r4, r3, #17
 8003b74:	230a      	movs	r3, #10
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	8819      	ldrh	r1, [r3, #0]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	0023      	movs	r3, r4
 8003b82:	f000 fc0d 	bl	80043a0 <I2C_TransferConfig>
 8003b86:	e012      	b.n	8003bae <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	049c      	lsls	r4, r3, #18
 8003b9c:	230a      	movs	r3, #10
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	8819      	ldrh	r1, [r3, #0]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	0023      	movs	r3, r4
 8003baa:	f000 fbf9 	bl	80043a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f000 fafe 	bl	80041b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bba:	1e03      	subs	r3, r0, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e081      	b.n	8003cc6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	781a      	ldrb	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d03a      	beq.n	8003c72 <HAL_I2C_Mem_Write+0x1fa>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d136      	bne.n	8003c72 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	0013      	movs	r3, r2
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2180      	movs	r1, #128	; 0x80
 8003c12:	f000 fa91 	bl	8004138 <I2C_WaitOnFlagUntilTimeout>
 8003c16:	1e03      	subs	r3, r0, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e053      	b.n	8003cc6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2bff      	cmp	r3, #255	; 0xff
 8003c26:	d911      	bls.n	8003c4c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	22ff      	movs	r2, #255	; 0xff
 8003c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	045c      	lsls	r4, r3, #17
 8003c38:	230a      	movs	r3, #10
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	8819      	ldrh	r1, [r3, #0]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	2300      	movs	r3, #0
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	0023      	movs	r3, r4
 8003c46:	f000 fbab 	bl	80043a0 <I2C_TransferConfig>
 8003c4a:	e012      	b.n	8003c72 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	049c      	lsls	r4, r3, #18
 8003c60:	230a      	movs	r3, #10
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	8819      	ldrh	r1, [r3, #0]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	0023      	movs	r3, r4
 8003c6e:	f000 fb97 	bl	80043a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d198      	bne.n	8003bae <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	0018      	movs	r0, r3
 8003c84:	f000 fad6 	bl	8004234 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c88:	1e03      	subs	r3, r0, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e01a      	b.n	8003cc6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2220      	movs	r2, #32
 8003c96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	490b      	ldr	r1, [pc, #44]	; (8003cd0 <HAL_I2C_Mem_Write+0x258>)
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2241      	movs	r2, #65	; 0x41
 8003cac:	2120      	movs	r1, #32
 8003cae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2242      	movs	r2, #66	; 0x42
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2240      	movs	r2, #64	; 0x40
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e000      	b.n	8003cc6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003cc4:	2302      	movs	r3, #2
  }
}
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b007      	add	sp, #28
 8003ccc:	bd90      	pop	{r4, r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	fe00e800 	.word	0xfe00e800

08003cd4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b089      	sub	sp, #36	; 0x24
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	000c      	movs	r4, r1
 8003cde:	0010      	movs	r0, r2
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	230a      	movs	r3, #10
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	1c22      	adds	r2, r4, #0
 8003ce8:	801a      	strh	r2, [r3, #0]
 8003cea:	2308      	movs	r3, #8
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	1c02      	adds	r2, r0, #0
 8003cf0:	801a      	strh	r2, [r3, #0]
 8003cf2:	1dbb      	adds	r3, r7, #6
 8003cf4:	1c0a      	adds	r2, r1, #0
 8003cf6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2241      	movs	r2, #65	; 0x41
 8003cfc:	5c9b      	ldrb	r3, [r3, r2]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d000      	beq.n	8003d06 <HAL_I2C_Mem_Read+0x32>
 8003d04:	e110      	b.n	8003f28 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d004      	beq.n	8003d16 <HAL_I2C_Mem_Read+0x42>
 8003d0c:	232c      	movs	r3, #44	; 0x2c
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d105      	bne.n	8003d22 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2280      	movs	r2, #128	; 0x80
 8003d1a:	0092      	lsls	r2, r2, #2
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e103      	b.n	8003f2a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2240      	movs	r2, #64	; 0x40
 8003d26:	5c9b      	ldrb	r3, [r3, r2]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_I2C_Mem_Read+0x5c>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e0fc      	b.n	8003f2a <HAL_I2C_Mem_Read+0x256>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2240      	movs	r2, #64	; 0x40
 8003d34:	2101      	movs	r1, #1
 8003d36:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d38:	f7fe fb8c 	bl	8002454 <HAL_GetTick>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	0219      	lsls	r1, r3, #8
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2319      	movs	r3, #25
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f000 f9f3 	bl	8004138 <I2C_WaitOnFlagUntilTimeout>
 8003d52:	1e03      	subs	r3, r0, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e0e7      	b.n	8003f2a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2241      	movs	r2, #65	; 0x41
 8003d5e:	2122      	movs	r1, #34	; 0x22
 8003d60:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2242      	movs	r2, #66	; 0x42
 8003d66:	2140      	movs	r1, #64	; 0x40
 8003d68:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	222c      	movs	r2, #44	; 0x2c
 8003d7a:	18ba      	adds	r2, r7, r2
 8003d7c:	8812      	ldrh	r2, [r2, #0]
 8003d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d86:	1dbb      	adds	r3, r7, #6
 8003d88:	881c      	ldrh	r4, [r3, #0]
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	881a      	ldrh	r2, [r3, #0]
 8003d90:	230a      	movs	r3, #10
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	8819      	ldrh	r1, [r3, #0]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	9301      	str	r3, [sp, #4]
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	0023      	movs	r3, r4
 8003da2:	f000 f945 	bl	8004030 <I2C_RequestMemoryRead>
 8003da6:	1e03      	subs	r3, r0, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2240      	movs	r2, #64	; 0x40
 8003dae:	2100      	movs	r1, #0
 8003db0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e0b9      	b.n	8003f2a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2bff      	cmp	r3, #255	; 0xff
 8003dbe:	d911      	bls.n	8003de4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	22ff      	movs	r2, #255	; 0xff
 8003dc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	045c      	lsls	r4, r3, #17
 8003dd0:	230a      	movs	r3, #10
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	8819      	ldrh	r1, [r3, #0]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	4b56      	ldr	r3, [pc, #344]	; (8003f34 <HAL_I2C_Mem_Read+0x260>)
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	0023      	movs	r3, r4
 8003dde:	f000 fadf 	bl	80043a0 <I2C_TransferConfig>
 8003de2:	e012      	b.n	8003e0a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	049c      	lsls	r4, r3, #18
 8003df8:	230a      	movs	r3, #10
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	8819      	ldrh	r1, [r3, #0]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	4b4c      	ldr	r3, [pc, #304]	; (8003f34 <HAL_I2C_Mem_Read+0x260>)
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	0023      	movs	r3, r4
 8003e06:	f000 facb 	bl	80043a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	0013      	movs	r3, r2
 8003e14:	2200      	movs	r2, #0
 8003e16:	2104      	movs	r1, #4
 8003e18:	f000 f98e 	bl	8004138 <I2C_WaitOnFlagUntilTimeout>
 8003e1c:	1e03      	subs	r3, r0, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e082      	b.n	8003f2a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d03a      	beq.n	8003ed6 <HAL_I2C_Mem_Read+0x202>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d136      	bne.n	8003ed6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	0013      	movs	r3, r2
 8003e72:	2200      	movs	r2, #0
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	f000 f95f 	bl	8004138 <I2C_WaitOnFlagUntilTimeout>
 8003e7a:	1e03      	subs	r3, r0, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e053      	b.n	8003f2a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2bff      	cmp	r3, #255	; 0xff
 8003e8a:	d911      	bls.n	8003eb0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	22ff      	movs	r2, #255	; 0xff
 8003e90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	045c      	lsls	r4, r3, #17
 8003e9c:	230a      	movs	r3, #10
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	8819      	ldrh	r1, [r3, #0]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	0023      	movs	r3, r4
 8003eaa:	f000 fa79 	bl	80043a0 <I2C_TransferConfig>
 8003eae:	e012      	b.n	8003ed6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	049c      	lsls	r4, r3, #18
 8003ec4:	230a      	movs	r3, #10
 8003ec6:	18fb      	adds	r3, r7, r3
 8003ec8:	8819      	ldrh	r1, [r3, #0]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	0023      	movs	r3, r4
 8003ed2:	f000 fa65 	bl	80043a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d194      	bne.n	8003e0a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f000 f9a4 	bl	8004234 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eec:	1e03      	subs	r3, r0, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e01a      	b.n	8003f2a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	490c      	ldr	r1, [pc, #48]	; (8003f38 <HAL_I2C_Mem_Read+0x264>)
 8003f08:	400a      	ands	r2, r1
 8003f0a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2241      	movs	r2, #65	; 0x41
 8003f10:	2120      	movs	r1, #32
 8003f12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2242      	movs	r2, #66	; 0x42
 8003f18:	2100      	movs	r1, #0
 8003f1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2240      	movs	r2, #64	; 0x40
 8003f20:	2100      	movs	r1, #0
 8003f22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	e000      	b.n	8003f2a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
  }
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b007      	add	sp, #28
 8003f30:	bd90      	pop	{r4, r7, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	80002400 	.word	0x80002400
 8003f38:	fe00e800 	.word	0xfe00e800

08003f3c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2241      	movs	r2, #65	; 0x41
 8003f48:	5c9b      	ldrb	r3, [r3, r2]
 8003f4a:	b2db      	uxtb	r3, r3
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b002      	add	sp, #8
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b002      	add	sp, #8
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f68:	b5b0      	push	{r4, r5, r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	000c      	movs	r4, r1
 8003f72:	0010      	movs	r0, r2
 8003f74:	0019      	movs	r1, r3
 8003f76:	250a      	movs	r5, #10
 8003f78:	197b      	adds	r3, r7, r5
 8003f7a:	1c22      	adds	r2, r4, #0
 8003f7c:	801a      	strh	r2, [r3, #0]
 8003f7e:	2308      	movs	r3, #8
 8003f80:	18fb      	adds	r3, r7, r3
 8003f82:	1c02      	adds	r2, r0, #0
 8003f84:	801a      	strh	r2, [r3, #0]
 8003f86:	1dbb      	adds	r3, r7, #6
 8003f88:	1c0a      	adds	r2, r1, #0
 8003f8a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f8c:	1dbb      	adds	r3, r7, #6
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	045c      	lsls	r4, r3, #17
 8003f96:	197b      	adds	r3, r7, r5
 8003f98:	8819      	ldrh	r1, [r3, #0]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	4b23      	ldr	r3, [pc, #140]	; (800402c <I2C_RequestMemoryWrite+0xc4>)
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	0023      	movs	r3, r4
 8003fa2:	f000 f9fd 	bl	80043a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa8:	6a39      	ldr	r1, [r7, #32]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	0018      	movs	r0, r3
 8003fae:	f000 f902 	bl	80041b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fb2:	1e03      	subs	r3, r0, #0
 8003fb4:	d001      	beq.n	8003fba <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e033      	b.n	8004022 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fba:	1dbb      	adds	r3, r7, #6
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d107      	bne.n	8003fd2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	629a      	str	r2, [r3, #40]	; 0x28
 8003fd0:	e019      	b.n	8004006 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	0a1b      	lsrs	r3, r3, #8
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe6:	6a39      	ldr	r1, [r7, #32]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	0018      	movs	r0, r3
 8003fec:	f000 f8e3 	bl	80041b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ff0:	1e03      	subs	r3, r0, #0
 8003ff2:	d001      	beq.n	8003ff8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e014      	b.n	8004022 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ff8:	2308      	movs	r3, #8
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004006:	6a3a      	ldr	r2, [r7, #32]
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	0013      	movs	r3, r2
 8004010:	2200      	movs	r2, #0
 8004012:	2180      	movs	r1, #128	; 0x80
 8004014:	f000 f890 	bl	8004138 <I2C_WaitOnFlagUntilTimeout>
 8004018:	1e03      	subs	r3, r0, #0
 800401a:	d001      	beq.n	8004020 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	0018      	movs	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	b004      	add	sp, #16
 8004028:	bdb0      	pop	{r4, r5, r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	80002000 	.word	0x80002000

08004030 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004030:	b5b0      	push	{r4, r5, r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	000c      	movs	r4, r1
 800403a:	0010      	movs	r0, r2
 800403c:	0019      	movs	r1, r3
 800403e:	250a      	movs	r5, #10
 8004040:	197b      	adds	r3, r7, r5
 8004042:	1c22      	adds	r2, r4, #0
 8004044:	801a      	strh	r2, [r3, #0]
 8004046:	2308      	movs	r3, #8
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	1c02      	adds	r2, r0, #0
 800404c:	801a      	strh	r2, [r3, #0]
 800404e:	1dbb      	adds	r3, r7, #6
 8004050:	1c0a      	adds	r2, r1, #0
 8004052:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004054:	1dbb      	adds	r3, r7, #6
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	197b      	adds	r3, r7, r5
 800405c:	8819      	ldrh	r1, [r3, #0]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <I2C_RequestMemoryRead+0xc0>)
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2300      	movs	r3, #0
 8004066:	f000 f99b 	bl	80043a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800406a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406c:	6a39      	ldr	r1, [r7, #32]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	0018      	movs	r0, r3
 8004072:	f000 f8a0 	bl	80041b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004076:	1e03      	subs	r3, r0, #0
 8004078:	d001      	beq.n	800407e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e033      	b.n	80040e6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800407e:	1dbb      	adds	r3, r7, #6
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d107      	bne.n	8004096 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004086:	2308      	movs	r3, #8
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
 8004094:	e019      	b.n	80040ca <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004096:	2308      	movs	r3, #8
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	0a1b      	lsrs	r3, r3, #8
 800409e:	b29b      	uxth	r3, r3
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040aa:	6a39      	ldr	r1, [r7, #32]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	0018      	movs	r0, r3
 80040b0:	f000 f881 	bl	80041b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80040b4:	1e03      	subs	r3, r0, #0
 80040b6:	d001      	beq.n	80040bc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e014      	b.n	80040e6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040bc:	2308      	movs	r3, #8
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80040ca:	6a3a      	ldr	r2, [r7, #32]
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	0013      	movs	r3, r2
 80040d4:	2200      	movs	r2, #0
 80040d6:	2140      	movs	r1, #64	; 0x40
 80040d8:	f000 f82e 	bl	8004138 <I2C_WaitOnFlagUntilTimeout>
 80040dc:	1e03      	subs	r3, r0, #0
 80040de:	d001      	beq.n	80040e4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	0018      	movs	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b004      	add	sp, #16
 80040ec:	bdb0      	pop	{r4, r5, r7, pc}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	80002000 	.word	0x80002000

080040f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	2202      	movs	r2, #2
 8004104:	4013      	ands	r3, r2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d103      	bne.n	8004112 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2200      	movs	r2, #0
 8004110:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	2201      	movs	r2, #1
 800411a:	4013      	ands	r3, r2
 800411c:	2b01      	cmp	r3, #1
 800411e:	d007      	beq.n	8004130 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2101      	movs	r1, #1
 800412c:	430a      	orrs	r2, r1
 800412e:	619a      	str	r2, [r3, #24]
  }
}
 8004130:	46c0      	nop			; (mov r8, r8)
 8004132:	46bd      	mov	sp, r7
 8004134:	b002      	add	sp, #8
 8004136:	bd80      	pop	{r7, pc}

08004138 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	1dfb      	adds	r3, r7, #7
 8004146:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004148:	e021      	b.n	800418e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	d01e      	beq.n	800418e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004150:	f7fe f980 	bl	8002454 <HAL_GetTick>
 8004154:	0002      	movs	r2, r0
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d302      	bcc.n	8004166 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d113      	bne.n	800418e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	2220      	movs	r2, #32
 800416c:	431a      	orrs	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2241      	movs	r2, #65	; 0x41
 8004176:	2120      	movs	r1, #32
 8004178:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2242      	movs	r2, #66	; 0x42
 800417e:	2100      	movs	r1, #0
 8004180:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2240      	movs	r2, #64	; 0x40
 8004186:	2100      	movs	r1, #0
 8004188:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e00f      	b.n	80041ae <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	4013      	ands	r3, r2
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	425a      	negs	r2, r3
 800419e:	4153      	adcs	r3, r2
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	001a      	movs	r2, r3
 80041a4:	1dfb      	adds	r3, r7, #7
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d0ce      	beq.n	800414a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	0018      	movs	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b004      	add	sp, #16
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041c2:	e02b      	b.n	800421c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	0018      	movs	r0, r3
 80041cc:	f000 f86e 	bl	80042ac <I2C_IsAcknowledgeFailed>
 80041d0:	1e03      	subs	r3, r0, #0
 80041d2:	d001      	beq.n	80041d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e029      	b.n	800422c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	3301      	adds	r3, #1
 80041dc:	d01e      	beq.n	800421c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041de:	f7fe f939 	bl	8002454 <HAL_GetTick>
 80041e2:	0002      	movs	r2, r0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d302      	bcc.n	80041f4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d113      	bne.n	800421c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f8:	2220      	movs	r2, #32
 80041fa:	431a      	orrs	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2241      	movs	r2, #65	; 0x41
 8004204:	2120      	movs	r1, #32
 8004206:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2242      	movs	r2, #66	; 0x42
 800420c:	2100      	movs	r1, #0
 800420e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2240      	movs	r2, #64	; 0x40
 8004214:	2100      	movs	r1, #0
 8004216:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e007      	b.n	800422c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2202      	movs	r2, #2
 8004224:	4013      	ands	r3, r2
 8004226:	2b02      	cmp	r3, #2
 8004228:	d1cc      	bne.n	80041c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	0018      	movs	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	b004      	add	sp, #16
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004240:	e028      	b.n	8004294 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	0018      	movs	r0, r3
 800424a:	f000 f82f 	bl	80042ac <I2C_IsAcknowledgeFailed>
 800424e:	1e03      	subs	r3, r0, #0
 8004250:	d001      	beq.n	8004256 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e026      	b.n	80042a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004256:	f7fe f8fd 	bl	8002454 <HAL_GetTick>
 800425a:	0002      	movs	r2, r0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	429a      	cmp	r2, r3
 8004264:	d302      	bcc.n	800426c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d113      	bne.n	8004294 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004270:	2220      	movs	r2, #32
 8004272:	431a      	orrs	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2241      	movs	r2, #65	; 0x41
 800427c:	2120      	movs	r1, #32
 800427e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2242      	movs	r2, #66	; 0x42
 8004284:	2100      	movs	r1, #0
 8004286:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2240      	movs	r2, #64	; 0x40
 800428c:	2100      	movs	r1, #0
 800428e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e007      	b.n	80042a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	2220      	movs	r2, #32
 800429c:	4013      	ands	r3, r2
 800429e:	2b20      	cmp	r3, #32
 80042a0:	d1cf      	bne.n	8004242 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b004      	add	sp, #16
 80042aa:	bd80      	pop	{r7, pc}

080042ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2210      	movs	r2, #16
 80042c0:	4013      	ands	r3, r2
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d164      	bne.n	8004390 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	2380      	movs	r3, #128	; 0x80
 80042ce:	049b      	lsls	r3, r3, #18
 80042d0:	401a      	ands	r2, r3
 80042d2:	2380      	movs	r3, #128	; 0x80
 80042d4:	049b      	lsls	r3, r3, #18
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d02b      	beq.n	8004332 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2180      	movs	r1, #128	; 0x80
 80042e6:	01c9      	lsls	r1, r1, #7
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042ec:	e021      	b.n	8004332 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	3301      	adds	r3, #1
 80042f2:	d01e      	beq.n	8004332 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f4:	f7fe f8ae 	bl	8002454 <HAL_GetTick>
 80042f8:	0002      	movs	r2, r0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	429a      	cmp	r2, r3
 8004302:	d302      	bcc.n	800430a <I2C_IsAcknowledgeFailed+0x5e>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d113      	bne.n	8004332 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	2220      	movs	r2, #32
 8004310:	431a      	orrs	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2241      	movs	r2, #65	; 0x41
 800431a:	2120      	movs	r1, #32
 800431c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2242      	movs	r2, #66	; 0x42
 8004322:	2100      	movs	r1, #0
 8004324:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2240      	movs	r2, #64	; 0x40
 800432a:	2100      	movs	r1, #0
 800432c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e02f      	b.n	8004392 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2220      	movs	r2, #32
 800433a:	4013      	ands	r3, r2
 800433c:	2b20      	cmp	r3, #32
 800433e:	d1d6      	bne.n	80042ee <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2210      	movs	r2, #16
 8004346:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2220      	movs	r2, #32
 800434e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	0018      	movs	r0, r3
 8004354:	f7ff fece 	bl	80040f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	490e      	ldr	r1, [pc, #56]	; (800439c <I2C_IsAcknowledgeFailed+0xf0>)
 8004364:	400a      	ands	r2, r1
 8004366:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	2204      	movs	r2, #4
 800436e:	431a      	orrs	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2241      	movs	r2, #65	; 0x41
 8004378:	2120      	movs	r1, #32
 800437a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2242      	movs	r2, #66	; 0x42
 8004380:	2100      	movs	r1, #0
 8004382:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2240      	movs	r2, #64	; 0x40
 8004388:	2100      	movs	r1, #0
 800438a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	0018      	movs	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	b004      	add	sp, #16
 8004398:	bd80      	pop	{r7, pc}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	fe00e800 	.word	0xfe00e800

080043a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043a0:	b590      	push	{r4, r7, lr}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	0008      	movs	r0, r1
 80043aa:	0011      	movs	r1, r2
 80043ac:	607b      	str	r3, [r7, #4]
 80043ae:	240a      	movs	r4, #10
 80043b0:	193b      	adds	r3, r7, r4
 80043b2:	1c02      	adds	r2, r0, #0
 80043b4:	801a      	strh	r2, [r3, #0]
 80043b6:	2009      	movs	r0, #9
 80043b8:	183b      	adds	r3, r7, r0
 80043ba:	1c0a      	adds	r2, r1, #0
 80043bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	6a3a      	ldr	r2, [r7, #32]
 80043c6:	0d51      	lsrs	r1, r2, #21
 80043c8:	2280      	movs	r2, #128	; 0x80
 80043ca:	00d2      	lsls	r2, r2, #3
 80043cc:	400a      	ands	r2, r1
 80043ce:	490e      	ldr	r1, [pc, #56]	; (8004408 <I2C_TransferConfig+0x68>)
 80043d0:	430a      	orrs	r2, r1
 80043d2:	43d2      	mvns	r2, r2
 80043d4:	401a      	ands	r2, r3
 80043d6:	0011      	movs	r1, r2
 80043d8:	193b      	adds	r3, r7, r4
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	059b      	lsls	r3, r3, #22
 80043de:	0d9a      	lsrs	r2, r3, #22
 80043e0:	183b      	adds	r3, r7, r0
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	0418      	lsls	r0, r3, #16
 80043e6:	23ff      	movs	r3, #255	; 0xff
 80043e8:	041b      	lsls	r3, r3, #16
 80043ea:	4003      	ands	r3, r0
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	431a      	orrs	r2, r3
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	431a      	orrs	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	46bd      	mov	sp, r7
 8004402:	b005      	add	sp, #20
 8004404:	bd90      	pop	{r4, r7, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	03ff63ff 	.word	0x03ff63ff

0800440c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2241      	movs	r2, #65	; 0x41
 800441a:	5c9b      	ldrb	r3, [r3, r2]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b20      	cmp	r3, #32
 8004420:	d138      	bne.n	8004494 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2240      	movs	r2, #64	; 0x40
 8004426:	5c9b      	ldrb	r3, [r3, r2]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800442c:	2302      	movs	r3, #2
 800442e:	e032      	b.n	8004496 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2240      	movs	r2, #64	; 0x40
 8004434:	2101      	movs	r1, #1
 8004436:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2241      	movs	r2, #65	; 0x41
 800443c:	2124      	movs	r1, #36	; 0x24
 800443e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2101      	movs	r1, #1
 800444c:	438a      	bics	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4911      	ldr	r1, [pc, #68]	; (80044a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800445c:	400a      	ands	r2, r1
 800445e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6819      	ldr	r1, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2101      	movs	r1, #1
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2241      	movs	r2, #65	; 0x41
 8004484:	2120      	movs	r1, #32
 8004486:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2240      	movs	r2, #64	; 0x40
 800448c:	2100      	movs	r1, #0
 800448e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	e000      	b.n	8004496 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004494:	2302      	movs	r3, #2
  }
}
 8004496:	0018      	movs	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	b002      	add	sp, #8
 800449c:	bd80      	pop	{r7, pc}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	ffffefff 	.word	0xffffefff

080044a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2241      	movs	r2, #65	; 0x41
 80044b2:	5c9b      	ldrb	r3, [r3, r2]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d139      	bne.n	800452e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2240      	movs	r2, #64	; 0x40
 80044be:	5c9b      	ldrb	r3, [r3, r2]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e033      	b.n	8004530 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2240      	movs	r2, #64	; 0x40
 80044cc:	2101      	movs	r1, #1
 80044ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2241      	movs	r2, #65	; 0x41
 80044d4:	2124      	movs	r1, #36	; 0x24
 80044d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2101      	movs	r1, #1
 80044e4:	438a      	bics	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4a11      	ldr	r2, [pc, #68]	; (8004538 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	021b      	lsls	r3, r3, #8
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2101      	movs	r1, #1
 8004516:	430a      	orrs	r2, r1
 8004518:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2241      	movs	r2, #65	; 0x41
 800451e:	2120      	movs	r1, #32
 8004520:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2240      	movs	r2, #64	; 0x40
 8004526:	2100      	movs	r1, #0
 8004528:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800452e:	2302      	movs	r3, #2
  }
}
 8004530:	0018      	movs	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	b004      	add	sp, #16
 8004536:	bd80      	pop	{r7, pc}
 8004538:	fffff0ff 	.word	0xfffff0ff

0800453c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800453c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800453e:	b08b      	sub	sp, #44	; 0x2c
 8004540:	af06      	add	r7, sp, #24
 8004542:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e0ff      	b.n	800474e <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a81      	ldr	r2, [pc, #516]	; (8004758 <HAL_PCD_Init+0x21c>)
 8004552:	5c9b      	ldrb	r3, [r3, r2]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d108      	bne.n	800456c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	23aa      	movs	r3, #170	; 0xaa
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	2100      	movs	r1, #0
 8004562:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	0018      	movs	r0, r3
 8004568:	f00c fe32 	bl	80111d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a7a      	ldr	r2, [pc, #488]	; (8004758 <HAL_PCD_Init+0x21c>)
 8004570:	2103      	movs	r1, #3
 8004572:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	0018      	movs	r0, r3
 800457a:	f003 fca9 	bl	8007ed0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800457e:	230f      	movs	r3, #15
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	e058      	b.n	800463a <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004588:	200f      	movs	r0, #15
 800458a:	183b      	adds	r3, r7, r0
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	0013      	movs	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	189b      	adds	r3, r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	18cb      	adds	r3, r1, r3
 800459c:	3301      	adds	r3, #1
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045a2:	183b      	adds	r3, r7, r0
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	0013      	movs	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	189b      	adds	r3, r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	183a      	adds	r2, r7, r0
 80045b4:	7812      	ldrb	r2, [r2, #0]
 80045b6:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045b8:	0004      	movs	r4, r0
 80045ba:	183b      	adds	r3, r7, r0
 80045bc:	781a      	ldrb	r2, [r3, #0]
 80045be:	193b      	adds	r3, r7, r4
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	b298      	uxth	r0, r3
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	0013      	movs	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	189b      	adds	r3, r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	18cb      	adds	r3, r1, r3
 80045d0:	3336      	adds	r3, #54	; 0x36
 80045d2:	1c02      	adds	r2, r0, #0
 80045d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045d6:	193b      	adds	r3, r7, r4
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	0013      	movs	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	189b      	adds	r3, r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	18cb      	adds	r3, r1, r3
 80045e8:	3303      	adds	r3, #3
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045ee:	193b      	adds	r3, r7, r4
 80045f0:	781a      	ldrb	r2, [r3, #0]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	0013      	movs	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	189b      	adds	r3, r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	18cb      	adds	r3, r1, r3
 80045fe:	3338      	adds	r3, #56	; 0x38
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004604:	193b      	adds	r3, r7, r4
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	0013      	movs	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	189b      	adds	r3, r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	18cb      	adds	r3, r1, r3
 8004614:	333c      	adds	r3, #60	; 0x3c
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800461a:	193b      	adds	r3, r7, r4
 800461c:	781a      	ldrb	r2, [r3, #0]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	0013      	movs	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	189b      	adds	r3, r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	18cb      	adds	r3, r1, r3
 800462a:	3340      	adds	r3, #64	; 0x40
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004630:	193b      	adds	r3, r7, r4
 8004632:	781a      	ldrb	r2, [r3, #0]
 8004634:	193b      	adds	r3, r7, r4
 8004636:	3201      	adds	r2, #1
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	210f      	movs	r1, #15
 800463c:	187b      	adds	r3, r7, r1
 800463e:	781a      	ldrb	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d39f      	bcc.n	8004588 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004648:	187b      	adds	r3, r7, r1
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e056      	b.n	80046fe <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004650:	240f      	movs	r4, #15
 8004652:	193b      	adds	r3, r7, r4
 8004654:	781a      	ldrb	r2, [r3, #0]
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	236a      	movs	r3, #106	; 0x6a
 800465a:	33ff      	adds	r3, #255	; 0xff
 800465c:	0019      	movs	r1, r3
 800465e:	0013      	movs	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	189b      	adds	r3, r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	18c3      	adds	r3, r0, r3
 8004668:	185b      	adds	r3, r3, r1
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800466e:	193b      	adds	r3, r7, r4
 8004670:	781a      	ldrb	r2, [r3, #0]
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	23b4      	movs	r3, #180	; 0xb4
 8004676:	0059      	lsls	r1, r3, #1
 8004678:	0013      	movs	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	189b      	adds	r3, r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	18c3      	adds	r3, r0, r3
 8004682:	185b      	adds	r3, r3, r1
 8004684:	193a      	adds	r2, r7, r4
 8004686:	7812      	ldrb	r2, [r2, #0]
 8004688:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800468a:	193b      	adds	r3, r7, r4
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	236c      	movs	r3, #108	; 0x6c
 8004692:	33ff      	adds	r3, #255	; 0xff
 8004694:	0019      	movs	r1, r3
 8004696:	0013      	movs	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	189b      	adds	r3, r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	18c3      	adds	r3, r0, r3
 80046a0:	185b      	adds	r3, r3, r1
 80046a2:	2200      	movs	r2, #0
 80046a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046a6:	193b      	adds	r3, r7, r4
 80046a8:	781a      	ldrb	r2, [r3, #0]
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	23bc      	movs	r3, #188	; 0xbc
 80046ae:	0059      	lsls	r1, r3, #1
 80046b0:	0013      	movs	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	189b      	adds	r3, r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	18c3      	adds	r3, r0, r3
 80046ba:	185b      	adds	r3, r3, r1
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046c0:	193b      	adds	r3, r7, r4
 80046c2:	781a      	ldrb	r2, [r3, #0]
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	23be      	movs	r3, #190	; 0xbe
 80046c8:	0059      	lsls	r1, r3, #1
 80046ca:	0013      	movs	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	189b      	adds	r3, r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	18c3      	adds	r3, r0, r3
 80046d4:	185b      	adds	r3, r3, r1
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046da:	193b      	adds	r3, r7, r4
 80046dc:	781a      	ldrb	r2, [r3, #0]
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	23c0      	movs	r3, #192	; 0xc0
 80046e2:	0059      	lsls	r1, r3, #1
 80046e4:	0013      	movs	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	189b      	adds	r3, r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	18c3      	adds	r3, r0, r3
 80046ee:	185b      	adds	r3, r3, r1
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f4:	193b      	adds	r3, r7, r4
 80046f6:	781a      	ldrb	r2, [r3, #0]
 80046f8:	193b      	adds	r3, r7, r4
 80046fa:	3201      	adds	r2, #1
 80046fc:	701a      	strb	r2, [r3, #0]
 80046fe:	230f      	movs	r3, #15
 8004700:	18fb      	adds	r3, r7, r3
 8004702:	781a      	ldrb	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	429a      	cmp	r2, r3
 800470a:	d3a1      	bcc.n	8004650 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	466a      	mov	r2, sp
 8004714:	0011      	movs	r1, r2
 8004716:	001a      	movs	r2, r3
 8004718:	3210      	adds	r2, #16
 800471a:	ca70      	ldmia	r2!, {r4, r5, r6}
 800471c:	c170      	stmia	r1!, {r4, r5, r6}
 800471e:	ca30      	ldmia	r2!, {r4, r5}
 8004720:	c130      	stmia	r1!, {r4, r5}
 8004722:	6859      	ldr	r1, [r3, #4]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 fbec 	bl	8007f04 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2224      	movs	r2, #36	; 0x24
 8004730:	2100      	movs	r1, #0
 8004732:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a08      	ldr	r2, [pc, #32]	; (8004758 <HAL_PCD_Init+0x21c>)
 8004738:	2101      	movs	r1, #1
 800473a:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d103      	bne.n	800474c <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	0018      	movs	r0, r3
 8004748:	f001 fd34 	bl	80061b4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	0018      	movs	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	b005      	add	sp, #20
 8004754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	000002a9 	.word	0x000002a9

0800475c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	23aa      	movs	r3, #170	; 0xaa
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	5cd3      	ldrb	r3, [r2, r3]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_PCD_Start+0x18>
 8004770:	2302      	movs	r3, #2
 8004772:	e014      	b.n	800479e <HAL_PCD_Start+0x42>
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	23aa      	movs	r3, #170	; 0xaa
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	2101      	movs	r1, #1
 800477c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	0018      	movs	r0, r3
 8004784:	f003 fb8e 	bl	8007ea4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	0018      	movs	r0, r3
 800478e:	f005 fae9 	bl	8009d64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	23aa      	movs	r3, #170	; 0xaa
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	2100      	movs	r1, #0
 800479a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	0018      	movs	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b002      	add	sp, #8
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	0018      	movs	r0, r3
 80047b6:	f005 faeb 	bl	8009d90 <USB_ReadInterrupts>
 80047ba:	0002      	movs	r2, r0
 80047bc:	2380      	movs	r3, #128	; 0x80
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	401a      	ands	r2, r3
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d103      	bne.n	80047d2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	0018      	movs	r0, r3
 80047ce:	f000 fbbb 	bl	8004f48 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	0018      	movs	r0, r3
 80047d8:	f005 fada 	bl	8009d90 <USB_ReadInterrupts>
 80047dc:	0002      	movs	r2, r0
 80047de:	2380      	movs	r3, #128	; 0x80
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	401a      	ands	r2, r3
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d114      	bne.n	8004816 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2244      	movs	r2, #68	; 0x44
 80047f2:	5a9b      	ldrh	r3, [r3, r2]
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	49a2      	ldr	r1, [pc, #648]	; (8004a84 <HAL_PCD_IRQHandler+0x2dc>)
 80047fc:	400a      	ands	r2, r1
 80047fe:	b291      	uxth	r1, r2
 8004800:	2244      	movs	r2, #68	; 0x44
 8004802:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	0018      	movs	r0, r3
 8004808:	f00c fd6d 	bl	80112e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2100      	movs	r1, #0
 8004810:	0018      	movs	r0, r3
 8004812:	f000 f945 	bl	8004aa0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	0018      	movs	r0, r3
 800481c:	f005 fab8 	bl	8009d90 <USB_ReadInterrupts>
 8004820:	0002      	movs	r2, r0
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	01db      	lsls	r3, r3, #7
 8004826:	401a      	ands	r2, r3
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	01db      	lsls	r3, r3, #7
 800482c:	429a      	cmp	r2, r3
 800482e:	d10b      	bne.n	8004848 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2244      	movs	r2, #68	; 0x44
 8004836:	5a9b      	ldrh	r3, [r3, r2]
 8004838:	b29a      	uxth	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4992      	ldr	r1, [pc, #584]	; (8004a88 <HAL_PCD_IRQHandler+0x2e0>)
 8004840:	400a      	ands	r2, r1
 8004842:	b291      	uxth	r1, r2
 8004844:	2244      	movs	r2, #68	; 0x44
 8004846:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	0018      	movs	r0, r3
 800484e:	f005 fa9f 	bl	8009d90 <USB_ReadInterrupts>
 8004852:	0002      	movs	r2, r0
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	019b      	lsls	r3, r3, #6
 8004858:	401a      	ands	r2, r3
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	019b      	lsls	r3, r3, #6
 800485e:	429a      	cmp	r2, r3
 8004860:	d10b      	bne.n	800487a <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2244      	movs	r2, #68	; 0x44
 8004868:	5a9b      	ldrh	r3, [r3, r2]
 800486a:	b29a      	uxth	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4986      	ldr	r1, [pc, #536]	; (8004a8c <HAL_PCD_IRQHandler+0x2e4>)
 8004872:	400a      	ands	r2, r1
 8004874:	b291      	uxth	r1, r2
 8004876:	2244      	movs	r2, #68	; 0x44
 8004878:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	0018      	movs	r0, r3
 8004880:	f005 fa86 	bl	8009d90 <USB_ReadInterrupts>
 8004884:	0002      	movs	r2, r0
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	015b      	lsls	r3, r3, #5
 800488a:	401a      	ands	r2, r3
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	015b      	lsls	r3, r3, #5
 8004890:	429a      	cmp	r2, r3
 8004892:	d137      	bne.n	8004904 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2240      	movs	r2, #64	; 0x40
 800489a:	5a9b      	ldrh	r3, [r3, r2]
 800489c:	b29a      	uxth	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2104      	movs	r1, #4
 80048a4:	438a      	bics	r2, r1
 80048a6:	b291      	uxth	r1, r2
 80048a8:	2240      	movs	r2, #64	; 0x40
 80048aa:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2240      	movs	r2, #64	; 0x40
 80048b2:	5a9b      	ldrh	r3, [r3, r2]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2108      	movs	r1, #8
 80048bc:	438a      	bics	r2, r1
 80048be:	b291      	uxth	r1, r2
 80048c0:	2240      	movs	r2, #64	; 0x40
 80048c2:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	23b8      	movs	r3, #184	; 0xb8
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	5cd3      	ldrb	r3, [r2, r3]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d109      	bne.n	80048e4 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	23b8      	movs	r3, #184	; 0xb8
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	2100      	movs	r1, #0
 80048d8:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2100      	movs	r1, #0
 80048de:	0018      	movs	r0, r3
 80048e0:	f001 fc92 	bl	8006208 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	0018      	movs	r0, r3
 80048e8:	f00c fd3e 	bl	8011368 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2244      	movs	r2, #68	; 0x44
 80048f2:	5a9b      	ldrh	r3, [r3, r2]
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4965      	ldr	r1, [pc, #404]	; (8004a90 <HAL_PCD_IRQHandler+0x2e8>)
 80048fc:	400a      	ands	r2, r1
 80048fe:	b291      	uxth	r1, r2
 8004900:	2244      	movs	r2, #68	; 0x44
 8004902:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	0018      	movs	r0, r3
 800490a:	f005 fa41 	bl	8009d90 <USB_ReadInterrupts>
 800490e:	0002      	movs	r2, r0
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	401a      	ands	r2, r3
 8004916:	2380      	movs	r3, #128	; 0x80
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	429a      	cmp	r2, r3
 800491c:	d127      	bne.n	800496e <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2240      	movs	r2, #64	; 0x40
 8004924:	5a9b      	ldrh	r3, [r3, r2]
 8004926:	b29a      	uxth	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2108      	movs	r1, #8
 800492e:	430a      	orrs	r2, r1
 8004930:	b291      	uxth	r1, r2
 8004932:	2240      	movs	r2, #64	; 0x40
 8004934:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2244      	movs	r2, #68	; 0x44
 800493c:	5a9b      	ldrh	r3, [r3, r2]
 800493e:	b29a      	uxth	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4953      	ldr	r1, [pc, #332]	; (8004a94 <HAL_PCD_IRQHandler+0x2ec>)
 8004946:	400a      	ands	r2, r1
 8004948:	b291      	uxth	r1, r2
 800494a:	2244      	movs	r2, #68	; 0x44
 800494c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2240      	movs	r2, #64	; 0x40
 8004954:	5a9b      	ldrh	r3, [r3, r2]
 8004956:	b29a      	uxth	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2104      	movs	r1, #4
 800495e:	430a      	orrs	r2, r1
 8004960:	b291      	uxth	r1, r2
 8004962:	2240      	movs	r2, #64	; 0x40
 8004964:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	0018      	movs	r0, r3
 800496a:	f00c fce1 	bl	8011330 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	0018      	movs	r0, r3
 8004974:	f005 fa0c 	bl	8009d90 <USB_ReadInterrupts>
 8004978:	0003      	movs	r3, r0
 800497a:	2280      	movs	r2, #128	; 0x80
 800497c:	4013      	ands	r3, r2
 800497e:	2b80      	cmp	r3, #128	; 0x80
 8004980:	d145      	bne.n	8004a0e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2244      	movs	r2, #68	; 0x44
 8004988:	5a9b      	ldrh	r3, [r3, r2]
 800498a:	b29a      	uxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2180      	movs	r1, #128	; 0x80
 8004992:	438a      	bics	r2, r1
 8004994:	b291      	uxth	r1, r2
 8004996:	2244      	movs	r2, #68	; 0x44
 8004998:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	23b8      	movs	r3, #184	; 0xb8
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	5cd3      	ldrb	r3, [r2, r3]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d12f      	bne.n	8004a06 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2240      	movs	r2, #64	; 0x40
 80049ac:	5a9b      	ldrh	r3, [r3, r2]
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2104      	movs	r1, #4
 80049b6:	430a      	orrs	r2, r1
 80049b8:	b291      	uxth	r1, r2
 80049ba:	2240      	movs	r2, #64	; 0x40
 80049bc:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2240      	movs	r2, #64	; 0x40
 80049c4:	5a9b      	ldrh	r3, [r3, r2]
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2108      	movs	r1, #8
 80049ce:	430a      	orrs	r2, r1
 80049d0:	b291      	uxth	r1, r2
 80049d2:	2240      	movs	r2, #64	; 0x40
 80049d4:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	23b8      	movs	r3, #184	; 0xb8
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	2101      	movs	r1, #1
 80049de:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2254      	movs	r2, #84	; 0x54
 80049e6:	5a9b      	ldrh	r3, [r3, r2]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	089b      	lsrs	r3, r3, #2
 80049ec:	223c      	movs	r2, #60	; 0x3c
 80049ee:	4013      	ands	r3, r2
 80049f0:	0019      	movs	r1, r3
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	23b9      	movs	r3, #185	; 0xb9
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2101      	movs	r1, #1
 80049fe:	0018      	movs	r0, r3
 8004a00:	f001 fc02 	bl	8006208 <HAL_PCDEx_LPM_Callback>
 8004a04:	e003      	b.n	8004a0e <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f00c fc91 	bl	8011330 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	0018      	movs	r0, r3
 8004a14:	f005 f9bc 	bl	8009d90 <USB_ReadInterrupts>
 8004a18:	0002      	movs	r2, r0
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	401a      	ands	r2, r3
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d10f      	bne.n	8004a48 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2244      	movs	r2, #68	; 0x44
 8004a2e:	5a9b      	ldrh	r3, [r3, r2]
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4918      	ldr	r1, [pc, #96]	; (8004a98 <HAL_PCD_IRQHandler+0x2f0>)
 8004a38:	400a      	ands	r2, r1
 8004a3a:	b291      	uxth	r1, r2
 8004a3c:	2244      	movs	r2, #68	; 0x44
 8004a3e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	0018      	movs	r0, r3
 8004a44:	f00c fc40 	bl	80112c8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f005 f99f 	bl	8009d90 <USB_ReadInterrupts>
 8004a52:	0002      	movs	r2, r0
 8004a54:	2380      	movs	r3, #128	; 0x80
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	401a      	ands	r2, r3
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d10b      	bne.n	8004a7a <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2244      	movs	r2, #68	; 0x44
 8004a68:	5a9b      	ldrh	r3, [r3, r2]
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	490a      	ldr	r1, [pc, #40]	; (8004a9c <HAL_PCD_IRQHandler+0x2f4>)
 8004a72:	400a      	ands	r2, r1
 8004a74:	b291      	uxth	r1, r2
 8004a76:	2244      	movs	r2, #68	; 0x44
 8004a78:	5299      	strh	r1, [r3, r2]
  }
}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b002      	add	sp, #8
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	fffffbff 	.word	0xfffffbff
 8004a88:	ffffbfff 	.word	0xffffbfff
 8004a8c:	ffffdfff 	.word	0xffffdfff
 8004a90:	ffffefff 	.word	0xffffefff
 8004a94:	fffff7ff 	.word	0xfffff7ff
 8004a98:	fffffdff 	.word	0xfffffdff
 8004a9c:	fffffeff 	.word	0xfffffeff

08004aa0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	000a      	movs	r2, r1
 8004aaa:	1cfb      	adds	r3, r7, #3
 8004aac:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	23aa      	movs	r3, #170	; 0xaa
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	5cd3      	ldrb	r3, [r2, r3]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_PCD_SetAddress+0x1e>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e017      	b.n	8004aee <HAL_PCD_SetAddress+0x4e>
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	23aa      	movs	r3, #170	; 0xaa
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	1cfa      	adds	r2, r7, #3
 8004acc:	2124      	movs	r1, #36	; 0x24
 8004ace:	7812      	ldrb	r2, [r2, #0]
 8004ad0:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	1cfb      	adds	r3, r7, #3
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	0019      	movs	r1, r3
 8004adc:	0010      	movs	r0, r2
 8004ade:	f005 f92d 	bl	8009d3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	23aa      	movs	r3, #170	; 0xaa
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	2100      	movs	r1, #0
 8004aea:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	0018      	movs	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b002      	add	sp, #8
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004af6:	b590      	push	{r4, r7, lr}
 8004af8:	b085      	sub	sp, #20
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	000c      	movs	r4, r1
 8004b00:	0010      	movs	r0, r2
 8004b02:	0019      	movs	r1, r3
 8004b04:	1cfb      	adds	r3, r7, #3
 8004b06:	1c22      	adds	r2, r4, #0
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	003b      	movs	r3, r7
 8004b0c:	1c02      	adds	r2, r0, #0
 8004b0e:	801a      	strh	r2, [r3, #0]
 8004b10:	1cbb      	adds	r3, r7, #2
 8004b12:	1c0a      	adds	r2, r1, #0
 8004b14:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b16:	230b      	movs	r3, #11
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b1e:	1cfb      	adds	r3, r7, #3
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b25b      	sxtb	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	da0f      	bge.n	8004b48 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b28:	1cfb      	adds	r3, r7, #3
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2207      	movs	r2, #7
 8004b2e:	4013      	ands	r3, r2
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	0013      	movs	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	189b      	adds	r3, r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	18d3      	adds	r3, r2, r3
 8004b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	705a      	strb	r2, [r3, #1]
 8004b46:	e00f      	b.n	8004b68 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b48:	1cfb      	adds	r3, r7, #3
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2207      	movs	r2, #7
 8004b4e:	401a      	ands	r2, r3
 8004b50:	0013      	movs	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	189b      	adds	r3, r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	3369      	adds	r3, #105	; 0x69
 8004b5a:	33ff      	adds	r3, #255	; 0xff
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	18d3      	adds	r3, r2, r3
 8004b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b68:	1cfb      	adds	r3, r7, #3
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2207      	movs	r2, #7
 8004b6e:	4013      	ands	r3, r2
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b76:	003b      	movs	r3, r7
 8004b78:	881a      	ldrh	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1cba      	adds	r2, r7, #2
 8004b82:	7812      	ldrb	r2, [r2, #0]
 8004b84:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d004      	beq.n	8004b98 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b98:	1cbb      	adds	r3, r7, #2
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d102      	bne.n	8004ba6 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	23aa      	movs	r3, #170	; 0xaa
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	5cd3      	ldrb	r3, [r2, r3]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_PCD_EP_Open+0xc0>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e013      	b.n	8004bde <HAL_PCD_EP_Open+0xe8>
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	23aa      	movs	r3, #170	; 0xaa
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	0011      	movs	r1, r2
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f003 f9c7 	bl	8007f5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	23aa      	movs	r3, #170	; 0xaa
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004bd8:	230b      	movs	r3, #11
 8004bda:	18fb      	adds	r3, r7, r3
 8004bdc:	781b      	ldrb	r3, [r3, #0]
}
 8004bde:	0018      	movs	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	b005      	add	sp, #20
 8004be4:	bd90      	pop	{r4, r7, pc}

08004be6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	000a      	movs	r2, r1
 8004bf0:	1cfb      	adds	r3, r7, #3
 8004bf2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bf4:	1cfb      	adds	r3, r7, #3
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	b25b      	sxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	da0f      	bge.n	8004c1e <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bfe:	1cfb      	adds	r3, r7, #3
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2207      	movs	r2, #7
 8004c04:	4013      	ands	r3, r2
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	0013      	movs	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	189b      	adds	r3, r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	18d3      	adds	r3, r2, r3
 8004c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	705a      	strb	r2, [r3, #1]
 8004c1c:	e00f      	b.n	8004c3e <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c1e:	1cfb      	adds	r3, r7, #3
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2207      	movs	r2, #7
 8004c24:	401a      	ands	r2, r3
 8004c26:	0013      	movs	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	189b      	adds	r3, r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	3369      	adds	r3, #105	; 0x69
 8004c30:	33ff      	adds	r3, #255	; 0xff
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	18d3      	adds	r3, r2, r3
 8004c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c3e:	1cfb      	adds	r3, r7, #3
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2207      	movs	r2, #7
 8004c44:	4013      	ands	r3, r2
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	23aa      	movs	r3, #170	; 0xaa
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	5cd3      	ldrb	r3, [r2, r3]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_PCD_EP_Close+0x76>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e011      	b.n	8004c80 <HAL_PCD_EP_Close+0x9a>
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	23aa      	movs	r3, #170	; 0xaa
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	2101      	movs	r1, #1
 8004c64:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	0011      	movs	r1, r2
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f003 fce8 	bl	8008644 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	23aa      	movs	r3, #170	; 0xaa
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	0018      	movs	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b004      	add	sp, #16
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	200b      	movs	r0, #11
 8004c96:	183b      	adds	r3, r7, r0
 8004c98:	1c0a      	adds	r2, r1, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c9c:	0001      	movs	r1, r0
 8004c9e:	187b      	adds	r3, r7, r1
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2207      	movs	r2, #7
 8004ca4:	401a      	ands	r2, r3
 8004ca6:	0013      	movs	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	189b      	adds	r3, r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	3369      	adds	r3, #105	; 0x69
 8004cb0:	33ff      	adds	r3, #255	; 0xff
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	18d3      	adds	r3, r2, r3
 8004cb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cd0:	187b      	adds	r3, r7, r1
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2207      	movs	r2, #7
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cde:	187b      	adds	r3, r7, r1
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2207      	movs	r2, #7
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d107      	bne.n	8004cf8 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	0011      	movs	r1, r2
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f003 fe67 	bl	80089c4 <USB_EPStartXfer>
 8004cf6:	e006      	b.n	8004d06 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	0011      	movs	r1, r2
 8004d00:	0018      	movs	r0, r3
 8004d02:	f003 fe5f 	bl	80089c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	0018      	movs	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	b006      	add	sp, #24
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	000a      	movs	r2, r1
 8004d1a:	1cfb      	adds	r3, r7, #3
 8004d1c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d1e:	1cfb      	adds	r3, r7, #3
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2207      	movs	r2, #7
 8004d24:	401a      	ands	r2, r3
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	23c2      	movs	r3, #194	; 0xc2
 8004d2a:	0059      	lsls	r1, r3, #1
 8004d2c:	0013      	movs	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	189b      	adds	r3, r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	18c3      	adds	r3, r0, r3
 8004d36:	185b      	adds	r3, r3, r1
 8004d38:	681b      	ldr	r3, [r3, #0]
}
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b002      	add	sp, #8
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b086      	sub	sp, #24
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
 8004d4e:	200b      	movs	r0, #11
 8004d50:	183b      	adds	r3, r7, r0
 8004d52:	1c0a      	adds	r2, r1, #0
 8004d54:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d56:	183b      	adds	r3, r7, r0
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2207      	movs	r2, #7
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	0013      	movs	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	189b      	adds	r3, r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	18d3      	adds	r3, r2, r3
 8004d6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2224      	movs	r2, #36	; 0x24
 8004d7e:	2101      	movs	r1, #1
 8004d80:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2201      	movs	r2, #1
 8004d92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d94:	183b      	adds	r3, r7, r0
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2207      	movs	r2, #7
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004da2:	183b      	adds	r3, r7, r0
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2207      	movs	r2, #7
 8004da8:	4013      	ands	r3, r2
 8004daa:	d107      	bne.n	8004dbc <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	0011      	movs	r1, r2
 8004db4:	0018      	movs	r0, r3
 8004db6:	f003 fe05 	bl	80089c4 <USB_EPStartXfer>
 8004dba:	e006      	b.n	8004dca <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	0011      	movs	r1, r2
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f003 fdfd 	bl	80089c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	0018      	movs	r0, r3
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b006      	add	sp, #24
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	000a      	movs	r2, r1
 8004dde:	1cfb      	adds	r3, r7, #3
 8004de0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004de2:	1cfb      	adds	r3, r7, #3
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2207      	movs	r2, #7
 8004de8:	401a      	ands	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d901      	bls.n	8004df6 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e046      	b.n	8004e84 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004df6:	1cfb      	adds	r3, r7, #3
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	b25b      	sxtb	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	da0f      	bge.n	8004e20 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e00:	1cfb      	adds	r3, r7, #3
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2207      	movs	r2, #7
 8004e06:	4013      	ands	r3, r2
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	0013      	movs	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	189b      	adds	r3, r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	18d3      	adds	r3, r2, r3
 8004e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	705a      	strb	r2, [r3, #1]
 8004e1e:	e00d      	b.n	8004e3c <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e20:	1cfb      	adds	r3, r7, #3
 8004e22:	781a      	ldrb	r2, [r3, #0]
 8004e24:	0013      	movs	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	189b      	adds	r3, r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	3369      	adds	r3, #105	; 0x69
 8004e2e:	33ff      	adds	r3, #255	; 0xff
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	18d3      	adds	r3, r2, r3
 8004e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e42:	1cfb      	adds	r3, r7, #3
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2207      	movs	r2, #7
 8004e48:	4013      	ands	r3, r2
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	23aa      	movs	r3, #170	; 0xaa
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	5cd3      	ldrb	r3, [r2, r3]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_PCD_EP_SetStall+0x8c>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e011      	b.n	8004e84 <HAL_PCD_EP_SetStall+0xb0>
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	23aa      	movs	r3, #170	; 0xaa
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	2101      	movs	r1, #1
 8004e68:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	0011      	movs	r1, r2
 8004e72:	0018      	movs	r0, r3
 8004e74:	f004 fe60 	bl	8009b38 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	23aa      	movs	r3, #170	; 0xaa
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	2100      	movs	r1, #0
 8004e80:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	0018      	movs	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b004      	add	sp, #16
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	000a      	movs	r2, r1
 8004e96:	1cfb      	adds	r3, r7, #3
 8004e98:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e9a:	1cfb      	adds	r3, r7, #3
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	220f      	movs	r2, #15
 8004ea0:	401a      	ands	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d901      	bls.n	8004eae <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e048      	b.n	8004f40 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004eae:	1cfb      	adds	r3, r7, #3
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	b25b      	sxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	da0f      	bge.n	8004ed8 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eb8:	1cfb      	adds	r3, r7, #3
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2207      	movs	r2, #7
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	0013      	movs	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	18d3      	adds	r3, r2, r3
 8004ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	705a      	strb	r2, [r3, #1]
 8004ed6:	e00f      	b.n	8004ef8 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ed8:	1cfb      	adds	r3, r7, #3
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2207      	movs	r2, #7
 8004ede:	401a      	ands	r2, r3
 8004ee0:	0013      	movs	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	189b      	adds	r3, r3, r2
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	3369      	adds	r3, #105	; 0x69
 8004eea:	33ff      	adds	r3, #255	; 0xff
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	18d3      	adds	r3, r2, r3
 8004ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004efe:	1cfb      	adds	r3, r7, #3
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2207      	movs	r2, #7
 8004f04:	4013      	ands	r3, r2
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	23aa      	movs	r3, #170	; 0xaa
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	5cd3      	ldrb	r3, [r2, r3]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_PCD_EP_ClrStall+0x90>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e011      	b.n	8004f40 <HAL_PCD_EP_ClrStall+0xb4>
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	23aa      	movs	r3, #170	; 0xaa
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	2101      	movs	r1, #1
 8004f24:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	0011      	movs	r1, r2
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f004 fe52 	bl	8009bd8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	23aa      	movs	r3, #170	; 0xaa
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	0018      	movs	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b004      	add	sp, #16
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004f48:	b5b0      	push	{r4, r5, r7, lr}
 8004f4a:	b096      	sub	sp, #88	; 0x58
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f50:	f000 fbd8 	bl	8005704 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	2056      	movs	r0, #86	; 0x56
 8004f5a:	183b      	adds	r3, r7, r0
 8004f5c:	2144      	movs	r1, #68	; 0x44
 8004f5e:	5a52      	ldrh	r2, [r2, r1]
 8004f60:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004f62:	183b      	adds	r3, r7, r0
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	2455      	movs	r4, #85	; 0x55
 8004f6a:	193b      	adds	r3, r7, r4
 8004f6c:	210f      	movs	r1, #15
 8004f6e:	400a      	ands	r2, r1
 8004f70:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004f72:	193b      	adds	r3, r7, r4
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d000      	beq.n	8004f7c <PCD_EP_ISR_Handler+0x34>
 8004f7a:	e179      	b.n	8005270 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004f7c:	183b      	adds	r3, r7, r0
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	2210      	movs	r2, #16
 8004f82:	4013      	ands	r3, r2
 8004f84:	d154      	bne.n	8005030 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	200e      	movs	r0, #14
 8004f90:	183b      	adds	r3, r7, r0
 8004f92:	49af      	ldr	r1, [pc, #700]	; (8005250 <PCD_EP_ISR_Handler+0x308>)
 8004f94:	400a      	ands	r2, r1
 8004f96:	801a      	strh	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	183a      	adds	r2, r7, r0
 8004f9e:	8812      	ldrh	r2, [r2, #0]
 8004fa0:	49ac      	ldr	r1, [pc, #688]	; (8005254 <PCD_EP_ISR_Handler+0x30c>)
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	b292      	uxth	r2, r2
 8004fa6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3328      	adds	r3, #40	; 0x28
 8004fac:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2250      	movs	r2, #80	; 0x50
 8004fb4:	5a9b      	ldrh	r3, [r3, r2]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	001a      	movs	r2, r3
 8004fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	18d2      	adds	r2, r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	18d3      	adds	r3, r2, r3
 8004fc8:	4aa3      	ldr	r2, [pc, #652]	; (8005258 <PCD_EP_ISR_Handler+0x310>)
 8004fca:	4694      	mov	ip, r2
 8004fcc:	4463      	add	r3, ip
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	059b      	lsls	r3, r3, #22
 8004fd2:	0d9a      	lsrs	r2, r3, #22
 8004fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	18d2      	adds	r2, r2, r3
 8004fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2100      	movs	r1, #0
 8004fea:	0018      	movs	r0, r3
 8004fec:	f00c f94e 	bl	801128c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2224      	movs	r2, #36	; 0x24
 8004ff4:	5c9b      	ldrb	r3, [r3, r2]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <PCD_EP_ISR_Handler+0xb8>
 8004ffc:	f000 fb82 	bl	8005704 <PCD_EP_ISR_Handler+0x7bc>
 8005000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <PCD_EP_ISR_Handler+0xc4>
 8005008:	f000 fb7c 	bl	8005704 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2224      	movs	r2, #36	; 0x24
 8005010:	5c9b      	ldrb	r3, [r3, r2]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2280      	movs	r2, #128	; 0x80
 8005016:	4252      	negs	r2, r2
 8005018:	4313      	orrs	r3, r2
 800501a:	b2da      	uxtb	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	b291      	uxth	r1, r2
 8005022:	224c      	movs	r2, #76	; 0x4c
 8005024:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2224      	movs	r2, #36	; 0x24
 800502a:	2100      	movs	r1, #0
 800502c:	5499      	strb	r1, [r3, r2]
 800502e:	e369      	b.n	8005704 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3369      	adds	r3, #105	; 0x69
 8005034:	33ff      	adds	r3, #255	; 0xff
 8005036:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	2152      	movs	r1, #82	; 0x52
 800503e:	187b      	adds	r3, r7, r1
 8005040:	8812      	ldrh	r2, [r2, #0]
 8005042:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005044:	187b      	adds	r3, r7, r1
 8005046:	881a      	ldrh	r2, [r3, #0]
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	4013      	ands	r3, r2
 800504e:	d037      	beq.n	80050c0 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2250      	movs	r2, #80	; 0x50
 8005056:	5a9b      	ldrh	r3, [r3, r2]
 8005058:	b29b      	uxth	r3, r3
 800505a:	001a      	movs	r2, r3
 800505c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	18d2      	adds	r2, r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	18d3      	adds	r3, r2, r3
 800506a:	4a7c      	ldr	r2, [pc, #496]	; (800525c <PCD_EP_ISR_Handler+0x314>)
 800506c:	4694      	mov	ip, r2
 800506e:	4463      	add	r3, ip
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	059b      	lsls	r3, r3, #22
 8005074:	0d9a      	lsrs	r2, r3, #22
 8005076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005078:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	22ac      	movs	r2, #172	; 0xac
 8005082:	0092      	lsls	r2, r2, #2
 8005084:	1899      	adds	r1, r3, r2
 8005086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005088:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800508a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800508c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800508e:	b29b      	uxth	r3, r3
 8005090:	f004 fed0 	bl	8009e34 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	b29a      	uxth	r2, r3
 800509c:	2010      	movs	r0, #16
 800509e:	183b      	adds	r3, r7, r0
 80050a0:	496f      	ldr	r1, [pc, #444]	; (8005260 <PCD_EP_ISR_Handler+0x318>)
 80050a2:	400a      	ands	r2, r1
 80050a4:	801a      	strh	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	183a      	adds	r2, r7, r0
 80050ac:	8812      	ldrh	r2, [r2, #0]
 80050ae:	2180      	movs	r1, #128	; 0x80
 80050b0:	430a      	orrs	r2, r1
 80050b2:	b292      	uxth	r2, r2
 80050b4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f00c f8b1 	bl	8011220 <HAL_PCD_SetupStageCallback>
 80050be:	e321      	b.n	8005704 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80050c0:	2352      	movs	r3, #82	; 0x52
 80050c2:	18fb      	adds	r3, r7, r3
 80050c4:	2200      	movs	r2, #0
 80050c6:	5e9b      	ldrsh	r3, [r3, r2]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	db00      	blt.n	80050ce <PCD_EP_ISR_Handler+0x186>
 80050cc:	e31a      	b.n	8005704 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	201e      	movs	r0, #30
 80050d8:	183b      	adds	r3, r7, r0
 80050da:	4961      	ldr	r1, [pc, #388]	; (8005260 <PCD_EP_ISR_Handler+0x318>)
 80050dc:	400a      	ands	r2, r1
 80050de:	801a      	strh	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	183a      	adds	r2, r7, r0
 80050e6:	8812      	ldrh	r2, [r2, #0]
 80050e8:	2180      	movs	r1, #128	; 0x80
 80050ea:	430a      	orrs	r2, r1
 80050ec:	b292      	uxth	r2, r2
 80050ee:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2250      	movs	r2, #80	; 0x50
 80050f6:	5a9b      	ldrh	r3, [r3, r2]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	001a      	movs	r2, r3
 80050fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	18d2      	adds	r2, r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	18d3      	adds	r3, r2, r3
 800510a:	4a54      	ldr	r2, [pc, #336]	; (800525c <PCD_EP_ISR_Handler+0x314>)
 800510c:	4694      	mov	ip, r2
 800510e:	4463      	add	r3, ip
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	059b      	lsls	r3, r3, #22
 8005114:	0d9a      	lsrs	r2, r3, #22
 8005116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005118:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800511a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01a      	beq.n	8005158 <PCD_EP_ISR_Handler+0x210>
 8005122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d016      	beq.n	8005158 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005130:	6959      	ldr	r1, [r3, #20]
 8005132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005134:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005138:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800513a:	b29b      	uxth	r3, r3
 800513c:	f004 fe7a 	bl	8009e34 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005142:	695a      	ldr	r2, [r3, #20]
 8005144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	18d2      	adds	r2, r2, r3
 800514a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800514c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2100      	movs	r1, #0
 8005152:	0018      	movs	r0, r3
 8005154:	f00c f879 	bl	801124a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	b29b      	uxth	r3, r3
 8005160:	001a      	movs	r2, r3
 8005162:	2380      	movs	r3, #128	; 0x80
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	4013      	ands	r3, r2
 8005168:	d000      	beq.n	800516c <PCD_EP_ISR_Handler+0x224>
 800516a:	e2cb      	b.n	8005704 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2250      	movs	r2, #80	; 0x50
 8005178:	5a9b      	ldrh	r3, [r3, r2]
 800517a:	b29b      	uxth	r3, r3
 800517c:	001a      	movs	r2, r3
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	189b      	adds	r3, r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	4a35      	ldr	r2, [pc, #212]	; (800525c <PCD_EP_ISR_Handler+0x314>)
 8005188:	4694      	mov	ip, r2
 800518a:	4463      	add	r3, ip
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d110      	bne.n	80051b8 <PCD_EP_ISR_Handler+0x270>
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	4a31      	ldr	r2, [pc, #196]	; (8005264 <PCD_EP_ISR_Handler+0x31c>)
 800519e:	4013      	ands	r3, r2
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	801a      	strh	r2, [r3, #0]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	4a29      	ldr	r2, [pc, #164]	; (8005254 <PCD_EP_ISR_Handler+0x30c>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	801a      	strh	r2, [r3, #0]
 80051b6:	e02b      	b.n	8005210 <PCD_EP_ISR_Handler+0x2c8>
 80051b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	2b3e      	cmp	r3, #62	; 0x3e
 80051be:	d812      	bhi.n	80051e6 <PCD_EP_ISR_Handler+0x29e>
 80051c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	085b      	lsrs	r3, r3, #1
 80051c6:	647b      	str	r3, [r7, #68]	; 0x44
 80051c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2201      	movs	r2, #1
 80051ce:	4013      	ands	r3, r2
 80051d0:	d002      	beq.n	80051d8 <PCD_EP_ISR_Handler+0x290>
 80051d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d4:	3301      	adds	r3, #1
 80051d6:	647b      	str	r3, [r7, #68]	; 0x44
 80051d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051da:	b29b      	uxth	r3, r3
 80051dc:	029b      	lsls	r3, r3, #10
 80051de:	b29a      	uxth	r2, r3
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	801a      	strh	r2, [r3, #0]
 80051e4:	e014      	b.n	8005210 <PCD_EP_ISR_Handler+0x2c8>
 80051e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	647b      	str	r3, [r7, #68]	; 0x44
 80051ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	221f      	movs	r2, #31
 80051f4:	4013      	ands	r3, r2
 80051f6:	d102      	bne.n	80051fe <PCD_EP_ISR_Handler+0x2b6>
 80051f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fa:	3b01      	subs	r3, #1
 80051fc:	647b      	str	r3, [r7, #68]	; 0x44
 80051fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005200:	b29b      	uxth	r3, r3
 8005202:	029b      	lsls	r3, r3, #10
 8005204:	b29b      	uxth	r3, r3
 8005206:	4a13      	ldr	r2, [pc, #76]	; (8005254 <PCD_EP_ISR_Handler+0x30c>)
 8005208:	4313      	orrs	r3, r2
 800520a:	b29a      	uxth	r2, r3
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	b29a      	uxth	r2, r3
 8005218:	2012      	movs	r0, #18
 800521a:	183b      	adds	r3, r7, r0
 800521c:	4912      	ldr	r1, [pc, #72]	; (8005268 <PCD_EP_ISR_Handler+0x320>)
 800521e:	400a      	ands	r2, r1
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	183b      	adds	r3, r7, r0
 8005224:	183a      	adds	r2, r7, r0
 8005226:	8812      	ldrh	r2, [r2, #0]
 8005228:	2180      	movs	r1, #128	; 0x80
 800522a:	0149      	lsls	r1, r1, #5
 800522c:	404a      	eors	r2, r1
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	183b      	adds	r3, r7, r0
 8005232:	183a      	adds	r2, r7, r0
 8005234:	8812      	ldrh	r2, [r2, #0]
 8005236:	2180      	movs	r1, #128	; 0x80
 8005238:	0189      	lsls	r1, r1, #6
 800523a:	404a      	eors	r2, r1
 800523c:	801a      	strh	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	183a      	adds	r2, r7, r0
 8005244:	8812      	ldrh	r2, [r2, #0]
 8005246:	4909      	ldr	r1, [pc, #36]	; (800526c <PCD_EP_ISR_Handler+0x324>)
 8005248:	430a      	orrs	r2, r1
 800524a:	b292      	uxth	r2, r2
 800524c:	801a      	strh	r2, [r3, #0]
 800524e:	e259      	b.n	8005704 <PCD_EP_ISR_Handler+0x7bc>
 8005250:	ffff8f0f 	.word	0xffff8f0f
 8005254:	ffff8000 	.word	0xffff8000
 8005258:	00000402 	.word	0x00000402
 800525c:	00000406 	.word	0x00000406
 8005260:	00000f8f 	.word	0x00000f8f
 8005264:	ffff83ff 	.word	0xffff83ff
 8005268:	ffffbf8f 	.word	0xffffbf8f
 800526c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	001a      	movs	r2, r3
 8005276:	2055      	movs	r0, #85	; 0x55
 8005278:	183b      	adds	r3, r7, r0
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	18d2      	adds	r2, r2, r3
 8005280:	2152      	movs	r1, #82	; 0x52
 8005282:	187b      	adds	r3, r7, r1
 8005284:	8812      	ldrh	r2, [r2, #0]
 8005286:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005288:	187b      	adds	r3, r7, r1
 800528a:	2200      	movs	r2, #0
 800528c:	5e9b      	ldrsh	r3, [r3, r2]
 800528e:	2b00      	cmp	r3, #0
 8005290:	db00      	blt.n	8005294 <PCD_EP_ISR_Handler+0x34c>
 8005292:	e0fa      	b.n	800548a <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	001a      	movs	r2, r3
 800529a:	183b      	adds	r3, r7, r0
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	18d3      	adds	r3, r2, r3
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	2450      	movs	r4, #80	; 0x50
 80052a8:	193b      	adds	r3, r7, r4
 80052aa:	49cf      	ldr	r1, [pc, #828]	; (80055e8 <PCD_EP_ISR_Handler+0x6a0>)
 80052ac:	400a      	ands	r2, r1
 80052ae:	801a      	strh	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	001a      	movs	r2, r3
 80052b6:	183b      	adds	r3, r7, r0
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	18d3      	adds	r3, r2, r3
 80052be:	193a      	adds	r2, r7, r4
 80052c0:	8812      	ldrh	r2, [r2, #0]
 80052c2:	2180      	movs	r1, #128	; 0x80
 80052c4:	430a      	orrs	r2, r1
 80052c6:	b292      	uxth	r2, r2
 80052c8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80052ca:	183b      	adds	r3, r7, r0
 80052cc:	781a      	ldrb	r2, [r3, #0]
 80052ce:	0013      	movs	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	189b      	adds	r3, r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	3369      	adds	r3, #105	; 0x69
 80052d8:	33ff      	adds	r3, #255	; 0xff
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	18d3      	adds	r3, r2, r3
 80052de:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80052e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e2:	7b1b      	ldrb	r3, [r3, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d125      	bne.n	8005334 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2250      	movs	r2, #80	; 0x50
 80052ee:	5a9b      	ldrh	r3, [r3, r2]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	001a      	movs	r2, r3
 80052f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	18d2      	adds	r2, r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	18d3      	adds	r3, r2, r3
 8005302:	4aba      	ldr	r2, [pc, #744]	; (80055ec <PCD_EP_ISR_Handler+0x6a4>)
 8005304:	4694      	mov	ip, r2
 8005306:	4463      	add	r3, ip
 8005308:	881a      	ldrh	r2, [r3, #0]
 800530a:	2448      	movs	r4, #72	; 0x48
 800530c:	193b      	adds	r3, r7, r4
 800530e:	0592      	lsls	r2, r2, #22
 8005310:	0d92      	lsrs	r2, r2, #22
 8005312:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8005314:	193b      	adds	r3, r7, r4
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d100      	bne.n	800531e <PCD_EP_ISR_Handler+0x3d6>
 800531c:	e08d      	b.n	800543a <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005324:	6959      	ldr	r1, [r3, #20]
 8005326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005328:	88da      	ldrh	r2, [r3, #6]
 800532a:	193b      	adds	r3, r7, r4
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	f004 fd81 	bl	8009e34 <USB_ReadPMA>
 8005332:	e082      	b.n	800543a <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005336:	78db      	ldrb	r3, [r3, #3]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d10c      	bne.n	8005356 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800533c:	2348      	movs	r3, #72	; 0x48
 800533e:	18fc      	adds	r4, r7, r3
 8005340:	2352      	movs	r3, #82	; 0x52
 8005342:	18fb      	adds	r3, r7, r3
 8005344:	881a      	ldrh	r2, [r3, #0]
 8005346:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	0018      	movs	r0, r3
 800534c:	f000 f9ee 	bl	800572c <HAL_PCD_EP_DB_Receive>
 8005350:	0003      	movs	r3, r0
 8005352:	8023      	strh	r3, [r4, #0]
 8005354:	e071      	b.n	800543a <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	001a      	movs	r2, r3
 800535c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	18d3      	adds	r3, r2, r3
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29a      	uxth	r2, r3
 8005368:	204a      	movs	r0, #74	; 0x4a
 800536a:	183b      	adds	r3, r7, r0
 800536c:	49a0      	ldr	r1, [pc, #640]	; (80055f0 <PCD_EP_ISR_Handler+0x6a8>)
 800536e:	400a      	ands	r2, r1
 8005370:	801a      	strh	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	001a      	movs	r2, r3
 8005378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	18d3      	adds	r3, r2, r3
 8005380:	183a      	adds	r2, r7, r0
 8005382:	8812      	ldrh	r2, [r2, #0]
 8005384:	499b      	ldr	r1, [pc, #620]	; (80055f4 <PCD_EP_ISR_Handler+0x6ac>)
 8005386:	430a      	orrs	r2, r1
 8005388:	b292      	uxth	r2, r2
 800538a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	001a      	movs	r2, r3
 8005392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	18d3      	adds	r3, r2, r3
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	001a      	movs	r2, r3
 80053a0:	2380      	movs	r3, #128	; 0x80
 80053a2:	01db      	lsls	r3, r3, #7
 80053a4:	4013      	ands	r3, r2
 80053a6:	d024      	beq.n	80053f2 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2250      	movs	r2, #80	; 0x50
 80053ae:	5a9b      	ldrh	r3, [r3, r2]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	001a      	movs	r2, r3
 80053b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	18d2      	adds	r2, r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	18d3      	adds	r3, r2, r3
 80053c2:	4a8d      	ldr	r2, [pc, #564]	; (80055f8 <PCD_EP_ISR_Handler+0x6b0>)
 80053c4:	4694      	mov	ip, r2
 80053c6:	4463      	add	r3, ip
 80053c8:	881a      	ldrh	r2, [r3, #0]
 80053ca:	2448      	movs	r4, #72	; 0x48
 80053cc:	193b      	adds	r3, r7, r4
 80053ce:	0592      	lsls	r2, r2, #22
 80053d0:	0d92      	lsrs	r2, r2, #22
 80053d2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80053d4:	193b      	adds	r3, r7, r4
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d02e      	beq.n	800543a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e2:	6959      	ldr	r1, [r3, #20]
 80053e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e6:	891a      	ldrh	r2, [r3, #8]
 80053e8:	193b      	adds	r3, r7, r4
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	f004 fd22 	bl	8009e34 <USB_ReadPMA>
 80053f0:	e023      	b.n	800543a <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2250      	movs	r2, #80	; 0x50
 80053f8:	5a9b      	ldrh	r3, [r3, r2]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	001a      	movs	r2, r3
 80053fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	18d2      	adds	r2, r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	18d3      	adds	r3, r2, r3
 800540c:	4a77      	ldr	r2, [pc, #476]	; (80055ec <PCD_EP_ISR_Handler+0x6a4>)
 800540e:	4694      	mov	ip, r2
 8005410:	4463      	add	r3, ip
 8005412:	881a      	ldrh	r2, [r3, #0]
 8005414:	2448      	movs	r4, #72	; 0x48
 8005416:	193b      	adds	r3, r7, r4
 8005418:	0592      	lsls	r2, r2, #22
 800541a:	0d92      	lsrs	r2, r2, #22
 800541c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800541e:	193b      	adds	r3, r7, r4
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800542c:	6959      	ldr	r1, [r3, #20]
 800542e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005430:	895a      	ldrh	r2, [r3, #10]
 8005432:	193b      	adds	r3, r7, r4
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	f004 fcfd 	bl	8009e34 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800543a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800543c:	69da      	ldr	r2, [r3, #28]
 800543e:	2148      	movs	r1, #72	; 0x48
 8005440:	187b      	adds	r3, r7, r1
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	18d2      	adds	r2, r2, r3
 8005446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005448:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800544a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544c:	695a      	ldr	r2, [r3, #20]
 800544e:	187b      	adds	r3, r7, r1
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	18d2      	adds	r2, r2, r3
 8005454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005456:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <PCD_EP_ISR_Handler+0x524>
 8005460:	187b      	adds	r3, r7, r1
 8005462:	881a      	ldrh	r2, [r3, #0]
 8005464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	429a      	cmp	r2, r3
 800546a:	d207      	bcs.n	800547c <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800546c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546e:	781a      	ldrb	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	0011      	movs	r1, r2
 8005474:	0018      	movs	r0, r3
 8005476:	f00b fee8 	bl	801124a <HAL_PCD_DataOutStageCallback>
 800547a:	e006      	b.n	800548a <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005482:	0011      	movs	r1, r2
 8005484:	0018      	movs	r0, r3
 8005486:	f003 fa9d 	bl	80089c4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800548a:	2452      	movs	r4, #82	; 0x52
 800548c:	193b      	adds	r3, r7, r4
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	2280      	movs	r2, #128	; 0x80
 8005492:	4013      	ands	r3, r2
 8005494:	d100      	bne.n	8005498 <PCD_EP_ISR_Handler+0x550>
 8005496:	e135      	b.n	8005704 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8005498:	2055      	movs	r0, #85	; 0x55
 800549a:	183b      	adds	r3, r7, r0
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	0013      	movs	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	189b      	adds	r3, r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	18d3      	adds	r3, r2, r3
 80054ac:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	001a      	movs	r2, r3
 80054b4:	183b      	adds	r3, r7, r0
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	18d3      	adds	r3, r2, r3
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29a      	uxth	r2, r3
 80054c0:	2542      	movs	r5, #66	; 0x42
 80054c2:	197b      	adds	r3, r7, r5
 80054c4:	494d      	ldr	r1, [pc, #308]	; (80055fc <PCD_EP_ISR_Handler+0x6b4>)
 80054c6:	400a      	ands	r2, r1
 80054c8:	801a      	strh	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	001a      	movs	r2, r3
 80054d0:	183b      	adds	r3, r7, r0
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	18d3      	adds	r3, r2, r3
 80054d8:	197a      	adds	r2, r7, r5
 80054da:	8812      	ldrh	r2, [r2, #0]
 80054dc:	4948      	ldr	r1, [pc, #288]	; (8005600 <PCD_EP_ISR_Handler+0x6b8>)
 80054de:	430a      	orrs	r2, r1
 80054e0:	b292      	uxth	r2, r2
 80054e2:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80054e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e6:	78db      	ldrb	r3, [r3, #3]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d100      	bne.n	80054ee <PCD_EP_ISR_Handler+0x5a6>
 80054ec:	e0ad      	b.n	800564a <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80054ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f0:	2200      	movs	r2, #0
 80054f2:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054f4:	193b      	adds	r3, r7, r4
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	2240      	movs	r2, #64	; 0x40
 80054fa:	4013      	ands	r3, r2
 80054fc:	d046      	beq.n	800558c <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005500:	785b      	ldrb	r3, [r3, #1]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d125      	bne.n	8005552 <PCD_EP_ISR_Handler+0x60a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2250      	movs	r2, #80	; 0x50
 8005512:	5a9b      	ldrh	r3, [r3, r2]
 8005514:	b29b      	uxth	r3, r3
 8005516:	001a      	movs	r2, r3
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	189b      	adds	r3, r3, r2
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	00da      	lsls	r2, r3, #3
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	18d3      	adds	r3, r2, r3
 8005528:	4a33      	ldr	r2, [pc, #204]	; (80055f8 <PCD_EP_ISR_Handler+0x6b0>)
 800552a:	4694      	mov	ip, r2
 800552c:	4463      	add	r3, ip
 800552e:	623b      	str	r3, [r7, #32]
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	4a33      	ldr	r2, [pc, #204]	; (8005604 <PCD_EP_ISR_Handler+0x6bc>)
 8005538:	4013      	ands	r3, r2
 800553a:	b29a      	uxth	r2, r3
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	801a      	strh	r2, [r3, #0]
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	4a2e      	ldr	r2, [pc, #184]	; (8005600 <PCD_EP_ISR_Handler+0x6b8>)
 8005548:	4313      	orrs	r3, r2
 800554a:	b29a      	uxth	r2, r3
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	801a      	strh	r2, [r3, #0]
 8005550:	e073      	b.n	800563a <PCD_EP_ISR_Handler+0x6f2>
 8005552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005554:	785b      	ldrb	r3, [r3, #1]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d16f      	bne.n	800563a <PCD_EP_ISR_Handler+0x6f2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2250      	movs	r2, #80	; 0x50
 8005566:	5a9b      	ldrh	r3, [r3, r2]
 8005568:	b29b      	uxth	r3, r3
 800556a:	001a      	movs	r2, r3
 800556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556e:	189b      	adds	r3, r3, r2
 8005570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	00da      	lsls	r2, r3, #3
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557a:	18d3      	adds	r3, r2, r3
 800557c:	4a1e      	ldr	r2, [pc, #120]	; (80055f8 <PCD_EP_ISR_Handler+0x6b0>)
 800557e:	4694      	mov	ip, r2
 8005580:	4463      	add	r3, ip
 8005582:	62bb      	str	r3, [r7, #40]	; 0x28
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	2200      	movs	r2, #0
 8005588:	801a      	strh	r2, [r3, #0]
 800558a:	e056      	b.n	800563a <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005594:	785b      	ldrb	r3, [r3, #1]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d136      	bne.n	8005608 <PCD_EP_ISR_Handler+0x6c0>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	637b      	str	r3, [r7, #52]	; 0x34
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2250      	movs	r2, #80	; 0x50
 80055a6:	5a9b      	ldrh	r3, [r3, r2]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	001a      	movs	r2, r3
 80055ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ae:	189b      	adds	r3, r3, r2
 80055b0:	637b      	str	r3, [r7, #52]	; 0x34
 80055b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	00da      	lsls	r2, r3, #3
 80055b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ba:	18d3      	adds	r3, r2, r3
 80055bc:	4a0b      	ldr	r2, [pc, #44]	; (80055ec <PCD_EP_ISR_Handler+0x6a4>)
 80055be:	4694      	mov	ip, r2
 80055c0:	4463      	add	r3, ip
 80055c2:	633b      	str	r3, [r7, #48]	; 0x30
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	4a0e      	ldr	r2, [pc, #56]	; (8005604 <PCD_EP_ISR_Handler+0x6bc>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	801a      	strh	r2, [r3, #0]
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	4a09      	ldr	r2, [pc, #36]	; (8005600 <PCD_EP_ISR_Handler+0x6b8>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	b29a      	uxth	r2, r3
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	801a      	strh	r2, [r3, #0]
 80055e4:	e029      	b.n	800563a <PCD_EP_ISR_Handler+0x6f2>
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	00000f8f 	.word	0x00000f8f
 80055ec:	00000406 	.word	0x00000406
 80055f0:	ffff8f8f 	.word	0xffff8f8f
 80055f4:	ffff80c0 	.word	0xffff80c0
 80055f8:	00000402 	.word	0x00000402
 80055fc:	ffff8f0f 	.word	0xffff8f0f
 8005600:	ffff8000 	.word	0xffff8000
 8005604:	ffff83ff 	.word	0xffff83ff
 8005608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560a:	785b      	ldrb	r3, [r3, #1]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d114      	bne.n	800563a <PCD_EP_ISR_Handler+0x6f2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2250      	movs	r2, #80	; 0x50
 8005616:	5a9b      	ldrh	r3, [r3, r2]
 8005618:	b29b      	uxth	r3, r3
 800561a:	001a      	movs	r2, r3
 800561c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561e:	189b      	adds	r3, r3, r2
 8005620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	00da      	lsls	r2, r3, #3
 8005628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800562a:	18d3      	adds	r3, r2, r3
 800562c:	4a3d      	ldr	r2, [pc, #244]	; (8005724 <PCD_EP_ISR_Handler+0x7dc>)
 800562e:	4694      	mov	ip, r2
 8005630:	4463      	add	r3, ip
 8005632:	63bb      	str	r3, [r7, #56]	; 0x38
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	2200      	movs	r2, #0
 8005638:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800563a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563c:	781a      	ldrb	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	0011      	movs	r1, r2
 8005642:	0018      	movs	r0, r3
 8005644:	f00b fe22 	bl	801128c <HAL_PCD_DataInStageCallback>
 8005648:	e05c      	b.n	8005704 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800564a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800564c:	78db      	ldrb	r3, [r3, #3]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d150      	bne.n	80056f4 <PCD_EP_ISR_Handler+0x7ac>
 8005652:	2352      	movs	r3, #82	; 0x52
 8005654:	18fb      	adds	r3, r7, r3
 8005656:	881a      	ldrh	r2, [r3, #0]
 8005658:	2380      	movs	r3, #128	; 0x80
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	4013      	ands	r3, r2
 800565e:	d149      	bne.n	80056f4 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2250      	movs	r2, #80	; 0x50
 8005666:	5a9b      	ldrh	r3, [r3, r2]
 8005668:	b29b      	uxth	r3, r3
 800566a:	001a      	movs	r2, r3
 800566c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	18d2      	adds	r2, r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	18d3      	adds	r3, r2, r3
 800567a:	4a2b      	ldr	r2, [pc, #172]	; (8005728 <PCD_EP_ISR_Handler+0x7e0>)
 800567c:	4694      	mov	ip, r2
 800567e:	4463      	add	r3, ip
 8005680:	881a      	ldrh	r2, [r3, #0]
 8005682:	2140      	movs	r1, #64	; 0x40
 8005684:	187b      	adds	r3, r7, r1
 8005686:	0592      	lsls	r2, r2, #22
 8005688:	0d92      	lsrs	r2, r2, #22
 800568a:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 800568c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568e:	699a      	ldr	r2, [r3, #24]
 8005690:	187b      	adds	r3, r7, r1
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d907      	bls.n	80056a8 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8005698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	187b      	adds	r3, r7, r1
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	1ad2      	subs	r2, r2, r3
 80056a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a4:	619a      	str	r2, [r3, #24]
 80056a6:	e002      	b.n	80056ae <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 80056a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056aa:	2200      	movs	r2, #0
 80056ac:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80056ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d107      	bne.n	80056c6 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b8:	781a      	ldrb	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	0011      	movs	r1, r2
 80056be:	0018      	movs	r0, r3
 80056c0:	f00b fde4 	bl	801128c <HAL_PCD_DataInStageCallback>
 80056c4:	e01e      	b.n	8005704 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80056c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c8:	695a      	ldr	r2, [r3, #20]
 80056ca:	2140      	movs	r1, #64	; 0x40
 80056cc:	187b      	adds	r3, r7, r1
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	18d2      	adds	r2, r2, r3
 80056d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80056d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d8:	69da      	ldr	r2, [r3, #28]
 80056da:	187b      	adds	r3, r7, r1
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	18d2      	adds	r2, r2, r3
 80056e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056ea:	0011      	movs	r1, r2
 80056ec:	0018      	movs	r0, r3
 80056ee:	f003 f969 	bl	80089c4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80056f2:	e007      	b.n	8005704 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80056f4:	2352      	movs	r3, #82	; 0x52
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	881a      	ldrh	r2, [r3, #0]
 80056fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	0018      	movs	r0, r3
 8005700:	f000 f930 	bl	8005964 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2244      	movs	r2, #68	; 0x44
 800570a:	5a9b      	ldrh	r3, [r3, r2]
 800570c:	b29b      	uxth	r3, r3
 800570e:	b21b      	sxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	da01      	bge.n	8005718 <PCD_EP_ISR_Handler+0x7d0>
 8005714:	f7ff fc1e 	bl	8004f54 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	0018      	movs	r0, r3
 800571c:	46bd      	mov	sp, r7
 800571e:	b016      	add	sp, #88	; 0x58
 8005720:	bdb0      	pop	{r4, r5, r7, pc}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	00000406 	.word	0x00000406
 8005728:	00000402 	.word	0x00000402

0800572c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b089      	sub	sp, #36	; 0x24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	1dbb      	adds	r3, r7, #6
 8005738:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800573a:	1dbb      	adds	r3, r7, #6
 800573c:	881a      	ldrh	r2, [r3, #0]
 800573e:	2380      	movs	r3, #128	; 0x80
 8005740:	01db      	lsls	r3, r3, #7
 8005742:	4013      	ands	r3, r2
 8005744:	d100      	bne.n	8005748 <HAL_PCD_EP_DB_Receive+0x1c>
 8005746:	e07d      	b.n	8005844 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2250      	movs	r2, #80	; 0x50
 800574e:	5a9b      	ldrh	r3, [r3, r2]
 8005750:	b29b      	uxth	r3, r3
 8005752:	001a      	movs	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	18d2      	adds	r2, r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	18d3      	adds	r3, r2, r3
 8005762:	4a7a      	ldr	r2, [pc, #488]	; (800594c <HAL_PCD_EP_DB_Receive+0x220>)
 8005764:	4694      	mov	ip, r2
 8005766:	4463      	add	r3, ip
 8005768:	881a      	ldrh	r2, [r3, #0]
 800576a:	211a      	movs	r1, #26
 800576c:	187b      	adds	r3, r7, r1
 800576e:	0592      	lsls	r2, r2, #22
 8005770:	0d92      	lsrs	r2, r2, #22
 8005772:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	699a      	ldr	r2, [r3, #24]
 8005778:	187b      	adds	r3, r7, r1
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	429a      	cmp	r2, r3
 800577e:	d307      	bcc.n	8005790 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	187b      	adds	r3, r7, r1
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	1ad2      	subs	r2, r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	619a      	str	r2, [r3, #24]
 800578e:	e002      	b.n	8005796 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2200      	movs	r2, #0
 8005794:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d121      	bne.n	80057e2 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	001a      	movs	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	18d3      	adds	r3, r2, r3
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	2018      	movs	r0, #24
 80057b2:	183b      	adds	r3, r7, r0
 80057b4:	4966      	ldr	r1, [pc, #408]	; (8005950 <HAL_PCD_EP_DB_Receive+0x224>)
 80057b6:	400a      	ands	r2, r1
 80057b8:	801a      	strh	r2, [r3, #0]
 80057ba:	183b      	adds	r3, r7, r0
 80057bc:	183a      	adds	r2, r7, r0
 80057be:	8812      	ldrh	r2, [r2, #0]
 80057c0:	2180      	movs	r1, #128	; 0x80
 80057c2:	0189      	lsls	r1, r1, #6
 80057c4:	404a      	eors	r2, r1
 80057c6:	801a      	strh	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	001a      	movs	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	18d3      	adds	r3, r2, r3
 80057d6:	183a      	adds	r2, r7, r0
 80057d8:	8812      	ldrh	r2, [r2, #0]
 80057da:	495e      	ldr	r1, [pc, #376]	; (8005954 <HAL_PCD_EP_DB_Receive+0x228>)
 80057dc:	430a      	orrs	r2, r1
 80057de:	b292      	uxth	r2, r2
 80057e0:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057e2:	1dbb      	adds	r3, r7, #6
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	2240      	movs	r2, #64	; 0x40
 80057e8:	4013      	ands	r3, r2
 80057ea:	d01a      	beq.n	8005822 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	001a      	movs	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	18d3      	adds	r3, r2, r3
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	2016      	movs	r0, #22
 8005800:	183b      	adds	r3, r7, r0
 8005802:	4955      	ldr	r1, [pc, #340]	; (8005958 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005804:	400a      	ands	r2, r1
 8005806:	801a      	strh	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	001a      	movs	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	18d3      	adds	r3, r2, r3
 8005816:	183a      	adds	r2, r7, r0
 8005818:	8812      	ldrh	r2, [r2, #0]
 800581a:	4950      	ldr	r1, [pc, #320]	; (800595c <HAL_PCD_EP_DB_Receive+0x230>)
 800581c:	430a      	orrs	r2, r1
 800581e:	b292      	uxth	r2, r2
 8005820:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005822:	241a      	movs	r4, #26
 8005824:	193b      	adds	r3, r7, r4
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d100      	bne.n	800582e <HAL_PCD_EP_DB_Receive+0x102>
 800582c:	e086      	b.n	800593c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6818      	ldr	r0, [r3, #0]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6959      	ldr	r1, [r3, #20]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	891a      	ldrh	r2, [r3, #8]
 800583a:	193b      	adds	r3, r7, r4
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	f004 faf9 	bl	8009e34 <USB_ReadPMA>
 8005842:	e07b      	b.n	800593c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2250      	movs	r2, #80	; 0x50
 800584a:	5a9b      	ldrh	r3, [r3, r2]
 800584c:	b29b      	uxth	r3, r3
 800584e:	001a      	movs	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	18d2      	adds	r2, r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	18d3      	adds	r3, r2, r3
 800585e:	4a40      	ldr	r2, [pc, #256]	; (8005960 <HAL_PCD_EP_DB_Receive+0x234>)
 8005860:	4694      	mov	ip, r2
 8005862:	4463      	add	r3, ip
 8005864:	881a      	ldrh	r2, [r3, #0]
 8005866:	211a      	movs	r1, #26
 8005868:	187b      	adds	r3, r7, r1
 800586a:	0592      	lsls	r2, r2, #22
 800586c:	0d92      	lsrs	r2, r2, #22
 800586e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	699a      	ldr	r2, [r3, #24]
 8005874:	187b      	adds	r3, r7, r1
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d307      	bcc.n	800588c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	699a      	ldr	r2, [r3, #24]
 8005880:	187b      	adds	r3, r7, r1
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	1ad2      	subs	r2, r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	619a      	str	r2, [r3, #24]
 800588a:	e002      	b.n	8005892 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2200      	movs	r2, #0
 8005890:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d121      	bne.n	80058de <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	001a      	movs	r2, r3
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	18d3      	adds	r3, r2, r3
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	201e      	movs	r0, #30
 80058ae:	183b      	adds	r3, r7, r0
 80058b0:	4927      	ldr	r1, [pc, #156]	; (8005950 <HAL_PCD_EP_DB_Receive+0x224>)
 80058b2:	400a      	ands	r2, r1
 80058b4:	801a      	strh	r2, [r3, #0]
 80058b6:	183b      	adds	r3, r7, r0
 80058b8:	183a      	adds	r2, r7, r0
 80058ba:	8812      	ldrh	r2, [r2, #0]
 80058bc:	2180      	movs	r1, #128	; 0x80
 80058be:	0189      	lsls	r1, r1, #6
 80058c0:	404a      	eors	r2, r1
 80058c2:	801a      	strh	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	001a      	movs	r2, r3
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	18d3      	adds	r3, r2, r3
 80058d2:	183a      	adds	r2, r7, r0
 80058d4:	8812      	ldrh	r2, [r2, #0]
 80058d6:	491f      	ldr	r1, [pc, #124]	; (8005954 <HAL_PCD_EP_DB_Receive+0x228>)
 80058d8:	430a      	orrs	r2, r1
 80058da:	b292      	uxth	r2, r2
 80058dc:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80058de:	1dbb      	adds	r3, r7, #6
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	2240      	movs	r2, #64	; 0x40
 80058e4:	4013      	ands	r3, r2
 80058e6:	d11a      	bne.n	800591e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	001a      	movs	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	18d3      	adds	r3, r2, r3
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	201c      	movs	r0, #28
 80058fc:	183b      	adds	r3, r7, r0
 80058fe:	4916      	ldr	r1, [pc, #88]	; (8005958 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005900:	400a      	ands	r2, r1
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	001a      	movs	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	18d3      	adds	r3, r2, r3
 8005912:	183a      	adds	r2, r7, r0
 8005914:	8812      	ldrh	r2, [r2, #0]
 8005916:	4911      	ldr	r1, [pc, #68]	; (800595c <HAL_PCD_EP_DB_Receive+0x230>)
 8005918:	430a      	orrs	r2, r1
 800591a:	b292      	uxth	r2, r2
 800591c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800591e:	241a      	movs	r4, #26
 8005920:	193b      	adds	r3, r7, r4
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d009      	beq.n	800593c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	6959      	ldr	r1, [r3, #20]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	895a      	ldrh	r2, [r3, #10]
 8005934:	193b      	adds	r3, r7, r4
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	f004 fa7c 	bl	8009e34 <USB_ReadPMA>
    }
  }

  return count;
 800593c:	231a      	movs	r3, #26
 800593e:	18fb      	adds	r3, r7, r3
 8005940:	881b      	ldrh	r3, [r3, #0]
}
 8005942:	0018      	movs	r0, r3
 8005944:	46bd      	mov	sp, r7
 8005946:	b009      	add	sp, #36	; 0x24
 8005948:	bd90      	pop	{r4, r7, pc}
 800594a:	46c0      	nop			; (mov r8, r8)
 800594c:	00000402 	.word	0x00000402
 8005950:	ffffbf8f 	.word	0xffffbf8f
 8005954:	ffff8080 	.word	0xffff8080
 8005958:	ffff8f8f 	.word	0xffff8f8f
 800595c:	ffff80c0 	.word	0xffff80c0
 8005960:	00000406 	.word	0x00000406

08005964 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b0a2      	sub	sp, #136	; 0x88
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	1dbb      	adds	r3, r7, #6
 8005970:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005972:	1dbb      	adds	r3, r7, #6
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	2240      	movs	r2, #64	; 0x40
 8005978:	4013      	ands	r3, r2
 800597a:	d100      	bne.n	800597e <HAL_PCD_EP_DB_Transmit+0x1a>
 800597c:	e1c8      	b.n	8005d10 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2250      	movs	r2, #80	; 0x50
 8005984:	5a9b      	ldrh	r3, [r3, r2]
 8005986:	b29b      	uxth	r3, r3
 8005988:	001a      	movs	r2, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	18d2      	adds	r2, r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	18d3      	adds	r3, r2, r3
 8005998:	4ad7      	ldr	r2, [pc, #860]	; (8005cf8 <HAL_PCD_EP_DB_Transmit+0x394>)
 800599a:	4694      	mov	ip, r2
 800599c:	4463      	add	r3, ip
 800599e:	881a      	ldrh	r2, [r3, #0]
 80059a0:	214e      	movs	r1, #78	; 0x4e
 80059a2:	187b      	adds	r3, r7, r1
 80059a4:	0592      	lsls	r2, r2, #22
 80059a6:	0d92      	lsrs	r2, r2, #22
 80059a8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	187b      	adds	r3, r7, r1
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d907      	bls.n	80059c6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	187b      	adds	r3, r7, r1
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	1ad2      	subs	r2, r2, r3
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	619a      	str	r2, [r3, #24]
 80059c4:	e002      	b.n	80059cc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2200      	movs	r2, #0
 80059ca:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d000      	beq.n	80059d6 <HAL_PCD_EP_DB_Transmit+0x72>
 80059d4:	e0b5      	b.n	8005b42 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d125      	bne.n	8005a2a <HAL_PCD_EP_DB_Transmit+0xc6>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2250      	movs	r2, #80	; 0x50
 80059ea:	5a9b      	ldrh	r3, [r3, r2]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	001a      	movs	r2, r3
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	189b      	adds	r3, r3, r2
 80059f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	00da      	lsls	r2, r3, #3
 80059fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fe:	18d3      	adds	r3, r2, r3
 8005a00:	4abd      	ldr	r2, [pc, #756]	; (8005cf8 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005a02:	4694      	mov	ip, r2
 8005a04:	4463      	add	r3, ip
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	4abb      	ldr	r2, [pc, #748]	; (8005cfc <HAL_PCD_EP_DB_Transmit+0x398>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	4ab8      	ldr	r2, [pc, #736]	; (8005d00 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	801a      	strh	r2, [r3, #0]
 8005a28:	e01b      	b.n	8005a62 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	785b      	ldrb	r3, [r3, #1]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d117      	bne.n	8005a62 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	633b      	str	r3, [r7, #48]	; 0x30
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2250      	movs	r2, #80	; 0x50
 8005a3e:	5a9b      	ldrh	r3, [r3, r2]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	001a      	movs	r2, r3
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	189b      	adds	r3, r3, r2
 8005a48:	633b      	str	r3, [r7, #48]	; 0x30
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	00da      	lsls	r2, r3, #3
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	18d3      	adds	r3, r2, r3
 8005a54:	4aa8      	ldr	r2, [pc, #672]	; (8005cf8 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005a56:	4694      	mov	ip, r2
 8005a58:	4463      	add	r3, ip
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	2200      	movs	r2, #0
 8005a60:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	623b      	str	r3, [r7, #32]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	785b      	ldrb	r3, [r3, #1]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d125      	bne.n	8005abc <HAL_PCD_EP_DB_Transmit+0x158>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2250      	movs	r2, #80	; 0x50
 8005a7c:	5a9b      	ldrh	r3, [r3, r2]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	001a      	movs	r2, r3
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	189b      	adds	r3, r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	00da      	lsls	r2, r3, #3
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	18d3      	adds	r3, r2, r3
 8005a92:	4a9c      	ldr	r2, [pc, #624]	; (8005d04 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8005a94:	4694      	mov	ip, r2
 8005a96:	4463      	add	r3, ip
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	4a96      	ldr	r2, [pc, #600]	; (8005cfc <HAL_PCD_EP_DB_Transmit+0x398>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	801a      	strh	r2, [r3, #0]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	4a93      	ldr	r2, [pc, #588]	; (8005d00 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	801a      	strh	r2, [r3, #0]
 8005aba:	e018      	b.n	8005aee <HAL_PCD_EP_DB_Transmit+0x18a>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	785b      	ldrb	r3, [r3, #1]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d114      	bne.n	8005aee <HAL_PCD_EP_DB_Transmit+0x18a>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2250      	movs	r2, #80	; 0x50
 8005aca:	5a9b      	ldrh	r3, [r3, r2]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	001a      	movs	r2, r3
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	189b      	adds	r3, r3, r2
 8005ad4:	623b      	str	r3, [r7, #32]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	00da      	lsls	r2, r3, #3
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	18d3      	adds	r3, r2, r3
 8005ae0:	4a88      	ldr	r2, [pc, #544]	; (8005d04 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8005ae2:	4694      	mov	ip, r2
 8005ae4:	4463      	add	r3, ip
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	2200      	movs	r2, #0
 8005aec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	781a      	ldrb	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	0011      	movs	r1, r2
 8005af6:	0018      	movs	r0, r3
 8005af8:	f00b fbc8 	bl	801128c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005afc:	1dbb      	adds	r3, r7, #6
 8005afe:	881a      	ldrh	r2, [r3, #0]
 8005b00:	2380      	movs	r3, #128	; 0x80
 8005b02:	01db      	lsls	r3, r3, #7
 8005b04:	4013      	ands	r3, r2
 8005b06:	d100      	bne.n	8005b0a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005b08:	e2d4      	b.n	80060b4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	001a      	movs	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	18d3      	adds	r3, r2, r3
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	2012      	movs	r0, #18
 8005b1e:	183b      	adds	r3, r7, r0
 8005b20:	4979      	ldr	r1, [pc, #484]	; (8005d08 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8005b22:	400a      	ands	r2, r1
 8005b24:	801a      	strh	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	001a      	movs	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	18d3      	adds	r3, r2, r3
 8005b34:	183a      	adds	r2, r7, r0
 8005b36:	8812      	ldrh	r2, [r2, #0]
 8005b38:	4974      	ldr	r1, [pc, #464]	; (8005d0c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	b292      	uxth	r2, r2
 8005b3e:	801a      	strh	r2, [r3, #0]
 8005b40:	e2b8      	b.n	80060b4 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b42:	1dbb      	adds	r3, r7, #6
 8005b44:	881a      	ldrh	r2, [r3, #0]
 8005b46:	2380      	movs	r3, #128	; 0x80
 8005b48:	01db      	lsls	r3, r3, #7
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	d01a      	beq.n	8005b84 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	001a      	movs	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	18d3      	adds	r3, r2, r3
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	2044      	movs	r0, #68	; 0x44
 8005b62:	183b      	adds	r3, r7, r0
 8005b64:	4968      	ldr	r1, [pc, #416]	; (8005d08 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8005b66:	400a      	ands	r2, r1
 8005b68:	801a      	strh	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	001a      	movs	r2, r3
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	18d3      	adds	r3, r2, r3
 8005b78:	183a      	adds	r2, r7, r0
 8005b7a:	8812      	ldrh	r2, [r2, #0]
 8005b7c:	4963      	ldr	r1, [pc, #396]	; (8005d0c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	b292      	uxth	r2, r2
 8005b82:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2224      	movs	r2, #36	; 0x24
 8005b88:	5c9b      	ldrb	r3, [r3, r2]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d000      	beq.n	8005b90 <HAL_PCD_EP_DB_Transmit+0x22c>
 8005b8e:	e291      	b.n	80060b4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	695a      	ldr	r2, [r3, #20]
 8005b94:	214e      	movs	r1, #78	; 0x4e
 8005b96:	187b      	adds	r3, r7, r1
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	18d2      	adds	r2, r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	69da      	ldr	r2, [r3, #28]
 8005ba4:	187b      	adds	r3, r7, r1
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	18d2      	adds	r2, r2, r3
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6a1a      	ldr	r2, [r3, #32]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d309      	bcc.n	8005bce <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	6a1a      	ldr	r2, [r3, #32]
 8005bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc6:	1ad2      	subs	r2, r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	621a      	str	r2, [r3, #32]
 8005bcc:	e016      	b.n	8005bfc <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d108      	bne.n	8005be8 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8005bd6:	234e      	movs	r3, #78	; 0x4e
 8005bd8:	18fb      	adds	r3, r7, r3
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2224      	movs	r2, #36	; 0x24
 8005be2:	2100      	movs	r1, #0
 8005be4:	5499      	strb	r1, [r3, r2]
 8005be6:	e009      	b.n	8005bfc <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2224      	movs	r2, #36	; 0x24
 8005bec:	2100      	movs	r1, #0
 8005bee:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d150      	bne.n	8005ca6 <HAL_PCD_EP_DB_Transmit+0x342>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2250      	movs	r2, #80	; 0x50
 8005c10:	5a9b      	ldrh	r3, [r3, r2]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	001a      	movs	r2, r3
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	189b      	adds	r3, r3, r2
 8005c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	00da      	lsls	r2, r3, #3
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	18d3      	adds	r3, r2, r3
 8005c26:	4a34      	ldr	r2, [pc, #208]	; (8005cf8 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005c28:	4694      	mov	ip, r2
 8005c2a:	4463      	add	r3, ip
 8005c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d110      	bne.n	8005c56 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8005c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	4a30      	ldr	r2, [pc, #192]	; (8005cfc <HAL_PCD_EP_DB_Transmit+0x398>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c42:	801a      	strh	r2, [r3, #0]
 8005c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	4a2d      	ldr	r2, [pc, #180]	; (8005d00 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c52:	801a      	strh	r2, [r3, #0]
 8005c54:	e044      	b.n	8005ce0 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c58:	2b3e      	cmp	r3, #62	; 0x3e
 8005c5a:	d810      	bhi.n	8005c7e <HAL_PCD_EP_DB_Transmit+0x31a>
 8005c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5e:	085b      	lsrs	r3, r3, #1
 8005c60:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c64:	2201      	movs	r2, #1
 8005c66:	4013      	ands	r3, r2
 8005c68:	d002      	beq.n	8005c70 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	029b      	lsls	r3, r3, #10
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7a:	801a      	strh	r2, [r3, #0]
 8005c7c:	e030      	b.n	8005ce0 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c86:	221f      	movs	r2, #31
 8005c88:	4013      	ands	r3, r2
 8005c8a:	d102      	bne.n	8005c92 <HAL_PCD_EP_DB_Transmit+0x32e>
 8005c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	029b      	lsls	r3, r3, #10
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	4a19      	ldr	r2, [pc, #100]	; (8005d00 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca2:	801a      	strh	r2, [r3, #0]
 8005ca4:	e01c      	b.n	8005ce0 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	785b      	ldrb	r3, [r3, #1]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d118      	bne.n	8005ce0 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2250      	movs	r2, #80	; 0x50
 8005cba:	5a9b      	ldrh	r3, [r3, r2]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	001a      	movs	r2, r3
 8005cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc2:	189b      	adds	r3, r3, r2
 8005cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	00da      	lsls	r2, r3, #3
 8005ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cce:	18d3      	adds	r3, r2, r3
 8005cd0:	4a09      	ldr	r2, [pc, #36]	; (8005cf8 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005cd2:	4694      	mov	ip, r2
 8005cd4:	4463      	add	r3, ip
 8005cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cde:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6818      	ldr	r0, [r3, #0]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6959      	ldr	r1, [r3, #20]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	891a      	ldrh	r2, [r3, #8]
 8005cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	f004 f85c 	bl	8009dac <USB_WritePMA>
 8005cf4:	e1de      	b.n	80060b4 <HAL_PCD_EP_DB_Transmit+0x750>
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	00000402 	.word	0x00000402
 8005cfc:	ffff83ff 	.word	0xffff83ff
 8005d00:	ffff8000 	.word	0xffff8000
 8005d04:	00000406 	.word	0x00000406
 8005d08:	ffff8f8f 	.word	0xffff8f8f
 8005d0c:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2250      	movs	r2, #80	; 0x50
 8005d16:	5a9b      	ldrh	r3, [r3, r2]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	001a      	movs	r2, r3
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	18d2      	adds	r2, r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	18d3      	adds	r3, r2, r3
 8005d2a:	4aca      	ldr	r2, [pc, #808]	; (8006054 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005d2c:	4694      	mov	ip, r2
 8005d2e:	4463      	add	r3, ip
 8005d30:	881a      	ldrh	r2, [r3, #0]
 8005d32:	214e      	movs	r1, #78	; 0x4e
 8005d34:	187b      	adds	r3, r7, r1
 8005d36:	0592      	lsls	r2, r2, #22
 8005d38:	0d92      	lsrs	r2, r2, #22
 8005d3a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	699a      	ldr	r2, [r3, #24]
 8005d40:	187b      	adds	r3, r7, r1
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d307      	bcc.n	8005d58 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	699a      	ldr	r2, [r3, #24]
 8005d4c:	187b      	adds	r3, r7, r1
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	1ad2      	subs	r2, r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	619a      	str	r2, [r3, #24]
 8005d56:	e002      	b.n	8005d5e <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d000      	beq.n	8005d68 <HAL_PCD_EP_DB_Transmit+0x404>
 8005d66:	e0c0      	b.n	8005eea <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d125      	bne.n	8005dbc <HAL_PCD_EP_DB_Transmit+0x458>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2250      	movs	r2, #80	; 0x50
 8005d7c:	5a9b      	ldrh	r3, [r3, r2]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	001a      	movs	r2, r3
 8005d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d84:	189b      	adds	r3, r3, r2
 8005d86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	00da      	lsls	r2, r3, #3
 8005d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d90:	18d3      	adds	r3, r2, r3
 8005d92:	4ab1      	ldr	r2, [pc, #708]	; (8006058 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005d94:	4694      	mov	ip, r2
 8005d96:	4463      	add	r3, ip
 8005d98:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	4aae      	ldr	r2, [pc, #696]	; (800605c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005da8:	801a      	strh	r2, [r3, #0]
 8005daa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	4aab      	ldr	r2, [pc, #684]	; (8006060 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005db8:	801a      	strh	r2, [r3, #0]
 8005dba:	e01b      	b.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x490>
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	785b      	ldrb	r3, [r3, #1]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d117      	bne.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x490>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	677b      	str	r3, [r7, #116]	; 0x74
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2250      	movs	r2, #80	; 0x50
 8005dd0:	5a9b      	ldrh	r3, [r3, r2]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	001a      	movs	r2, r3
 8005dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd8:	189b      	adds	r3, r3, r2
 8005dda:	677b      	str	r3, [r7, #116]	; 0x74
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	00da      	lsls	r2, r3, #3
 8005de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005de4:	18d3      	adds	r3, r2, r3
 8005de6:	4a9c      	ldr	r2, [pc, #624]	; (8006058 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005de8:	4694      	mov	ip, r2
 8005dea:	4463      	add	r3, ip
 8005dec:	673b      	str	r3, [r7, #112]	; 0x70
 8005dee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005df0:	2200      	movs	r2, #0
 8005df2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	785b      	ldrb	r3, [r3, #1]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d130      	bne.n	8005e64 <HAL_PCD_EP_DB_Transmit+0x500>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2180      	movs	r1, #128	; 0x80
 8005e08:	187a      	adds	r2, r7, r1
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2250      	movs	r2, #80	; 0x50
 8005e12:	5a9b      	ldrh	r3, [r3, r2]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	001a      	movs	r2, r3
 8005e18:	187b      	adds	r3, r7, r1
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	189b      	adds	r3, r3, r2
 8005e1e:	187a      	adds	r2, r7, r1
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	00da      	lsls	r2, r3, #3
 8005e28:	187b      	adds	r3, r7, r1
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	18d3      	adds	r3, r2, r3
 8005e2e:	4a89      	ldr	r2, [pc, #548]	; (8006054 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005e30:	4694      	mov	ip, r2
 8005e32:	4463      	add	r3, ip
 8005e34:	2184      	movs	r1, #132	; 0x84
 8005e36:	187a      	adds	r2, r7, r1
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	187b      	adds	r3, r7, r1
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	4a86      	ldr	r2, [pc, #536]	; (800605c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	187b      	adds	r3, r7, r1
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	801a      	strh	r2, [r3, #0]
 8005e4e:	187b      	adds	r3, r7, r1
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	4a82      	ldr	r2, [pc, #520]	; (8006060 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	187b      	adds	r3, r7, r1
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	801a      	strh	r2, [r3, #0]
 8005e62:	e018      	b.n	8005e96 <HAL_PCD_EP_DB_Transmit+0x532>
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	785b      	ldrb	r3, [r3, #1]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d114      	bne.n	8005e96 <HAL_PCD_EP_DB_Transmit+0x532>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2250      	movs	r2, #80	; 0x50
 8005e72:	5a9b      	ldrh	r3, [r3, r2]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	001a      	movs	r2, r3
 8005e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e7a:	189b      	adds	r3, r3, r2
 8005e7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	00da      	lsls	r2, r3, #3
 8005e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e86:	18d3      	adds	r3, r2, r3
 8005e88:	4a72      	ldr	r2, [pc, #456]	; (8006054 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005e8a:	4694      	mov	ip, r2
 8005e8c:	4463      	add	r3, ip
 8005e8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e92:	2200      	movs	r2, #0
 8005e94:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	781a      	ldrb	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	0011      	movs	r1, r2
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f00b f9f4 	bl	801128c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ea4:	1dbb      	adds	r3, r7, #6
 8005ea6:	881a      	ldrh	r2, [r3, #0]
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	01db      	lsls	r3, r3, #7
 8005eac:	4013      	ands	r3, r2
 8005eae:	d000      	beq.n	8005eb2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005eb0:	e100      	b.n	80060b4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	001a      	movs	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	18d3      	adds	r3, r2, r3
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	2046      	movs	r0, #70	; 0x46
 8005ec6:	183b      	adds	r3, r7, r0
 8005ec8:	4966      	ldr	r1, [pc, #408]	; (8006064 <HAL_PCD_EP_DB_Transmit+0x700>)
 8005eca:	400a      	ands	r2, r1
 8005ecc:	801a      	strh	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	001a      	movs	r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	18d3      	adds	r3, r2, r3
 8005edc:	183a      	adds	r2, r7, r0
 8005ede:	8812      	ldrh	r2, [r2, #0]
 8005ee0:	4961      	ldr	r1, [pc, #388]	; (8006068 <HAL_PCD_EP_DB_Transmit+0x704>)
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	801a      	strh	r2, [r3, #0]
 8005ee8:	e0e4      	b.n	80060b4 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005eea:	1dbb      	adds	r3, r7, #6
 8005eec:	881a      	ldrh	r2, [r3, #0]
 8005eee:	2380      	movs	r3, #128	; 0x80
 8005ef0:	01db      	lsls	r3, r3, #7
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	d11a      	bne.n	8005f2c <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	001a      	movs	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	18d3      	adds	r3, r2, r3
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	204c      	movs	r0, #76	; 0x4c
 8005f0a:	183b      	adds	r3, r7, r0
 8005f0c:	4955      	ldr	r1, [pc, #340]	; (8006064 <HAL_PCD_EP_DB_Transmit+0x700>)
 8005f0e:	400a      	ands	r2, r1
 8005f10:	801a      	strh	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	001a      	movs	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	18d3      	adds	r3, r2, r3
 8005f20:	183a      	adds	r2, r7, r0
 8005f22:	8812      	ldrh	r2, [r2, #0]
 8005f24:	4950      	ldr	r1, [pc, #320]	; (8006068 <HAL_PCD_EP_DB_Transmit+0x704>)
 8005f26:	430a      	orrs	r2, r1
 8005f28:	b292      	uxth	r2, r2
 8005f2a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2224      	movs	r2, #36	; 0x24
 8005f30:	5c9b      	ldrb	r3, [r3, r2]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d000      	beq.n	8005f38 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8005f36:	e0bd      	b.n	80060b4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	695a      	ldr	r2, [r3, #20]
 8005f3c:	214e      	movs	r1, #78	; 0x4e
 8005f3e:	187b      	adds	r3, r7, r1
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	18d2      	adds	r2, r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	69da      	ldr	r2, [r3, #28]
 8005f4c:	187b      	adds	r3, r7, r1
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	18d2      	adds	r2, r2, r3
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	6a1a      	ldr	r2, [r3, #32]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d309      	bcc.n	8005f76 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6a1a      	ldr	r2, [r3, #32]
 8005f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f6e:	1ad2      	subs	r2, r2, r3
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	621a      	str	r2, [r3, #32]
 8005f74:	e016      	b.n	8005fa4 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d108      	bne.n	8005f90 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8005f7e:	234e      	movs	r3, #78	; 0x4e
 8005f80:	18fb      	adds	r3, r7, r3
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2224      	movs	r2, #36	; 0x24
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	5499      	strb	r1, [r3, r2]
 8005f8e:	e009      	b.n	8005fa4 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2224      	movs	r2, #36	; 0x24
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	785b      	ldrb	r3, [r3, #1]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d15c      	bne.n	800606c <HAL_PCD_EP_DB_Transmit+0x708>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2250      	movs	r2, #80	; 0x50
 8005fbe:	5a9b      	ldrh	r3, [r3, r2]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	001a      	movs	r2, r3
 8005fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fc6:	189b      	adds	r3, r3, r2
 8005fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	00da      	lsls	r2, r3, #3
 8005fd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fd2:	18d3      	adds	r3, r2, r3
 8005fd4:	4a1f      	ldr	r2, [pc, #124]	; (8006054 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005fd6:	4694      	mov	ip, r2
 8005fd8:	4463      	add	r3, ip
 8005fda:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d110      	bne.n	8006004 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8005fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	4a1c      	ldr	r2, [pc, #112]	; (800605c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005fea:	4013      	ands	r3, r2
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ff0:	801a      	strh	r2, [r3, #0]
 8005ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	4a19      	ldr	r2, [pc, #100]	; (8006060 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006000:	801a      	strh	r2, [r3, #0]
 8006002:	e04d      	b.n	80060a0 <HAL_PCD_EP_DB_Transmit+0x73c>
 8006004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006006:	2b3e      	cmp	r3, #62	; 0x3e
 8006008:	d810      	bhi.n	800602c <HAL_PCD_EP_DB_Transmit+0x6c8>
 800600a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	657b      	str	r3, [r7, #84]	; 0x54
 8006010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006012:	2201      	movs	r2, #1
 8006014:	4013      	ands	r3, r2
 8006016:	d002      	beq.n	800601e <HAL_PCD_EP_DB_Transmit+0x6ba>
 8006018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601a:	3301      	adds	r3, #1
 800601c:	657b      	str	r3, [r7, #84]	; 0x54
 800601e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006020:	b29b      	uxth	r3, r3
 8006022:	029b      	lsls	r3, r3, #10
 8006024:	b29a      	uxth	r2, r3
 8006026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006028:	801a      	strh	r2, [r3, #0]
 800602a:	e039      	b.n	80060a0 <HAL_PCD_EP_DB_Transmit+0x73c>
 800602c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	657b      	str	r3, [r7, #84]	; 0x54
 8006032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006034:	221f      	movs	r2, #31
 8006036:	4013      	ands	r3, r2
 8006038:	d102      	bne.n	8006040 <HAL_PCD_EP_DB_Transmit+0x6dc>
 800603a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800603c:	3b01      	subs	r3, #1
 800603e:	657b      	str	r3, [r7, #84]	; 0x54
 8006040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006042:	b29b      	uxth	r3, r3
 8006044:	029b      	lsls	r3, r3, #10
 8006046:	b29b      	uxth	r3, r3
 8006048:	4a05      	ldr	r2, [pc, #20]	; (8006060 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800604a:	4313      	orrs	r3, r2
 800604c:	b29a      	uxth	r2, r3
 800604e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	e025      	b.n	80060a0 <HAL_PCD_EP_DB_Transmit+0x73c>
 8006054:	00000406 	.word	0x00000406
 8006058:	00000402 	.word	0x00000402
 800605c:	ffff83ff 	.word	0xffff83ff
 8006060:	ffff8000 	.word	0xffff8000
 8006064:	ffff8f8f 	.word	0xffff8f8f
 8006068:	ffffc080 	.word	0xffffc080
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	785b      	ldrb	r3, [r3, #1]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d115      	bne.n	80060a0 <HAL_PCD_EP_DB_Transmit+0x73c>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2250      	movs	r2, #80	; 0x50
 800607a:	5a9b      	ldrh	r3, [r3, r2]
 800607c:	b29b      	uxth	r3, r3
 800607e:	001a      	movs	r2, r3
 8006080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006082:	189b      	adds	r3, r3, r2
 8006084:	667b      	str	r3, [r7, #100]	; 0x64
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	00da      	lsls	r2, r3, #3
 800608c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800608e:	18d3      	adds	r3, r2, r3
 8006090:	4a1e      	ldr	r2, [pc, #120]	; (800610c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8006092:	4694      	mov	ip, r2
 8006094:	4463      	add	r3, ip
 8006096:	663b      	str	r3, [r7, #96]	; 0x60
 8006098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800609a:	b29a      	uxth	r2, r3
 800609c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800609e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	6959      	ldr	r1, [r3, #20]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	895a      	ldrh	r2, [r3, #10]
 80060ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f003 fe7c 	bl	8009dac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	001a      	movs	r2, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	18d3      	adds	r3, r2, r3
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	2010      	movs	r0, #16
 80060c8:	183b      	adds	r3, r7, r0
 80060ca:	4911      	ldr	r1, [pc, #68]	; (8006110 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80060cc:	400a      	ands	r2, r1
 80060ce:	801a      	strh	r2, [r3, #0]
 80060d0:	183b      	adds	r3, r7, r0
 80060d2:	183a      	adds	r2, r7, r0
 80060d4:	8812      	ldrh	r2, [r2, #0]
 80060d6:	2110      	movs	r1, #16
 80060d8:	404a      	eors	r2, r1
 80060da:	801a      	strh	r2, [r3, #0]
 80060dc:	183b      	adds	r3, r7, r0
 80060de:	183a      	adds	r2, r7, r0
 80060e0:	8812      	ldrh	r2, [r2, #0]
 80060e2:	2120      	movs	r1, #32
 80060e4:	404a      	eors	r2, r1
 80060e6:	801a      	strh	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	001a      	movs	r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	18d3      	adds	r3, r2, r3
 80060f6:	183a      	adds	r2, r7, r0
 80060f8:	8812      	ldrh	r2, [r2, #0]
 80060fa:	4906      	ldr	r1, [pc, #24]	; (8006114 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80060fc:	430a      	orrs	r2, r1
 80060fe:	b292      	uxth	r2, r2
 8006100:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	0018      	movs	r0, r3
 8006106:	46bd      	mov	sp, r7
 8006108:	b022      	add	sp, #136	; 0x88
 800610a:	bd80      	pop	{r7, pc}
 800610c:	00000406 	.word	0x00000406
 8006110:	ffff8fbf 	.word	0xffff8fbf
 8006114:	ffff8080 	.word	0xffff8080

08006118 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006118:	b590      	push	{r4, r7, lr}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	0008      	movs	r0, r1
 8006122:	0011      	movs	r1, r2
 8006124:	607b      	str	r3, [r7, #4]
 8006126:	240a      	movs	r4, #10
 8006128:	193b      	adds	r3, r7, r4
 800612a:	1c02      	adds	r2, r0, #0
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	2308      	movs	r3, #8
 8006130:	18fb      	adds	r3, r7, r3
 8006132:	1c0a      	adds	r2, r1, #0
 8006134:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006136:	0021      	movs	r1, r4
 8006138:	187b      	adds	r3, r7, r1
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	2280      	movs	r2, #128	; 0x80
 800613e:	4013      	ands	r3, r2
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00c      	beq.n	8006160 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006146:	187b      	adds	r3, r7, r1
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	2207      	movs	r2, #7
 800614c:	4013      	ands	r3, r2
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	0013      	movs	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	189b      	adds	r3, r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	18d3      	adds	r3, r2, r3
 800615c:	617b      	str	r3, [r7, #20]
 800615e:	e00b      	b.n	8006178 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006160:	230a      	movs	r3, #10
 8006162:	18fb      	adds	r3, r7, r3
 8006164:	881a      	ldrh	r2, [r3, #0]
 8006166:	0013      	movs	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	189b      	adds	r3, r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	3369      	adds	r3, #105	; 0x69
 8006170:	33ff      	adds	r3, #255	; 0xff
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	18d3      	adds	r3, r2, r3
 8006176:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006178:	2308      	movs	r3, #8
 800617a:	18fb      	adds	r3, r7, r3
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d107      	bne.n	8006192 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2200      	movs	r2, #0
 8006186:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	b29a      	uxth	r2, r3
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	80da      	strh	r2, [r3, #6]
 8006190:	e00b      	b.n	80061aa <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2201      	movs	r2, #1
 8006196:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	b29a      	uxth	r2, r3
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	0c1b      	lsrs	r3, r3, #16
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	0018      	movs	r0, r3
 80061ae:	46bd      	mov	sp, r7
 80061b0:	b007      	add	sp, #28
 80061b2:	bd90      	pop	{r4, r7, pc}

080061b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	23ba      	movs	r3, #186	; 0xba
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	2101      	movs	r1, #1
 80061ca:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	23b8      	movs	r3, #184	; 0xb8
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	2100      	movs	r1, #0
 80061d4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2254      	movs	r2, #84	; 0x54
 80061da:	5a9b      	ldrh	r3, [r3, r2]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2201      	movs	r2, #1
 80061e0:	4313      	orrs	r3, r2
 80061e2:	b299      	uxth	r1, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2254      	movs	r2, #84	; 0x54
 80061e8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2254      	movs	r2, #84	; 0x54
 80061ee:	5a9b      	ldrh	r3, [r3, r2]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2202      	movs	r2, #2
 80061f4:	4313      	orrs	r3, r2
 80061f6:	b299      	uxth	r1, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2254      	movs	r2, #84	; 0x54
 80061fc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	0018      	movs	r0, r3
 8006202:	46bd      	mov	sp, r7
 8006204:	b004      	add	sp, #16
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	000a      	movs	r2, r1
 8006212:	1cfb      	adds	r3, r7, #3
 8006214:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006216:	46c0      	nop			; (mov r8, r8)
 8006218:	46bd      	mov	sp, r7
 800621a:	b002      	add	sp, #8
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d102      	bne.n	8006234 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	f000 fb76 	bl	8006920 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2201      	movs	r2, #1
 800623a:	4013      	ands	r3, r2
 800623c:	d100      	bne.n	8006240 <HAL_RCC_OscConfig+0x20>
 800623e:	e08e      	b.n	800635e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006240:	4bc5      	ldr	r3, [pc, #788]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	220c      	movs	r2, #12
 8006246:	4013      	ands	r3, r2
 8006248:	2b04      	cmp	r3, #4
 800624a:	d00e      	beq.n	800626a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800624c:	4bc2      	ldr	r3, [pc, #776]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	220c      	movs	r2, #12
 8006252:	4013      	ands	r3, r2
 8006254:	2b08      	cmp	r3, #8
 8006256:	d117      	bne.n	8006288 <HAL_RCC_OscConfig+0x68>
 8006258:	4bbf      	ldr	r3, [pc, #764]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	23c0      	movs	r3, #192	; 0xc0
 800625e:	025b      	lsls	r3, r3, #9
 8006260:	401a      	ands	r2, r3
 8006262:	2380      	movs	r3, #128	; 0x80
 8006264:	025b      	lsls	r3, r3, #9
 8006266:	429a      	cmp	r2, r3
 8006268:	d10e      	bne.n	8006288 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800626a:	4bbb      	ldr	r3, [pc, #748]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	2380      	movs	r3, #128	; 0x80
 8006270:	029b      	lsls	r3, r3, #10
 8006272:	4013      	ands	r3, r2
 8006274:	d100      	bne.n	8006278 <HAL_RCC_OscConfig+0x58>
 8006276:	e071      	b.n	800635c <HAL_RCC_OscConfig+0x13c>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d000      	beq.n	8006282 <HAL_RCC_OscConfig+0x62>
 8006280:	e06c      	b.n	800635c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f000 fb4c 	bl	8006920 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d107      	bne.n	80062a0 <HAL_RCC_OscConfig+0x80>
 8006290:	4bb1      	ldr	r3, [pc, #708]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4bb0      	ldr	r3, [pc, #704]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 8006296:	2180      	movs	r1, #128	; 0x80
 8006298:	0249      	lsls	r1, r1, #9
 800629a:	430a      	orrs	r2, r1
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e02f      	b.n	8006300 <HAL_RCC_OscConfig+0xe0>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10c      	bne.n	80062c2 <HAL_RCC_OscConfig+0xa2>
 80062a8:	4bab      	ldr	r3, [pc, #684]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	4baa      	ldr	r3, [pc, #680]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80062ae:	49ab      	ldr	r1, [pc, #684]	; (800655c <HAL_RCC_OscConfig+0x33c>)
 80062b0:	400a      	ands	r2, r1
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	4ba8      	ldr	r3, [pc, #672]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	4ba7      	ldr	r3, [pc, #668]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80062ba:	49a9      	ldr	r1, [pc, #676]	; (8006560 <HAL_RCC_OscConfig+0x340>)
 80062bc:	400a      	ands	r2, r1
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	e01e      	b.n	8006300 <HAL_RCC_OscConfig+0xe0>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b05      	cmp	r3, #5
 80062c8:	d10e      	bne.n	80062e8 <HAL_RCC_OscConfig+0xc8>
 80062ca:	4ba3      	ldr	r3, [pc, #652]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	4ba2      	ldr	r3, [pc, #648]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80062d0:	2180      	movs	r1, #128	; 0x80
 80062d2:	02c9      	lsls	r1, r1, #11
 80062d4:	430a      	orrs	r2, r1
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	4b9f      	ldr	r3, [pc, #636]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	4b9e      	ldr	r3, [pc, #632]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80062de:	2180      	movs	r1, #128	; 0x80
 80062e0:	0249      	lsls	r1, r1, #9
 80062e2:	430a      	orrs	r2, r1
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	e00b      	b.n	8006300 <HAL_RCC_OscConfig+0xe0>
 80062e8:	4b9b      	ldr	r3, [pc, #620]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	4b9a      	ldr	r3, [pc, #616]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80062ee:	499b      	ldr	r1, [pc, #620]	; (800655c <HAL_RCC_OscConfig+0x33c>)
 80062f0:	400a      	ands	r2, r1
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	4b98      	ldr	r3, [pc, #608]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	4b97      	ldr	r3, [pc, #604]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80062fa:	4999      	ldr	r1, [pc, #612]	; (8006560 <HAL_RCC_OscConfig+0x340>)
 80062fc:	400a      	ands	r2, r1
 80062fe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d014      	beq.n	8006332 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006308:	f7fc f8a4 	bl	8002454 <HAL_GetTick>
 800630c:	0003      	movs	r3, r0
 800630e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006310:	e008      	b.n	8006324 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006312:	f7fc f89f 	bl	8002454 <HAL_GetTick>
 8006316:	0002      	movs	r2, r0
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b64      	cmp	r3, #100	; 0x64
 800631e:	d901      	bls.n	8006324 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e2fd      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006324:	4b8c      	ldr	r3, [pc, #560]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	2380      	movs	r3, #128	; 0x80
 800632a:	029b      	lsls	r3, r3, #10
 800632c:	4013      	ands	r3, r2
 800632e:	d0f0      	beq.n	8006312 <HAL_RCC_OscConfig+0xf2>
 8006330:	e015      	b.n	800635e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006332:	f7fc f88f 	bl	8002454 <HAL_GetTick>
 8006336:	0003      	movs	r3, r0
 8006338:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800633c:	f7fc f88a 	bl	8002454 <HAL_GetTick>
 8006340:	0002      	movs	r2, r0
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b64      	cmp	r3, #100	; 0x64
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e2e8      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800634e:	4b82      	ldr	r3, [pc, #520]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	2380      	movs	r3, #128	; 0x80
 8006354:	029b      	lsls	r3, r3, #10
 8006356:	4013      	ands	r3, r2
 8006358:	d1f0      	bne.n	800633c <HAL_RCC_OscConfig+0x11c>
 800635a:	e000      	b.n	800635e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800635c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2202      	movs	r2, #2
 8006364:	4013      	ands	r3, r2
 8006366:	d100      	bne.n	800636a <HAL_RCC_OscConfig+0x14a>
 8006368:	e06c      	b.n	8006444 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800636a:	4b7b      	ldr	r3, [pc, #492]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	220c      	movs	r2, #12
 8006370:	4013      	ands	r3, r2
 8006372:	d00e      	beq.n	8006392 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006374:	4b78      	ldr	r3, [pc, #480]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	220c      	movs	r2, #12
 800637a:	4013      	ands	r3, r2
 800637c:	2b08      	cmp	r3, #8
 800637e:	d11f      	bne.n	80063c0 <HAL_RCC_OscConfig+0x1a0>
 8006380:	4b75      	ldr	r3, [pc, #468]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	23c0      	movs	r3, #192	; 0xc0
 8006386:	025b      	lsls	r3, r3, #9
 8006388:	401a      	ands	r2, r3
 800638a:	2380      	movs	r3, #128	; 0x80
 800638c:	021b      	lsls	r3, r3, #8
 800638e:	429a      	cmp	r2, r3
 8006390:	d116      	bne.n	80063c0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006392:	4b71      	ldr	r3, [pc, #452]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2202      	movs	r2, #2
 8006398:	4013      	ands	r3, r2
 800639a:	d005      	beq.n	80063a8 <HAL_RCC_OscConfig+0x188>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d001      	beq.n	80063a8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e2bb      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a8:	4b6b      	ldr	r3, [pc, #428]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	22f8      	movs	r2, #248	; 0xf8
 80063ae:	4393      	bics	r3, r2
 80063b0:	0019      	movs	r1, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	00da      	lsls	r2, r3, #3
 80063b8:	4b67      	ldr	r3, [pc, #412]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80063ba:	430a      	orrs	r2, r1
 80063bc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063be:	e041      	b.n	8006444 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d024      	beq.n	8006412 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063c8:	4b63      	ldr	r3, [pc, #396]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4b62      	ldr	r3, [pc, #392]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80063ce:	2101      	movs	r1, #1
 80063d0:	430a      	orrs	r2, r1
 80063d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d4:	f7fc f83e 	bl	8002454 <HAL_GetTick>
 80063d8:	0003      	movs	r3, r0
 80063da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063dc:	e008      	b.n	80063f0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063de:	f7fc f839 	bl	8002454 <HAL_GetTick>
 80063e2:	0002      	movs	r2, r0
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d901      	bls.n	80063f0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e297      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f0:	4b59      	ldr	r3, [pc, #356]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2202      	movs	r2, #2
 80063f6:	4013      	ands	r3, r2
 80063f8:	d0f1      	beq.n	80063de <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063fa:	4b57      	ldr	r3, [pc, #348]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	22f8      	movs	r2, #248	; 0xf8
 8006400:	4393      	bics	r3, r2
 8006402:	0019      	movs	r1, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	00da      	lsls	r2, r3, #3
 800640a:	4b53      	ldr	r3, [pc, #332]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 800640c:	430a      	orrs	r2, r1
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	e018      	b.n	8006444 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006412:	4b51      	ldr	r3, [pc, #324]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4b50      	ldr	r3, [pc, #320]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 8006418:	2101      	movs	r1, #1
 800641a:	438a      	bics	r2, r1
 800641c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800641e:	f7fc f819 	bl	8002454 <HAL_GetTick>
 8006422:	0003      	movs	r3, r0
 8006424:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006426:	e008      	b.n	800643a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006428:	f7fc f814 	bl	8002454 <HAL_GetTick>
 800642c:	0002      	movs	r2, r0
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e272      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800643a:	4b47      	ldr	r3, [pc, #284]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2202      	movs	r2, #2
 8006440:	4013      	ands	r3, r2
 8006442:	d1f1      	bne.n	8006428 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2208      	movs	r2, #8
 800644a:	4013      	ands	r3, r2
 800644c:	d036      	beq.n	80064bc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d019      	beq.n	800648a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006456:	4b40      	ldr	r3, [pc, #256]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 8006458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800645a:	4b3f      	ldr	r3, [pc, #252]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 800645c:	2101      	movs	r1, #1
 800645e:	430a      	orrs	r2, r1
 8006460:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006462:	f7fb fff7 	bl	8002454 <HAL_GetTick>
 8006466:	0003      	movs	r3, r0
 8006468:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800646c:	f7fb fff2 	bl	8002454 <HAL_GetTick>
 8006470:	0002      	movs	r2, r0
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e250      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800647e:	4b36      	ldr	r3, [pc, #216]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	2202      	movs	r2, #2
 8006484:	4013      	ands	r3, r2
 8006486:	d0f1      	beq.n	800646c <HAL_RCC_OscConfig+0x24c>
 8006488:	e018      	b.n	80064bc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800648a:	4b33      	ldr	r3, [pc, #204]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 800648c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800648e:	4b32      	ldr	r3, [pc, #200]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 8006490:	2101      	movs	r1, #1
 8006492:	438a      	bics	r2, r1
 8006494:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006496:	f7fb ffdd 	bl	8002454 <HAL_GetTick>
 800649a:	0003      	movs	r3, r0
 800649c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064a0:	f7fb ffd8 	bl	8002454 <HAL_GetTick>
 80064a4:	0002      	movs	r2, r0
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e236      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064b2:	4b29      	ldr	r3, [pc, #164]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	2202      	movs	r2, #2
 80064b8:	4013      	ands	r3, r2
 80064ba:	d1f1      	bne.n	80064a0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2204      	movs	r2, #4
 80064c2:	4013      	ands	r3, r2
 80064c4:	d100      	bne.n	80064c8 <HAL_RCC_OscConfig+0x2a8>
 80064c6:	e0b5      	b.n	8006634 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064c8:	201f      	movs	r0, #31
 80064ca:	183b      	adds	r3, r7, r0
 80064cc:	2200      	movs	r2, #0
 80064ce:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064d0:	4b21      	ldr	r3, [pc, #132]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80064d2:	69da      	ldr	r2, [r3, #28]
 80064d4:	2380      	movs	r3, #128	; 0x80
 80064d6:	055b      	lsls	r3, r3, #21
 80064d8:	4013      	ands	r3, r2
 80064da:	d110      	bne.n	80064fe <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064dc:	4b1e      	ldr	r3, [pc, #120]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80064de:	69da      	ldr	r2, [r3, #28]
 80064e0:	4b1d      	ldr	r3, [pc, #116]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80064e2:	2180      	movs	r1, #128	; 0x80
 80064e4:	0549      	lsls	r1, r1, #21
 80064e6:	430a      	orrs	r2, r1
 80064e8:	61da      	str	r2, [r3, #28]
 80064ea:	4b1b      	ldr	r3, [pc, #108]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80064ec:	69da      	ldr	r2, [r3, #28]
 80064ee:	2380      	movs	r3, #128	; 0x80
 80064f0:	055b      	lsls	r3, r3, #21
 80064f2:	4013      	ands	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80064f8:	183b      	adds	r3, r7, r0
 80064fa:	2201      	movs	r2, #1
 80064fc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064fe:	4b19      	ldr	r3, [pc, #100]	; (8006564 <HAL_RCC_OscConfig+0x344>)
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	2380      	movs	r3, #128	; 0x80
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	4013      	ands	r3, r2
 8006508:	d11a      	bne.n	8006540 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800650a:	4b16      	ldr	r3, [pc, #88]	; (8006564 <HAL_RCC_OscConfig+0x344>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4b15      	ldr	r3, [pc, #84]	; (8006564 <HAL_RCC_OscConfig+0x344>)
 8006510:	2180      	movs	r1, #128	; 0x80
 8006512:	0049      	lsls	r1, r1, #1
 8006514:	430a      	orrs	r2, r1
 8006516:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006518:	f7fb ff9c 	bl	8002454 <HAL_GetTick>
 800651c:	0003      	movs	r3, r0
 800651e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006522:	f7fb ff97 	bl	8002454 <HAL_GetTick>
 8006526:	0002      	movs	r2, r0
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b64      	cmp	r3, #100	; 0x64
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e1f5      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006534:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <HAL_RCC_OscConfig+0x344>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	2380      	movs	r3, #128	; 0x80
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	4013      	ands	r3, r2
 800653e:	d0f0      	beq.n	8006522 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d10f      	bne.n	8006568 <HAL_RCC_OscConfig+0x348>
 8006548:	4b03      	ldr	r3, [pc, #12]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 800654a:	6a1a      	ldr	r2, [r3, #32]
 800654c:	4b02      	ldr	r3, [pc, #8]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 800654e:	2101      	movs	r1, #1
 8006550:	430a      	orrs	r2, r1
 8006552:	621a      	str	r2, [r3, #32]
 8006554:	e036      	b.n	80065c4 <HAL_RCC_OscConfig+0x3a4>
 8006556:	46c0      	nop			; (mov r8, r8)
 8006558:	40021000 	.word	0x40021000
 800655c:	fffeffff 	.word	0xfffeffff
 8006560:	fffbffff 	.word	0xfffbffff
 8006564:	40007000 	.word	0x40007000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10c      	bne.n	800658a <HAL_RCC_OscConfig+0x36a>
 8006570:	4bca      	ldr	r3, [pc, #808]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006572:	6a1a      	ldr	r2, [r3, #32]
 8006574:	4bc9      	ldr	r3, [pc, #804]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006576:	2101      	movs	r1, #1
 8006578:	438a      	bics	r2, r1
 800657a:	621a      	str	r2, [r3, #32]
 800657c:	4bc7      	ldr	r3, [pc, #796]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 800657e:	6a1a      	ldr	r2, [r3, #32]
 8006580:	4bc6      	ldr	r3, [pc, #792]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006582:	2104      	movs	r1, #4
 8006584:	438a      	bics	r2, r1
 8006586:	621a      	str	r2, [r3, #32]
 8006588:	e01c      	b.n	80065c4 <HAL_RCC_OscConfig+0x3a4>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	2b05      	cmp	r3, #5
 8006590:	d10c      	bne.n	80065ac <HAL_RCC_OscConfig+0x38c>
 8006592:	4bc2      	ldr	r3, [pc, #776]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006594:	6a1a      	ldr	r2, [r3, #32]
 8006596:	4bc1      	ldr	r3, [pc, #772]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006598:	2104      	movs	r1, #4
 800659a:	430a      	orrs	r2, r1
 800659c:	621a      	str	r2, [r3, #32]
 800659e:	4bbf      	ldr	r3, [pc, #764]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80065a0:	6a1a      	ldr	r2, [r3, #32]
 80065a2:	4bbe      	ldr	r3, [pc, #760]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80065a4:	2101      	movs	r1, #1
 80065a6:	430a      	orrs	r2, r1
 80065a8:	621a      	str	r2, [r3, #32]
 80065aa:	e00b      	b.n	80065c4 <HAL_RCC_OscConfig+0x3a4>
 80065ac:	4bbb      	ldr	r3, [pc, #748]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80065ae:	6a1a      	ldr	r2, [r3, #32]
 80065b0:	4bba      	ldr	r3, [pc, #744]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80065b2:	2101      	movs	r1, #1
 80065b4:	438a      	bics	r2, r1
 80065b6:	621a      	str	r2, [r3, #32]
 80065b8:	4bb8      	ldr	r3, [pc, #736]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80065ba:	6a1a      	ldr	r2, [r3, #32]
 80065bc:	4bb7      	ldr	r3, [pc, #732]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80065be:	2104      	movs	r1, #4
 80065c0:	438a      	bics	r2, r1
 80065c2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d014      	beq.n	80065f6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065cc:	f7fb ff42 	bl	8002454 <HAL_GetTick>
 80065d0:	0003      	movs	r3, r0
 80065d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065d4:	e009      	b.n	80065ea <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065d6:	f7fb ff3d 	bl	8002454 <HAL_GetTick>
 80065da:	0002      	movs	r2, r0
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	4aaf      	ldr	r2, [pc, #700]	; (80068a0 <HAL_RCC_OscConfig+0x680>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e19a      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ea:	4bac      	ldr	r3, [pc, #688]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	2202      	movs	r2, #2
 80065f0:	4013      	ands	r3, r2
 80065f2:	d0f0      	beq.n	80065d6 <HAL_RCC_OscConfig+0x3b6>
 80065f4:	e013      	b.n	800661e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065f6:	f7fb ff2d 	bl	8002454 <HAL_GetTick>
 80065fa:	0003      	movs	r3, r0
 80065fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065fe:	e009      	b.n	8006614 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006600:	f7fb ff28 	bl	8002454 <HAL_GetTick>
 8006604:	0002      	movs	r2, r0
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	4aa5      	ldr	r2, [pc, #660]	; (80068a0 <HAL_RCC_OscConfig+0x680>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e185      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006614:	4ba1      	ldr	r3, [pc, #644]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	2202      	movs	r2, #2
 800661a:	4013      	ands	r3, r2
 800661c:	d1f0      	bne.n	8006600 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800661e:	231f      	movs	r3, #31
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d105      	bne.n	8006634 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006628:	4b9c      	ldr	r3, [pc, #624]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 800662a:	69da      	ldr	r2, [r3, #28]
 800662c:	4b9b      	ldr	r3, [pc, #620]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 800662e:	499d      	ldr	r1, [pc, #628]	; (80068a4 <HAL_RCC_OscConfig+0x684>)
 8006630:	400a      	ands	r2, r1
 8006632:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2210      	movs	r2, #16
 800663a:	4013      	ands	r3, r2
 800663c:	d063      	beq.n	8006706 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d12a      	bne.n	800669c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006646:	4b95      	ldr	r3, [pc, #596]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800664a:	4b94      	ldr	r3, [pc, #592]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 800664c:	2104      	movs	r1, #4
 800664e:	430a      	orrs	r2, r1
 8006650:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006652:	4b92      	ldr	r3, [pc, #584]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006656:	4b91      	ldr	r3, [pc, #580]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006658:	2101      	movs	r1, #1
 800665a:	430a      	orrs	r2, r1
 800665c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800665e:	f7fb fef9 	bl	8002454 <HAL_GetTick>
 8006662:	0003      	movs	r3, r0
 8006664:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006668:	f7fb fef4 	bl	8002454 <HAL_GetTick>
 800666c:	0002      	movs	r2, r0
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e152      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800667a:	4b88      	ldr	r3, [pc, #544]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 800667c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667e:	2202      	movs	r2, #2
 8006680:	4013      	ands	r3, r2
 8006682:	d0f1      	beq.n	8006668 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006684:	4b85      	ldr	r3, [pc, #532]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006688:	22f8      	movs	r2, #248	; 0xf8
 800668a:	4393      	bics	r3, r2
 800668c:	0019      	movs	r1, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	00da      	lsls	r2, r3, #3
 8006694:	4b81      	ldr	r3, [pc, #516]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006696:	430a      	orrs	r2, r1
 8006698:	635a      	str	r2, [r3, #52]	; 0x34
 800669a:	e034      	b.n	8006706 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	3305      	adds	r3, #5
 80066a2:	d111      	bne.n	80066c8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80066a4:	4b7d      	ldr	r3, [pc, #500]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80066a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066a8:	4b7c      	ldr	r3, [pc, #496]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80066aa:	2104      	movs	r1, #4
 80066ac:	438a      	bics	r2, r1
 80066ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80066b0:	4b7a      	ldr	r3, [pc, #488]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80066b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b4:	22f8      	movs	r2, #248	; 0xf8
 80066b6:	4393      	bics	r3, r2
 80066b8:	0019      	movs	r1, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	00da      	lsls	r2, r3, #3
 80066c0:	4b76      	ldr	r3, [pc, #472]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80066c2:	430a      	orrs	r2, r1
 80066c4:	635a      	str	r2, [r3, #52]	; 0x34
 80066c6:	e01e      	b.n	8006706 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80066c8:	4b74      	ldr	r3, [pc, #464]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80066ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066cc:	4b73      	ldr	r3, [pc, #460]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80066ce:	2104      	movs	r1, #4
 80066d0:	430a      	orrs	r2, r1
 80066d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80066d4:	4b71      	ldr	r3, [pc, #452]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80066d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066d8:	4b70      	ldr	r3, [pc, #448]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80066da:	2101      	movs	r1, #1
 80066dc:	438a      	bics	r2, r1
 80066de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066e0:	f7fb feb8 	bl	8002454 <HAL_GetTick>
 80066e4:	0003      	movs	r3, r0
 80066e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80066e8:	e008      	b.n	80066fc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80066ea:	f7fb feb3 	bl	8002454 <HAL_GetTick>
 80066ee:	0002      	movs	r2, r0
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e111      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80066fc:	4b67      	ldr	r3, [pc, #412]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80066fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006700:	2202      	movs	r2, #2
 8006702:	4013      	ands	r3, r2
 8006704:	d1f1      	bne.n	80066ea <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2220      	movs	r2, #32
 800670c:	4013      	ands	r3, r2
 800670e:	d05c      	beq.n	80067ca <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006710:	4b62      	ldr	r3, [pc, #392]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	220c      	movs	r2, #12
 8006716:	4013      	ands	r3, r2
 8006718:	2b0c      	cmp	r3, #12
 800671a:	d00e      	beq.n	800673a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800671c:	4b5f      	ldr	r3, [pc, #380]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	220c      	movs	r2, #12
 8006722:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006724:	2b08      	cmp	r3, #8
 8006726:	d114      	bne.n	8006752 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006728:	4b5c      	ldr	r3, [pc, #368]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	23c0      	movs	r3, #192	; 0xc0
 800672e:	025b      	lsls	r3, r3, #9
 8006730:	401a      	ands	r2, r3
 8006732:	23c0      	movs	r3, #192	; 0xc0
 8006734:	025b      	lsls	r3, r3, #9
 8006736:	429a      	cmp	r2, r3
 8006738:	d10b      	bne.n	8006752 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800673a:	4b58      	ldr	r3, [pc, #352]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 800673c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800673e:	2380      	movs	r3, #128	; 0x80
 8006740:	025b      	lsls	r3, r3, #9
 8006742:	4013      	ands	r3, r2
 8006744:	d040      	beq.n	80067c8 <HAL_RCC_OscConfig+0x5a8>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d03c      	beq.n	80067c8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e0e6      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d01b      	beq.n	8006792 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800675a:	4b50      	ldr	r3, [pc, #320]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 800675c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800675e:	4b4f      	ldr	r3, [pc, #316]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006760:	2180      	movs	r1, #128	; 0x80
 8006762:	0249      	lsls	r1, r1, #9
 8006764:	430a      	orrs	r2, r1
 8006766:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006768:	f7fb fe74 	bl	8002454 <HAL_GetTick>
 800676c:	0003      	movs	r3, r0
 800676e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006770:	e008      	b.n	8006784 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006772:	f7fb fe6f 	bl	8002454 <HAL_GetTick>
 8006776:	0002      	movs	r2, r0
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d901      	bls.n	8006784 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e0cd      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006784:	4b45      	ldr	r3, [pc, #276]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006788:	2380      	movs	r3, #128	; 0x80
 800678a:	025b      	lsls	r3, r3, #9
 800678c:	4013      	ands	r3, r2
 800678e:	d0f0      	beq.n	8006772 <HAL_RCC_OscConfig+0x552>
 8006790:	e01b      	b.n	80067ca <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006792:	4b42      	ldr	r3, [pc, #264]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006796:	4b41      	ldr	r3, [pc, #260]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006798:	4943      	ldr	r1, [pc, #268]	; (80068a8 <HAL_RCC_OscConfig+0x688>)
 800679a:	400a      	ands	r2, r1
 800679c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800679e:	f7fb fe59 	bl	8002454 <HAL_GetTick>
 80067a2:	0003      	movs	r3, r0
 80067a4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80067a6:	e008      	b.n	80067ba <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067a8:	f7fb fe54 	bl	8002454 <HAL_GetTick>
 80067ac:	0002      	movs	r2, r0
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e0b2      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80067ba:	4b38      	ldr	r3, [pc, #224]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80067bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067be:	2380      	movs	r3, #128	; 0x80
 80067c0:	025b      	lsls	r3, r3, #9
 80067c2:	4013      	ands	r3, r2
 80067c4:	d1f0      	bne.n	80067a8 <HAL_RCC_OscConfig+0x588>
 80067c6:	e000      	b.n	80067ca <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80067c8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d100      	bne.n	80067d4 <HAL_RCC_OscConfig+0x5b4>
 80067d2:	e0a4      	b.n	800691e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067d4:	4b31      	ldr	r3, [pc, #196]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	220c      	movs	r2, #12
 80067da:	4013      	ands	r3, r2
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d100      	bne.n	80067e2 <HAL_RCC_OscConfig+0x5c2>
 80067e0:	e078      	b.n	80068d4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d14c      	bne.n	8006884 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ea:	4b2c      	ldr	r3, [pc, #176]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	4b2b      	ldr	r3, [pc, #172]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 80067f0:	492e      	ldr	r1, [pc, #184]	; (80068ac <HAL_RCC_OscConfig+0x68c>)
 80067f2:	400a      	ands	r2, r1
 80067f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f6:	f7fb fe2d 	bl	8002454 <HAL_GetTick>
 80067fa:	0003      	movs	r3, r0
 80067fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006800:	f7fb fe28 	bl	8002454 <HAL_GetTick>
 8006804:	0002      	movs	r2, r0
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e086      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006812:	4b22      	ldr	r3, [pc, #136]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	2380      	movs	r3, #128	; 0x80
 8006818:	049b      	lsls	r3, r3, #18
 800681a:	4013      	ands	r3, r2
 800681c:	d1f0      	bne.n	8006800 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800681e:	4b1f      	ldr	r3, [pc, #124]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	220f      	movs	r2, #15
 8006824:	4393      	bics	r3, r2
 8006826:	0019      	movs	r1, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800682c:	4b1b      	ldr	r3, [pc, #108]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 800682e:	430a      	orrs	r2, r1
 8006830:	62da      	str	r2, [r3, #44]	; 0x2c
 8006832:	4b1a      	ldr	r3, [pc, #104]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	4a1e      	ldr	r2, [pc, #120]	; (80068b0 <HAL_RCC_OscConfig+0x690>)
 8006838:	4013      	ands	r3, r2
 800683a:	0019      	movs	r1, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	431a      	orrs	r2, r3
 8006846:	4b15      	ldr	r3, [pc, #84]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006848:	430a      	orrs	r2, r1
 800684a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800684c:	4b13      	ldr	r3, [pc, #76]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	4b12      	ldr	r3, [pc, #72]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006852:	2180      	movs	r1, #128	; 0x80
 8006854:	0449      	lsls	r1, r1, #17
 8006856:	430a      	orrs	r2, r1
 8006858:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800685a:	f7fb fdfb 	bl	8002454 <HAL_GetTick>
 800685e:	0003      	movs	r3, r0
 8006860:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006864:	f7fb fdf6 	bl	8002454 <HAL_GetTick>
 8006868:	0002      	movs	r2, r0
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e054      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006876:	4b09      	ldr	r3, [pc, #36]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	2380      	movs	r3, #128	; 0x80
 800687c:	049b      	lsls	r3, r3, #18
 800687e:	4013      	ands	r3, r2
 8006880:	d0f0      	beq.n	8006864 <HAL_RCC_OscConfig+0x644>
 8006882:	e04c      	b.n	800691e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006884:	4b05      	ldr	r3, [pc, #20]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	4b04      	ldr	r3, [pc, #16]	; (800689c <HAL_RCC_OscConfig+0x67c>)
 800688a:	4908      	ldr	r1, [pc, #32]	; (80068ac <HAL_RCC_OscConfig+0x68c>)
 800688c:	400a      	ands	r2, r1
 800688e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006890:	f7fb fde0 	bl	8002454 <HAL_GetTick>
 8006894:	0003      	movs	r3, r0
 8006896:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006898:	e015      	b.n	80068c6 <HAL_RCC_OscConfig+0x6a6>
 800689a:	46c0      	nop			; (mov r8, r8)
 800689c:	40021000 	.word	0x40021000
 80068a0:	00001388 	.word	0x00001388
 80068a4:	efffffff 	.word	0xefffffff
 80068a8:	fffeffff 	.word	0xfffeffff
 80068ac:	feffffff 	.word	0xfeffffff
 80068b0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068b4:	f7fb fdce 	bl	8002454 <HAL_GetTick>
 80068b8:	0002      	movs	r2, r0
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e02c      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068c6:	4b18      	ldr	r3, [pc, #96]	; (8006928 <HAL_RCC_OscConfig+0x708>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	2380      	movs	r3, #128	; 0x80
 80068cc:	049b      	lsls	r3, r3, #18
 80068ce:	4013      	ands	r3, r2
 80068d0:	d1f0      	bne.n	80068b4 <HAL_RCC_OscConfig+0x694>
 80068d2:	e024      	b.n	800691e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e01f      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80068e0:	4b11      	ldr	r3, [pc, #68]	; (8006928 <HAL_RCC_OscConfig+0x708>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80068e6:	4b10      	ldr	r3, [pc, #64]	; (8006928 <HAL_RCC_OscConfig+0x708>)
 80068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ea:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	23c0      	movs	r3, #192	; 0xc0
 80068f0:	025b      	lsls	r3, r3, #9
 80068f2:	401a      	ands	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d10e      	bne.n	800691a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	220f      	movs	r2, #15
 8006900:	401a      	ands	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006906:	429a      	cmp	r2, r3
 8006908:	d107      	bne.n	800691a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	23f0      	movs	r3, #240	; 0xf0
 800690e:	039b      	lsls	r3, r3, #14
 8006910:	401a      	ands	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006916:	429a      	cmp	r2, r3
 8006918:	d001      	beq.n	800691e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	0018      	movs	r0, r3
 8006922:	46bd      	mov	sp, r7
 8006924:	b008      	add	sp, #32
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40021000 	.word	0x40021000

0800692c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e0bf      	b.n	8006ac0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006940:	4b61      	ldr	r3, [pc, #388]	; (8006ac8 <HAL_RCC_ClockConfig+0x19c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2201      	movs	r2, #1
 8006946:	4013      	ands	r3, r2
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d911      	bls.n	8006972 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800694e:	4b5e      	ldr	r3, [pc, #376]	; (8006ac8 <HAL_RCC_ClockConfig+0x19c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2201      	movs	r2, #1
 8006954:	4393      	bics	r3, r2
 8006956:	0019      	movs	r1, r3
 8006958:	4b5b      	ldr	r3, [pc, #364]	; (8006ac8 <HAL_RCC_ClockConfig+0x19c>)
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006960:	4b59      	ldr	r3, [pc, #356]	; (8006ac8 <HAL_RCC_ClockConfig+0x19c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2201      	movs	r2, #1
 8006966:	4013      	ands	r3, r2
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d001      	beq.n	8006972 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e0a6      	b.n	8006ac0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2202      	movs	r2, #2
 8006978:	4013      	ands	r3, r2
 800697a:	d015      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2204      	movs	r2, #4
 8006982:	4013      	ands	r3, r2
 8006984:	d006      	beq.n	8006994 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006986:	4b51      	ldr	r3, [pc, #324]	; (8006acc <HAL_RCC_ClockConfig+0x1a0>)
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	4b50      	ldr	r3, [pc, #320]	; (8006acc <HAL_RCC_ClockConfig+0x1a0>)
 800698c:	21e0      	movs	r1, #224	; 0xe0
 800698e:	00c9      	lsls	r1, r1, #3
 8006990:	430a      	orrs	r2, r1
 8006992:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006994:	4b4d      	ldr	r3, [pc, #308]	; (8006acc <HAL_RCC_ClockConfig+0x1a0>)
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	22f0      	movs	r2, #240	; 0xf0
 800699a:	4393      	bics	r3, r2
 800699c:	0019      	movs	r1, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	4b4a      	ldr	r3, [pc, #296]	; (8006acc <HAL_RCC_ClockConfig+0x1a0>)
 80069a4:	430a      	orrs	r2, r1
 80069a6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2201      	movs	r2, #1
 80069ae:	4013      	ands	r3, r2
 80069b0:	d04c      	beq.n	8006a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d107      	bne.n	80069ca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ba:	4b44      	ldr	r3, [pc, #272]	; (8006acc <HAL_RCC_ClockConfig+0x1a0>)
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	2380      	movs	r3, #128	; 0x80
 80069c0:	029b      	lsls	r3, r3, #10
 80069c2:	4013      	ands	r3, r2
 80069c4:	d120      	bne.n	8006a08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e07a      	b.n	8006ac0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d107      	bne.n	80069e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069d2:	4b3e      	ldr	r3, [pc, #248]	; (8006acc <HAL_RCC_ClockConfig+0x1a0>)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	2380      	movs	r3, #128	; 0x80
 80069d8:	049b      	lsls	r3, r3, #18
 80069da:	4013      	ands	r3, r2
 80069dc:	d114      	bne.n	8006a08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e06e      	b.n	8006ac0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d107      	bne.n	80069fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80069ea:	4b38      	ldr	r3, [pc, #224]	; (8006acc <HAL_RCC_ClockConfig+0x1a0>)
 80069ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ee:	2380      	movs	r3, #128	; 0x80
 80069f0:	025b      	lsls	r3, r3, #9
 80069f2:	4013      	ands	r3, r2
 80069f4:	d108      	bne.n	8006a08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e062      	b.n	8006ac0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069fa:	4b34      	ldr	r3, [pc, #208]	; (8006acc <HAL_RCC_ClockConfig+0x1a0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2202      	movs	r2, #2
 8006a00:	4013      	ands	r3, r2
 8006a02:	d101      	bne.n	8006a08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e05b      	b.n	8006ac0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a08:	4b30      	ldr	r3, [pc, #192]	; (8006acc <HAL_RCC_ClockConfig+0x1a0>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2203      	movs	r2, #3
 8006a0e:	4393      	bics	r3, r2
 8006a10:	0019      	movs	r1, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	4b2d      	ldr	r3, [pc, #180]	; (8006acc <HAL_RCC_ClockConfig+0x1a0>)
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a1c:	f7fb fd1a 	bl	8002454 <HAL_GetTick>
 8006a20:	0003      	movs	r3, r0
 8006a22:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a24:	e009      	b.n	8006a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a26:	f7fb fd15 	bl	8002454 <HAL_GetTick>
 8006a2a:	0002      	movs	r2, r0
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	4a27      	ldr	r2, [pc, #156]	; (8006ad0 <HAL_RCC_ClockConfig+0x1a4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e042      	b.n	8006ac0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a3a:	4b24      	ldr	r3, [pc, #144]	; (8006acc <HAL_RCC_ClockConfig+0x1a0>)
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	220c      	movs	r2, #12
 8006a40:	401a      	ands	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d1ec      	bne.n	8006a26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a4c:	4b1e      	ldr	r3, [pc, #120]	; (8006ac8 <HAL_RCC_ClockConfig+0x19c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2201      	movs	r2, #1
 8006a52:	4013      	ands	r3, r2
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d211      	bcs.n	8006a7e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a5a:	4b1b      	ldr	r3, [pc, #108]	; (8006ac8 <HAL_RCC_ClockConfig+0x19c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	4393      	bics	r3, r2
 8006a62:	0019      	movs	r1, r3
 8006a64:	4b18      	ldr	r3, [pc, #96]	; (8006ac8 <HAL_RCC_ClockConfig+0x19c>)
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a6c:	4b16      	ldr	r3, [pc, #88]	; (8006ac8 <HAL_RCC_ClockConfig+0x19c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2201      	movs	r2, #1
 8006a72:	4013      	ands	r3, r2
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d001      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e020      	b.n	8006ac0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2204      	movs	r2, #4
 8006a84:	4013      	ands	r3, r2
 8006a86:	d009      	beq.n	8006a9c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006a88:	4b10      	ldr	r3, [pc, #64]	; (8006acc <HAL_RCC_ClockConfig+0x1a0>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	4a11      	ldr	r2, [pc, #68]	; (8006ad4 <HAL_RCC_ClockConfig+0x1a8>)
 8006a8e:	4013      	ands	r3, r2
 8006a90:	0019      	movs	r1, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <HAL_RCC_ClockConfig+0x1a0>)
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006a9c:	f000 f820 	bl	8006ae0 <HAL_RCC_GetSysClockFreq>
 8006aa0:	0001      	movs	r1, r0
 8006aa2:	4b0a      	ldr	r3, [pc, #40]	; (8006acc <HAL_RCC_ClockConfig+0x1a0>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	091b      	lsrs	r3, r3, #4
 8006aa8:	220f      	movs	r2, #15
 8006aaa:	4013      	ands	r3, r2
 8006aac:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <HAL_RCC_ClockConfig+0x1ac>)
 8006aae:	5cd3      	ldrb	r3, [r2, r3]
 8006ab0:	000a      	movs	r2, r1
 8006ab2:	40da      	lsrs	r2, r3
 8006ab4:	4b09      	ldr	r3, [pc, #36]	; (8006adc <HAL_RCC_ClockConfig+0x1b0>)
 8006ab6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006ab8:	2003      	movs	r0, #3
 8006aba:	f7fa f9b1 	bl	8000e20 <HAL_InitTick>
  
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	b004      	add	sp, #16
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40022000 	.word	0x40022000
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	00001388 	.word	0x00001388
 8006ad4:	fffff8ff 	.word	0xfffff8ff
 8006ad8:	08013308 	.word	0x08013308
 8006adc:	20000000 	.word	0x20000000

08006ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ae0:	b590      	push	{r4, r7, lr}
 8006ae2:	b08f      	sub	sp, #60	; 0x3c
 8006ae4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006ae6:	2314      	movs	r3, #20
 8006ae8:	18fb      	adds	r3, r7, r3
 8006aea:	4a38      	ldr	r2, [pc, #224]	; (8006bcc <HAL_RCC_GetSysClockFreq+0xec>)
 8006aec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006aee:	c313      	stmia	r3!, {r0, r1, r4}
 8006af0:	6812      	ldr	r2, [r2, #0]
 8006af2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006af4:	1d3b      	adds	r3, r7, #4
 8006af6:	4a36      	ldr	r2, [pc, #216]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8006af8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006afa:	c313      	stmia	r3!, {r0, r1, r4}
 8006afc:	6812      	ldr	r2, [r2, #0]
 8006afe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b04:	2300      	movs	r3, #0
 8006b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b08:	2300      	movs	r3, #0
 8006b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006b14:	4b2f      	ldr	r3, [pc, #188]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	220c      	movs	r2, #12
 8006b1e:	4013      	ands	r3, r2
 8006b20:	2b0c      	cmp	r3, #12
 8006b22:	d047      	beq.n	8006bb4 <HAL_RCC_GetSysClockFreq+0xd4>
 8006b24:	d849      	bhi.n	8006bba <HAL_RCC_GetSysClockFreq+0xda>
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d002      	beq.n	8006b30 <HAL_RCC_GetSysClockFreq+0x50>
 8006b2a:	2b08      	cmp	r3, #8
 8006b2c:	d003      	beq.n	8006b36 <HAL_RCC_GetSysClockFreq+0x56>
 8006b2e:	e044      	b.n	8006bba <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b30:	4b29      	ldr	r3, [pc, #164]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006b34:	e044      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	0c9b      	lsrs	r3, r3, #18
 8006b3a:	220f      	movs	r2, #15
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2214      	movs	r2, #20
 8006b40:	18ba      	adds	r2, r7, r2
 8006b42:	5cd3      	ldrb	r3, [r2, r3]
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006b46:	4b23      	ldr	r3, [pc, #140]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	220f      	movs	r2, #15
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	1d3a      	adds	r2, r7, #4
 8006b50:	5cd3      	ldrb	r3, [r2, r3]
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b56:	23c0      	movs	r3, #192	; 0xc0
 8006b58:	025b      	lsls	r3, r3, #9
 8006b5a:	401a      	ands	r2, r3
 8006b5c:	2380      	movs	r3, #128	; 0x80
 8006b5e:	025b      	lsls	r3, r3, #9
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d109      	bne.n	8006b78 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b66:	481c      	ldr	r0, [pc, #112]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b68:	f7f9 fad8 	bl	800011c <__udivsi3>
 8006b6c:	0003      	movs	r3, r0
 8006b6e:	001a      	movs	r2, r3
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	4353      	muls	r3, r2
 8006b74:	637b      	str	r3, [r7, #52]	; 0x34
 8006b76:	e01a      	b.n	8006bae <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b7a:	23c0      	movs	r3, #192	; 0xc0
 8006b7c:	025b      	lsls	r3, r3, #9
 8006b7e:	401a      	ands	r2, r3
 8006b80:	23c0      	movs	r3, #192	; 0xc0
 8006b82:	025b      	lsls	r3, r3, #9
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d109      	bne.n	8006b9c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b8a:	4814      	ldr	r0, [pc, #80]	; (8006bdc <HAL_RCC_GetSysClockFreq+0xfc>)
 8006b8c:	f7f9 fac6 	bl	800011c <__udivsi3>
 8006b90:	0003      	movs	r3, r0
 8006b92:	001a      	movs	r2, r3
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	4353      	muls	r3, r2
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
 8006b9a:	e008      	b.n	8006bae <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b9e:	480e      	ldr	r0, [pc, #56]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ba0:	f7f9 fabc 	bl	800011c <__udivsi3>
 8006ba4:	0003      	movs	r3, r0
 8006ba6:	001a      	movs	r2, r3
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	4353      	muls	r3, r2
 8006bac:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006bb2:	e005      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006bb4:	4b09      	ldr	r3, [pc, #36]	; (8006bdc <HAL_RCC_GetSysClockFreq+0xfc>)
 8006bb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006bb8:	e002      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006bba:	4b07      	ldr	r3, [pc, #28]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bbc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006bbe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	b00f      	add	sp, #60	; 0x3c
 8006bc8:	bd90      	pop	{r4, r7, pc}
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	080129cc 	.word	0x080129cc
 8006bd0:	080129dc 	.word	0x080129dc
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	007a1200 	.word	0x007a1200
 8006bdc:	02dc6c00 	.word	0x02dc6c00

08006be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006be4:	4b02      	ldr	r3, [pc, #8]	; (8006bf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006be6:	681b      	ldr	r3, [r3, #0]
}
 8006be8:	0018      	movs	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	20000000 	.word	0x20000000

08006bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006bf8:	f7ff fff2 	bl	8006be0 <HAL_RCC_GetHCLKFreq>
 8006bfc:	0001      	movs	r1, r0
 8006bfe:	4b06      	ldr	r3, [pc, #24]	; (8006c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	0a1b      	lsrs	r3, r3, #8
 8006c04:	2207      	movs	r2, #7
 8006c06:	4013      	ands	r3, r2
 8006c08:	4a04      	ldr	r2, [pc, #16]	; (8006c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c0a:	5cd3      	ldrb	r3, [r2, r3]
 8006c0c:	40d9      	lsrs	r1, r3
 8006c0e:	000b      	movs	r3, r1
}    
 8006c10:	0018      	movs	r0, r3
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	46c0      	nop			; (mov r8, r8)
 8006c18:	40021000 	.word	0x40021000
 8006c1c:	08013318 	.word	0x08013318

08006c20 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2207      	movs	r2, #7
 8006c2e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c30:	4b0e      	ldr	r3, [pc, #56]	; (8006c6c <HAL_RCC_GetClockConfig+0x4c>)
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2203      	movs	r2, #3
 8006c36:	401a      	ands	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006c3c:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <HAL_RCC_GetClockConfig+0x4c>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	22f0      	movs	r2, #240	; 0xf0
 8006c42:	401a      	ands	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8006c48:	4b08      	ldr	r3, [pc, #32]	; (8006c6c <HAL_RCC_GetClockConfig+0x4c>)
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	23e0      	movs	r3, #224	; 0xe0
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	401a      	ands	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8006c56:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <HAL_RCC_GetClockConfig+0x50>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	401a      	ands	r2, r3
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	601a      	str	r2, [r3, #0]
}
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	46bd      	mov	sp, r7
 8006c66:	b002      	add	sp, #8
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	40022000 	.word	0x40022000

08006c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	2380      	movs	r3, #128	; 0x80
 8006c8a:	025b      	lsls	r3, r3, #9
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	d100      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006c90:	e08e      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006c92:	2017      	movs	r0, #23
 8006c94:	183b      	adds	r3, r7, r0
 8006c96:	2200      	movs	r2, #0
 8006c98:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c9a:	4b6e      	ldr	r3, [pc, #440]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c9c:	69da      	ldr	r2, [r3, #28]
 8006c9e:	2380      	movs	r3, #128	; 0x80
 8006ca0:	055b      	lsls	r3, r3, #21
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	d110      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ca6:	4b6b      	ldr	r3, [pc, #428]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ca8:	69da      	ldr	r2, [r3, #28]
 8006caa:	4b6a      	ldr	r3, [pc, #424]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cac:	2180      	movs	r1, #128	; 0x80
 8006cae:	0549      	lsls	r1, r1, #21
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	61da      	str	r2, [r3, #28]
 8006cb4:	4b67      	ldr	r3, [pc, #412]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	055b      	lsls	r3, r3, #21
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	60bb      	str	r3, [r7, #8]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cc2:	183b      	adds	r3, r7, r0
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cc8:	4b63      	ldr	r3, [pc, #396]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	2380      	movs	r3, #128	; 0x80
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	d11a      	bne.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cd4:	4b60      	ldr	r3, [pc, #384]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	4b5f      	ldr	r3, [pc, #380]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006cda:	2180      	movs	r1, #128	; 0x80
 8006cdc:	0049      	lsls	r1, r1, #1
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ce2:	f7fb fbb7 	bl	8002454 <HAL_GetTick>
 8006ce6:	0003      	movs	r3, r0
 8006ce8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cea:	e008      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cec:	f7fb fbb2 	bl	8002454 <HAL_GetTick>
 8006cf0:	0002      	movs	r2, r0
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2b64      	cmp	r3, #100	; 0x64
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e0a6      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cfe:	4b56      	ldr	r3, [pc, #344]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	2380      	movs	r3, #128	; 0x80
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	4013      	ands	r3, r2
 8006d08:	d0f0      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d0a:	4b52      	ldr	r3, [pc, #328]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d0c:	6a1a      	ldr	r2, [r3, #32]
 8006d0e:	23c0      	movs	r3, #192	; 0xc0
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4013      	ands	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d034      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	23c0      	movs	r3, #192	; 0xc0
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4013      	ands	r3, r2
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d02c      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d2c:	4b49      	ldr	r3, [pc, #292]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	4a4a      	ldr	r2, [pc, #296]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006d32:	4013      	ands	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d36:	4b47      	ldr	r3, [pc, #284]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d38:	6a1a      	ldr	r2, [r3, #32]
 8006d3a:	4b46      	ldr	r3, [pc, #280]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d3c:	2180      	movs	r1, #128	; 0x80
 8006d3e:	0249      	lsls	r1, r1, #9
 8006d40:	430a      	orrs	r2, r1
 8006d42:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d44:	4b43      	ldr	r3, [pc, #268]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d46:	6a1a      	ldr	r2, [r3, #32]
 8006d48:	4b42      	ldr	r3, [pc, #264]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d4a:	4945      	ldr	r1, [pc, #276]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006d4c:	400a      	ands	r2, r1
 8006d4e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006d50:	4b40      	ldr	r3, [pc, #256]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	d013      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d5e:	f7fb fb79 	bl	8002454 <HAL_GetTick>
 8006d62:	0003      	movs	r3, r0
 8006d64:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d66:	e009      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d68:	f7fb fb74 	bl	8002454 <HAL_GetTick>
 8006d6c:	0002      	movs	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	4a3c      	ldr	r2, [pc, #240]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d901      	bls.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e067      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d7c:	4b35      	ldr	r3, [pc, #212]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	2202      	movs	r2, #2
 8006d82:	4013      	ands	r3, r2
 8006d84:	d0f0      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d86:	4b33      	ldr	r3, [pc, #204]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	4a34      	ldr	r2, [pc, #208]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	0019      	movs	r1, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	4b2f      	ldr	r3, [pc, #188]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d96:	430a      	orrs	r2, r1
 8006d98:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006d9a:	2317      	movs	r3, #23
 8006d9c:	18fb      	adds	r3, r7, r3
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d105      	bne.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006da4:	4b2b      	ldr	r3, [pc, #172]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006da6:	69da      	ldr	r2, [r3, #28]
 8006da8:	4b2a      	ldr	r3, [pc, #168]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006daa:	492f      	ldr	r1, [pc, #188]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006dac:	400a      	ands	r2, r1
 8006dae:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2201      	movs	r2, #1
 8006db6:	4013      	ands	r3, r2
 8006db8:	d009      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006dba:	4b26      	ldr	r3, [pc, #152]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbe:	2203      	movs	r2, #3
 8006dc0:	4393      	bics	r3, r2
 8006dc2:	0019      	movs	r1, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	4b22      	ldr	r3, [pc, #136]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	d009      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006dd8:	4b1e      	ldr	r3, [pc, #120]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ddc:	4a23      	ldr	r2, [pc, #140]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006dde:	4013      	ands	r3, r2
 8006de0:	0019      	movs	r1, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	4b1b      	ldr	r3, [pc, #108]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006de8:	430a      	orrs	r2, r1
 8006dea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2220      	movs	r2, #32
 8006df2:	4013      	ands	r3, r2
 8006df4:	d009      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006df6:	4b17      	ldr	r3, [pc, #92]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	2210      	movs	r2, #16
 8006dfc:	4393      	bics	r3, r2
 8006dfe:	0019      	movs	r1, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	4b13      	ldr	r3, [pc, #76]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e06:	430a      	orrs	r2, r1
 8006e08:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	2380      	movs	r3, #128	; 0x80
 8006e10:	029b      	lsls	r3, r3, #10
 8006e12:	4013      	ands	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e16:	4b0f      	ldr	r3, [pc, #60]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1a:	2280      	movs	r2, #128	; 0x80
 8006e1c:	4393      	bics	r3, r2
 8006e1e:	0019      	movs	r1, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699a      	ldr	r2, [r3, #24]
 8006e24:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e26:	430a      	orrs	r2, r1
 8006e28:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	2380      	movs	r3, #128	; 0x80
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	4013      	ands	r3, r2
 8006e34:	d009      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e36:	4b07      	ldr	r3, [pc, #28]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3a:	2240      	movs	r2, #64	; 0x40
 8006e3c:	4393      	bics	r3, r2
 8006e3e:	0019      	movs	r1, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	695a      	ldr	r2, [r3, #20]
 8006e44:	4b03      	ldr	r3, [pc, #12]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e46:	430a      	orrs	r2, r1
 8006e48:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	b006      	add	sp, #24
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	40021000 	.word	0x40021000
 8006e58:	40007000 	.word	0x40007000
 8006e5c:	fffffcff 	.word	0xfffffcff
 8006e60:	fffeffff 	.word	0xfffeffff
 8006e64:	00001388 	.word	0x00001388
 8006e68:	efffffff 	.word	0xefffffff
 8006e6c:	fffcffff 	.word	0xfffcffff

08006e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e0a8      	b.n	8006fd4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d109      	bne.n	8006e9e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	2382      	movs	r3, #130	; 0x82
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d009      	beq.n	8006eaa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	61da      	str	r2, [r3, #28]
 8006e9c:	e005      	b.n	8006eaa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	225d      	movs	r2, #93	; 0x5d
 8006eb4:	5c9b      	ldrb	r3, [r3, r2]
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d107      	bne.n	8006ecc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	225c      	movs	r2, #92	; 0x5c
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f7f9 ff5e 	bl	8000d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	225d      	movs	r2, #93	; 0x5d
 8006ed0:	2102      	movs	r1, #2
 8006ed2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2140      	movs	r1, #64	; 0x40
 8006ee0:	438a      	bics	r2, r1
 8006ee2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68da      	ldr	r2, [r3, #12]
 8006ee8:	23e0      	movs	r3, #224	; 0xe0
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d902      	bls.n	8006ef6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	e002      	b.n	8006efc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ef6:	2380      	movs	r3, #128	; 0x80
 8006ef8:	015b      	lsls	r3, r3, #5
 8006efa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	23f0      	movs	r3, #240	; 0xf0
 8006f02:	011b      	lsls	r3, r3, #4
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d008      	beq.n	8006f1a <HAL_SPI_Init+0xaa>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	23e0      	movs	r3, #224	; 0xe0
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d002      	beq.n	8006f1a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	2382      	movs	r3, #130	; 0x82
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	401a      	ands	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6899      	ldr	r1, [r3, #8]
 8006f28:	2384      	movs	r3, #132	; 0x84
 8006f2a:	021b      	lsls	r3, r3, #8
 8006f2c:	400b      	ands	r3, r1
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	2102      	movs	r1, #2
 8006f36:	400b      	ands	r3, r1
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	2101      	movs	r1, #1
 8006f40:	400b      	ands	r3, r1
 8006f42:	431a      	orrs	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6999      	ldr	r1, [r3, #24]
 8006f48:	2380      	movs	r3, #128	; 0x80
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	400b      	ands	r3, r1
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	2138      	movs	r1, #56	; 0x38
 8006f56:	400b      	ands	r3, r1
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	2180      	movs	r1, #128	; 0x80
 8006f60:	400b      	ands	r3, r1
 8006f62:	431a      	orrs	r2, r3
 8006f64:	0011      	movs	r1, r2
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f6a:	2380      	movs	r3, #128	; 0x80
 8006f6c:	019b      	lsls	r3, r3, #6
 8006f6e:	401a      	ands	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	0c1b      	lsrs	r3, r3, #16
 8006f7e:	2204      	movs	r2, #4
 8006f80:	401a      	ands	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	2110      	movs	r1, #16
 8006f88:	400b      	ands	r3, r1
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f90:	2108      	movs	r1, #8
 8006f92:	400b      	ands	r3, r1
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68d9      	ldr	r1, [r3, #12]
 8006f9a:	23f0      	movs	r3, #240	; 0xf0
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	400b      	ands	r3, r1
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	0011      	movs	r1, r2
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	2380      	movs	r3, #128	; 0x80
 8006fa8:	015b      	lsls	r3, r3, #5
 8006faa:	401a      	ands	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69da      	ldr	r2, [r3, #28]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4907      	ldr	r1, [pc, #28]	; (8006fdc <HAL_SPI_Init+0x16c>)
 8006fc0:	400a      	ands	r2, r1
 8006fc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	225d      	movs	r2, #93	; 0x5d
 8006fce:	2101      	movs	r1, #1
 8006fd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	b004      	add	sp, #16
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	fffff7ff 	.word	0xfffff7ff

08006fe0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fe0:	b590      	push	{r4, r7, lr}
 8006fe2:	b089      	sub	sp, #36	; 0x24
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	1dbb      	adds	r3, r7, #6
 8006fee:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ff0:	2317      	movs	r3, #23
 8006ff2:	18fb      	adds	r3, r7, r3
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	2382      	movs	r3, #130	; 0x82
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	429a      	cmp	r2, r3
 8007002:	d113      	bne.n	800702c <HAL_SPI_Receive+0x4c>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10f      	bne.n	800702c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	225d      	movs	r2, #93	; 0x5d
 8007010:	2104      	movs	r1, #4
 8007012:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007014:	1dbb      	adds	r3, r7, #6
 8007016:	881c      	ldrh	r4, [r3, #0]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	0023      	movs	r3, r4
 8007024:	f000 f928 	bl	8007278 <HAL_SPI_TransmitReceive>
 8007028:	0003      	movs	r3, r0
 800702a:	e11c      	b.n	8007266 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	225c      	movs	r2, #92	; 0x5c
 8007030:	5c9b      	ldrb	r3, [r3, r2]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_SPI_Receive+0x5a>
 8007036:	2302      	movs	r3, #2
 8007038:	e115      	b.n	8007266 <HAL_SPI_Receive+0x286>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	225c      	movs	r2, #92	; 0x5c
 800703e:	2101      	movs	r1, #1
 8007040:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007042:	f7fb fa07 	bl	8002454 <HAL_GetTick>
 8007046:	0003      	movs	r3, r0
 8007048:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	225d      	movs	r2, #93	; 0x5d
 800704e:	5c9b      	ldrb	r3, [r3, r2]
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b01      	cmp	r3, #1
 8007054:	d004      	beq.n	8007060 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8007056:	2317      	movs	r3, #23
 8007058:	18fb      	adds	r3, r7, r3
 800705a:	2202      	movs	r2, #2
 800705c:	701a      	strb	r2, [r3, #0]
    goto error;
 800705e:	e0f7      	b.n	8007250 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_SPI_Receive+0x8e>
 8007066:	1dbb      	adds	r3, r7, #6
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d104      	bne.n	8007078 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800706e:	2317      	movs	r3, #23
 8007070:	18fb      	adds	r3, r7, r3
 8007072:	2201      	movs	r2, #1
 8007074:	701a      	strb	r2, [r3, #0]
    goto error;
 8007076:	e0eb      	b.n	8007250 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	225d      	movs	r2, #93	; 0x5d
 800707c:	2104      	movs	r1, #4
 800707e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	1dba      	adds	r2, r7, #6
 8007090:	2144      	movs	r1, #68	; 0x44
 8007092:	8812      	ldrh	r2, [r2, #0]
 8007094:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	1dba      	adds	r2, r7, #6
 800709a:	2146      	movs	r1, #70	; 0x46
 800709c:	8812      	ldrh	r2, [r2, #0]
 800709e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	68da      	ldr	r2, [r3, #12]
 80070c2:	23e0      	movs	r3, #224	; 0xe0
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d908      	bls.n	80070dc <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4966      	ldr	r1, [pc, #408]	; (8007270 <HAL_SPI_Receive+0x290>)
 80070d6:	400a      	ands	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
 80070da:	e008      	b.n	80070ee <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2180      	movs	r1, #128	; 0x80
 80070e8:	0149      	lsls	r1, r1, #5
 80070ea:	430a      	orrs	r2, r1
 80070ec:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	2380      	movs	r3, #128	; 0x80
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d10f      	bne.n	800711a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2140      	movs	r1, #64	; 0x40
 8007106:	438a      	bics	r2, r1
 8007108:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4957      	ldr	r1, [pc, #348]	; (8007274 <HAL_SPI_Receive+0x294>)
 8007116:	400a      	ands	r2, r1
 8007118:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2240      	movs	r2, #64	; 0x40
 8007122:	4013      	ands	r3, r2
 8007124:	2b40      	cmp	r3, #64	; 0x40
 8007126:	d007      	beq.n	8007138 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2140      	movs	r1, #64	; 0x40
 8007134:	430a      	orrs	r2, r1
 8007136:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	23e0      	movs	r3, #224	; 0xe0
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	429a      	cmp	r2, r3
 8007142:	d900      	bls.n	8007146 <HAL_SPI_Receive+0x166>
 8007144:	e069      	b.n	800721a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007146:	e031      	b.n	80071ac <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	2201      	movs	r2, #1
 8007150:	4013      	ands	r3, r2
 8007152:	2b01      	cmp	r3, #1
 8007154:	d117      	bne.n	8007186 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	330c      	adds	r3, #12
 800715c:	001a      	movs	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	7812      	ldrb	r2, [r2, #0]
 8007164:	b2d2      	uxtb	r2, r2
 8007166:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716c:	1c5a      	adds	r2, r3, #1
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2246      	movs	r2, #70	; 0x46
 8007176:	5a9b      	ldrh	r3, [r3, r2]
 8007178:	b29b      	uxth	r3, r3
 800717a:	3b01      	subs	r3, #1
 800717c:	b299      	uxth	r1, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2246      	movs	r2, #70	; 0x46
 8007182:	5299      	strh	r1, [r3, r2]
 8007184:	e012      	b.n	80071ac <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007186:	f7fb f965 	bl	8002454 <HAL_GetTick>
 800718a:	0002      	movs	r2, r0
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	429a      	cmp	r2, r3
 8007194:	d802      	bhi.n	800719c <HAL_SPI_Receive+0x1bc>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	3301      	adds	r3, #1
 800719a:	d102      	bne.n	80071a2 <HAL_SPI_Receive+0x1c2>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d104      	bne.n	80071ac <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80071a2:	2317      	movs	r3, #23
 80071a4:	18fb      	adds	r3, r7, r3
 80071a6:	2203      	movs	r2, #3
 80071a8:	701a      	strb	r2, [r3, #0]
          goto error;
 80071aa:	e051      	b.n	8007250 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2246      	movs	r2, #70	; 0x46
 80071b0:	5a9b      	ldrh	r3, [r3, r2]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1c7      	bne.n	8007148 <HAL_SPI_Receive+0x168>
 80071b8:	e035      	b.n	8007226 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	2201      	movs	r2, #1
 80071c2:	4013      	ands	r3, r2
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d115      	bne.n	80071f4 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	b292      	uxth	r2, r2
 80071d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	1c9a      	adds	r2, r3, #2
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2246      	movs	r2, #70	; 0x46
 80071e4:	5a9b      	ldrh	r3, [r3, r2]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	3b01      	subs	r3, #1
 80071ea:	b299      	uxth	r1, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2246      	movs	r2, #70	; 0x46
 80071f0:	5299      	strh	r1, [r3, r2]
 80071f2:	e012      	b.n	800721a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071f4:	f7fb f92e 	bl	8002454 <HAL_GetTick>
 80071f8:	0002      	movs	r2, r0
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d802      	bhi.n	800720a <HAL_SPI_Receive+0x22a>
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	3301      	adds	r3, #1
 8007208:	d102      	bne.n	8007210 <HAL_SPI_Receive+0x230>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d104      	bne.n	800721a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8007210:	2317      	movs	r3, #23
 8007212:	18fb      	adds	r3, r7, r3
 8007214:	2203      	movs	r2, #3
 8007216:	701a      	strb	r2, [r3, #0]
          goto error;
 8007218:	e01a      	b.n	8007250 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2246      	movs	r2, #70	; 0x46
 800721e:	5a9b      	ldrh	r3, [r3, r2]
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1c9      	bne.n	80071ba <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	0018      	movs	r0, r3
 800722e:	f000 fb25 	bl	800787c <SPI_EndRxTransaction>
 8007232:	1e03      	subs	r3, r0, #0
 8007234:	d002      	beq.n	800723c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2220      	movs	r2, #32
 800723a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8007244:	2317      	movs	r3, #23
 8007246:	18fb      	adds	r3, r7, r3
 8007248:	2201      	movs	r2, #1
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	e000      	b.n	8007250 <HAL_SPI_Receive+0x270>
  }

error :
 800724e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	225d      	movs	r2, #93	; 0x5d
 8007254:	2101      	movs	r1, #1
 8007256:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	225c      	movs	r2, #92	; 0x5c
 800725c:	2100      	movs	r1, #0
 800725e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007260:	2317      	movs	r3, #23
 8007262:	18fb      	adds	r3, r7, r3
 8007264:	781b      	ldrb	r3, [r3, #0]
}
 8007266:	0018      	movs	r0, r3
 8007268:	46bd      	mov	sp, r7
 800726a:	b007      	add	sp, #28
 800726c:	bd90      	pop	{r4, r7, pc}
 800726e:	46c0      	nop			; (mov r8, r8)
 8007270:	ffffefff 	.word	0xffffefff
 8007274:	ffffbfff 	.word	0xffffbfff

08007278 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b08a      	sub	sp, #40	; 0x28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	001a      	movs	r2, r3
 8007286:	1cbb      	adds	r3, r7, #2
 8007288:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800728a:	2301      	movs	r3, #1
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800728e:	2323      	movs	r3, #35	; 0x23
 8007290:	18fb      	adds	r3, r7, r3
 8007292:	2200      	movs	r2, #0
 8007294:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	225c      	movs	r2, #92	; 0x5c
 800729a:	5c9b      	ldrb	r3, [r3, r2]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_SPI_TransmitReceive+0x2c>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e1b5      	b.n	8007610 <HAL_SPI_TransmitReceive+0x398>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	225c      	movs	r2, #92	; 0x5c
 80072a8:	2101      	movs	r1, #1
 80072aa:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072ac:	f7fb f8d2 	bl	8002454 <HAL_GetTick>
 80072b0:	0003      	movs	r3, r0
 80072b2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072b4:	201b      	movs	r0, #27
 80072b6:	183b      	adds	r3, r7, r0
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	215d      	movs	r1, #93	; 0x5d
 80072bc:	5c52      	ldrb	r2, [r2, r1]
 80072be:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80072c6:	2312      	movs	r3, #18
 80072c8:	18fb      	adds	r3, r7, r3
 80072ca:	1cba      	adds	r2, r7, #2
 80072cc:	8812      	ldrh	r2, [r2, #0]
 80072ce:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072d0:	183b      	adds	r3, r7, r0
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d011      	beq.n	80072fc <HAL_SPI_TransmitReceive+0x84>
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	2382      	movs	r3, #130	; 0x82
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	429a      	cmp	r2, r3
 80072e0:	d107      	bne.n	80072f2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d103      	bne.n	80072f2 <HAL_SPI_TransmitReceive+0x7a>
 80072ea:	183b      	adds	r3, r7, r0
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d004      	beq.n	80072fc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80072f2:	2323      	movs	r3, #35	; 0x23
 80072f4:	18fb      	adds	r3, r7, r3
 80072f6:	2202      	movs	r2, #2
 80072f8:	701a      	strb	r2, [r3, #0]
    goto error;
 80072fa:	e17e      	b.n	80075fa <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d006      	beq.n	8007310 <HAL_SPI_TransmitReceive+0x98>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d003      	beq.n	8007310 <HAL_SPI_TransmitReceive+0x98>
 8007308:	1cbb      	adds	r3, r7, #2
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d104      	bne.n	800731a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007310:	2323      	movs	r3, #35	; 0x23
 8007312:	18fb      	adds	r3, r7, r3
 8007314:	2201      	movs	r2, #1
 8007316:	701a      	strb	r2, [r3, #0]
    goto error;
 8007318:	e16f      	b.n	80075fa <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	225d      	movs	r2, #93	; 0x5d
 800731e:	5c9b      	ldrb	r3, [r3, r2]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b04      	cmp	r3, #4
 8007324:	d003      	beq.n	800732e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	225d      	movs	r2, #93	; 0x5d
 800732a:	2105      	movs	r1, #5
 800732c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	1cba      	adds	r2, r7, #2
 800733e:	2146      	movs	r1, #70	; 0x46
 8007340:	8812      	ldrh	r2, [r2, #0]
 8007342:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	1cba      	adds	r2, r7, #2
 8007348:	2144      	movs	r1, #68	; 0x44
 800734a:	8812      	ldrh	r2, [r2, #0]
 800734c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	1cba      	adds	r2, r7, #2
 8007358:	8812      	ldrh	r2, [r2, #0]
 800735a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	1cba      	adds	r2, r7, #2
 8007360:	8812      	ldrh	r2, [r2, #0]
 8007362:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	23e0      	movs	r3, #224	; 0xe0
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	429a      	cmp	r2, r3
 800737a:	d908      	bls.n	800738e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	49a4      	ldr	r1, [pc, #656]	; (8007618 <HAL_SPI_TransmitReceive+0x3a0>)
 8007388:	400a      	ands	r2, r1
 800738a:	605a      	str	r2, [r3, #4]
 800738c:	e008      	b.n	80073a0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2180      	movs	r1, #128	; 0x80
 800739a:	0149      	lsls	r1, r1, #5
 800739c:	430a      	orrs	r2, r1
 800739e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2240      	movs	r2, #64	; 0x40
 80073a8:	4013      	ands	r3, r2
 80073aa:	2b40      	cmp	r3, #64	; 0x40
 80073ac:	d007      	beq.n	80073be <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2140      	movs	r1, #64	; 0x40
 80073ba:	430a      	orrs	r2, r1
 80073bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	23e0      	movs	r3, #224	; 0xe0
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d800      	bhi.n	80073cc <HAL_SPI_TransmitReceive+0x154>
 80073ca:	e07f      	b.n	80074cc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <HAL_SPI_TransmitReceive+0x168>
 80073d4:	2312      	movs	r3, #18
 80073d6:	18fb      	adds	r3, r7, r3
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d000      	beq.n	80073e0 <HAL_SPI_TransmitReceive+0x168>
 80073de:	e069      	b.n	80074b4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e4:	881a      	ldrh	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f0:	1c9a      	adds	r2, r3, #2
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	3b01      	subs	r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007404:	e056      	b.n	80074b4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	2202      	movs	r2, #2
 800740e:	4013      	ands	r3, r2
 8007410:	2b02      	cmp	r3, #2
 8007412:	d11b      	bne.n	800744c <HAL_SPI_TransmitReceive+0x1d4>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d016      	beq.n	800744c <HAL_SPI_TransmitReceive+0x1d4>
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	2b01      	cmp	r3, #1
 8007422:	d113      	bne.n	800744c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	881a      	ldrh	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	1c9a      	adds	r2, r3, #2
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800743e:	b29b      	uxth	r3, r3
 8007440:	3b01      	subs	r3, #1
 8007442:	b29a      	uxth	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	2201      	movs	r2, #1
 8007454:	4013      	ands	r3, r2
 8007456:	2b01      	cmp	r3, #1
 8007458:	d11c      	bne.n	8007494 <HAL_SPI_TransmitReceive+0x21c>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2246      	movs	r2, #70	; 0x46
 800745e:	5a9b      	ldrh	r3, [r3, r2]
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d016      	beq.n	8007494 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007470:	b292      	uxth	r2, r2
 8007472:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007478:	1c9a      	adds	r2, r3, #2
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2246      	movs	r2, #70	; 0x46
 8007482:	5a9b      	ldrh	r3, [r3, r2]
 8007484:	b29b      	uxth	r3, r3
 8007486:	3b01      	subs	r3, #1
 8007488:	b299      	uxth	r1, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2246      	movs	r2, #70	; 0x46
 800748e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007490:	2301      	movs	r3, #1
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007494:	f7fa ffde 	bl	8002454 <HAL_GetTick>
 8007498:	0002      	movs	r2, r0
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d807      	bhi.n	80074b4 <HAL_SPI_TransmitReceive+0x23c>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	3301      	adds	r3, #1
 80074a8:	d004      	beq.n	80074b4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80074aa:	2323      	movs	r3, #35	; 0x23
 80074ac:	18fb      	adds	r3, r7, r3
 80074ae:	2203      	movs	r2, #3
 80074b0:	701a      	strb	r2, [r3, #0]
        goto error;
 80074b2:	e0a2      	b.n	80075fa <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1a3      	bne.n	8007406 <HAL_SPI_TransmitReceive+0x18e>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2246      	movs	r2, #70	; 0x46
 80074c2:	5a9b      	ldrh	r3, [r3, r2]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d19d      	bne.n	8007406 <HAL_SPI_TransmitReceive+0x18e>
 80074ca:	e085      	b.n	80075d8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <HAL_SPI_TransmitReceive+0x268>
 80074d4:	2312      	movs	r3, #18
 80074d6:	18fb      	adds	r3, r7, r3
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d000      	beq.n	80074e0 <HAL_SPI_TransmitReceive+0x268>
 80074de:	e070      	b.n	80075c2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	330c      	adds	r3, #12
 80074ea:	7812      	ldrb	r2, [r2, #0]
 80074ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007506:	e05c      	b.n	80075c2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	2202      	movs	r2, #2
 8007510:	4013      	ands	r3, r2
 8007512:	2b02      	cmp	r3, #2
 8007514:	d11c      	bne.n	8007550 <HAL_SPI_TransmitReceive+0x2d8>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800751a:	b29b      	uxth	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d017      	beq.n	8007550 <HAL_SPI_TransmitReceive+0x2d8>
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	2b01      	cmp	r3, #1
 8007524:	d114      	bne.n	8007550 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	330c      	adds	r3, #12
 8007530:	7812      	ldrb	r2, [r2, #0]
 8007532:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007542:	b29b      	uxth	r3, r3
 8007544:	3b01      	subs	r3, #1
 8007546:	b29a      	uxth	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	2201      	movs	r2, #1
 8007558:	4013      	ands	r3, r2
 800755a:	2b01      	cmp	r3, #1
 800755c:	d11e      	bne.n	800759c <HAL_SPI_TransmitReceive+0x324>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2246      	movs	r2, #70	; 0x46
 8007562:	5a9b      	ldrh	r3, [r3, r2]
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d018      	beq.n	800759c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	330c      	adds	r3, #12
 8007570:	001a      	movs	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007576:	7812      	ldrb	r2, [r2, #0]
 8007578:	b2d2      	uxtb	r2, r2
 800757a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2246      	movs	r2, #70	; 0x46
 800758a:	5a9b      	ldrh	r3, [r3, r2]
 800758c:	b29b      	uxth	r3, r3
 800758e:	3b01      	subs	r3, #1
 8007590:	b299      	uxth	r1, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2246      	movs	r2, #70	; 0x46
 8007596:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007598:	2301      	movs	r3, #1
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800759c:	f7fa ff5a 	bl	8002454 <HAL_GetTick>
 80075a0:	0002      	movs	r2, r0
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d802      	bhi.n	80075b2 <HAL_SPI_TransmitReceive+0x33a>
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	3301      	adds	r3, #1
 80075b0:	d102      	bne.n	80075b8 <HAL_SPI_TransmitReceive+0x340>
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d104      	bne.n	80075c2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80075b8:	2323      	movs	r3, #35	; 0x23
 80075ba:	18fb      	adds	r3, r7, r3
 80075bc:	2203      	movs	r2, #3
 80075be:	701a      	strb	r2, [r3, #0]
        goto error;
 80075c0:	e01b      	b.n	80075fa <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d19d      	bne.n	8007508 <HAL_SPI_TransmitReceive+0x290>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2246      	movs	r2, #70	; 0x46
 80075d0:	5a9b      	ldrh	r3, [r3, r2]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d197      	bne.n	8007508 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075d8:	69fa      	ldr	r2, [r7, #28]
 80075da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	0018      	movs	r0, r3
 80075e0:	f000 f9aa 	bl	8007938 <SPI_EndRxTxTransaction>
 80075e4:	1e03      	subs	r3, r0, #0
 80075e6:	d007      	beq.n	80075f8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80075e8:	2323      	movs	r3, #35	; 0x23
 80075ea:	18fb      	adds	r3, r7, r3
 80075ec:	2201      	movs	r2, #1
 80075ee:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2220      	movs	r2, #32
 80075f4:	661a      	str	r2, [r3, #96]	; 0x60
 80075f6:	e000      	b.n	80075fa <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80075f8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	225d      	movs	r2, #93	; 0x5d
 80075fe:	2101      	movs	r1, #1
 8007600:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	225c      	movs	r2, #92	; 0x5c
 8007606:	2100      	movs	r1, #0
 8007608:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800760a:	2323      	movs	r3, #35	; 0x23
 800760c:	18fb      	adds	r3, r7, r3
 800760e:	781b      	ldrb	r3, [r3, #0]
}
 8007610:	0018      	movs	r0, r3
 8007612:	46bd      	mov	sp, r7
 8007614:	b00a      	add	sp, #40	; 0x28
 8007616:	bd80      	pop	{r7, pc}
 8007618:	ffffefff 	.word	0xffffefff

0800761c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b088      	sub	sp, #32
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	1dfb      	adds	r3, r7, #7
 800762a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800762c:	f7fa ff12 	bl	8002454 <HAL_GetTick>
 8007630:	0002      	movs	r2, r0
 8007632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007634:	1a9b      	subs	r3, r3, r2
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	18d3      	adds	r3, r2, r3
 800763a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800763c:	f7fa ff0a 	bl	8002454 <HAL_GetTick>
 8007640:	0003      	movs	r3, r0
 8007642:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007644:	4b3a      	ldr	r3, [pc, #232]	; (8007730 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	015b      	lsls	r3, r3, #5
 800764a:	0d1b      	lsrs	r3, r3, #20
 800764c:	69fa      	ldr	r2, [r7, #28]
 800764e:	4353      	muls	r3, r2
 8007650:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007652:	e058      	b.n	8007706 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	3301      	adds	r3, #1
 8007658:	d055      	beq.n	8007706 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800765a:	f7fa fefb 	bl	8002454 <HAL_GetTick>
 800765e:	0002      	movs	r2, r0
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	69fa      	ldr	r2, [r7, #28]
 8007666:	429a      	cmp	r2, r3
 8007668:	d902      	bls.n	8007670 <SPI_WaitFlagStateUntilTimeout+0x54>
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d142      	bne.n	80076f6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	21e0      	movs	r1, #224	; 0xe0
 800767c:	438a      	bics	r2, r1
 800767e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	2382      	movs	r3, #130	; 0x82
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	429a      	cmp	r2, r3
 800768a:	d113      	bne.n	80076b4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	2380      	movs	r3, #128	; 0x80
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	429a      	cmp	r2, r3
 8007696:	d005      	beq.n	80076a4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	2380      	movs	r3, #128	; 0x80
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d107      	bne.n	80076b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2140      	movs	r1, #64	; 0x40
 80076b0:	438a      	bics	r2, r1
 80076b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076b8:	2380      	movs	r3, #128	; 0x80
 80076ba:	019b      	lsls	r3, r3, #6
 80076bc:	429a      	cmp	r2, r3
 80076be:	d110      	bne.n	80076e2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	491a      	ldr	r1, [pc, #104]	; (8007734 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80076cc:	400a      	ands	r2, r1
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2180      	movs	r1, #128	; 0x80
 80076dc:	0189      	lsls	r1, r1, #6
 80076de:	430a      	orrs	r2, r1
 80076e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	225d      	movs	r2, #93	; 0x5d
 80076e6:	2101      	movs	r1, #1
 80076e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	225c      	movs	r2, #92	; 0x5c
 80076ee:	2100      	movs	r1, #0
 80076f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e017      	b.n	8007726 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	3b01      	subs	r3, #1
 8007704:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	4013      	ands	r3, r2
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	425a      	negs	r2, r3
 8007716:	4153      	adcs	r3, r2
 8007718:	b2db      	uxtb	r3, r3
 800771a:	001a      	movs	r2, r3
 800771c:	1dfb      	adds	r3, r7, #7
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d197      	bne.n	8007654 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	0018      	movs	r0, r3
 8007728:	46bd      	mov	sp, r7
 800772a:	b008      	add	sp, #32
 800772c:	bd80      	pop	{r7, pc}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	20000000 	.word	0x20000000
 8007734:	ffffdfff 	.word	0xffffdfff

08007738 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08a      	sub	sp, #40	; 0x28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007746:	2317      	movs	r3, #23
 8007748:	18fb      	adds	r3, r7, r3
 800774a:	2200      	movs	r2, #0
 800774c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800774e:	f7fa fe81 	bl	8002454 <HAL_GetTick>
 8007752:	0002      	movs	r2, r0
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	683a      	ldr	r2, [r7, #0]
 800775a:	18d3      	adds	r3, r2, r3
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800775e:	f7fa fe79 	bl	8002454 <HAL_GetTick>
 8007762:	0003      	movs	r3, r0
 8007764:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	330c      	adds	r3, #12
 800776c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800776e:	4b41      	ldr	r3, [pc, #260]	; (8007874 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	0013      	movs	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	189b      	adds	r3, r3, r2
 8007778:	00da      	lsls	r2, r3, #3
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	0d1b      	lsrs	r3, r3, #20
 800777e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007780:	4353      	muls	r3, r2
 8007782:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007784:	e068      	b.n	8007858 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	23c0      	movs	r3, #192	; 0xc0
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	429a      	cmp	r2, r3
 800778e:	d10a      	bne.n	80077a6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d107      	bne.n	80077a6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b2da      	uxtb	r2, r3
 800779c:	2117      	movs	r1, #23
 800779e:	187b      	adds	r3, r7, r1
 80077a0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80077a2:	187b      	adds	r3, r7, r1
 80077a4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	3301      	adds	r3, #1
 80077aa:	d055      	beq.n	8007858 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077ac:	f7fa fe52 	bl	8002454 <HAL_GetTick>
 80077b0:	0002      	movs	r2, r0
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d902      	bls.n	80077c2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d142      	bne.n	8007848 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	21e0      	movs	r1, #224	; 0xe0
 80077ce:	438a      	bics	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	2382      	movs	r3, #130	; 0x82
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	429a      	cmp	r2, r3
 80077dc:	d113      	bne.n	8007806 <SPI_WaitFifoStateUntilTimeout+0xce>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	2380      	movs	r3, #128	; 0x80
 80077e4:	021b      	lsls	r3, r3, #8
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d005      	beq.n	80077f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	2380      	movs	r3, #128	; 0x80
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d107      	bne.n	8007806 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2140      	movs	r1, #64	; 0x40
 8007802:	438a      	bics	r2, r1
 8007804:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800780a:	2380      	movs	r3, #128	; 0x80
 800780c:	019b      	lsls	r3, r3, #6
 800780e:	429a      	cmp	r2, r3
 8007810:	d110      	bne.n	8007834 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4916      	ldr	r1, [pc, #88]	; (8007878 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800781e:	400a      	ands	r2, r1
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2180      	movs	r1, #128	; 0x80
 800782e:	0189      	lsls	r1, r1, #6
 8007830:	430a      	orrs	r2, r1
 8007832:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	225d      	movs	r2, #93	; 0x5d
 8007838:	2101      	movs	r1, #1
 800783a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	225c      	movs	r2, #92	; 0x5c
 8007840:	2100      	movs	r1, #0
 8007842:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e010      	b.n	800786a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	3b01      	subs	r3, #1
 8007856:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	4013      	ands	r3, r2
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	429a      	cmp	r2, r3
 8007866:	d18e      	bne.n	8007786 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	0018      	movs	r0, r3
 800786c:	46bd      	mov	sp, r7
 800786e:	b00a      	add	sp, #40	; 0x28
 8007870:	bd80      	pop	{r7, pc}
 8007872:	46c0      	nop			; (mov r8, r8)
 8007874:	20000000 	.word	0x20000000
 8007878:	ffffdfff 	.word	0xffffdfff

0800787c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af02      	add	r7, sp, #8
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	2382      	movs	r3, #130	; 0x82
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	429a      	cmp	r2, r3
 8007892:	d113      	bne.n	80078bc <SPI_EndRxTransaction+0x40>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	2380      	movs	r3, #128	; 0x80
 800789a:	021b      	lsls	r3, r3, #8
 800789c:	429a      	cmp	r2, r3
 800789e:	d005      	beq.n	80078ac <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	2380      	movs	r3, #128	; 0x80
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d107      	bne.n	80078bc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2140      	movs	r1, #64	; 0x40
 80078b8:	438a      	bics	r2, r1
 80078ba:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	0013      	movs	r3, r2
 80078c6:	2200      	movs	r2, #0
 80078c8:	2180      	movs	r1, #128	; 0x80
 80078ca:	f7ff fea7 	bl	800761c <SPI_WaitFlagStateUntilTimeout>
 80078ce:	1e03      	subs	r3, r0, #0
 80078d0:	d007      	beq.n	80078e2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078d6:	2220      	movs	r2, #32
 80078d8:	431a      	orrs	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e026      	b.n	8007930 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	2382      	movs	r3, #130	; 0x82
 80078e8:	005b      	lsls	r3, r3, #1
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d11f      	bne.n	800792e <SPI_EndRxTransaction+0xb2>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	2380      	movs	r3, #128	; 0x80
 80078f4:	021b      	lsls	r3, r3, #8
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d005      	beq.n	8007906 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	2380      	movs	r3, #128	; 0x80
 8007900:	00db      	lsls	r3, r3, #3
 8007902:	429a      	cmp	r2, r3
 8007904:	d113      	bne.n	800792e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	23c0      	movs	r3, #192	; 0xc0
 800790a:	00d9      	lsls	r1, r3, #3
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	0013      	movs	r3, r2
 8007914:	2200      	movs	r2, #0
 8007916:	f7ff ff0f 	bl	8007738 <SPI_WaitFifoStateUntilTimeout>
 800791a:	1e03      	subs	r3, r0, #0
 800791c:	d007      	beq.n	800792e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007922:	2220      	movs	r2, #32
 8007924:	431a      	orrs	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e000      	b.n	8007930 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	0018      	movs	r0, r3
 8007932:	46bd      	mov	sp, r7
 8007934:	b004      	add	sp, #16
 8007936:	bd80      	pop	{r7, pc}

08007938 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af02      	add	r7, sp, #8
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	23c0      	movs	r3, #192	; 0xc0
 8007948:	0159      	lsls	r1, r3, #5
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	0013      	movs	r3, r2
 8007952:	2200      	movs	r2, #0
 8007954:	f7ff fef0 	bl	8007738 <SPI_WaitFifoStateUntilTimeout>
 8007958:	1e03      	subs	r3, r0, #0
 800795a:	d007      	beq.n	800796c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007960:	2220      	movs	r2, #32
 8007962:	431a      	orrs	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e027      	b.n	80079bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	0013      	movs	r3, r2
 8007976:	2200      	movs	r2, #0
 8007978:	2180      	movs	r1, #128	; 0x80
 800797a:	f7ff fe4f 	bl	800761c <SPI_WaitFlagStateUntilTimeout>
 800797e:	1e03      	subs	r3, r0, #0
 8007980:	d007      	beq.n	8007992 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007986:	2220      	movs	r2, #32
 8007988:	431a      	orrs	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e014      	b.n	80079bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	23c0      	movs	r3, #192	; 0xc0
 8007996:	00d9      	lsls	r1, r3, #3
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	0013      	movs	r3, r2
 80079a0:	2200      	movs	r2, #0
 80079a2:	f7ff fec9 	bl	8007738 <SPI_WaitFifoStateUntilTimeout>
 80079a6:	1e03      	subs	r3, r0, #0
 80079a8:	d007      	beq.n	80079ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ae:	2220      	movs	r2, #32
 80079b0:	431a      	orrs	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e000      	b.n	80079bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	0018      	movs	r0, r3
 80079be:	46bd      	mov	sp, r7
 80079c0:	b004      	add	sp, #16
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e042      	b.n	8007a5c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	223d      	movs	r2, #61	; 0x3d
 80079da:	5c9b      	ldrb	r3, [r3, r2]
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d107      	bne.n	80079f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	223c      	movs	r2, #60	; 0x3c
 80079e6:	2100      	movs	r1, #0
 80079e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	0018      	movs	r0, r3
 80079ee:	f000 f839 	bl	8007a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	223d      	movs	r2, #61	; 0x3d
 80079f6:	2102      	movs	r1, #2
 80079f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3304      	adds	r3, #4
 8007a02:	0019      	movs	r1, r3
 8007a04:	0010      	movs	r0, r2
 8007a06:	f000 f9bd 	bl	8007d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2246      	movs	r2, #70	; 0x46
 8007a0e:	2101      	movs	r1, #1
 8007a10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	223e      	movs	r2, #62	; 0x3e
 8007a16:	2101      	movs	r1, #1
 8007a18:	5499      	strb	r1, [r3, r2]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	223f      	movs	r2, #63	; 0x3f
 8007a1e:	2101      	movs	r1, #1
 8007a20:	5499      	strb	r1, [r3, r2]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2240      	movs	r2, #64	; 0x40
 8007a26:	2101      	movs	r1, #1
 8007a28:	5499      	strb	r1, [r3, r2]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2241      	movs	r2, #65	; 0x41
 8007a2e:	2101      	movs	r1, #1
 8007a30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2242      	movs	r2, #66	; 0x42
 8007a36:	2101      	movs	r1, #1
 8007a38:	5499      	strb	r1, [r3, r2]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2243      	movs	r2, #67	; 0x43
 8007a3e:	2101      	movs	r1, #1
 8007a40:	5499      	strb	r1, [r3, r2]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2244      	movs	r2, #68	; 0x44
 8007a46:	2101      	movs	r1, #1
 8007a48:	5499      	strb	r1, [r3, r2]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2245      	movs	r2, #69	; 0x45
 8007a4e:	2101      	movs	r1, #1
 8007a50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	223d      	movs	r2, #61	; 0x3d
 8007a56:	2101      	movs	r1, #1
 8007a58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	0018      	movs	r0, r3
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	b002      	add	sp, #8
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007a6c:	46c0      	nop			; (mov r8, r8)
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b002      	add	sp, #8
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	223d      	movs	r2, #61	; 0x3d
 8007a80:	5c9b      	ldrb	r3, [r3, r2]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d001      	beq.n	8007a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e03b      	b.n	8007b04 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	223d      	movs	r2, #61	; 0x3d
 8007a90:	2102      	movs	r1, #2
 8007a92:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a18      	ldr	r2, [pc, #96]	; (8007b0c <HAL_TIM_Base_Start_IT+0x98>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d00f      	beq.n	8007ace <HAL_TIM_Base_Start_IT+0x5a>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	2380      	movs	r3, #128	; 0x80
 8007ab4:	05db      	lsls	r3, r3, #23
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d009      	beq.n	8007ace <HAL_TIM_Base_Start_IT+0x5a>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a14      	ldr	r2, [pc, #80]	; (8007b10 <HAL_TIM_Base_Start_IT+0x9c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d004      	beq.n	8007ace <HAL_TIM_Base_Start_IT+0x5a>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a12      	ldr	r2, [pc, #72]	; (8007b14 <HAL_TIM_Base_Start_IT+0xa0>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d111      	bne.n	8007af2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	2207      	movs	r2, #7
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b06      	cmp	r3, #6
 8007ade:	d010      	beq.n	8007b02 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2101      	movs	r1, #1
 8007aec:	430a      	orrs	r2, r1
 8007aee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af0:	e007      	b.n	8007b02 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2101      	movs	r1, #1
 8007afe:	430a      	orrs	r2, r1
 8007b00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	0018      	movs	r0, r3
 8007b06:	46bd      	mov	sp, r7
 8007b08:	b004      	add	sp, #16
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	40012c00 	.word	0x40012c00
 8007b10:	40000400 	.word	0x40000400
 8007b14:	40014000 	.word	0x40014000

08007b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	2202      	movs	r2, #2
 8007b28:	4013      	ands	r3, r2
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d124      	bne.n	8007b78 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	2202      	movs	r2, #2
 8007b36:	4013      	ands	r3, r2
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d11d      	bne.n	8007b78 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2203      	movs	r2, #3
 8007b42:	4252      	negs	r2, r2
 8007b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	2203      	movs	r2, #3
 8007b54:	4013      	ands	r3, r2
 8007b56:	d004      	beq.n	8007b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f000 f8fa 	bl	8007d54 <HAL_TIM_IC_CaptureCallback>
 8007b60:	e007      	b.n	8007b72 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	0018      	movs	r0, r3
 8007b66:	f000 f8ed 	bl	8007d44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	f000 f8f9 	bl	8007d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	2204      	movs	r2, #4
 8007b80:	4013      	ands	r3, r2
 8007b82:	2b04      	cmp	r3, #4
 8007b84:	d125      	bne.n	8007bd2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	2204      	movs	r2, #4
 8007b8e:	4013      	ands	r3, r2
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	d11e      	bne.n	8007bd2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2205      	movs	r2, #5
 8007b9a:	4252      	negs	r2, r2
 8007b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	699a      	ldr	r2, [r3, #24]
 8007baa:	23c0      	movs	r3, #192	; 0xc0
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4013      	ands	r3, r2
 8007bb0:	d004      	beq.n	8007bbc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	0018      	movs	r0, r3
 8007bb6:	f000 f8cd 	bl	8007d54 <HAL_TIM_IC_CaptureCallback>
 8007bba:	e007      	b.n	8007bcc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	0018      	movs	r0, r3
 8007bc0:	f000 f8c0 	bl	8007d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	f000 f8cc 	bl	8007d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2208      	movs	r2, #8
 8007bda:	4013      	ands	r3, r2
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d124      	bne.n	8007c2a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	2208      	movs	r2, #8
 8007be8:	4013      	ands	r3, r2
 8007bea:	2b08      	cmp	r3, #8
 8007bec:	d11d      	bne.n	8007c2a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2209      	movs	r2, #9
 8007bf4:	4252      	negs	r2, r2
 8007bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2204      	movs	r2, #4
 8007bfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	2203      	movs	r2, #3
 8007c06:	4013      	ands	r3, r2
 8007c08:	d004      	beq.n	8007c14 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	f000 f8a1 	bl	8007d54 <HAL_TIM_IC_CaptureCallback>
 8007c12:	e007      	b.n	8007c24 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	0018      	movs	r0, r3
 8007c18:	f000 f894 	bl	8007d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	0018      	movs	r0, r3
 8007c20:	f000 f8a0 	bl	8007d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	2210      	movs	r2, #16
 8007c32:	4013      	ands	r3, r2
 8007c34:	2b10      	cmp	r3, #16
 8007c36:	d125      	bne.n	8007c84 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	2210      	movs	r2, #16
 8007c40:	4013      	ands	r3, r2
 8007c42:	2b10      	cmp	r3, #16
 8007c44:	d11e      	bne.n	8007c84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2211      	movs	r2, #17
 8007c4c:	4252      	negs	r2, r2
 8007c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2208      	movs	r2, #8
 8007c54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69da      	ldr	r2, [r3, #28]
 8007c5c:	23c0      	movs	r3, #192	; 0xc0
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4013      	ands	r3, r2
 8007c62:	d004      	beq.n	8007c6e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	0018      	movs	r0, r3
 8007c68:	f000 f874 	bl	8007d54 <HAL_TIM_IC_CaptureCallback>
 8007c6c:	e007      	b.n	8007c7e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	0018      	movs	r0, r3
 8007c72:	f000 f867 	bl	8007d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	0018      	movs	r0, r3
 8007c7a:	f000 f873 	bl	8007d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d10f      	bne.n	8007cb2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d108      	bne.n	8007cb2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	4252      	negs	r2, r2
 8007ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	0018      	movs	r0, r3
 8007cae:	f7f8 ffc7 	bl	8000c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	2280      	movs	r2, #128	; 0x80
 8007cba:	4013      	ands	r3, r2
 8007cbc:	2b80      	cmp	r3, #128	; 0x80
 8007cbe:	d10f      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	2280      	movs	r2, #128	; 0x80
 8007cc8:	4013      	ands	r3, r2
 8007cca:	2b80      	cmp	r3, #128	; 0x80
 8007ccc:	d108      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2281      	movs	r2, #129	; 0x81
 8007cd4:	4252      	negs	r2, r2
 8007cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	0018      	movs	r0, r3
 8007cdc:	f000 f8da 	bl	8007e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	2240      	movs	r2, #64	; 0x40
 8007ce8:	4013      	ands	r3, r2
 8007cea:	2b40      	cmp	r3, #64	; 0x40
 8007cec:	d10f      	bne.n	8007d0e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	2240      	movs	r2, #64	; 0x40
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	2b40      	cmp	r3, #64	; 0x40
 8007cfa:	d108      	bne.n	8007d0e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2241      	movs	r2, #65	; 0x41
 8007d02:	4252      	negs	r2, r2
 8007d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	0018      	movs	r0, r3
 8007d0a:	f000 f833 	bl	8007d74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	2220      	movs	r2, #32
 8007d16:	4013      	ands	r3, r2
 8007d18:	2b20      	cmp	r3, #32
 8007d1a:	d10f      	bne.n	8007d3c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	2220      	movs	r2, #32
 8007d24:	4013      	ands	r3, r2
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	d108      	bne.n	8007d3c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2221      	movs	r2, #33	; 0x21
 8007d30:	4252      	negs	r2, r2
 8007d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	0018      	movs	r0, r3
 8007d38:	f000 f8a4 	bl	8007e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d3c:	46c0      	nop			; (mov r8, r8)
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	b002      	add	sp, #8
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d4c:	46c0      	nop			; (mov r8, r8)
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	b002      	add	sp, #8
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d5c:	46c0      	nop			; (mov r8, r8)
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	b002      	add	sp, #8
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d6c:	46c0      	nop			; (mov r8, r8)
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	b002      	add	sp, #8
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d7c:	46c0      	nop			; (mov r8, r8)
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	b002      	add	sp, #8
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a34      	ldr	r2, [pc, #208]	; (8007e68 <TIM_Base_SetConfig+0xe4>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d008      	beq.n	8007dae <TIM_Base_SetConfig+0x2a>
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	2380      	movs	r3, #128	; 0x80
 8007da0:	05db      	lsls	r3, r3, #23
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d003      	beq.n	8007dae <TIM_Base_SetConfig+0x2a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a30      	ldr	r2, [pc, #192]	; (8007e6c <TIM_Base_SetConfig+0xe8>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d108      	bne.n	8007dc0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2270      	movs	r2, #112	; 0x70
 8007db2:	4393      	bics	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a29      	ldr	r2, [pc, #164]	; (8007e68 <TIM_Base_SetConfig+0xe4>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d018      	beq.n	8007dfa <TIM_Base_SetConfig+0x76>
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	2380      	movs	r3, #128	; 0x80
 8007dcc:	05db      	lsls	r3, r3, #23
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d013      	beq.n	8007dfa <TIM_Base_SetConfig+0x76>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a25      	ldr	r2, [pc, #148]	; (8007e6c <TIM_Base_SetConfig+0xe8>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00f      	beq.n	8007dfa <TIM_Base_SetConfig+0x76>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a24      	ldr	r2, [pc, #144]	; (8007e70 <TIM_Base_SetConfig+0xec>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d00b      	beq.n	8007dfa <TIM_Base_SetConfig+0x76>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a23      	ldr	r2, [pc, #140]	; (8007e74 <TIM_Base_SetConfig+0xf0>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d007      	beq.n	8007dfa <TIM_Base_SetConfig+0x76>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a22      	ldr	r2, [pc, #136]	; (8007e78 <TIM_Base_SetConfig+0xf4>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d003      	beq.n	8007dfa <TIM_Base_SetConfig+0x76>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a21      	ldr	r2, [pc, #132]	; (8007e7c <TIM_Base_SetConfig+0xf8>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d108      	bne.n	8007e0c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	4a20      	ldr	r2, [pc, #128]	; (8007e80 <TIM_Base_SetConfig+0xfc>)
 8007dfe:	4013      	ands	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2280      	movs	r2, #128	; 0x80
 8007e10:	4393      	bics	r3, r2
 8007e12:	001a      	movs	r2, r3
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	689a      	ldr	r2, [r3, #8]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a0c      	ldr	r2, [pc, #48]	; (8007e68 <TIM_Base_SetConfig+0xe4>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d00b      	beq.n	8007e52 <TIM_Base_SetConfig+0xce>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a0d      	ldr	r2, [pc, #52]	; (8007e74 <TIM_Base_SetConfig+0xf0>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d007      	beq.n	8007e52 <TIM_Base_SetConfig+0xce>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a0c      	ldr	r2, [pc, #48]	; (8007e78 <TIM_Base_SetConfig+0xf4>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d003      	beq.n	8007e52 <TIM_Base_SetConfig+0xce>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a0b      	ldr	r2, [pc, #44]	; (8007e7c <TIM_Base_SetConfig+0xf8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d103      	bne.n	8007e5a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	691a      	ldr	r2, [r3, #16]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	615a      	str	r2, [r3, #20]
}
 8007e60:	46c0      	nop			; (mov r8, r8)
 8007e62:	46bd      	mov	sp, r7
 8007e64:	b004      	add	sp, #16
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	40012c00 	.word	0x40012c00
 8007e6c:	40000400 	.word	0x40000400
 8007e70:	40002000 	.word	0x40002000
 8007e74:	40014000 	.word	0x40014000
 8007e78:	40014400 	.word	0x40014400
 8007e7c:	40014800 	.word	0x40014800
 8007e80:	fffffcff 	.word	0xfffffcff

08007e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e8c:	46c0      	nop			; (mov r8, r8)
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	b002      	add	sp, #8
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e9c:	46c0      	nop			; (mov r8, r8)
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	b002      	add	sp, #8
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2244      	movs	r2, #68	; 0x44
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007eb4:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <USB_EnableGlobalInt+0x28>)
 8007eb6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	b299      	uxth	r1, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2240      	movs	r2, #64	; 0x40
 8007ec0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	0018      	movs	r0, r3
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	b004      	add	sp, #16
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	0000bf80 	.word	0x0000bf80

08007ed0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007ed8:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <USB_DisableGlobalInt+0x30>)
 8007eda:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2240      	movs	r2, #64	; 0x40
 8007ee0:	5a9b      	ldrh	r3, [r3, r2]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	b292      	uxth	r2, r2
 8007ee8:	43d2      	mvns	r2, r2
 8007eea:	b292      	uxth	r2, r2
 8007eec:	4013      	ands	r3, r2
 8007eee:	b299      	uxth	r1, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2240      	movs	r2, #64	; 0x40
 8007ef4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	0018      	movs	r0, r3
 8007efa:	46bd      	mov	sp, r7
 8007efc:	b004      	add	sp, #16
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	0000bf80 	.word	0x0000bf80

08007f04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007f04:	b084      	sub	sp, #16
 8007f06:	b590      	push	{r4, r7, lr}
 8007f08:	46c6      	mov	lr, r8
 8007f0a:	b500      	push	{lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	2004      	movs	r0, #4
 8007f14:	2410      	movs	r4, #16
 8007f16:	46a4      	mov	ip, r4
 8007f18:	2408      	movs	r4, #8
 8007f1a:	46a0      	mov	r8, r4
 8007f1c:	44b8      	add	r8, r7
 8007f1e:	44c4      	add	ip, r8
 8007f20:	4460      	add	r0, ip
 8007f22:	6001      	str	r1, [r0, #0]
 8007f24:	6042      	str	r2, [r0, #4]
 8007f26:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2240      	movs	r2, #64	; 0x40
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2240      	movs	r2, #64	; 0x40
 8007f34:	2100      	movs	r1, #0
 8007f36:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2244      	movs	r2, #68	; 0x44
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2250      	movs	r2, #80	; 0x50
 8007f44:	2100      	movs	r1, #0
 8007f46:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	0018      	movs	r0, r3
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	b002      	add	sp, #8
 8007f50:	bc80      	pop	{r7}
 8007f52:	46b8      	mov	r8, r7
 8007f54:	bc90      	pop	{r4, r7}
 8007f56:	bc08      	pop	{r3}
 8007f58:	b004      	add	sp, #16
 8007f5a:	4718      	bx	r3

08007f5c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b09c      	sub	sp, #112	; 0x70
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f66:	236f      	movs	r3, #111	; 0x6f
 8007f68:	18fb      	adds	r3, r7, r3
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	18d3      	adds	r3, r2, r3
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	236c      	movs	r3, #108	; 0x6c
 8007f7e:	18fb      	adds	r3, r7, r3
 8007f80:	49cf      	ldr	r1, [pc, #828]	; (80082c0 <USB_ActivateEndpoint+0x364>)
 8007f82:	400a      	ands	r2, r1
 8007f84:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	78db      	ldrb	r3, [r3, #3]
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d017      	beq.n	8007fbe <USB_ActivateEndpoint+0x62>
 8007f8e:	dc28      	bgt.n	8007fe2 <USB_ActivateEndpoint+0x86>
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d00e      	beq.n	8007fb2 <USB_ActivateEndpoint+0x56>
 8007f94:	dc25      	bgt.n	8007fe2 <USB_ActivateEndpoint+0x86>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <USB_ActivateEndpoint+0x44>
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d018      	beq.n	8007fd0 <USB_ActivateEndpoint+0x74>
 8007f9e:	e020      	b.n	8007fe2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007fa0:	226c      	movs	r2, #108	; 0x6c
 8007fa2:	18bb      	adds	r3, r7, r2
 8007fa4:	18ba      	adds	r2, r7, r2
 8007fa6:	8812      	ldrh	r2, [r2, #0]
 8007fa8:	2180      	movs	r1, #128	; 0x80
 8007faa:	0089      	lsls	r1, r1, #2
 8007fac:	430a      	orrs	r2, r1
 8007fae:	801a      	strh	r2, [r3, #0]
      break;
 8007fb0:	e01c      	b.n	8007fec <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8007fb2:	226c      	movs	r2, #108	; 0x6c
 8007fb4:	18bb      	adds	r3, r7, r2
 8007fb6:	18ba      	adds	r2, r7, r2
 8007fb8:	8812      	ldrh	r2, [r2, #0]
 8007fba:	801a      	strh	r2, [r3, #0]
      break;
 8007fbc:	e016      	b.n	8007fec <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007fbe:	226c      	movs	r2, #108	; 0x6c
 8007fc0:	18bb      	adds	r3, r7, r2
 8007fc2:	18ba      	adds	r2, r7, r2
 8007fc4:	8812      	ldrh	r2, [r2, #0]
 8007fc6:	21c0      	movs	r1, #192	; 0xc0
 8007fc8:	00c9      	lsls	r1, r1, #3
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	801a      	strh	r2, [r3, #0]
      break;
 8007fce:	e00d      	b.n	8007fec <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007fd0:	226c      	movs	r2, #108	; 0x6c
 8007fd2:	18bb      	adds	r3, r7, r2
 8007fd4:	18ba      	adds	r2, r7, r2
 8007fd6:	8812      	ldrh	r2, [r2, #0]
 8007fd8:	2180      	movs	r1, #128	; 0x80
 8007fda:	00c9      	lsls	r1, r1, #3
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	801a      	strh	r2, [r3, #0]
      break;
 8007fe0:	e004      	b.n	8007fec <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8007fe2:	236f      	movs	r3, #111	; 0x6f
 8007fe4:	18fb      	adds	r3, r7, r3
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	701a      	strb	r2, [r3, #0]
      break;
 8007fea:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	18d3      	adds	r3, r2, r3
 8007ff6:	226c      	movs	r2, #108	; 0x6c
 8007ff8:	18ba      	adds	r2, r7, r2
 8007ffa:	8812      	ldrh	r2, [r2, #0]
 8007ffc:	49b1      	ldr	r1, [pc, #708]	; (80082c4 <USB_ActivateEndpoint+0x368>)
 8007ffe:	430a      	orrs	r2, r1
 8008000:	b292      	uxth	r2, r2
 8008002:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	18d3      	adds	r3, r2, r3
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	b29b      	uxth	r3, r3
 8008012:	b21b      	sxth	r3, r3
 8008014:	4aac      	ldr	r2, [pc, #688]	; (80082c8 <USB_ActivateEndpoint+0x36c>)
 8008016:	4013      	ands	r3, r2
 8008018:	b21a      	sxth	r2, r3
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	b21b      	sxth	r3, r3
 8008020:	4313      	orrs	r3, r2
 8008022:	b21a      	sxth	r2, r3
 8008024:	2166      	movs	r1, #102	; 0x66
 8008026:	187b      	adds	r3, r7, r1
 8008028:	801a      	strh	r2, [r3, #0]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	18d3      	adds	r3, r2, r3
 8008034:	187a      	adds	r2, r7, r1
 8008036:	8812      	ldrh	r2, [r2, #0]
 8008038:	49a2      	ldr	r1, [pc, #648]	; (80082c4 <USB_ActivateEndpoint+0x368>)
 800803a:	430a      	orrs	r2, r1
 800803c:	b292      	uxth	r2, r2
 800803e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	7b1b      	ldrb	r3, [r3, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d000      	beq.n	800804a <USB_ActivateEndpoint+0xee>
 8008048:	e150      	b.n	80082ec <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d100      	bne.n	8008054 <USB_ActivateEndpoint+0xf8>
 8008052:	e07a      	b.n	800814a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	61bb      	str	r3, [r7, #24]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2250      	movs	r2, #80	; 0x50
 800805c:	5a9b      	ldrh	r3, [r3, r2]
 800805e:	b29b      	uxth	r3, r3
 8008060:	001a      	movs	r2, r3
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	189b      	adds	r3, r3, r2
 8008066:	61bb      	str	r3, [r7, #24]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	00da      	lsls	r2, r3, #3
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	18d3      	adds	r3, r2, r3
 8008072:	2280      	movs	r2, #128	; 0x80
 8008074:	00d2      	lsls	r2, r2, #3
 8008076:	4694      	mov	ip, r2
 8008078:	4463      	add	r3, ip
 800807a:	617b      	str	r3, [r7, #20]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	88db      	ldrh	r3, [r3, #6]
 8008080:	085b      	lsrs	r3, r3, #1
 8008082:	b29b      	uxth	r3, r3
 8008084:	18db      	adds	r3, r3, r3
 8008086:	b29a      	uxth	r2, r3
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	18d2      	adds	r2, r2, r3
 8008096:	2112      	movs	r1, #18
 8008098:	187b      	adds	r3, r7, r1
 800809a:	8812      	ldrh	r2, [r2, #0]
 800809c:	801a      	strh	r2, [r3, #0]
 800809e:	187b      	adds	r3, r7, r1
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	2240      	movs	r2, #64	; 0x40
 80080a4:	4013      	ands	r3, r2
 80080a6:	d016      	beq.n	80080d6 <USB_ActivateEndpoint+0x17a>
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	18d3      	adds	r3, r2, r3
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	2010      	movs	r0, #16
 80080b8:	183b      	adds	r3, r7, r0
 80080ba:	4983      	ldr	r1, [pc, #524]	; (80082c8 <USB_ActivateEndpoint+0x36c>)
 80080bc:	400a      	ands	r2, r1
 80080be:	801a      	strh	r2, [r3, #0]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	18d3      	adds	r3, r2, r3
 80080ca:	183a      	adds	r2, r7, r0
 80080cc:	8812      	ldrh	r2, [r2, #0]
 80080ce:	497f      	ldr	r1, [pc, #508]	; (80082cc <USB_ActivateEndpoint+0x370>)
 80080d0:	430a      	orrs	r2, r1
 80080d2:	b292      	uxth	r2, r2
 80080d4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	78db      	ldrb	r3, [r3, #3]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d01d      	beq.n	800811a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	18d3      	adds	r3, r2, r3
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	200c      	movs	r0, #12
 80080ee:	183b      	adds	r3, r7, r0
 80080f0:	4977      	ldr	r1, [pc, #476]	; (80082d0 <USB_ActivateEndpoint+0x374>)
 80080f2:	400a      	ands	r2, r1
 80080f4:	801a      	strh	r2, [r3, #0]
 80080f6:	183b      	adds	r3, r7, r0
 80080f8:	183a      	adds	r2, r7, r0
 80080fa:	8812      	ldrh	r2, [r2, #0]
 80080fc:	2120      	movs	r1, #32
 80080fe:	404a      	eors	r2, r1
 8008100:	801a      	strh	r2, [r3, #0]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	18d3      	adds	r3, r2, r3
 800810c:	183a      	adds	r2, r7, r0
 800810e:	8812      	ldrh	r2, [r2, #0]
 8008110:	496c      	ldr	r1, [pc, #432]	; (80082c4 <USB_ActivateEndpoint+0x368>)
 8008112:	430a      	orrs	r2, r1
 8008114:	b292      	uxth	r2, r2
 8008116:	801a      	strh	r2, [r3, #0]
 8008118:	e27a      	b.n	8008610 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	18d3      	adds	r3, r2, r3
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	b29a      	uxth	r2, r3
 8008128:	200e      	movs	r0, #14
 800812a:	183b      	adds	r3, r7, r0
 800812c:	4968      	ldr	r1, [pc, #416]	; (80082d0 <USB_ActivateEndpoint+0x374>)
 800812e:	400a      	ands	r2, r1
 8008130:	801a      	strh	r2, [r3, #0]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	18d3      	adds	r3, r2, r3
 800813c:	183a      	adds	r2, r7, r0
 800813e:	8812      	ldrh	r2, [r2, #0]
 8008140:	4960      	ldr	r1, [pc, #384]	; (80082c4 <USB_ActivateEndpoint+0x368>)
 8008142:	430a      	orrs	r2, r1
 8008144:	b292      	uxth	r2, r2
 8008146:	801a      	strh	r2, [r3, #0]
 8008148:	e262      	b.n	8008610 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	633b      	str	r3, [r7, #48]	; 0x30
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2250      	movs	r2, #80	; 0x50
 8008152:	5a9b      	ldrh	r3, [r3, r2]
 8008154:	b29b      	uxth	r3, r3
 8008156:	001a      	movs	r2, r3
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	189b      	adds	r3, r3, r2
 800815c:	633b      	str	r3, [r7, #48]	; 0x30
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	00da      	lsls	r2, r3, #3
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	18d3      	adds	r3, r2, r3
 8008168:	4a5a      	ldr	r2, [pc, #360]	; (80082d4 <USB_ActivateEndpoint+0x378>)
 800816a:	4694      	mov	ip, r2
 800816c:	4463      	add	r3, ip
 800816e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	88db      	ldrh	r3, [r3, #6]
 8008174:	085b      	lsrs	r3, r3, #1
 8008176:	b29b      	uxth	r3, r3
 8008178:	18db      	adds	r3, r3, r3
 800817a:	b29a      	uxth	r2, r3
 800817c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	62bb      	str	r3, [r7, #40]	; 0x28
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2250      	movs	r2, #80	; 0x50
 8008188:	5a9b      	ldrh	r3, [r3, r2]
 800818a:	b29b      	uxth	r3, r3
 800818c:	001a      	movs	r2, r3
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	189b      	adds	r3, r3, r2
 8008192:	62bb      	str	r3, [r7, #40]	; 0x28
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	00da      	lsls	r2, r3, #3
 800819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819c:	18d3      	adds	r3, r2, r3
 800819e:	4a4e      	ldr	r2, [pc, #312]	; (80082d8 <USB_ActivateEndpoint+0x37c>)
 80081a0:	4694      	mov	ip, r2
 80081a2:	4463      	add	r3, ip
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d110      	bne.n	80081d0 <USB_ActivateEndpoint+0x274>
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	4a49      	ldr	r2, [pc, #292]	; (80082dc <USB_ActivateEndpoint+0x380>)
 80081b6:	4013      	ands	r3, r2
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	801a      	strh	r2, [r3, #0]
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	4a46      	ldr	r2, [pc, #280]	; (80082e0 <USB_ActivateEndpoint+0x384>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	801a      	strh	r2, [r3, #0]
 80081ce:	e02b      	b.n	8008228 <USB_ActivateEndpoint+0x2cc>
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	2b3e      	cmp	r3, #62	; 0x3e
 80081d6:	d812      	bhi.n	80081fe <USB_ActivateEndpoint+0x2a2>
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	085b      	lsrs	r3, r3, #1
 80081de:	66bb      	str	r3, [r7, #104]	; 0x68
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	2201      	movs	r2, #1
 80081e6:	4013      	ands	r3, r2
 80081e8:	d002      	beq.n	80081f0 <USB_ActivateEndpoint+0x294>
 80081ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081ec:	3301      	adds	r3, #1
 80081ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80081f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	029b      	lsls	r3, r3, #10
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	801a      	strh	r2, [r3, #0]
 80081fc:	e014      	b.n	8008228 <USB_ActivateEndpoint+0x2cc>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	095b      	lsrs	r3, r3, #5
 8008204:	66bb      	str	r3, [r7, #104]	; 0x68
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	221f      	movs	r2, #31
 800820c:	4013      	ands	r3, r2
 800820e:	d102      	bne.n	8008216 <USB_ActivateEndpoint+0x2ba>
 8008210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008212:	3b01      	subs	r3, #1
 8008214:	66bb      	str	r3, [r7, #104]	; 0x68
 8008216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008218:	b29b      	uxth	r3, r3
 800821a:	029b      	lsls	r3, r3, #10
 800821c:	b29b      	uxth	r3, r3
 800821e:	4a30      	ldr	r2, [pc, #192]	; (80082e0 <USB_ActivateEndpoint+0x384>)
 8008220:	4313      	orrs	r3, r2
 8008222:	b29a      	uxth	r2, r3
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	18d2      	adds	r2, r2, r3
 8008232:	2122      	movs	r1, #34	; 0x22
 8008234:	187b      	adds	r3, r7, r1
 8008236:	8812      	ldrh	r2, [r2, #0]
 8008238:	801a      	strh	r2, [r3, #0]
 800823a:	187b      	adds	r3, r7, r1
 800823c:	881a      	ldrh	r2, [r3, #0]
 800823e:	2380      	movs	r3, #128	; 0x80
 8008240:	01db      	lsls	r3, r3, #7
 8008242:	4013      	ands	r3, r2
 8008244:	d016      	beq.n	8008274 <USB_ActivateEndpoint+0x318>
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	18d3      	adds	r3, r2, r3
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	b29a      	uxth	r2, r3
 8008254:	2020      	movs	r0, #32
 8008256:	183b      	adds	r3, r7, r0
 8008258:	491b      	ldr	r1, [pc, #108]	; (80082c8 <USB_ActivateEndpoint+0x36c>)
 800825a:	400a      	ands	r2, r1
 800825c:	801a      	strh	r2, [r3, #0]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	18d3      	adds	r3, r2, r3
 8008268:	183a      	adds	r2, r7, r0
 800826a:	8812      	ldrh	r2, [r2, #0]
 800826c:	491d      	ldr	r1, [pc, #116]	; (80082e4 <USB_ActivateEndpoint+0x388>)
 800826e:	430a      	orrs	r2, r1
 8008270:	b292      	uxth	r2, r2
 8008272:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	18d3      	adds	r3, r2, r3
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	b29a      	uxth	r2, r3
 8008282:	201e      	movs	r0, #30
 8008284:	183b      	adds	r3, r7, r0
 8008286:	4918      	ldr	r1, [pc, #96]	; (80082e8 <USB_ActivateEndpoint+0x38c>)
 8008288:	400a      	ands	r2, r1
 800828a:	801a      	strh	r2, [r3, #0]
 800828c:	183b      	adds	r3, r7, r0
 800828e:	183a      	adds	r2, r7, r0
 8008290:	8812      	ldrh	r2, [r2, #0]
 8008292:	2180      	movs	r1, #128	; 0x80
 8008294:	0149      	lsls	r1, r1, #5
 8008296:	404a      	eors	r2, r1
 8008298:	801a      	strh	r2, [r3, #0]
 800829a:	183b      	adds	r3, r7, r0
 800829c:	183a      	adds	r2, r7, r0
 800829e:	8812      	ldrh	r2, [r2, #0]
 80082a0:	2180      	movs	r1, #128	; 0x80
 80082a2:	0189      	lsls	r1, r1, #6
 80082a4:	404a      	eors	r2, r1
 80082a6:	801a      	strh	r2, [r3, #0]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	18d3      	adds	r3, r2, r3
 80082b2:	183a      	adds	r2, r7, r0
 80082b4:	8812      	ldrh	r2, [r2, #0]
 80082b6:	4903      	ldr	r1, [pc, #12]	; (80082c4 <USB_ActivateEndpoint+0x368>)
 80082b8:	430a      	orrs	r2, r1
 80082ba:	b292      	uxth	r2, r2
 80082bc:	801a      	strh	r2, [r3, #0]
 80082be:	e1a7      	b.n	8008610 <USB_ActivateEndpoint+0x6b4>
 80082c0:	ffff898f 	.word	0xffff898f
 80082c4:	ffff8080 	.word	0xffff8080
 80082c8:	ffff8f8f 	.word	0xffff8f8f
 80082cc:	ffff80c0 	.word	0xffff80c0
 80082d0:	ffff8fbf 	.word	0xffff8fbf
 80082d4:	00000404 	.word	0x00000404
 80082d8:	00000406 	.word	0x00000406
 80082dc:	ffff83ff 	.word	0xffff83ff
 80082e0:	ffff8000 	.word	0xffff8000
 80082e4:	ffffc080 	.word	0xffffc080
 80082e8:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	78db      	ldrb	r3, [r3, #3]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d117      	bne.n	8008324 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	18d3      	adds	r3, r2, r3
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	b29a      	uxth	r2, r3
 8008302:	2062      	movs	r0, #98	; 0x62
 8008304:	183b      	adds	r3, r7, r0
 8008306:	49c6      	ldr	r1, [pc, #792]	; (8008620 <USB_ActivateEndpoint+0x6c4>)
 8008308:	400a      	ands	r2, r1
 800830a:	801a      	strh	r2, [r3, #0]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	18d3      	adds	r3, r2, r3
 8008316:	183a      	adds	r2, r7, r0
 8008318:	8812      	ldrh	r2, [r2, #0]
 800831a:	49c2      	ldr	r1, [pc, #776]	; (8008624 <USB_ActivateEndpoint+0x6c8>)
 800831c:	430a      	orrs	r2, r1
 800831e:	b292      	uxth	r2, r2
 8008320:	801a      	strh	r2, [r3, #0]
 8008322:	e016      	b.n	8008352 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	18d3      	adds	r3, r2, r3
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	b29a      	uxth	r2, r3
 8008332:	2064      	movs	r0, #100	; 0x64
 8008334:	183b      	adds	r3, r7, r0
 8008336:	49bc      	ldr	r1, [pc, #752]	; (8008628 <USB_ActivateEndpoint+0x6cc>)
 8008338:	400a      	ands	r2, r1
 800833a:	801a      	strh	r2, [r3, #0]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	18d3      	adds	r3, r2, r3
 8008346:	183a      	adds	r2, r7, r0
 8008348:	8812      	ldrh	r2, [r2, #0]
 800834a:	49b8      	ldr	r1, [pc, #736]	; (800862c <USB_ActivateEndpoint+0x6d0>)
 800834c:	430a      	orrs	r2, r1
 800834e:	b292      	uxth	r2, r2
 8008350:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2250      	movs	r2, #80	; 0x50
 800835a:	5a9b      	ldrh	r3, [r3, r2]
 800835c:	b29b      	uxth	r3, r3
 800835e:	001a      	movs	r2, r3
 8008360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008362:	189b      	adds	r3, r3, r2
 8008364:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	00da      	lsls	r2, r3, #3
 800836c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800836e:	18d3      	adds	r3, r2, r3
 8008370:	2280      	movs	r2, #128	; 0x80
 8008372:	00d2      	lsls	r2, r2, #3
 8008374:	4694      	mov	ip, r2
 8008376:	4463      	add	r3, ip
 8008378:	65bb      	str	r3, [r7, #88]	; 0x58
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	891b      	ldrh	r3, [r3, #8]
 800837e:	085b      	lsrs	r3, r3, #1
 8008380:	b29b      	uxth	r3, r3
 8008382:	18db      	adds	r3, r3, r3
 8008384:	b29a      	uxth	r2, r3
 8008386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008388:	801a      	strh	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	657b      	str	r3, [r7, #84]	; 0x54
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2250      	movs	r2, #80	; 0x50
 8008392:	5a9b      	ldrh	r3, [r3, r2]
 8008394:	b29b      	uxth	r3, r3
 8008396:	001a      	movs	r2, r3
 8008398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800839a:	189b      	adds	r3, r3, r2
 800839c:	657b      	str	r3, [r7, #84]	; 0x54
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	00da      	lsls	r2, r3, #3
 80083a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083a6:	18d3      	adds	r3, r2, r3
 80083a8:	4aa1      	ldr	r2, [pc, #644]	; (8008630 <USB_ActivateEndpoint+0x6d4>)
 80083aa:	4694      	mov	ip, r2
 80083ac:	4463      	add	r3, ip
 80083ae:	653b      	str	r3, [r7, #80]	; 0x50
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	895b      	ldrh	r3, [r3, #10]
 80083b4:	085b      	lsrs	r3, r3, #1
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	18db      	adds	r3, r3, r3
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083be:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	785b      	ldrb	r3, [r3, #1]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d000      	beq.n	80083ca <USB_ActivateEndpoint+0x46e>
 80083c8:	e087      	b.n	80084da <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	18d2      	adds	r2, r2, r3
 80083d4:	2140      	movs	r1, #64	; 0x40
 80083d6:	187b      	adds	r3, r7, r1
 80083d8:	8812      	ldrh	r2, [r2, #0]
 80083da:	801a      	strh	r2, [r3, #0]
 80083dc:	187b      	adds	r3, r7, r1
 80083de:	881a      	ldrh	r2, [r3, #0]
 80083e0:	2380      	movs	r3, #128	; 0x80
 80083e2:	01db      	lsls	r3, r3, #7
 80083e4:	4013      	ands	r3, r2
 80083e6:	d016      	beq.n	8008416 <USB_ActivateEndpoint+0x4ba>
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	18d3      	adds	r3, r2, r3
 80083f2:	881b      	ldrh	r3, [r3, #0]
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	203e      	movs	r0, #62	; 0x3e
 80083f8:	183b      	adds	r3, r7, r0
 80083fa:	4989      	ldr	r1, [pc, #548]	; (8008620 <USB_ActivateEndpoint+0x6c4>)
 80083fc:	400a      	ands	r2, r1
 80083fe:	801a      	strh	r2, [r3, #0]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	18d3      	adds	r3, r2, r3
 800840a:	183a      	adds	r2, r7, r0
 800840c:	8812      	ldrh	r2, [r2, #0]
 800840e:	4989      	ldr	r1, [pc, #548]	; (8008634 <USB_ActivateEndpoint+0x6d8>)
 8008410:	430a      	orrs	r2, r1
 8008412:	b292      	uxth	r2, r2
 8008414:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	18d2      	adds	r2, r2, r3
 8008420:	213c      	movs	r1, #60	; 0x3c
 8008422:	187b      	adds	r3, r7, r1
 8008424:	8812      	ldrh	r2, [r2, #0]
 8008426:	801a      	strh	r2, [r3, #0]
 8008428:	187b      	adds	r3, r7, r1
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	2240      	movs	r2, #64	; 0x40
 800842e:	4013      	ands	r3, r2
 8008430:	d016      	beq.n	8008460 <USB_ActivateEndpoint+0x504>
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	18d3      	adds	r3, r2, r3
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	b29a      	uxth	r2, r3
 8008440:	203a      	movs	r0, #58	; 0x3a
 8008442:	183b      	adds	r3, r7, r0
 8008444:	4976      	ldr	r1, [pc, #472]	; (8008620 <USB_ActivateEndpoint+0x6c4>)
 8008446:	400a      	ands	r2, r1
 8008448:	801a      	strh	r2, [r3, #0]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	18d3      	adds	r3, r2, r3
 8008454:	183a      	adds	r2, r7, r0
 8008456:	8812      	ldrh	r2, [r2, #0]
 8008458:	4977      	ldr	r1, [pc, #476]	; (8008638 <USB_ActivateEndpoint+0x6dc>)
 800845a:	430a      	orrs	r2, r1
 800845c:	b292      	uxth	r2, r2
 800845e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	18d3      	adds	r3, r2, r3
 800846a:	881b      	ldrh	r3, [r3, #0]
 800846c:	b29a      	uxth	r2, r3
 800846e:	2038      	movs	r0, #56	; 0x38
 8008470:	183b      	adds	r3, r7, r0
 8008472:	4972      	ldr	r1, [pc, #456]	; (800863c <USB_ActivateEndpoint+0x6e0>)
 8008474:	400a      	ands	r2, r1
 8008476:	801a      	strh	r2, [r3, #0]
 8008478:	183b      	adds	r3, r7, r0
 800847a:	183a      	adds	r2, r7, r0
 800847c:	8812      	ldrh	r2, [r2, #0]
 800847e:	2180      	movs	r1, #128	; 0x80
 8008480:	0149      	lsls	r1, r1, #5
 8008482:	404a      	eors	r2, r1
 8008484:	801a      	strh	r2, [r3, #0]
 8008486:	183b      	adds	r3, r7, r0
 8008488:	183a      	adds	r2, r7, r0
 800848a:	8812      	ldrh	r2, [r2, #0]
 800848c:	2180      	movs	r1, #128	; 0x80
 800848e:	0189      	lsls	r1, r1, #6
 8008490:	404a      	eors	r2, r1
 8008492:	801a      	strh	r2, [r3, #0]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	18d3      	adds	r3, r2, r3
 800849e:	183a      	adds	r2, r7, r0
 80084a0:	8812      	ldrh	r2, [r2, #0]
 80084a2:	4962      	ldr	r1, [pc, #392]	; (800862c <USB_ActivateEndpoint+0x6d0>)
 80084a4:	430a      	orrs	r2, r1
 80084a6:	b292      	uxth	r2, r2
 80084a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	18d3      	adds	r3, r2, r3
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	2036      	movs	r0, #54	; 0x36
 80084ba:	183b      	adds	r3, r7, r0
 80084bc:	4960      	ldr	r1, [pc, #384]	; (8008640 <USB_ActivateEndpoint+0x6e4>)
 80084be:	400a      	ands	r2, r1
 80084c0:	801a      	strh	r2, [r3, #0]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	18d3      	adds	r3, r2, r3
 80084cc:	183a      	adds	r2, r7, r0
 80084ce:	8812      	ldrh	r2, [r2, #0]
 80084d0:	4956      	ldr	r1, [pc, #344]	; (800862c <USB_ActivateEndpoint+0x6d0>)
 80084d2:	430a      	orrs	r2, r1
 80084d4:	b292      	uxth	r2, r2
 80084d6:	801a      	strh	r2, [r3, #0]
 80084d8:	e09a      	b.n	8008610 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	18d2      	adds	r2, r2, r3
 80084e4:	214e      	movs	r1, #78	; 0x4e
 80084e6:	187b      	adds	r3, r7, r1
 80084e8:	8812      	ldrh	r2, [r2, #0]
 80084ea:	801a      	strh	r2, [r3, #0]
 80084ec:	187b      	adds	r3, r7, r1
 80084ee:	881a      	ldrh	r2, [r3, #0]
 80084f0:	2380      	movs	r3, #128	; 0x80
 80084f2:	01db      	lsls	r3, r3, #7
 80084f4:	4013      	ands	r3, r2
 80084f6:	d016      	beq.n	8008526 <USB_ActivateEndpoint+0x5ca>
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	18d3      	adds	r3, r2, r3
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	b29a      	uxth	r2, r3
 8008506:	204c      	movs	r0, #76	; 0x4c
 8008508:	183b      	adds	r3, r7, r0
 800850a:	4945      	ldr	r1, [pc, #276]	; (8008620 <USB_ActivateEndpoint+0x6c4>)
 800850c:	400a      	ands	r2, r1
 800850e:	801a      	strh	r2, [r3, #0]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	18d3      	adds	r3, r2, r3
 800851a:	183a      	adds	r2, r7, r0
 800851c:	8812      	ldrh	r2, [r2, #0]
 800851e:	4945      	ldr	r1, [pc, #276]	; (8008634 <USB_ActivateEndpoint+0x6d8>)
 8008520:	430a      	orrs	r2, r1
 8008522:	b292      	uxth	r2, r2
 8008524:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	18d2      	adds	r2, r2, r3
 8008530:	214a      	movs	r1, #74	; 0x4a
 8008532:	187b      	adds	r3, r7, r1
 8008534:	8812      	ldrh	r2, [r2, #0]
 8008536:	801a      	strh	r2, [r3, #0]
 8008538:	187b      	adds	r3, r7, r1
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	2240      	movs	r2, #64	; 0x40
 800853e:	4013      	ands	r3, r2
 8008540:	d016      	beq.n	8008570 <USB_ActivateEndpoint+0x614>
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	18d3      	adds	r3, r2, r3
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	b29a      	uxth	r2, r3
 8008550:	2048      	movs	r0, #72	; 0x48
 8008552:	183b      	adds	r3, r7, r0
 8008554:	4932      	ldr	r1, [pc, #200]	; (8008620 <USB_ActivateEndpoint+0x6c4>)
 8008556:	400a      	ands	r2, r1
 8008558:	801a      	strh	r2, [r3, #0]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	18d3      	adds	r3, r2, r3
 8008564:	183a      	adds	r2, r7, r0
 8008566:	8812      	ldrh	r2, [r2, #0]
 8008568:	4933      	ldr	r1, [pc, #204]	; (8008638 <USB_ActivateEndpoint+0x6dc>)
 800856a:	430a      	orrs	r2, r1
 800856c:	b292      	uxth	r2, r2
 800856e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	78db      	ldrb	r3, [r3, #3]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d01d      	beq.n	80085b4 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	18d3      	adds	r3, r2, r3
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	b29a      	uxth	r2, r3
 8008586:	2044      	movs	r0, #68	; 0x44
 8008588:	183b      	adds	r3, r7, r0
 800858a:	492d      	ldr	r1, [pc, #180]	; (8008640 <USB_ActivateEndpoint+0x6e4>)
 800858c:	400a      	ands	r2, r1
 800858e:	801a      	strh	r2, [r3, #0]
 8008590:	183b      	adds	r3, r7, r0
 8008592:	183a      	adds	r2, r7, r0
 8008594:	8812      	ldrh	r2, [r2, #0]
 8008596:	2120      	movs	r1, #32
 8008598:	404a      	eors	r2, r1
 800859a:	801a      	strh	r2, [r3, #0]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	18d3      	adds	r3, r2, r3
 80085a6:	183a      	adds	r2, r7, r0
 80085a8:	8812      	ldrh	r2, [r2, #0]
 80085aa:	4920      	ldr	r1, [pc, #128]	; (800862c <USB_ActivateEndpoint+0x6d0>)
 80085ac:	430a      	orrs	r2, r1
 80085ae:	b292      	uxth	r2, r2
 80085b0:	801a      	strh	r2, [r3, #0]
 80085b2:	e016      	b.n	80085e2 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	18d3      	adds	r3, r2, r3
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	2046      	movs	r0, #70	; 0x46
 80085c4:	183b      	adds	r3, r7, r0
 80085c6:	491e      	ldr	r1, [pc, #120]	; (8008640 <USB_ActivateEndpoint+0x6e4>)
 80085c8:	400a      	ands	r2, r1
 80085ca:	801a      	strh	r2, [r3, #0]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	18d3      	adds	r3, r2, r3
 80085d6:	183a      	adds	r2, r7, r0
 80085d8:	8812      	ldrh	r2, [r2, #0]
 80085da:	4914      	ldr	r1, [pc, #80]	; (800862c <USB_ActivateEndpoint+0x6d0>)
 80085dc:	430a      	orrs	r2, r1
 80085de:	b292      	uxth	r2, r2
 80085e0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	18d3      	adds	r3, r2, r3
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	2042      	movs	r0, #66	; 0x42
 80085f2:	183b      	adds	r3, r7, r0
 80085f4:	4911      	ldr	r1, [pc, #68]	; (800863c <USB_ActivateEndpoint+0x6e0>)
 80085f6:	400a      	ands	r2, r1
 80085f8:	801a      	strh	r2, [r3, #0]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	18d3      	adds	r3, r2, r3
 8008604:	183a      	adds	r2, r7, r0
 8008606:	8812      	ldrh	r2, [r2, #0]
 8008608:	4908      	ldr	r1, [pc, #32]	; (800862c <USB_ActivateEndpoint+0x6d0>)
 800860a:	430a      	orrs	r2, r1
 800860c:	b292      	uxth	r2, r2
 800860e:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8008610:	236f      	movs	r3, #111	; 0x6f
 8008612:	18fb      	adds	r3, r7, r3
 8008614:	781b      	ldrb	r3, [r3, #0]
}
 8008616:	0018      	movs	r0, r3
 8008618:	46bd      	mov	sp, r7
 800861a:	b01c      	add	sp, #112	; 0x70
 800861c:	bd80      	pop	{r7, pc}
 800861e:	46c0      	nop			; (mov r8, r8)
 8008620:	ffff8f8f 	.word	0xffff8f8f
 8008624:	ffff8180 	.word	0xffff8180
 8008628:	ffff8e8f 	.word	0xffff8e8f
 800862c:	ffff8080 	.word	0xffff8080
 8008630:	00000404 	.word	0x00000404
 8008634:	ffffc080 	.word	0xffffc080
 8008638:	ffff80c0 	.word	0xffff80c0
 800863c:	ffffbf8f 	.word	0xffffbf8f
 8008640:	ffff8fbf 	.word	0xffff8fbf

08008644 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b08c      	sub	sp, #48	; 0x30
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	7b1b      	ldrb	r3, [r3, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d000      	beq.n	8008658 <USB_DeactivateEndpoint+0x14>
 8008656:	e07e      	b.n	8008756 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	785b      	ldrb	r3, [r3, #1]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d03c      	beq.n	80086da <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	18d2      	adds	r2, r2, r3
 800866a:	210c      	movs	r1, #12
 800866c:	187b      	adds	r3, r7, r1
 800866e:	8812      	ldrh	r2, [r2, #0]
 8008670:	801a      	strh	r2, [r3, #0]
 8008672:	187b      	adds	r3, r7, r1
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	2240      	movs	r2, #64	; 0x40
 8008678:	4013      	ands	r3, r2
 800867a:	d016      	beq.n	80086aa <USB_DeactivateEndpoint+0x66>
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	18d3      	adds	r3, r2, r3
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	b29a      	uxth	r2, r3
 800868a:	200a      	movs	r0, #10
 800868c:	183b      	adds	r3, r7, r0
 800868e:	49c7      	ldr	r1, [pc, #796]	; (80089ac <USB_DeactivateEndpoint+0x368>)
 8008690:	400a      	ands	r2, r1
 8008692:	801a      	strh	r2, [r3, #0]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	18d3      	adds	r3, r2, r3
 800869e:	183a      	adds	r2, r7, r0
 80086a0:	8812      	ldrh	r2, [r2, #0]
 80086a2:	49c3      	ldr	r1, [pc, #780]	; (80089b0 <USB_DeactivateEndpoint+0x36c>)
 80086a4:	430a      	orrs	r2, r1
 80086a6:	b292      	uxth	r2, r2
 80086a8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	18d3      	adds	r3, r2, r3
 80086b4:	881b      	ldrh	r3, [r3, #0]
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	2008      	movs	r0, #8
 80086ba:	183b      	adds	r3, r7, r0
 80086bc:	49bd      	ldr	r1, [pc, #756]	; (80089b4 <USB_DeactivateEndpoint+0x370>)
 80086be:	400a      	ands	r2, r1
 80086c0:	801a      	strh	r2, [r3, #0]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	18d3      	adds	r3, r2, r3
 80086cc:	183a      	adds	r2, r7, r0
 80086ce:	8812      	ldrh	r2, [r2, #0]
 80086d0:	49b9      	ldr	r1, [pc, #740]	; (80089b8 <USB_DeactivateEndpoint+0x374>)
 80086d2:	430a      	orrs	r2, r1
 80086d4:	b292      	uxth	r2, r2
 80086d6:	801a      	strh	r2, [r3, #0]
 80086d8:	e163      	b.n	80089a2 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	18d2      	adds	r2, r2, r3
 80086e4:	2112      	movs	r1, #18
 80086e6:	187b      	adds	r3, r7, r1
 80086e8:	8812      	ldrh	r2, [r2, #0]
 80086ea:	801a      	strh	r2, [r3, #0]
 80086ec:	187b      	adds	r3, r7, r1
 80086ee:	881a      	ldrh	r2, [r3, #0]
 80086f0:	2380      	movs	r3, #128	; 0x80
 80086f2:	01db      	lsls	r3, r3, #7
 80086f4:	4013      	ands	r3, r2
 80086f6:	d016      	beq.n	8008726 <USB_DeactivateEndpoint+0xe2>
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	18d3      	adds	r3, r2, r3
 8008702:	881b      	ldrh	r3, [r3, #0]
 8008704:	b29a      	uxth	r2, r3
 8008706:	2010      	movs	r0, #16
 8008708:	183b      	adds	r3, r7, r0
 800870a:	49a8      	ldr	r1, [pc, #672]	; (80089ac <USB_DeactivateEndpoint+0x368>)
 800870c:	400a      	ands	r2, r1
 800870e:	801a      	strh	r2, [r3, #0]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	18d3      	adds	r3, r2, r3
 800871a:	183a      	adds	r2, r7, r0
 800871c:	8812      	ldrh	r2, [r2, #0]
 800871e:	49a7      	ldr	r1, [pc, #668]	; (80089bc <USB_DeactivateEndpoint+0x378>)
 8008720:	430a      	orrs	r2, r1
 8008722:	b292      	uxth	r2, r2
 8008724:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	18d3      	adds	r3, r2, r3
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	b29a      	uxth	r2, r3
 8008734:	200e      	movs	r0, #14
 8008736:	183b      	adds	r3, r7, r0
 8008738:	49a1      	ldr	r1, [pc, #644]	; (80089c0 <USB_DeactivateEndpoint+0x37c>)
 800873a:	400a      	ands	r2, r1
 800873c:	801a      	strh	r2, [r3, #0]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	18d3      	adds	r3, r2, r3
 8008748:	183a      	adds	r2, r7, r0
 800874a:	8812      	ldrh	r2, [r2, #0]
 800874c:	499a      	ldr	r1, [pc, #616]	; (80089b8 <USB_DeactivateEndpoint+0x374>)
 800874e:	430a      	orrs	r2, r1
 8008750:	b292      	uxth	r2, r2
 8008752:	801a      	strh	r2, [r3, #0]
 8008754:	e125      	b.n	80089a2 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	785b      	ldrb	r3, [r3, #1]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d000      	beq.n	8008760 <USB_DeactivateEndpoint+0x11c>
 800875e:	e090      	b.n	8008882 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	18d2      	adds	r2, r2, r3
 800876a:	2120      	movs	r1, #32
 800876c:	187b      	adds	r3, r7, r1
 800876e:	8812      	ldrh	r2, [r2, #0]
 8008770:	801a      	strh	r2, [r3, #0]
 8008772:	187b      	adds	r3, r7, r1
 8008774:	881a      	ldrh	r2, [r3, #0]
 8008776:	2380      	movs	r3, #128	; 0x80
 8008778:	01db      	lsls	r3, r3, #7
 800877a:	4013      	ands	r3, r2
 800877c:	d016      	beq.n	80087ac <USB_DeactivateEndpoint+0x168>
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	18d3      	adds	r3, r2, r3
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	b29a      	uxth	r2, r3
 800878c:	201e      	movs	r0, #30
 800878e:	183b      	adds	r3, r7, r0
 8008790:	4986      	ldr	r1, [pc, #536]	; (80089ac <USB_DeactivateEndpoint+0x368>)
 8008792:	400a      	ands	r2, r1
 8008794:	801a      	strh	r2, [r3, #0]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	18d3      	adds	r3, r2, r3
 80087a0:	183a      	adds	r2, r7, r0
 80087a2:	8812      	ldrh	r2, [r2, #0]
 80087a4:	4985      	ldr	r1, [pc, #532]	; (80089bc <USB_DeactivateEndpoint+0x378>)
 80087a6:	430a      	orrs	r2, r1
 80087a8:	b292      	uxth	r2, r2
 80087aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	18d2      	adds	r2, r2, r3
 80087b6:	211c      	movs	r1, #28
 80087b8:	187b      	adds	r3, r7, r1
 80087ba:	8812      	ldrh	r2, [r2, #0]
 80087bc:	801a      	strh	r2, [r3, #0]
 80087be:	187b      	adds	r3, r7, r1
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	2240      	movs	r2, #64	; 0x40
 80087c4:	4013      	ands	r3, r2
 80087c6:	d016      	beq.n	80087f6 <USB_DeactivateEndpoint+0x1b2>
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	18d3      	adds	r3, r2, r3
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	201a      	movs	r0, #26
 80087d8:	183b      	adds	r3, r7, r0
 80087da:	4974      	ldr	r1, [pc, #464]	; (80089ac <USB_DeactivateEndpoint+0x368>)
 80087dc:	400a      	ands	r2, r1
 80087de:	801a      	strh	r2, [r3, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	18d3      	adds	r3, r2, r3
 80087ea:	183a      	adds	r2, r7, r0
 80087ec:	8812      	ldrh	r2, [r2, #0]
 80087ee:	4970      	ldr	r1, [pc, #448]	; (80089b0 <USB_DeactivateEndpoint+0x36c>)
 80087f0:	430a      	orrs	r2, r1
 80087f2:	b292      	uxth	r2, r2
 80087f4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	18d3      	adds	r3, r2, r3
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	b29a      	uxth	r2, r3
 8008804:	2018      	movs	r0, #24
 8008806:	183b      	adds	r3, r7, r0
 8008808:	4968      	ldr	r1, [pc, #416]	; (80089ac <USB_DeactivateEndpoint+0x368>)
 800880a:	400a      	ands	r2, r1
 800880c:	801a      	strh	r2, [r3, #0]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	18d3      	adds	r3, r2, r3
 8008818:	183a      	adds	r2, r7, r0
 800881a:	8812      	ldrh	r2, [r2, #0]
 800881c:	4964      	ldr	r1, [pc, #400]	; (80089b0 <USB_DeactivateEndpoint+0x36c>)
 800881e:	430a      	orrs	r2, r1
 8008820:	b292      	uxth	r2, r2
 8008822:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	18d3      	adds	r3, r2, r3
 800882e:	881b      	ldrh	r3, [r3, #0]
 8008830:	b29a      	uxth	r2, r3
 8008832:	2016      	movs	r0, #22
 8008834:	183b      	adds	r3, r7, r0
 8008836:	4962      	ldr	r1, [pc, #392]	; (80089c0 <USB_DeactivateEndpoint+0x37c>)
 8008838:	400a      	ands	r2, r1
 800883a:	801a      	strh	r2, [r3, #0]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	18d3      	adds	r3, r2, r3
 8008846:	183a      	adds	r2, r7, r0
 8008848:	8812      	ldrh	r2, [r2, #0]
 800884a:	495b      	ldr	r1, [pc, #364]	; (80089b8 <USB_DeactivateEndpoint+0x374>)
 800884c:	430a      	orrs	r2, r1
 800884e:	b292      	uxth	r2, r2
 8008850:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	18d3      	adds	r3, r2, r3
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	b29a      	uxth	r2, r3
 8008860:	2014      	movs	r0, #20
 8008862:	183b      	adds	r3, r7, r0
 8008864:	4953      	ldr	r1, [pc, #332]	; (80089b4 <USB_DeactivateEndpoint+0x370>)
 8008866:	400a      	ands	r2, r1
 8008868:	801a      	strh	r2, [r3, #0]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	18d3      	adds	r3, r2, r3
 8008874:	183a      	adds	r2, r7, r0
 8008876:	8812      	ldrh	r2, [r2, #0]
 8008878:	494f      	ldr	r1, [pc, #316]	; (80089b8 <USB_DeactivateEndpoint+0x374>)
 800887a:	430a      	orrs	r2, r1
 800887c:	b292      	uxth	r2, r2
 800887e:	801a      	strh	r2, [r3, #0]
 8008880:	e08f      	b.n	80089a2 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	18d2      	adds	r2, r2, r3
 800888c:	212e      	movs	r1, #46	; 0x2e
 800888e:	187b      	adds	r3, r7, r1
 8008890:	8812      	ldrh	r2, [r2, #0]
 8008892:	801a      	strh	r2, [r3, #0]
 8008894:	187b      	adds	r3, r7, r1
 8008896:	881a      	ldrh	r2, [r3, #0]
 8008898:	2380      	movs	r3, #128	; 0x80
 800889a:	01db      	lsls	r3, r3, #7
 800889c:	4013      	ands	r3, r2
 800889e:	d016      	beq.n	80088ce <USB_DeactivateEndpoint+0x28a>
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	18d3      	adds	r3, r2, r3
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	202c      	movs	r0, #44	; 0x2c
 80088b0:	183b      	adds	r3, r7, r0
 80088b2:	493e      	ldr	r1, [pc, #248]	; (80089ac <USB_DeactivateEndpoint+0x368>)
 80088b4:	400a      	ands	r2, r1
 80088b6:	801a      	strh	r2, [r3, #0]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	18d3      	adds	r3, r2, r3
 80088c2:	183a      	adds	r2, r7, r0
 80088c4:	8812      	ldrh	r2, [r2, #0]
 80088c6:	493d      	ldr	r1, [pc, #244]	; (80089bc <USB_DeactivateEndpoint+0x378>)
 80088c8:	430a      	orrs	r2, r1
 80088ca:	b292      	uxth	r2, r2
 80088cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	18d2      	adds	r2, r2, r3
 80088d8:	212a      	movs	r1, #42	; 0x2a
 80088da:	187b      	adds	r3, r7, r1
 80088dc:	8812      	ldrh	r2, [r2, #0]
 80088de:	801a      	strh	r2, [r3, #0]
 80088e0:	187b      	adds	r3, r7, r1
 80088e2:	881b      	ldrh	r3, [r3, #0]
 80088e4:	2240      	movs	r2, #64	; 0x40
 80088e6:	4013      	ands	r3, r2
 80088e8:	d016      	beq.n	8008918 <USB_DeactivateEndpoint+0x2d4>
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	18d3      	adds	r3, r2, r3
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	2028      	movs	r0, #40	; 0x28
 80088fa:	183b      	adds	r3, r7, r0
 80088fc:	492b      	ldr	r1, [pc, #172]	; (80089ac <USB_DeactivateEndpoint+0x368>)
 80088fe:	400a      	ands	r2, r1
 8008900:	801a      	strh	r2, [r3, #0]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	18d3      	adds	r3, r2, r3
 800890c:	183a      	adds	r2, r7, r0
 800890e:	8812      	ldrh	r2, [r2, #0]
 8008910:	4927      	ldr	r1, [pc, #156]	; (80089b0 <USB_DeactivateEndpoint+0x36c>)
 8008912:	430a      	orrs	r2, r1
 8008914:	b292      	uxth	r2, r2
 8008916:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	18d3      	adds	r3, r2, r3
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	b29a      	uxth	r2, r3
 8008926:	2026      	movs	r0, #38	; 0x26
 8008928:	183b      	adds	r3, r7, r0
 800892a:	4920      	ldr	r1, [pc, #128]	; (80089ac <USB_DeactivateEndpoint+0x368>)
 800892c:	400a      	ands	r2, r1
 800892e:	801a      	strh	r2, [r3, #0]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	18d3      	adds	r3, r2, r3
 800893a:	183a      	adds	r2, r7, r0
 800893c:	8812      	ldrh	r2, [r2, #0]
 800893e:	491f      	ldr	r1, [pc, #124]	; (80089bc <USB_DeactivateEndpoint+0x378>)
 8008940:	430a      	orrs	r2, r1
 8008942:	b292      	uxth	r2, r2
 8008944:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	18d3      	adds	r3, r2, r3
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	b29a      	uxth	r2, r3
 8008954:	2024      	movs	r0, #36	; 0x24
 8008956:	183b      	adds	r3, r7, r0
 8008958:	4916      	ldr	r1, [pc, #88]	; (80089b4 <USB_DeactivateEndpoint+0x370>)
 800895a:	400a      	ands	r2, r1
 800895c:	801a      	strh	r2, [r3, #0]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	18d3      	adds	r3, r2, r3
 8008968:	183a      	adds	r2, r7, r0
 800896a:	8812      	ldrh	r2, [r2, #0]
 800896c:	4912      	ldr	r1, [pc, #72]	; (80089b8 <USB_DeactivateEndpoint+0x374>)
 800896e:	430a      	orrs	r2, r1
 8008970:	b292      	uxth	r2, r2
 8008972:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	18d3      	adds	r3, r2, r3
 800897e:	881b      	ldrh	r3, [r3, #0]
 8008980:	b29a      	uxth	r2, r3
 8008982:	2022      	movs	r0, #34	; 0x22
 8008984:	183b      	adds	r3, r7, r0
 8008986:	490e      	ldr	r1, [pc, #56]	; (80089c0 <USB_DeactivateEndpoint+0x37c>)
 8008988:	400a      	ands	r2, r1
 800898a:	801a      	strh	r2, [r3, #0]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	18d3      	adds	r3, r2, r3
 8008996:	183a      	adds	r2, r7, r0
 8008998:	8812      	ldrh	r2, [r2, #0]
 800899a:	4907      	ldr	r1, [pc, #28]	; (80089b8 <USB_DeactivateEndpoint+0x374>)
 800899c:	430a      	orrs	r2, r1
 800899e:	b292      	uxth	r2, r2
 80089a0:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	0018      	movs	r0, r3
 80089a6:	46bd      	mov	sp, r7
 80089a8:	b00c      	add	sp, #48	; 0x30
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	ffff8f8f 	.word	0xffff8f8f
 80089b0:	ffff80c0 	.word	0xffff80c0
 80089b4:	ffff8fbf 	.word	0xffff8fbf
 80089b8:	ffff8080 	.word	0xffff8080
 80089bc:	ffffc080 	.word	0xffffc080
 80089c0:	ffffbf8f 	.word	0xffffbf8f

080089c4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089c4:	b590      	push	{r4, r7, lr}
 80089c6:	b0c3      	sub	sp, #268	; 0x10c
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	785b      	ldrb	r3, [r3, #1]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d001      	beq.n	80089da <USB_EPStartXfer+0x16>
 80089d6:	f000 fcef 	bl	80093b8 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	699a      	ldr	r2, [r3, #24]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d905      	bls.n	80089f2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	1d7a      	adds	r2, r7, #5
 80089ec:	32ff      	adds	r2, #255	; 0xff
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	e004      	b.n	80089fc <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	1d7a      	adds	r2, r7, #5
 80089f8:	32ff      	adds	r2, #255	; 0xff
 80089fa:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	7b1b      	ldrb	r3, [r3, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d125      	bne.n	8008a50 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	6959      	ldr	r1, [r3, #20]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	88da      	ldrh	r2, [r3, #6]
 8008a0c:	1d7b      	adds	r3, r7, #5
 8008a0e:	33ff      	adds	r3, #255	; 0xff
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f001 f9c9 	bl	8009dac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	613b      	str	r3, [r7, #16]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2250      	movs	r2, #80	; 0x50
 8008a22:	5a9b      	ldrh	r3, [r3, r2]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	001a      	movs	r2, r3
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	189b      	adds	r3, r3, r2
 8008a2c:	613b      	str	r3, [r7, #16]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	00da      	lsls	r2, r3, #3
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	18d3      	adds	r3, r2, r3
 8008a38:	4acc      	ldr	r2, [pc, #816]	; (8008d6c <USB_EPStartXfer+0x3a8>)
 8008a3a:	4694      	mov	ip, r2
 8008a3c:	4463      	add	r3, ip
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	1d7b      	adds	r3, r7, #5
 8008a42:	33ff      	adds	r3, #255	; 0xff
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	801a      	strh	r2, [r3, #0]
 8008a4c:	f000 fc8f 	bl	800936e <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	78db      	ldrb	r3, [r3, #3]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d000      	beq.n	8008a5a <USB_EPStartXfer+0x96>
 8008a58:	e33a      	b.n	80090d0 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	6a1a      	ldr	r2, [r3, #32]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d800      	bhi.n	8008a68 <USB_EPStartXfer+0xa4>
 8008a66:	e2df      	b.n	8009028 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	18d3      	adds	r3, r2, r3
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	2056      	movs	r0, #86	; 0x56
 8008a78:	183b      	adds	r3, r7, r0
 8008a7a:	49bd      	ldr	r1, [pc, #756]	; (8008d70 <USB_EPStartXfer+0x3ac>)
 8008a7c:	400a      	ands	r2, r1
 8008a7e:	801a      	strh	r2, [r3, #0]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	18d3      	adds	r3, r2, r3
 8008a8a:	183a      	adds	r2, r7, r0
 8008a8c:	8812      	ldrh	r2, [r2, #0]
 8008a8e:	49b9      	ldr	r1, [pc, #740]	; (8008d74 <USB_EPStartXfer+0x3b0>)
 8008a90:	430a      	orrs	r2, r1
 8008a92:	b292      	uxth	r2, r2
 8008a94:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	6a1a      	ldr	r2, [r3, #32]
 8008a9a:	1d7b      	adds	r3, r7, #5
 8008a9c:	33ff      	adds	r3, #255	; 0xff
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	1ad2      	subs	r2, r2, r3
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	18d3      	adds	r3, r2, r3
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	001a      	movs	r2, r3
 8008ab6:	2340      	movs	r3, #64	; 0x40
 8008ab8:	4013      	ands	r3, r2
 8008aba:	d100      	bne.n	8008abe <USB_EPStartXfer+0xfa>
 8008abc:	e162      	b.n	8008d84 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	785b      	ldrb	r3, [r3, #1]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d16a      	bne.n	8008ba0 <USB_EPStartXfer+0x1dc>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2250      	movs	r2, #80	; 0x50
 8008ad2:	5a9b      	ldrh	r3, [r3, r2]
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	001a      	movs	r2, r3
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	189b      	adds	r3, r3, r2
 8008adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	00da      	lsls	r2, r3, #3
 8008ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae6:	18d3      	adds	r3, r2, r3
 8008ae8:	4aa3      	ldr	r2, [pc, #652]	; (8008d78 <USB_EPStartXfer+0x3b4>)
 8008aea:	4694      	mov	ip, r2
 8008aec:	4463      	add	r3, ip
 8008aee:	627b      	str	r3, [r7, #36]	; 0x24
 8008af0:	1d7b      	adds	r3, r7, #5
 8008af2:	33ff      	adds	r3, #255	; 0xff
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d110      	bne.n	8008b1c <USB_EPStartXfer+0x158>
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	881b      	ldrh	r3, [r3, #0]
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	4a9e      	ldr	r2, [pc, #632]	; (8008d7c <USB_EPStartXfer+0x3b8>)
 8008b02:	4013      	ands	r3, r2
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	801a      	strh	r2, [r3, #0]
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	4a9b      	ldr	r2, [pc, #620]	; (8008d80 <USB_EPStartXfer+0x3bc>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	801a      	strh	r2, [r3, #0]
 8008b1a:	e05c      	b.n	8008bd6 <USB_EPStartXfer+0x212>
 8008b1c:	1d7b      	adds	r3, r7, #5
 8008b1e:	33ff      	adds	r3, #255	; 0xff
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b3e      	cmp	r3, #62	; 0x3e
 8008b24:	d81c      	bhi.n	8008b60 <USB_EPStartXfer+0x19c>
 8008b26:	1d7b      	adds	r3, r7, #5
 8008b28:	33ff      	adds	r3, #255	; 0xff
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	085b      	lsrs	r3, r3, #1
 8008b2e:	1c7a      	adds	r2, r7, #1
 8008b30:	32ff      	adds	r2, #255	; 0xff
 8008b32:	6013      	str	r3, [r2, #0]
 8008b34:	1d7b      	adds	r3, r7, #5
 8008b36:	33ff      	adds	r3, #255	; 0xff
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	d006      	beq.n	8008b4e <USB_EPStartXfer+0x18a>
 8008b40:	1c7b      	adds	r3, r7, #1
 8008b42:	33ff      	adds	r3, #255	; 0xff
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3301      	adds	r3, #1
 8008b48:	1c7a      	adds	r2, r7, #1
 8008b4a:	32ff      	adds	r2, #255	; 0xff
 8008b4c:	6013      	str	r3, [r2, #0]
 8008b4e:	1c7b      	adds	r3, r7, #1
 8008b50:	33ff      	adds	r3, #255	; 0xff
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	029b      	lsls	r3, r3, #10
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5c:	801a      	strh	r2, [r3, #0]
 8008b5e:	e03a      	b.n	8008bd6 <USB_EPStartXfer+0x212>
 8008b60:	1d7b      	adds	r3, r7, #5
 8008b62:	33ff      	adds	r3, #255	; 0xff
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	095b      	lsrs	r3, r3, #5
 8008b68:	1c7a      	adds	r2, r7, #1
 8008b6a:	32ff      	adds	r2, #255	; 0xff
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	1d7b      	adds	r3, r7, #5
 8008b70:	33ff      	adds	r3, #255	; 0xff
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	221f      	movs	r2, #31
 8008b76:	4013      	ands	r3, r2
 8008b78:	d106      	bne.n	8008b88 <USB_EPStartXfer+0x1c4>
 8008b7a:	1c7b      	adds	r3, r7, #1
 8008b7c:	33ff      	adds	r3, #255	; 0xff
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3b01      	subs	r3, #1
 8008b82:	1c7a      	adds	r2, r7, #1
 8008b84:	32ff      	adds	r2, #255	; 0xff
 8008b86:	6013      	str	r3, [r2, #0]
 8008b88:	1c7b      	adds	r3, r7, #1
 8008b8a:	33ff      	adds	r3, #255	; 0xff
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	029b      	lsls	r3, r3, #10
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	4a7a      	ldr	r2, [pc, #488]	; (8008d80 <USB_EPStartXfer+0x3bc>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	801a      	strh	r2, [r3, #0]
 8008b9e:	e01a      	b.n	8008bd6 <USB_EPStartXfer+0x212>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	785b      	ldrb	r3, [r3, #1]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d116      	bne.n	8008bd6 <USB_EPStartXfer+0x212>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2250      	movs	r2, #80	; 0x50
 8008bac:	5a9b      	ldrh	r3, [r3, r2]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	001a      	movs	r2, r3
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	189b      	adds	r3, r3, r2
 8008bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	00da      	lsls	r2, r3, #3
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	18d3      	adds	r3, r2, r3
 8008bc2:	4a6d      	ldr	r2, [pc, #436]	; (8008d78 <USB_EPStartXfer+0x3b4>)
 8008bc4:	4694      	mov	ip, r2
 8008bc6:	4463      	add	r3, ip
 8008bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bca:	1d7b      	adds	r3, r7, #5
 8008bcc:	33ff      	adds	r3, #255	; 0xff
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008bd6:	2076      	movs	r0, #118	; 0x76
 8008bd8:	183b      	adds	r3, r7, r0
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	8952      	ldrh	r2, [r2, #10]
 8008bde:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	6959      	ldr	r1, [r3, #20]
 8008be4:	1d7b      	adds	r3, r7, #5
 8008be6:	33ff      	adds	r3, #255	; 0xff
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	b29c      	uxth	r4, r3
 8008bec:	183b      	adds	r3, r7, r0
 8008bee:	881a      	ldrh	r2, [r3, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	0023      	movs	r3, r4
 8008bf4:	f001 f8da 	bl	8009dac <USB_WritePMA>
            ep->xfer_buff += len;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	695a      	ldr	r2, [r3, #20]
 8008bfc:	1d7b      	adds	r3, r7, #5
 8008bfe:	33ff      	adds	r3, #255	; 0xff
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	18d2      	adds	r2, r2, r3
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	6a1a      	ldr	r2, [r3, #32]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d908      	bls.n	8008c26 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	6a1a      	ldr	r2, [r3, #32]
 8008c18:	1d7b      	adds	r3, r7, #5
 8008c1a:	33ff      	adds	r3, #255	; 0xff
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	1ad2      	subs	r2, r2, r3
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	621a      	str	r2, [r3, #32]
 8008c24:	e007      	b.n	8008c36 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	1d7a      	adds	r2, r7, #5
 8008c2c:	32ff      	adds	r2, #255	; 0xff
 8008c2e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	2200      	movs	r2, #0
 8008c34:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	785b      	ldrb	r3, [r3, #1]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d166      	bne.n	8008d0c <USB_EPStartXfer+0x348>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	61bb      	str	r3, [r7, #24]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2250      	movs	r2, #80	; 0x50
 8008c46:	5a9b      	ldrh	r3, [r3, r2]
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	001a      	movs	r2, r3
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	189b      	adds	r3, r3, r2
 8008c50:	61bb      	str	r3, [r7, #24]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	00da      	lsls	r2, r3, #3
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	18d3      	adds	r3, r2, r3
 8008c5c:	4a43      	ldr	r2, [pc, #268]	; (8008d6c <USB_EPStartXfer+0x3a8>)
 8008c5e:	4694      	mov	ip, r2
 8008c60:	4463      	add	r3, ip
 8008c62:	617b      	str	r3, [r7, #20]
 8008c64:	1d7b      	adds	r3, r7, #5
 8008c66:	33ff      	adds	r3, #255	; 0xff
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d110      	bne.n	8008c90 <USB_EPStartXfer+0x2cc>
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	881b      	ldrh	r3, [r3, #0]
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	4a41      	ldr	r2, [pc, #260]	; (8008d7c <USB_EPStartXfer+0x3b8>)
 8008c76:	4013      	ands	r3, r2
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	801a      	strh	r2, [r3, #0]
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	4a3e      	ldr	r2, [pc, #248]	; (8008d80 <USB_EPStartXfer+0x3bc>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	801a      	strh	r2, [r3, #0]
 8008c8e:	e05a      	b.n	8008d46 <USB_EPStartXfer+0x382>
 8008c90:	1d7b      	adds	r3, r7, #5
 8008c92:	33ff      	adds	r3, #255	; 0xff
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b3e      	cmp	r3, #62	; 0x3e
 8008c98:	d81a      	bhi.n	8008cd0 <USB_EPStartXfer+0x30c>
 8008c9a:	1d7b      	adds	r3, r7, #5
 8008c9c:	33ff      	adds	r3, #255	; 0xff
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	085b      	lsrs	r3, r3, #1
 8008ca2:	21fc      	movs	r1, #252	; 0xfc
 8008ca4:	187a      	adds	r2, r7, r1
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	1d7b      	adds	r3, r7, #5
 8008caa:	33ff      	adds	r3, #255	; 0xff
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	d004      	beq.n	8008cbe <USB_EPStartXfer+0x2fa>
 8008cb4:	187b      	adds	r3, r7, r1
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	187a      	adds	r2, r7, r1
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	23fc      	movs	r3, #252	; 0xfc
 8008cc0:	18fb      	adds	r3, r7, r3
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	029b      	lsls	r3, r3, #10
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	801a      	strh	r2, [r3, #0]
 8008cce:	e03a      	b.n	8008d46 <USB_EPStartXfer+0x382>
 8008cd0:	1d7b      	adds	r3, r7, #5
 8008cd2:	33ff      	adds	r3, #255	; 0xff
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	095b      	lsrs	r3, r3, #5
 8008cd8:	21fc      	movs	r1, #252	; 0xfc
 8008cda:	187a      	adds	r2, r7, r1
 8008cdc:	6013      	str	r3, [r2, #0]
 8008cde:	1d7b      	adds	r3, r7, #5
 8008ce0:	33ff      	adds	r3, #255	; 0xff
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	221f      	movs	r2, #31
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	d104      	bne.n	8008cf4 <USB_EPStartXfer+0x330>
 8008cea:	187b      	adds	r3, r7, r1
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	187a      	adds	r2, r7, r1
 8008cf2:	6013      	str	r3, [r2, #0]
 8008cf4:	23fc      	movs	r3, #252	; 0xfc
 8008cf6:	18fb      	adds	r3, r7, r3
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	029b      	lsls	r3, r3, #10
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	4a1f      	ldr	r2, [pc, #124]	; (8008d80 <USB_EPStartXfer+0x3bc>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	801a      	strh	r2, [r3, #0]
 8008d0a:	e01c      	b.n	8008d46 <USB_EPStartXfer+0x382>
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	785b      	ldrb	r3, [r3, #1]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d118      	bne.n	8008d46 <USB_EPStartXfer+0x382>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	623b      	str	r3, [r7, #32]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2250      	movs	r2, #80	; 0x50
 8008d1c:	5a9b      	ldrh	r3, [r3, r2]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	001a      	movs	r2, r3
 8008d22:	6a3b      	ldr	r3, [r7, #32]
 8008d24:	189b      	adds	r3, r3, r2
 8008d26:	623b      	str	r3, [r7, #32]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	00da      	lsls	r2, r3, #3
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	18d3      	adds	r3, r2, r3
 8008d32:	4a0e      	ldr	r2, [pc, #56]	; (8008d6c <USB_EPStartXfer+0x3a8>)
 8008d34:	4694      	mov	ip, r2
 8008d36:	4463      	add	r3, ip
 8008d38:	61fb      	str	r3, [r7, #28]
 8008d3a:	1d7b      	adds	r3, r7, #5
 8008d3c:	33ff      	adds	r3, #255	; 0xff
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008d46:	2076      	movs	r0, #118	; 0x76
 8008d48:	183b      	adds	r3, r7, r0
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	8912      	ldrh	r2, [r2, #8]
 8008d4e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	6959      	ldr	r1, [r3, #20]
 8008d54:	1d7b      	adds	r3, r7, #5
 8008d56:	33ff      	adds	r3, #255	; 0xff
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	b29c      	uxth	r4, r3
 8008d5c:	183b      	adds	r3, r7, r0
 8008d5e:	881a      	ldrh	r2, [r3, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	0023      	movs	r3, r4
 8008d64:	f001 f822 	bl	8009dac <USB_WritePMA>
 8008d68:	e301      	b.n	800936e <USB_EPStartXfer+0x9aa>
 8008d6a:	46c0      	nop			; (mov r8, r8)
 8008d6c:	00000402 	.word	0x00000402
 8008d70:	ffff8f8f 	.word	0xffff8f8f
 8008d74:	ffff8180 	.word	0xffff8180
 8008d78:	00000406 	.word	0x00000406
 8008d7c:	ffff83ff 	.word	0xffff83ff
 8008d80:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	785b      	ldrb	r3, [r3, #1]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d166      	bne.n	8008e5a <USB_EPStartXfer+0x496>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2250      	movs	r2, #80	; 0x50
 8008d94:	5a9b      	ldrh	r3, [r3, r2]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	001a      	movs	r2, r3
 8008d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d9c:	189b      	adds	r3, r3, r2
 8008d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	00da      	lsls	r2, r3, #3
 8008da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da8:	18d3      	adds	r3, r2, r3
 8008daa:	4ac3      	ldr	r2, [pc, #780]	; (80090b8 <USB_EPStartXfer+0x6f4>)
 8008dac:	4694      	mov	ip, r2
 8008dae:	4463      	add	r3, ip
 8008db0:	647b      	str	r3, [r7, #68]	; 0x44
 8008db2:	1d7b      	adds	r3, r7, #5
 8008db4:	33ff      	adds	r3, #255	; 0xff
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d110      	bne.n	8008dde <USB_EPStartXfer+0x41a>
 8008dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	4abe      	ldr	r2, [pc, #760]	; (80090bc <USB_EPStartXfer+0x6f8>)
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dca:	801a      	strh	r2, [r3, #0]
 8008dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	4abb      	ldr	r2, [pc, #748]	; (80090c0 <USB_EPStartXfer+0x6fc>)
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dda:	801a      	strh	r2, [r3, #0]
 8008ddc:	e05a      	b.n	8008e94 <USB_EPStartXfer+0x4d0>
 8008dde:	1d7b      	adds	r3, r7, #5
 8008de0:	33ff      	adds	r3, #255	; 0xff
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b3e      	cmp	r3, #62	; 0x3e
 8008de6:	d81a      	bhi.n	8008e1e <USB_EPStartXfer+0x45a>
 8008de8:	1d7b      	adds	r3, r7, #5
 8008dea:	33ff      	adds	r3, #255	; 0xff
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	085b      	lsrs	r3, r3, #1
 8008df0:	21f8      	movs	r1, #248	; 0xf8
 8008df2:	187a      	adds	r2, r7, r1
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	1d7b      	adds	r3, r7, #5
 8008df8:	33ff      	adds	r3, #255	; 0xff
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	4013      	ands	r3, r2
 8008e00:	d004      	beq.n	8008e0c <USB_EPStartXfer+0x448>
 8008e02:	187b      	adds	r3, r7, r1
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3301      	adds	r3, #1
 8008e08:	187a      	adds	r2, r7, r1
 8008e0a:	6013      	str	r3, [r2, #0]
 8008e0c:	23f8      	movs	r3, #248	; 0xf8
 8008e0e:	18fb      	adds	r3, r7, r3
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	029b      	lsls	r3, r3, #10
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e1a:	801a      	strh	r2, [r3, #0]
 8008e1c:	e03a      	b.n	8008e94 <USB_EPStartXfer+0x4d0>
 8008e1e:	1d7b      	adds	r3, r7, #5
 8008e20:	33ff      	adds	r3, #255	; 0xff
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	095b      	lsrs	r3, r3, #5
 8008e26:	21f8      	movs	r1, #248	; 0xf8
 8008e28:	187a      	adds	r2, r7, r1
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	1d7b      	adds	r3, r7, #5
 8008e2e:	33ff      	adds	r3, #255	; 0xff
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	221f      	movs	r2, #31
 8008e34:	4013      	ands	r3, r2
 8008e36:	d104      	bne.n	8008e42 <USB_EPStartXfer+0x47e>
 8008e38:	187b      	adds	r3, r7, r1
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	187a      	adds	r2, r7, r1
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	23f8      	movs	r3, #248	; 0xf8
 8008e44:	18fb      	adds	r3, r7, r3
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	029b      	lsls	r3, r3, #10
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	4a9c      	ldr	r2, [pc, #624]	; (80090c0 <USB_EPStartXfer+0x6fc>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e56:	801a      	strh	r2, [r3, #0]
 8008e58:	e01c      	b.n	8008e94 <USB_EPStartXfer+0x4d0>
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d118      	bne.n	8008e94 <USB_EPStartXfer+0x4d0>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	653b      	str	r3, [r7, #80]	; 0x50
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2250      	movs	r2, #80	; 0x50
 8008e6a:	5a9b      	ldrh	r3, [r3, r2]
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	001a      	movs	r2, r3
 8008e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e72:	189b      	adds	r3, r3, r2
 8008e74:	653b      	str	r3, [r7, #80]	; 0x50
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	00da      	lsls	r2, r3, #3
 8008e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e7e:	18d3      	adds	r3, r2, r3
 8008e80:	4a8d      	ldr	r2, [pc, #564]	; (80090b8 <USB_EPStartXfer+0x6f4>)
 8008e82:	4694      	mov	ip, r2
 8008e84:	4463      	add	r3, ip
 8008e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e88:	1d7b      	adds	r3, r7, #5
 8008e8a:	33ff      	adds	r3, #255	; 0xff
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008e94:	2076      	movs	r0, #118	; 0x76
 8008e96:	183b      	adds	r3, r7, r0
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	8912      	ldrh	r2, [r2, #8]
 8008e9c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	6959      	ldr	r1, [r3, #20]
 8008ea2:	1d7b      	adds	r3, r7, #5
 8008ea4:	33ff      	adds	r3, #255	; 0xff
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	b29c      	uxth	r4, r3
 8008eaa:	183b      	adds	r3, r7, r0
 8008eac:	881a      	ldrh	r2, [r3, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	0023      	movs	r3, r4
 8008eb2:	f000 ff7b 	bl	8009dac <USB_WritePMA>
            ep->xfer_buff += len;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	695a      	ldr	r2, [r3, #20]
 8008eba:	1d7b      	adds	r3, r7, #5
 8008ebc:	33ff      	adds	r3, #255	; 0xff
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	18d2      	adds	r2, r2, r3
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	6a1a      	ldr	r2, [r3, #32]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d908      	bls.n	8008ee4 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	6a1a      	ldr	r2, [r3, #32]
 8008ed6:	1d7b      	adds	r3, r7, #5
 8008ed8:	33ff      	adds	r3, #255	; 0xff
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	1ad2      	subs	r2, r2, r3
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	621a      	str	r2, [r3, #32]
 8008ee2:	e007      	b.n	8008ef4 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	1d7a      	adds	r2, r7, #5
 8008eea:	32ff      	adds	r2, #255	; 0xff
 8008eec:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	785b      	ldrb	r3, [r3, #1]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d166      	bne.n	8008fce <USB_EPStartXfer+0x60a>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2250      	movs	r2, #80	; 0x50
 8008f08:	5a9b      	ldrh	r3, [r3, r2]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	001a      	movs	r2, r3
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f10:	189b      	adds	r3, r3, r2
 8008f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	00da      	lsls	r2, r3, #3
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1c:	18d3      	adds	r3, r2, r3
 8008f1e:	4a69      	ldr	r2, [pc, #420]	; (80090c4 <USB_EPStartXfer+0x700>)
 8008f20:	4694      	mov	ip, r2
 8008f22:	4463      	add	r3, ip
 8008f24:	637b      	str	r3, [r7, #52]	; 0x34
 8008f26:	1d7b      	adds	r3, r7, #5
 8008f28:	33ff      	adds	r3, #255	; 0xff
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d110      	bne.n	8008f52 <USB_EPStartXfer+0x58e>
 8008f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	4a61      	ldr	r2, [pc, #388]	; (80090bc <USB_EPStartXfer+0x6f8>)
 8008f38:	4013      	ands	r3, r2
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3e:	801a      	strh	r2, [r3, #0]
 8008f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	4a5e      	ldr	r2, [pc, #376]	; (80090c0 <USB_EPStartXfer+0x6fc>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4e:	801a      	strh	r2, [r3, #0]
 8008f50:	e058      	b.n	8009004 <USB_EPStartXfer+0x640>
 8008f52:	1d7b      	adds	r3, r7, #5
 8008f54:	33ff      	adds	r3, #255	; 0xff
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b3e      	cmp	r3, #62	; 0x3e
 8008f5a:	d81a      	bhi.n	8008f92 <USB_EPStartXfer+0x5ce>
 8008f5c:	1d7b      	adds	r3, r7, #5
 8008f5e:	33ff      	adds	r3, #255	; 0xff
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	085b      	lsrs	r3, r3, #1
 8008f64:	21f4      	movs	r1, #244	; 0xf4
 8008f66:	187a      	adds	r2, r7, r1
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	1d7b      	adds	r3, r7, #5
 8008f6c:	33ff      	adds	r3, #255	; 0xff
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2201      	movs	r2, #1
 8008f72:	4013      	ands	r3, r2
 8008f74:	d004      	beq.n	8008f80 <USB_EPStartXfer+0x5bc>
 8008f76:	187b      	adds	r3, r7, r1
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	187a      	adds	r2, r7, r1
 8008f7e:	6013      	str	r3, [r2, #0]
 8008f80:	23f4      	movs	r3, #244	; 0xf4
 8008f82:	18fb      	adds	r3, r7, r3
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	029b      	lsls	r3, r3, #10
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8e:	801a      	strh	r2, [r3, #0]
 8008f90:	e038      	b.n	8009004 <USB_EPStartXfer+0x640>
 8008f92:	1d7b      	adds	r3, r7, #5
 8008f94:	33ff      	adds	r3, #255	; 0xff
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	095b      	lsrs	r3, r3, #5
 8008f9a:	21f4      	movs	r1, #244	; 0xf4
 8008f9c:	187a      	adds	r2, r7, r1
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	1d7b      	adds	r3, r7, #5
 8008fa2:	33ff      	adds	r3, #255	; 0xff
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	221f      	movs	r2, #31
 8008fa8:	4013      	ands	r3, r2
 8008faa:	d104      	bne.n	8008fb6 <USB_EPStartXfer+0x5f2>
 8008fac:	187b      	adds	r3, r7, r1
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	187a      	adds	r2, r7, r1
 8008fb4:	6013      	str	r3, [r2, #0]
 8008fb6:	23f4      	movs	r3, #244	; 0xf4
 8008fb8:	18fb      	adds	r3, r7, r3
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	029b      	lsls	r3, r3, #10
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	4a3f      	ldr	r2, [pc, #252]	; (80090c0 <USB_EPStartXfer+0x6fc>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fca:	801a      	strh	r2, [r3, #0]
 8008fcc:	e01a      	b.n	8009004 <USB_EPStartXfer+0x640>
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	785b      	ldrb	r3, [r3, #1]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d116      	bne.n	8009004 <USB_EPStartXfer+0x640>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2250      	movs	r2, #80	; 0x50
 8008fda:	5a9b      	ldrh	r3, [r3, r2]
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	001a      	movs	r2, r3
 8008fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fe2:	189b      	adds	r3, r3, r2
 8008fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	00da      	lsls	r2, r3, #3
 8008fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fee:	18d3      	adds	r3, r2, r3
 8008ff0:	4a34      	ldr	r2, [pc, #208]	; (80090c4 <USB_EPStartXfer+0x700>)
 8008ff2:	4694      	mov	ip, r2
 8008ff4:	4463      	add	r3, ip
 8008ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ff8:	1d7b      	adds	r3, r7, #5
 8008ffa:	33ff      	adds	r3, #255	; 0xff
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009002:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009004:	2076      	movs	r0, #118	; 0x76
 8009006:	183b      	adds	r3, r7, r0
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	8952      	ldrh	r2, [r2, #10]
 800900c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	6959      	ldr	r1, [r3, #20]
 8009012:	1d7b      	adds	r3, r7, #5
 8009014:	33ff      	adds	r3, #255	; 0xff
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	b29c      	uxth	r4, r3
 800901a:	183b      	adds	r3, r7, r0
 800901c:	881a      	ldrh	r2, [r3, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	0023      	movs	r3, r4
 8009022:	f000 fec3 	bl	8009dac <USB_WritePMA>
 8009026:	e1a2      	b.n	800936e <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	6a1b      	ldr	r3, [r3, #32]
 800902c:	1d7a      	adds	r2, r7, #5
 800902e:	32ff      	adds	r2, #255	; 0xff
 8009030:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	18d3      	adds	r3, r2, r3
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	b29a      	uxth	r2, r3
 8009040:	2062      	movs	r0, #98	; 0x62
 8009042:	183b      	adds	r3, r7, r0
 8009044:	4920      	ldr	r1, [pc, #128]	; (80090c8 <USB_EPStartXfer+0x704>)
 8009046:	400a      	ands	r2, r1
 8009048:	801a      	strh	r2, [r3, #0]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	18d3      	adds	r3, r2, r3
 8009054:	183a      	adds	r2, r7, r0
 8009056:	8812      	ldrh	r2, [r2, #0]
 8009058:	491c      	ldr	r1, [pc, #112]	; (80090cc <USB_EPStartXfer+0x708>)
 800905a:	430a      	orrs	r2, r1
 800905c:	b292      	uxth	r2, r2
 800905e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2250      	movs	r2, #80	; 0x50
 8009068:	5a9b      	ldrh	r3, [r3, r2]
 800906a:	b29b      	uxth	r3, r3
 800906c:	001a      	movs	r2, r3
 800906e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009070:	189b      	adds	r3, r3, r2
 8009072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	00da      	lsls	r2, r3, #3
 800907a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800907c:	18d3      	adds	r3, r2, r3
 800907e:	4a0e      	ldr	r2, [pc, #56]	; (80090b8 <USB_EPStartXfer+0x6f4>)
 8009080:	4694      	mov	ip, r2
 8009082:	4463      	add	r3, ip
 8009084:	65bb      	str	r3, [r7, #88]	; 0x58
 8009086:	1d7b      	adds	r3, r7, #5
 8009088:	33ff      	adds	r3, #255	; 0xff
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	b29a      	uxth	r2, r3
 800908e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009090:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009092:	2076      	movs	r0, #118	; 0x76
 8009094:	183b      	adds	r3, r7, r0
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	8912      	ldrh	r2, [r2, #8]
 800909a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	6959      	ldr	r1, [r3, #20]
 80090a0:	1d7b      	adds	r3, r7, #5
 80090a2:	33ff      	adds	r3, #255	; 0xff
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	b29c      	uxth	r4, r3
 80090a8:	183b      	adds	r3, r7, r0
 80090aa:	881a      	ldrh	r2, [r3, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	0023      	movs	r3, r4
 80090b0:	f000 fe7c 	bl	8009dac <USB_WritePMA>
 80090b4:	e15b      	b.n	800936e <USB_EPStartXfer+0x9aa>
 80090b6:	46c0      	nop			; (mov r8, r8)
 80090b8:	00000402 	.word	0x00000402
 80090bc:	ffff83ff 	.word	0xffff83ff
 80090c0:	ffff8000 	.word	0xffff8000
 80090c4:	00000406 	.word	0x00000406
 80090c8:	ffff8e8f 	.word	0xffff8e8f
 80090cc:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	6a1a      	ldr	r2, [r3, #32]
 80090d4:	1d7b      	adds	r3, r7, #5
 80090d6:	33ff      	adds	r3, #255	; 0xff
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	1ad2      	subs	r2, r2, r3
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	18d3      	adds	r3, r2, r3
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	001a      	movs	r2, r3
 80090f0:	2340      	movs	r3, #64	; 0x40
 80090f2:	4013      	ands	r3, r2
 80090f4:	d100      	bne.n	80090f8 <USB_EPStartXfer+0x734>
 80090f6:	e099      	b.n	800922c <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	673b      	str	r3, [r7, #112]	; 0x70
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d166      	bne.n	80091d2 <USB_EPStartXfer+0x80e>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	66bb      	str	r3, [r7, #104]	; 0x68
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2250      	movs	r2, #80	; 0x50
 800910c:	5a9b      	ldrh	r3, [r3, r2]
 800910e:	b29b      	uxth	r3, r3
 8009110:	001a      	movs	r2, r3
 8009112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009114:	189b      	adds	r3, r3, r2
 8009116:	66bb      	str	r3, [r7, #104]	; 0x68
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	00da      	lsls	r2, r3, #3
 800911e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009120:	18d3      	adds	r3, r2, r3
 8009122:	4ad0      	ldr	r2, [pc, #832]	; (8009464 <USB_EPStartXfer+0xaa0>)
 8009124:	4694      	mov	ip, r2
 8009126:	4463      	add	r3, ip
 8009128:	667b      	str	r3, [r7, #100]	; 0x64
 800912a:	1d7b      	adds	r3, r7, #5
 800912c:	33ff      	adds	r3, #255	; 0xff
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d110      	bne.n	8009156 <USB_EPStartXfer+0x792>
 8009134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	b29b      	uxth	r3, r3
 800913a:	4acb      	ldr	r2, [pc, #812]	; (8009468 <USB_EPStartXfer+0xaa4>)
 800913c:	4013      	ands	r3, r2
 800913e:	b29a      	uxth	r2, r3
 8009140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009142:	801a      	strh	r2, [r3, #0]
 8009144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	b29b      	uxth	r3, r3
 800914a:	4ac8      	ldr	r2, [pc, #800]	; (800946c <USB_EPStartXfer+0xaa8>)
 800914c:	4313      	orrs	r3, r2
 800914e:	b29a      	uxth	r2, r3
 8009150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009152:	801a      	strh	r2, [r3, #0]
 8009154:	e058      	b.n	8009208 <USB_EPStartXfer+0x844>
 8009156:	1d7b      	adds	r3, r7, #5
 8009158:	33ff      	adds	r3, #255	; 0xff
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b3e      	cmp	r3, #62	; 0x3e
 800915e:	d81a      	bhi.n	8009196 <USB_EPStartXfer+0x7d2>
 8009160:	1d7b      	adds	r3, r7, #5
 8009162:	33ff      	adds	r3, #255	; 0xff
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	085b      	lsrs	r3, r3, #1
 8009168:	21f0      	movs	r1, #240	; 0xf0
 800916a:	187a      	adds	r2, r7, r1
 800916c:	6013      	str	r3, [r2, #0]
 800916e:	1d7b      	adds	r3, r7, #5
 8009170:	33ff      	adds	r3, #255	; 0xff
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2201      	movs	r2, #1
 8009176:	4013      	ands	r3, r2
 8009178:	d004      	beq.n	8009184 <USB_EPStartXfer+0x7c0>
 800917a:	187b      	adds	r3, r7, r1
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3301      	adds	r3, #1
 8009180:	187a      	adds	r2, r7, r1
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	23f0      	movs	r3, #240	; 0xf0
 8009186:	18fb      	adds	r3, r7, r3
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	b29b      	uxth	r3, r3
 800918c:	029b      	lsls	r3, r3, #10
 800918e:	b29a      	uxth	r2, r3
 8009190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009192:	801a      	strh	r2, [r3, #0]
 8009194:	e038      	b.n	8009208 <USB_EPStartXfer+0x844>
 8009196:	1d7b      	adds	r3, r7, #5
 8009198:	33ff      	adds	r3, #255	; 0xff
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	095b      	lsrs	r3, r3, #5
 800919e:	21f0      	movs	r1, #240	; 0xf0
 80091a0:	187a      	adds	r2, r7, r1
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	1d7b      	adds	r3, r7, #5
 80091a6:	33ff      	adds	r3, #255	; 0xff
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	221f      	movs	r2, #31
 80091ac:	4013      	ands	r3, r2
 80091ae:	d104      	bne.n	80091ba <USB_EPStartXfer+0x7f6>
 80091b0:	187b      	adds	r3, r7, r1
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3b01      	subs	r3, #1
 80091b6:	187a      	adds	r2, r7, r1
 80091b8:	6013      	str	r3, [r2, #0]
 80091ba:	23f0      	movs	r3, #240	; 0xf0
 80091bc:	18fb      	adds	r3, r7, r3
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	029b      	lsls	r3, r3, #10
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	4aa9      	ldr	r2, [pc, #676]	; (800946c <USB_EPStartXfer+0xaa8>)
 80091c8:	4313      	orrs	r3, r2
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091ce:	801a      	strh	r2, [r3, #0]
 80091d0:	e01a      	b.n	8009208 <USB_EPStartXfer+0x844>
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	785b      	ldrb	r3, [r3, #1]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d116      	bne.n	8009208 <USB_EPStartXfer+0x844>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2250      	movs	r2, #80	; 0x50
 80091de:	5a9b      	ldrh	r3, [r3, r2]
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	001a      	movs	r2, r3
 80091e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091e6:	189b      	adds	r3, r3, r2
 80091e8:	673b      	str	r3, [r7, #112]	; 0x70
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	00da      	lsls	r2, r3, #3
 80091f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091f2:	18d3      	adds	r3, r2, r3
 80091f4:	4a9b      	ldr	r2, [pc, #620]	; (8009464 <USB_EPStartXfer+0xaa0>)
 80091f6:	4694      	mov	ip, r2
 80091f8:	4463      	add	r3, ip
 80091fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091fc:	1d7b      	adds	r3, r7, #5
 80091fe:	33ff      	adds	r3, #255	; 0xff
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	b29a      	uxth	r2, r3
 8009204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009206:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009208:	2076      	movs	r0, #118	; 0x76
 800920a:	183b      	adds	r3, r7, r0
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	8952      	ldrh	r2, [r2, #10]
 8009210:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	6959      	ldr	r1, [r3, #20]
 8009216:	1d7b      	adds	r3, r7, #5
 8009218:	33ff      	adds	r3, #255	; 0xff
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	b29c      	uxth	r4, r3
 800921e:	183b      	adds	r3, r7, r0
 8009220:	881a      	ldrh	r2, [r3, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	0023      	movs	r3, r4
 8009226:	f000 fdc1 	bl	8009dac <USB_WritePMA>
 800922a:	e0a0      	b.n	800936e <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	785b      	ldrb	r3, [r3, #1]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d166      	bne.n	8009302 <USB_EPStartXfer+0x93e>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2250      	movs	r2, #80	; 0x50
 800923c:	5a9b      	ldrh	r3, [r3, r2]
 800923e:	b29b      	uxth	r3, r3
 8009240:	001a      	movs	r2, r3
 8009242:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009244:	189b      	adds	r3, r3, r2
 8009246:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	00da      	lsls	r2, r3, #3
 800924e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009250:	18d3      	adds	r3, r2, r3
 8009252:	4a87      	ldr	r2, [pc, #540]	; (8009470 <USB_EPStartXfer+0xaac>)
 8009254:	4694      	mov	ip, r2
 8009256:	4463      	add	r3, ip
 8009258:	67bb      	str	r3, [r7, #120]	; 0x78
 800925a:	1d7b      	adds	r3, r7, #5
 800925c:	33ff      	adds	r3, #255	; 0xff
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d110      	bne.n	8009286 <USB_EPStartXfer+0x8c2>
 8009264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	b29b      	uxth	r3, r3
 800926a:	4a7f      	ldr	r2, [pc, #508]	; (8009468 <USB_EPStartXfer+0xaa4>)
 800926c:	4013      	ands	r3, r2
 800926e:	b29a      	uxth	r2, r3
 8009270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009272:	801a      	strh	r2, [r3, #0]
 8009274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b29b      	uxth	r3, r3
 800927a:	4a7c      	ldr	r2, [pc, #496]	; (800946c <USB_EPStartXfer+0xaa8>)
 800927c:	4313      	orrs	r3, r2
 800927e:	b29a      	uxth	r2, r3
 8009280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009282:	801a      	strh	r2, [r3, #0]
 8009284:	e062      	b.n	800934c <USB_EPStartXfer+0x988>
 8009286:	1d7b      	adds	r3, r7, #5
 8009288:	33ff      	adds	r3, #255	; 0xff
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b3e      	cmp	r3, #62	; 0x3e
 800928e:	d81a      	bhi.n	80092c6 <USB_EPStartXfer+0x902>
 8009290:	1d7b      	adds	r3, r7, #5
 8009292:	33ff      	adds	r3, #255	; 0xff
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	085b      	lsrs	r3, r3, #1
 8009298:	21ec      	movs	r1, #236	; 0xec
 800929a:	187a      	adds	r2, r7, r1
 800929c:	6013      	str	r3, [r2, #0]
 800929e:	1d7b      	adds	r3, r7, #5
 80092a0:	33ff      	adds	r3, #255	; 0xff
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2201      	movs	r2, #1
 80092a6:	4013      	ands	r3, r2
 80092a8:	d004      	beq.n	80092b4 <USB_EPStartXfer+0x8f0>
 80092aa:	187b      	adds	r3, r7, r1
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3301      	adds	r3, #1
 80092b0:	187a      	adds	r2, r7, r1
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	23ec      	movs	r3, #236	; 0xec
 80092b6:	18fb      	adds	r3, r7, r3
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	029b      	lsls	r3, r3, #10
 80092be:	b29a      	uxth	r2, r3
 80092c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092c2:	801a      	strh	r2, [r3, #0]
 80092c4:	e042      	b.n	800934c <USB_EPStartXfer+0x988>
 80092c6:	1d7b      	adds	r3, r7, #5
 80092c8:	33ff      	adds	r3, #255	; 0xff
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	095b      	lsrs	r3, r3, #5
 80092ce:	21ec      	movs	r1, #236	; 0xec
 80092d0:	187a      	adds	r2, r7, r1
 80092d2:	6013      	str	r3, [r2, #0]
 80092d4:	1d7b      	adds	r3, r7, #5
 80092d6:	33ff      	adds	r3, #255	; 0xff
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	221f      	movs	r2, #31
 80092dc:	4013      	ands	r3, r2
 80092de:	d104      	bne.n	80092ea <USB_EPStartXfer+0x926>
 80092e0:	187b      	adds	r3, r7, r1
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3b01      	subs	r3, #1
 80092e6:	187a      	adds	r2, r7, r1
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	23ec      	movs	r3, #236	; 0xec
 80092ec:	18fb      	adds	r3, r7, r3
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	029b      	lsls	r3, r3, #10
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	4a5d      	ldr	r2, [pc, #372]	; (800946c <USB_EPStartXfer+0xaa8>)
 80092f8:	4313      	orrs	r3, r2
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092fe:	801a      	strh	r2, [r3, #0]
 8009300:	e024      	b.n	800934c <USB_EPStartXfer+0x988>
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	785b      	ldrb	r3, [r3, #1]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d120      	bne.n	800934c <USB_EPStartXfer+0x988>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2184      	movs	r1, #132	; 0x84
 800930e:	187a      	adds	r2, r7, r1
 8009310:	6013      	str	r3, [r2, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2250      	movs	r2, #80	; 0x50
 8009316:	5a9b      	ldrh	r3, [r3, r2]
 8009318:	b29b      	uxth	r3, r3
 800931a:	001a      	movs	r2, r3
 800931c:	187b      	adds	r3, r7, r1
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	189b      	adds	r3, r3, r2
 8009322:	187a      	adds	r2, r7, r1
 8009324:	6013      	str	r3, [r2, #0]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	00da      	lsls	r2, r3, #3
 800932c:	187b      	adds	r3, r7, r1
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	18d3      	adds	r3, r2, r3
 8009332:	4a4f      	ldr	r2, [pc, #316]	; (8009470 <USB_EPStartXfer+0xaac>)
 8009334:	4694      	mov	ip, r2
 8009336:	4463      	add	r3, ip
 8009338:	2180      	movs	r1, #128	; 0x80
 800933a:	187a      	adds	r2, r7, r1
 800933c:	6013      	str	r3, [r2, #0]
 800933e:	1d7b      	adds	r3, r7, #5
 8009340:	33ff      	adds	r3, #255	; 0xff
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	b29a      	uxth	r2, r3
 8009346:	187b      	adds	r3, r7, r1
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800934c:	2076      	movs	r0, #118	; 0x76
 800934e:	183b      	adds	r3, r7, r0
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	8912      	ldrh	r2, [r2, #8]
 8009354:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	6959      	ldr	r1, [r3, #20]
 800935a:	1d7b      	adds	r3, r7, #5
 800935c:	33ff      	adds	r3, #255	; 0xff
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	b29c      	uxth	r4, r3
 8009362:	183b      	adds	r3, r7, r0
 8009364:	881a      	ldrh	r2, [r3, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	0023      	movs	r3, r4
 800936a:	f000 fd1f 	bl	8009dac <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	18d3      	adds	r3, r2, r3
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	b29a      	uxth	r2, r3
 800937c:	200a      	movs	r0, #10
 800937e:	183b      	adds	r3, r7, r0
 8009380:	493c      	ldr	r1, [pc, #240]	; (8009474 <USB_EPStartXfer+0xab0>)
 8009382:	400a      	ands	r2, r1
 8009384:	801a      	strh	r2, [r3, #0]
 8009386:	183b      	adds	r3, r7, r0
 8009388:	183a      	adds	r2, r7, r0
 800938a:	8812      	ldrh	r2, [r2, #0]
 800938c:	2110      	movs	r1, #16
 800938e:	404a      	eors	r2, r1
 8009390:	801a      	strh	r2, [r3, #0]
 8009392:	183b      	adds	r3, r7, r0
 8009394:	183a      	adds	r2, r7, r0
 8009396:	8812      	ldrh	r2, [r2, #0]
 8009398:	2120      	movs	r1, #32
 800939a:	404a      	eors	r2, r1
 800939c:	801a      	strh	r2, [r3, #0]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	18d3      	adds	r3, r2, r3
 80093a8:	183a      	adds	r2, r7, r0
 80093aa:	8812      	ldrh	r2, [r2, #0]
 80093ac:	4932      	ldr	r1, [pc, #200]	; (8009478 <USB_EPStartXfer+0xab4>)
 80093ae:	430a      	orrs	r2, r1
 80093b0:	b292      	uxth	r2, r2
 80093b2:	801a      	strh	r2, [r3, #0]
 80093b4:	f000 fbaf 	bl	8009b16 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	7b1b      	ldrb	r3, [r3, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d000      	beq.n	80093c2 <USB_EPStartXfer+0x9fe>
 80093c0:	e09e      	b.n	8009500 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	699a      	ldr	r2, [r3, #24]
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d90d      	bls.n	80093ea <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	1d7a      	adds	r2, r7, #5
 80093d4:	32ff      	adds	r2, #255	; 0xff
 80093d6:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	699a      	ldr	r2, [r3, #24]
 80093dc:	1d7b      	adds	r3, r7, #5
 80093de:	33ff      	adds	r3, #255	; 0xff
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	1ad2      	subs	r2, r2, r3
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	619a      	str	r2, [r3, #24]
 80093e8:	e007      	b.n	80093fa <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	1d7a      	adds	r2, r7, #5
 80093f0:	32ff      	adds	r2, #255	; 0xff
 80093f2:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	2200      	movs	r2, #0
 80093f8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2190      	movs	r1, #144	; 0x90
 80093fe:	187a      	adds	r2, r7, r1
 8009400:	6013      	str	r3, [r2, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2250      	movs	r2, #80	; 0x50
 8009406:	5a9b      	ldrh	r3, [r3, r2]
 8009408:	b29b      	uxth	r3, r3
 800940a:	001a      	movs	r2, r3
 800940c:	187b      	adds	r3, r7, r1
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	189b      	adds	r3, r3, r2
 8009412:	187a      	adds	r2, r7, r1
 8009414:	6013      	str	r3, [r2, #0]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	00da      	lsls	r2, r3, #3
 800941c:	187b      	adds	r3, r7, r1
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	18d3      	adds	r3, r2, r3
 8009422:	4a10      	ldr	r2, [pc, #64]	; (8009464 <USB_EPStartXfer+0xaa0>)
 8009424:	4694      	mov	ip, r2
 8009426:	4463      	add	r3, ip
 8009428:	218c      	movs	r1, #140	; 0x8c
 800942a:	187a      	adds	r2, r7, r1
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	1d7b      	adds	r3, r7, #5
 8009430:	33ff      	adds	r3, #255	; 0xff
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d121      	bne.n	800947c <USB_EPStartXfer+0xab8>
 8009438:	187b      	adds	r3, r7, r1
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	b29b      	uxth	r3, r3
 8009440:	4a09      	ldr	r2, [pc, #36]	; (8009468 <USB_EPStartXfer+0xaa4>)
 8009442:	4013      	ands	r3, r2
 8009444:	b29a      	uxth	r2, r3
 8009446:	187b      	adds	r3, r7, r1
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	801a      	strh	r2, [r3, #0]
 800944c:	187b      	adds	r3, r7, r1
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	b29b      	uxth	r3, r3
 8009454:	4a05      	ldr	r2, [pc, #20]	; (800946c <USB_EPStartXfer+0xaa8>)
 8009456:	4313      	orrs	r3, r2
 8009458:	b29a      	uxth	r2, r3
 800945a:	187b      	adds	r3, r7, r1
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	801a      	strh	r2, [r3, #0]
 8009460:	e334      	b.n	8009acc <USB_EPStartXfer+0x1108>
 8009462:	46c0      	nop			; (mov r8, r8)
 8009464:	00000406 	.word	0x00000406
 8009468:	ffff83ff 	.word	0xffff83ff
 800946c:	ffff8000 	.word	0xffff8000
 8009470:	00000402 	.word	0x00000402
 8009474:	ffff8fbf 	.word	0xffff8fbf
 8009478:	ffff8080 	.word	0xffff8080
 800947c:	1d7b      	adds	r3, r7, #5
 800947e:	33ff      	adds	r3, #255	; 0xff
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b3e      	cmp	r3, #62	; 0x3e
 8009484:	d81c      	bhi.n	80094c0 <USB_EPStartXfer+0xafc>
 8009486:	1d7b      	adds	r3, r7, #5
 8009488:	33ff      	adds	r3, #255	; 0xff
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	085b      	lsrs	r3, r3, #1
 800948e:	21e8      	movs	r1, #232	; 0xe8
 8009490:	187a      	adds	r2, r7, r1
 8009492:	6013      	str	r3, [r2, #0]
 8009494:	1d7b      	adds	r3, r7, #5
 8009496:	33ff      	adds	r3, #255	; 0xff
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2201      	movs	r2, #1
 800949c:	4013      	ands	r3, r2
 800949e:	d004      	beq.n	80094aa <USB_EPStartXfer+0xae6>
 80094a0:	187b      	adds	r3, r7, r1
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3301      	adds	r3, #1
 80094a6:	187a      	adds	r2, r7, r1
 80094a8:	6013      	str	r3, [r2, #0]
 80094aa:	23e8      	movs	r3, #232	; 0xe8
 80094ac:	18fb      	adds	r3, r7, r3
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	029b      	lsls	r3, r3, #10
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	238c      	movs	r3, #140	; 0x8c
 80094b8:	18fb      	adds	r3, r7, r3
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	801a      	strh	r2, [r3, #0]
 80094be:	e305      	b.n	8009acc <USB_EPStartXfer+0x1108>
 80094c0:	1d7b      	adds	r3, r7, #5
 80094c2:	33ff      	adds	r3, #255	; 0xff
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	095b      	lsrs	r3, r3, #5
 80094c8:	21e8      	movs	r1, #232	; 0xe8
 80094ca:	187a      	adds	r2, r7, r1
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	1d7b      	adds	r3, r7, #5
 80094d0:	33ff      	adds	r3, #255	; 0xff
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	221f      	movs	r2, #31
 80094d6:	4013      	ands	r3, r2
 80094d8:	d104      	bne.n	80094e4 <USB_EPStartXfer+0xb20>
 80094da:	187b      	adds	r3, r7, r1
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3b01      	subs	r3, #1
 80094e0:	187a      	adds	r2, r7, r1
 80094e2:	6013      	str	r3, [r2, #0]
 80094e4:	23e8      	movs	r3, #232	; 0xe8
 80094e6:	18fb      	adds	r3, r7, r3
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	029b      	lsls	r3, r3, #10
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	4aca      	ldr	r2, [pc, #808]	; (800981c <USB_EPStartXfer+0xe58>)
 80094f2:	4313      	orrs	r3, r2
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	238c      	movs	r3, #140	; 0x8c
 80094f8:	18fb      	adds	r3, r7, r3
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	801a      	strh	r2, [r3, #0]
 80094fe:	e2e5      	b.n	8009acc <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	78db      	ldrb	r3, [r3, #3]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d000      	beq.n	800950a <USB_EPStartXfer+0xb46>
 8009508:	e16f      	b.n	80097ea <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	785b      	ldrb	r3, [r3, #1]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d16f      	bne.n	80095f2 <USB_EPStartXfer+0xc2e>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	21ac      	movs	r1, #172	; 0xac
 8009516:	187a      	adds	r2, r7, r1
 8009518:	6013      	str	r3, [r2, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2250      	movs	r2, #80	; 0x50
 800951e:	5a9b      	ldrh	r3, [r3, r2]
 8009520:	b29b      	uxth	r3, r3
 8009522:	001a      	movs	r2, r3
 8009524:	187b      	adds	r3, r7, r1
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	189b      	adds	r3, r3, r2
 800952a:	187a      	adds	r2, r7, r1
 800952c:	6013      	str	r3, [r2, #0]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	00da      	lsls	r2, r3, #3
 8009534:	187b      	adds	r3, r7, r1
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	18d3      	adds	r3, r2, r3
 800953a:	4ab9      	ldr	r2, [pc, #740]	; (8009820 <USB_EPStartXfer+0xe5c>)
 800953c:	4694      	mov	ip, r2
 800953e:	4463      	add	r3, ip
 8009540:	21a8      	movs	r1, #168	; 0xa8
 8009542:	187a      	adds	r2, r7, r1
 8009544:	6013      	str	r3, [r2, #0]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d114      	bne.n	8009578 <USB_EPStartXfer+0xbb4>
 800954e:	187b      	adds	r3, r7, r1
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	b29b      	uxth	r3, r3
 8009556:	4ab3      	ldr	r2, [pc, #716]	; (8009824 <USB_EPStartXfer+0xe60>)
 8009558:	4013      	ands	r3, r2
 800955a:	b29a      	uxth	r2, r3
 800955c:	187b      	adds	r3, r7, r1
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	801a      	strh	r2, [r3, #0]
 8009562:	187b      	adds	r3, r7, r1
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	881b      	ldrh	r3, [r3, #0]
 8009568:	b29b      	uxth	r3, r3
 800956a:	4aac      	ldr	r2, [pc, #688]	; (800981c <USB_EPStartXfer+0xe58>)
 800956c:	4313      	orrs	r3, r2
 800956e:	b29a      	uxth	r2, r3
 8009570:	187b      	adds	r3, r7, r1
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	801a      	strh	r2, [r3, #0]
 8009576:	e060      	b.n	800963a <USB_EPStartXfer+0xc76>
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	2b3e      	cmp	r3, #62	; 0x3e
 800957e:	d81a      	bhi.n	80095b6 <USB_EPStartXfer+0xbf2>
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	085b      	lsrs	r3, r3, #1
 8009586:	21e4      	movs	r1, #228	; 0xe4
 8009588:	187a      	adds	r2, r7, r1
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	2201      	movs	r2, #1
 8009592:	4013      	ands	r3, r2
 8009594:	d004      	beq.n	80095a0 <USB_EPStartXfer+0xbdc>
 8009596:	187b      	adds	r3, r7, r1
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3301      	adds	r3, #1
 800959c:	187a      	adds	r2, r7, r1
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	23e4      	movs	r3, #228	; 0xe4
 80095a2:	18fb      	adds	r3, r7, r3
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	029b      	lsls	r3, r3, #10
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	23a8      	movs	r3, #168	; 0xa8
 80095ae:	18fb      	adds	r3, r7, r3
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	801a      	strh	r2, [r3, #0]
 80095b4:	e041      	b.n	800963a <USB_EPStartXfer+0xc76>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	095b      	lsrs	r3, r3, #5
 80095bc:	21e4      	movs	r1, #228	; 0xe4
 80095be:	187a      	adds	r2, r7, r1
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	221f      	movs	r2, #31
 80095c8:	4013      	ands	r3, r2
 80095ca:	d104      	bne.n	80095d6 <USB_EPStartXfer+0xc12>
 80095cc:	187b      	adds	r3, r7, r1
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	187a      	adds	r2, r7, r1
 80095d4:	6013      	str	r3, [r2, #0]
 80095d6:	23e4      	movs	r3, #228	; 0xe4
 80095d8:	18fb      	adds	r3, r7, r3
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	b29b      	uxth	r3, r3
 80095de:	029b      	lsls	r3, r3, #10
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	4a8e      	ldr	r2, [pc, #568]	; (800981c <USB_EPStartXfer+0xe58>)
 80095e4:	4313      	orrs	r3, r2
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	23a8      	movs	r3, #168	; 0xa8
 80095ea:	18fb      	adds	r3, r7, r3
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	801a      	strh	r2, [r3, #0]
 80095f0:	e023      	b.n	800963a <USB_EPStartXfer+0xc76>
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	785b      	ldrb	r3, [r3, #1]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d11f      	bne.n	800963a <USB_EPStartXfer+0xc76>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	21b4      	movs	r1, #180	; 0xb4
 80095fe:	187a      	adds	r2, r7, r1
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2250      	movs	r2, #80	; 0x50
 8009606:	5a9b      	ldrh	r3, [r3, r2]
 8009608:	b29b      	uxth	r3, r3
 800960a:	001a      	movs	r2, r3
 800960c:	187b      	adds	r3, r7, r1
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	189b      	adds	r3, r3, r2
 8009612:	187a      	adds	r2, r7, r1
 8009614:	6013      	str	r3, [r2, #0]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	00da      	lsls	r2, r3, #3
 800961c:	187b      	adds	r3, r7, r1
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	18d3      	adds	r3, r2, r3
 8009622:	4a7f      	ldr	r2, [pc, #508]	; (8009820 <USB_EPStartXfer+0xe5c>)
 8009624:	4694      	mov	ip, r2
 8009626:	4463      	add	r3, ip
 8009628:	21b0      	movs	r1, #176	; 0xb0
 800962a:	187a      	adds	r2, r7, r1
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	b29a      	uxth	r2, r3
 8009634:	187b      	adds	r3, r7, r1
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	801a      	strh	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	22a4      	movs	r2, #164	; 0xa4
 800963e:	18ba      	adds	r2, r7, r2
 8009640:	6013      	str	r3, [r2, #0]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	785b      	ldrb	r3, [r3, #1]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d16f      	bne.n	800972a <USB_EPStartXfer+0xd66>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	219c      	movs	r1, #156	; 0x9c
 800964e:	187a      	adds	r2, r7, r1
 8009650:	6013      	str	r3, [r2, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2250      	movs	r2, #80	; 0x50
 8009656:	5a9b      	ldrh	r3, [r3, r2]
 8009658:	b29b      	uxth	r3, r3
 800965a:	001a      	movs	r2, r3
 800965c:	187b      	adds	r3, r7, r1
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	189b      	adds	r3, r3, r2
 8009662:	187a      	adds	r2, r7, r1
 8009664:	6013      	str	r3, [r2, #0]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	00da      	lsls	r2, r3, #3
 800966c:	187b      	adds	r3, r7, r1
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	18d3      	adds	r3, r2, r3
 8009672:	4a6d      	ldr	r2, [pc, #436]	; (8009828 <USB_EPStartXfer+0xe64>)
 8009674:	4694      	mov	ip, r2
 8009676:	4463      	add	r3, ip
 8009678:	2198      	movs	r1, #152	; 0x98
 800967a:	187a      	adds	r2, r7, r1
 800967c:	6013      	str	r3, [r2, #0]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d114      	bne.n	80096b0 <USB_EPStartXfer+0xcec>
 8009686:	187b      	adds	r3, r7, r1
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	881b      	ldrh	r3, [r3, #0]
 800968c:	b29b      	uxth	r3, r3
 800968e:	4a65      	ldr	r2, [pc, #404]	; (8009824 <USB_EPStartXfer+0xe60>)
 8009690:	4013      	ands	r3, r2
 8009692:	b29a      	uxth	r2, r3
 8009694:	187b      	adds	r3, r7, r1
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	801a      	strh	r2, [r3, #0]
 800969a:	187b      	adds	r3, r7, r1
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	881b      	ldrh	r3, [r3, #0]
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	4a5e      	ldr	r2, [pc, #376]	; (800981c <USB_EPStartXfer+0xe58>)
 80096a4:	4313      	orrs	r3, r2
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	187b      	adds	r3, r7, r1
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	801a      	strh	r2, [r3, #0]
 80096ae:	e05d      	b.n	800976c <USB_EPStartXfer+0xda8>
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	2b3e      	cmp	r3, #62	; 0x3e
 80096b6:	d81a      	bhi.n	80096ee <USB_EPStartXfer+0xd2a>
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	085b      	lsrs	r3, r3, #1
 80096be:	21e0      	movs	r1, #224	; 0xe0
 80096c0:	187a      	adds	r2, r7, r1
 80096c2:	6013      	str	r3, [r2, #0]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	2201      	movs	r2, #1
 80096ca:	4013      	ands	r3, r2
 80096cc:	d004      	beq.n	80096d8 <USB_EPStartXfer+0xd14>
 80096ce:	187b      	adds	r3, r7, r1
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3301      	adds	r3, #1
 80096d4:	187a      	adds	r2, r7, r1
 80096d6:	6013      	str	r3, [r2, #0]
 80096d8:	23e0      	movs	r3, #224	; 0xe0
 80096da:	18fb      	adds	r3, r7, r3
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	029b      	lsls	r3, r3, #10
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	2398      	movs	r3, #152	; 0x98
 80096e6:	18fb      	adds	r3, r7, r3
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	801a      	strh	r2, [r3, #0]
 80096ec:	e03e      	b.n	800976c <USB_EPStartXfer+0xda8>
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	095b      	lsrs	r3, r3, #5
 80096f4:	21e0      	movs	r1, #224	; 0xe0
 80096f6:	187a      	adds	r2, r7, r1
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	691b      	ldr	r3, [r3, #16]
 80096fe:	221f      	movs	r2, #31
 8009700:	4013      	ands	r3, r2
 8009702:	d104      	bne.n	800970e <USB_EPStartXfer+0xd4a>
 8009704:	187b      	adds	r3, r7, r1
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	3b01      	subs	r3, #1
 800970a:	187a      	adds	r2, r7, r1
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	23e0      	movs	r3, #224	; 0xe0
 8009710:	18fb      	adds	r3, r7, r3
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	b29b      	uxth	r3, r3
 8009716:	029b      	lsls	r3, r3, #10
 8009718:	b29b      	uxth	r3, r3
 800971a:	4a40      	ldr	r2, [pc, #256]	; (800981c <USB_EPStartXfer+0xe58>)
 800971c:	4313      	orrs	r3, r2
 800971e:	b29a      	uxth	r2, r3
 8009720:	2398      	movs	r3, #152	; 0x98
 8009722:	18fb      	adds	r3, r7, r3
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	801a      	strh	r2, [r3, #0]
 8009728:	e020      	b.n	800976c <USB_EPStartXfer+0xda8>
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	785b      	ldrb	r3, [r3, #1]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d11c      	bne.n	800976c <USB_EPStartXfer+0xda8>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2250      	movs	r2, #80	; 0x50
 8009736:	5a9b      	ldrh	r3, [r3, r2]
 8009738:	b29b      	uxth	r3, r3
 800973a:	001a      	movs	r2, r3
 800973c:	21a4      	movs	r1, #164	; 0xa4
 800973e:	187b      	adds	r3, r7, r1
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	189b      	adds	r3, r3, r2
 8009744:	187a      	adds	r2, r7, r1
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	00da      	lsls	r2, r3, #3
 800974e:	187b      	adds	r3, r7, r1
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	18d3      	adds	r3, r2, r3
 8009754:	4a34      	ldr	r2, [pc, #208]	; (8009828 <USB_EPStartXfer+0xe64>)
 8009756:	4694      	mov	ip, r2
 8009758:	4463      	add	r3, ip
 800975a:	21a0      	movs	r1, #160	; 0xa0
 800975c:	187a      	adds	r2, r7, r1
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	b29a      	uxth	r2, r3
 8009766:	187b      	adds	r3, r7, r1
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	69db      	ldr	r3, [r3, #28]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d100      	bne.n	8009776 <USB_EPStartXfer+0xdb2>
 8009774:	e1aa      	b.n	8009acc <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	18d2      	adds	r2, r2, r3
 8009780:	2196      	movs	r1, #150	; 0x96
 8009782:	187b      	adds	r3, r7, r1
 8009784:	8812      	ldrh	r2, [r2, #0]
 8009786:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009788:	187b      	adds	r3, r7, r1
 800978a:	881a      	ldrh	r2, [r3, #0]
 800978c:	2380      	movs	r3, #128	; 0x80
 800978e:	01db      	lsls	r3, r3, #7
 8009790:	4013      	ands	r3, r2
 8009792:	d004      	beq.n	800979e <USB_EPStartXfer+0xdda>
 8009794:	187b      	adds	r3, r7, r1
 8009796:	881b      	ldrh	r3, [r3, #0]
 8009798:	2240      	movs	r2, #64	; 0x40
 800979a:	4013      	ands	r3, r2
 800979c:	d10d      	bne.n	80097ba <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800979e:	2196      	movs	r1, #150	; 0x96
 80097a0:	187b      	adds	r3, r7, r1
 80097a2:	881a      	ldrh	r2, [r3, #0]
 80097a4:	2380      	movs	r3, #128	; 0x80
 80097a6:	01db      	lsls	r3, r3, #7
 80097a8:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80097aa:	d000      	beq.n	80097ae <USB_EPStartXfer+0xdea>
 80097ac:	e18e      	b.n	8009acc <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80097ae:	187b      	adds	r3, r7, r1
 80097b0:	881b      	ldrh	r3, [r3, #0]
 80097b2:	2240      	movs	r2, #64	; 0x40
 80097b4:	4013      	ands	r3, r2
 80097b6:	d000      	beq.n	80097ba <USB_EPStartXfer+0xdf6>
 80097b8:	e188      	b.n	8009acc <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	18d3      	adds	r3, r2, r3
 80097c4:	881b      	ldrh	r3, [r3, #0]
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	2094      	movs	r0, #148	; 0x94
 80097ca:	183b      	adds	r3, r7, r0
 80097cc:	4917      	ldr	r1, [pc, #92]	; (800982c <USB_EPStartXfer+0xe68>)
 80097ce:	400a      	ands	r2, r1
 80097d0:	801a      	strh	r2, [r3, #0]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	18d3      	adds	r3, r2, r3
 80097dc:	183a      	adds	r2, r7, r0
 80097de:	8812      	ldrh	r2, [r2, #0]
 80097e0:	4913      	ldr	r1, [pc, #76]	; (8009830 <USB_EPStartXfer+0xe6c>)
 80097e2:	430a      	orrs	r2, r1
 80097e4:	b292      	uxth	r2, r2
 80097e6:	801a      	strh	r2, [r3, #0]
 80097e8:	e170      	b.n	8009acc <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	78db      	ldrb	r3, [r3, #3]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d000      	beq.n	80097f4 <USB_EPStartXfer+0xe30>
 80097f2:	e169      	b.n	8009ac8 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	699a      	ldr	r2, [r3, #24]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d919      	bls.n	8009834 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	1d7a      	adds	r2, r7, #5
 8009806:	32ff      	adds	r2, #255	; 0xff
 8009808:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	699a      	ldr	r2, [r3, #24]
 800980e:	1d7b      	adds	r3, r7, #5
 8009810:	33ff      	adds	r3, #255	; 0xff
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	1ad2      	subs	r2, r2, r3
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	619a      	str	r2, [r3, #24]
 800981a:	e013      	b.n	8009844 <USB_EPStartXfer+0xe80>
 800981c:	ffff8000 	.word	0xffff8000
 8009820:	00000402 	.word	0x00000402
 8009824:	ffff83ff 	.word	0xffff83ff
 8009828:	00000406 	.word	0x00000406
 800982c:	ffff8f8f 	.word	0xffff8f8f
 8009830:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	1d7a      	adds	r2, r7, #5
 800983a:	32ff      	adds	r2, #255	; 0xff
 800983c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2200      	movs	r2, #0
 8009842:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	785b      	ldrb	r3, [r3, #1]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d000      	beq.n	800984e <USB_EPStartXfer+0xe8a>
 800984c:	e075      	b.n	800993a <USB_EPStartXfer+0xf76>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	21cc      	movs	r1, #204	; 0xcc
 8009852:	187a      	adds	r2, r7, r1
 8009854:	6013      	str	r3, [r2, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2250      	movs	r2, #80	; 0x50
 800985a:	5a9b      	ldrh	r3, [r3, r2]
 800985c:	b29b      	uxth	r3, r3
 800985e:	001a      	movs	r2, r3
 8009860:	187b      	adds	r3, r7, r1
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	189b      	adds	r3, r3, r2
 8009866:	187a      	adds	r2, r7, r1
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	00da      	lsls	r2, r3, #3
 8009870:	187b      	adds	r3, r7, r1
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	18d3      	adds	r3, r2, r3
 8009876:	4aaa      	ldr	r2, [pc, #680]	; (8009b20 <USB_EPStartXfer+0x115c>)
 8009878:	4694      	mov	ip, r2
 800987a:	4463      	add	r3, ip
 800987c:	21c8      	movs	r1, #200	; 0xc8
 800987e:	187a      	adds	r2, r7, r1
 8009880:	6013      	str	r3, [r2, #0]
 8009882:	1d7b      	adds	r3, r7, #5
 8009884:	33ff      	adds	r3, #255	; 0xff
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d114      	bne.n	80098b6 <USB_EPStartXfer+0xef2>
 800988c:	187b      	adds	r3, r7, r1
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	881b      	ldrh	r3, [r3, #0]
 8009892:	b29b      	uxth	r3, r3
 8009894:	4aa3      	ldr	r2, [pc, #652]	; (8009b24 <USB_EPStartXfer+0x1160>)
 8009896:	4013      	ands	r3, r2
 8009898:	b29a      	uxth	r2, r3
 800989a:	187b      	adds	r3, r7, r1
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	801a      	strh	r2, [r3, #0]
 80098a0:	187b      	adds	r3, r7, r1
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	881b      	ldrh	r3, [r3, #0]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	4a9f      	ldr	r2, [pc, #636]	; (8009b28 <USB_EPStartXfer+0x1164>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	187b      	adds	r3, r7, r1
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	801a      	strh	r2, [r3, #0]
 80098b4:	e066      	b.n	8009984 <USB_EPStartXfer+0xfc0>
 80098b6:	1d7b      	adds	r3, r7, #5
 80098b8:	33ff      	adds	r3, #255	; 0xff
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b3e      	cmp	r3, #62	; 0x3e
 80098be:	d81c      	bhi.n	80098fa <USB_EPStartXfer+0xf36>
 80098c0:	1d7b      	adds	r3, r7, #5
 80098c2:	33ff      	adds	r3, #255	; 0xff
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	085b      	lsrs	r3, r3, #1
 80098c8:	21dc      	movs	r1, #220	; 0xdc
 80098ca:	187a      	adds	r2, r7, r1
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	1d7b      	adds	r3, r7, #5
 80098d0:	33ff      	adds	r3, #255	; 0xff
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2201      	movs	r2, #1
 80098d6:	4013      	ands	r3, r2
 80098d8:	d004      	beq.n	80098e4 <USB_EPStartXfer+0xf20>
 80098da:	187b      	adds	r3, r7, r1
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3301      	adds	r3, #1
 80098e0:	187a      	adds	r2, r7, r1
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	23dc      	movs	r3, #220	; 0xdc
 80098e6:	18fb      	adds	r3, r7, r3
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	029b      	lsls	r3, r3, #10
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	23c8      	movs	r3, #200	; 0xc8
 80098f2:	18fb      	adds	r3, r7, r3
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	801a      	strh	r2, [r3, #0]
 80098f8:	e044      	b.n	8009984 <USB_EPStartXfer+0xfc0>
 80098fa:	1d7b      	adds	r3, r7, #5
 80098fc:	33ff      	adds	r3, #255	; 0xff
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	095b      	lsrs	r3, r3, #5
 8009902:	21dc      	movs	r1, #220	; 0xdc
 8009904:	187a      	adds	r2, r7, r1
 8009906:	6013      	str	r3, [r2, #0]
 8009908:	1d7b      	adds	r3, r7, #5
 800990a:	33ff      	adds	r3, #255	; 0xff
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	221f      	movs	r2, #31
 8009910:	4013      	ands	r3, r2
 8009912:	d104      	bne.n	800991e <USB_EPStartXfer+0xf5a>
 8009914:	187b      	adds	r3, r7, r1
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3b01      	subs	r3, #1
 800991a:	187a      	adds	r2, r7, r1
 800991c:	6013      	str	r3, [r2, #0]
 800991e:	23dc      	movs	r3, #220	; 0xdc
 8009920:	18fb      	adds	r3, r7, r3
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	b29b      	uxth	r3, r3
 8009926:	029b      	lsls	r3, r3, #10
 8009928:	b29b      	uxth	r3, r3
 800992a:	4a7f      	ldr	r2, [pc, #508]	; (8009b28 <USB_EPStartXfer+0x1164>)
 800992c:	4313      	orrs	r3, r2
 800992e:	b29a      	uxth	r2, r3
 8009930:	23c8      	movs	r3, #200	; 0xc8
 8009932:	18fb      	adds	r3, r7, r3
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	801a      	strh	r2, [r3, #0]
 8009938:	e024      	b.n	8009984 <USB_EPStartXfer+0xfc0>
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	785b      	ldrb	r3, [r3, #1]
 800993e:	2b01      	cmp	r3, #1
 8009940:	d120      	bne.n	8009984 <USB_EPStartXfer+0xfc0>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	21d4      	movs	r1, #212	; 0xd4
 8009946:	187a      	adds	r2, r7, r1
 8009948:	6013      	str	r3, [r2, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2250      	movs	r2, #80	; 0x50
 800994e:	5a9b      	ldrh	r3, [r3, r2]
 8009950:	b29b      	uxth	r3, r3
 8009952:	001a      	movs	r2, r3
 8009954:	187b      	adds	r3, r7, r1
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	189b      	adds	r3, r3, r2
 800995a:	187a      	adds	r2, r7, r1
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	00da      	lsls	r2, r3, #3
 8009964:	187b      	adds	r3, r7, r1
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	18d3      	adds	r3, r2, r3
 800996a:	4a6d      	ldr	r2, [pc, #436]	; (8009b20 <USB_EPStartXfer+0x115c>)
 800996c:	4694      	mov	ip, r2
 800996e:	4463      	add	r3, ip
 8009970:	21d0      	movs	r1, #208	; 0xd0
 8009972:	187a      	adds	r2, r7, r1
 8009974:	6013      	str	r3, [r2, #0]
 8009976:	1d7b      	adds	r3, r7, #5
 8009978:	33ff      	adds	r3, #255	; 0xff
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	b29a      	uxth	r2, r3
 800997e:	187b      	adds	r3, r7, r1
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	801a      	strh	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	22c4      	movs	r2, #196	; 0xc4
 8009988:	18ba      	adds	r2, r7, r2
 800998a:	6013      	str	r3, [r2, #0]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	785b      	ldrb	r3, [r3, #1]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d000      	beq.n	8009996 <USB_EPStartXfer+0xfd2>
 8009994:	e075      	b.n	8009a82 <USB_EPStartXfer+0x10be>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	21bc      	movs	r1, #188	; 0xbc
 800999a:	187a      	adds	r2, r7, r1
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2250      	movs	r2, #80	; 0x50
 80099a2:	5a9b      	ldrh	r3, [r3, r2]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	001a      	movs	r2, r3
 80099a8:	187b      	adds	r3, r7, r1
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	189b      	adds	r3, r3, r2
 80099ae:	187a      	adds	r2, r7, r1
 80099b0:	6013      	str	r3, [r2, #0]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	00da      	lsls	r2, r3, #3
 80099b8:	187b      	adds	r3, r7, r1
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	18d3      	adds	r3, r2, r3
 80099be:	4a5b      	ldr	r2, [pc, #364]	; (8009b2c <USB_EPStartXfer+0x1168>)
 80099c0:	4694      	mov	ip, r2
 80099c2:	4463      	add	r3, ip
 80099c4:	21b8      	movs	r1, #184	; 0xb8
 80099c6:	187a      	adds	r2, r7, r1
 80099c8:	6013      	str	r3, [r2, #0]
 80099ca:	1d7b      	adds	r3, r7, #5
 80099cc:	33ff      	adds	r3, #255	; 0xff
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d114      	bne.n	80099fe <USB_EPStartXfer+0x103a>
 80099d4:	187b      	adds	r3, r7, r1
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	881b      	ldrh	r3, [r3, #0]
 80099da:	b29b      	uxth	r3, r3
 80099dc:	4a51      	ldr	r2, [pc, #324]	; (8009b24 <USB_EPStartXfer+0x1160>)
 80099de:	4013      	ands	r3, r2
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	187b      	adds	r3, r7, r1
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	801a      	strh	r2, [r3, #0]
 80099e8:	187b      	adds	r3, r7, r1
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	881b      	ldrh	r3, [r3, #0]
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	4a4d      	ldr	r2, [pc, #308]	; (8009b28 <USB_EPStartXfer+0x1164>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	187b      	adds	r3, r7, r1
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	801a      	strh	r2, [r3, #0]
 80099fc:	e066      	b.n	8009acc <USB_EPStartXfer+0x1108>
 80099fe:	1d7b      	adds	r3, r7, #5
 8009a00:	33ff      	adds	r3, #255	; 0xff
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2b3e      	cmp	r3, #62	; 0x3e
 8009a06:	d81c      	bhi.n	8009a42 <USB_EPStartXfer+0x107e>
 8009a08:	1d7b      	adds	r3, r7, #5
 8009a0a:	33ff      	adds	r3, #255	; 0xff
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	085b      	lsrs	r3, r3, #1
 8009a10:	21d8      	movs	r1, #216	; 0xd8
 8009a12:	187a      	adds	r2, r7, r1
 8009a14:	6013      	str	r3, [r2, #0]
 8009a16:	1d7b      	adds	r3, r7, #5
 8009a18:	33ff      	adds	r3, #255	; 0xff
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	4013      	ands	r3, r2
 8009a20:	d004      	beq.n	8009a2c <USB_EPStartXfer+0x1068>
 8009a22:	187b      	adds	r3, r7, r1
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3301      	adds	r3, #1
 8009a28:	187a      	adds	r2, r7, r1
 8009a2a:	6013      	str	r3, [r2, #0]
 8009a2c:	23d8      	movs	r3, #216	; 0xd8
 8009a2e:	18fb      	adds	r3, r7, r3
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	029b      	lsls	r3, r3, #10
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	23b8      	movs	r3, #184	; 0xb8
 8009a3a:	18fb      	adds	r3, r7, r3
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	801a      	strh	r2, [r3, #0]
 8009a40:	e044      	b.n	8009acc <USB_EPStartXfer+0x1108>
 8009a42:	1d7b      	adds	r3, r7, #5
 8009a44:	33ff      	adds	r3, #255	; 0xff
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	095b      	lsrs	r3, r3, #5
 8009a4a:	21d8      	movs	r1, #216	; 0xd8
 8009a4c:	187a      	adds	r2, r7, r1
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	1d7b      	adds	r3, r7, #5
 8009a52:	33ff      	adds	r3, #255	; 0xff
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	221f      	movs	r2, #31
 8009a58:	4013      	ands	r3, r2
 8009a5a:	d104      	bne.n	8009a66 <USB_EPStartXfer+0x10a2>
 8009a5c:	187b      	adds	r3, r7, r1
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	187a      	adds	r2, r7, r1
 8009a64:	6013      	str	r3, [r2, #0]
 8009a66:	23d8      	movs	r3, #216	; 0xd8
 8009a68:	18fb      	adds	r3, r7, r3
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	029b      	lsls	r3, r3, #10
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	4a2d      	ldr	r2, [pc, #180]	; (8009b28 <USB_EPStartXfer+0x1164>)
 8009a74:	4313      	orrs	r3, r2
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	23b8      	movs	r3, #184	; 0xb8
 8009a7a:	18fb      	adds	r3, r7, r3
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	801a      	strh	r2, [r3, #0]
 8009a80:	e024      	b.n	8009acc <USB_EPStartXfer+0x1108>
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	785b      	ldrb	r3, [r3, #1]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d120      	bne.n	8009acc <USB_EPStartXfer+0x1108>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2250      	movs	r2, #80	; 0x50
 8009a8e:	5a9b      	ldrh	r3, [r3, r2]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	001a      	movs	r2, r3
 8009a94:	21c4      	movs	r1, #196	; 0xc4
 8009a96:	187b      	adds	r3, r7, r1
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	189b      	adds	r3, r3, r2
 8009a9c:	187a      	adds	r2, r7, r1
 8009a9e:	6013      	str	r3, [r2, #0]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	00da      	lsls	r2, r3, #3
 8009aa6:	187b      	adds	r3, r7, r1
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	18d3      	adds	r3, r2, r3
 8009aac:	4a1f      	ldr	r2, [pc, #124]	; (8009b2c <USB_EPStartXfer+0x1168>)
 8009aae:	4694      	mov	ip, r2
 8009ab0:	4463      	add	r3, ip
 8009ab2:	21c0      	movs	r1, #192	; 0xc0
 8009ab4:	187a      	adds	r2, r7, r1
 8009ab6:	6013      	str	r3, [r2, #0]
 8009ab8:	1d7b      	adds	r3, r7, #5
 8009aba:	33ff      	adds	r3, #255	; 0xff
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	187b      	adds	r3, r7, r1
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	801a      	strh	r2, [r3, #0]
 8009ac6:	e001      	b.n	8009acc <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e025      	b.n	8009b18 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	18d3      	adds	r3, r2, r3
 8009ad6:	881b      	ldrh	r3, [r3, #0]
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	208a      	movs	r0, #138	; 0x8a
 8009adc:	183b      	adds	r3, r7, r0
 8009ade:	4914      	ldr	r1, [pc, #80]	; (8009b30 <USB_EPStartXfer+0x116c>)
 8009ae0:	400a      	ands	r2, r1
 8009ae2:	801a      	strh	r2, [r3, #0]
 8009ae4:	183b      	adds	r3, r7, r0
 8009ae6:	183a      	adds	r2, r7, r0
 8009ae8:	8812      	ldrh	r2, [r2, #0]
 8009aea:	2180      	movs	r1, #128	; 0x80
 8009aec:	0149      	lsls	r1, r1, #5
 8009aee:	404a      	eors	r2, r1
 8009af0:	801a      	strh	r2, [r3, #0]
 8009af2:	183b      	adds	r3, r7, r0
 8009af4:	183a      	adds	r2, r7, r0
 8009af6:	8812      	ldrh	r2, [r2, #0]
 8009af8:	2180      	movs	r1, #128	; 0x80
 8009afa:	0189      	lsls	r1, r1, #6
 8009afc:	404a      	eors	r2, r1
 8009afe:	801a      	strh	r2, [r3, #0]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	18d3      	adds	r3, r2, r3
 8009b0a:	183a      	adds	r2, r7, r0
 8009b0c:	8812      	ldrh	r2, [r2, #0]
 8009b0e:	4909      	ldr	r1, [pc, #36]	; (8009b34 <USB_EPStartXfer+0x1170>)
 8009b10:	430a      	orrs	r2, r1
 8009b12:	b292      	uxth	r2, r2
 8009b14:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	0018      	movs	r0, r3
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	b043      	add	sp, #268	; 0x10c
 8009b1e:	bd90      	pop	{r4, r7, pc}
 8009b20:	00000402 	.word	0x00000402
 8009b24:	ffff83ff 	.word	0xffff83ff
 8009b28:	ffff8000 	.word	0xffff8000
 8009b2c:	00000406 	.word	0x00000406
 8009b30:	ffffbf8f 	.word	0xffffbf8f
 8009b34:	ffff8080 	.word	0xffff8080

08009b38 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	785b      	ldrb	r3, [r3, #1]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d01d      	beq.n	8009b86 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	18d3      	adds	r3, r2, r3
 8009b54:	881b      	ldrh	r3, [r3, #0]
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	200c      	movs	r0, #12
 8009b5a:	183b      	adds	r3, r7, r0
 8009b5c:	491b      	ldr	r1, [pc, #108]	; (8009bcc <USB_EPSetStall+0x94>)
 8009b5e:	400a      	ands	r2, r1
 8009b60:	801a      	strh	r2, [r3, #0]
 8009b62:	183b      	adds	r3, r7, r0
 8009b64:	183a      	adds	r2, r7, r0
 8009b66:	8812      	ldrh	r2, [r2, #0]
 8009b68:	2110      	movs	r1, #16
 8009b6a:	404a      	eors	r2, r1
 8009b6c:	801a      	strh	r2, [r3, #0]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	18d3      	adds	r3, r2, r3
 8009b78:	183a      	adds	r2, r7, r0
 8009b7a:	8812      	ldrh	r2, [r2, #0]
 8009b7c:	4914      	ldr	r1, [pc, #80]	; (8009bd0 <USB_EPSetStall+0x98>)
 8009b7e:	430a      	orrs	r2, r1
 8009b80:	b292      	uxth	r2, r2
 8009b82:	801a      	strh	r2, [r3, #0]
 8009b84:	e01d      	b.n	8009bc2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	18d3      	adds	r3, r2, r3
 8009b90:	881b      	ldrh	r3, [r3, #0]
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	200e      	movs	r0, #14
 8009b96:	183b      	adds	r3, r7, r0
 8009b98:	490e      	ldr	r1, [pc, #56]	; (8009bd4 <USB_EPSetStall+0x9c>)
 8009b9a:	400a      	ands	r2, r1
 8009b9c:	801a      	strh	r2, [r3, #0]
 8009b9e:	183b      	adds	r3, r7, r0
 8009ba0:	183a      	adds	r2, r7, r0
 8009ba2:	8812      	ldrh	r2, [r2, #0]
 8009ba4:	2180      	movs	r1, #128	; 0x80
 8009ba6:	0149      	lsls	r1, r1, #5
 8009ba8:	404a      	eors	r2, r1
 8009baa:	801a      	strh	r2, [r3, #0]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	18d3      	adds	r3, r2, r3
 8009bb6:	183a      	adds	r2, r7, r0
 8009bb8:	8812      	ldrh	r2, [r2, #0]
 8009bba:	4905      	ldr	r1, [pc, #20]	; (8009bd0 <USB_EPSetStall+0x98>)
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	b292      	uxth	r2, r2
 8009bc0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	0018      	movs	r0, r3
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	b004      	add	sp, #16
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	ffff8fbf 	.word	0xffff8fbf
 8009bd0:	ffff8080 	.word	0xffff8080
 8009bd4:	ffffbf8f 	.word	0xffffbf8f

08009bd8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	7b1b      	ldrb	r3, [r3, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d000      	beq.n	8009bec <USB_EPClearStall+0x14>
 8009bea:	e095      	b.n	8009d18 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	785b      	ldrb	r3, [r3, #1]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d046      	beq.n	8009c82 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	18d2      	adds	r2, r2, r3
 8009bfe:	2110      	movs	r1, #16
 8009c00:	187b      	adds	r3, r7, r1
 8009c02:	8812      	ldrh	r2, [r2, #0]
 8009c04:	801a      	strh	r2, [r3, #0]
 8009c06:	187b      	adds	r3, r7, r1
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	2240      	movs	r2, #64	; 0x40
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	d016      	beq.n	8009c3e <USB_EPClearStall+0x66>
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	18d3      	adds	r3, r2, r3
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	200e      	movs	r0, #14
 8009c20:	183b      	adds	r3, r7, r0
 8009c22:	4940      	ldr	r1, [pc, #256]	; (8009d24 <USB_EPClearStall+0x14c>)
 8009c24:	400a      	ands	r2, r1
 8009c26:	801a      	strh	r2, [r3, #0]
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	18d3      	adds	r3, r2, r3
 8009c32:	183a      	adds	r2, r7, r0
 8009c34:	8812      	ldrh	r2, [r2, #0]
 8009c36:	493c      	ldr	r1, [pc, #240]	; (8009d28 <USB_EPClearStall+0x150>)
 8009c38:	430a      	orrs	r2, r1
 8009c3a:	b292      	uxth	r2, r2
 8009c3c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	78db      	ldrb	r3, [r3, #3]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d068      	beq.n	8009d18 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	18d3      	adds	r3, r2, r3
 8009c50:	881b      	ldrh	r3, [r3, #0]
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	200c      	movs	r0, #12
 8009c56:	183b      	adds	r3, r7, r0
 8009c58:	4934      	ldr	r1, [pc, #208]	; (8009d2c <USB_EPClearStall+0x154>)
 8009c5a:	400a      	ands	r2, r1
 8009c5c:	801a      	strh	r2, [r3, #0]
 8009c5e:	183b      	adds	r3, r7, r0
 8009c60:	183a      	adds	r2, r7, r0
 8009c62:	8812      	ldrh	r2, [r2, #0]
 8009c64:	2120      	movs	r1, #32
 8009c66:	404a      	eors	r2, r1
 8009c68:	801a      	strh	r2, [r3, #0]
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	18d3      	adds	r3, r2, r3
 8009c74:	183a      	adds	r2, r7, r0
 8009c76:	8812      	ldrh	r2, [r2, #0]
 8009c78:	492d      	ldr	r1, [pc, #180]	; (8009d30 <USB_EPClearStall+0x158>)
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	b292      	uxth	r2, r2
 8009c7e:	801a      	strh	r2, [r3, #0]
 8009c80:	e04a      	b.n	8009d18 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	18d2      	adds	r2, r2, r3
 8009c8c:	2116      	movs	r1, #22
 8009c8e:	187b      	adds	r3, r7, r1
 8009c90:	8812      	ldrh	r2, [r2, #0]
 8009c92:	801a      	strh	r2, [r3, #0]
 8009c94:	187b      	adds	r3, r7, r1
 8009c96:	881a      	ldrh	r2, [r3, #0]
 8009c98:	2380      	movs	r3, #128	; 0x80
 8009c9a:	01db      	lsls	r3, r3, #7
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	d016      	beq.n	8009cce <USB_EPClearStall+0xf6>
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	18d3      	adds	r3, r2, r3
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	2014      	movs	r0, #20
 8009cb0:	183b      	adds	r3, r7, r0
 8009cb2:	491c      	ldr	r1, [pc, #112]	; (8009d24 <USB_EPClearStall+0x14c>)
 8009cb4:	400a      	ands	r2, r1
 8009cb6:	801a      	strh	r2, [r3, #0]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	18d3      	adds	r3, r2, r3
 8009cc2:	183a      	adds	r2, r7, r0
 8009cc4:	8812      	ldrh	r2, [r2, #0]
 8009cc6:	491b      	ldr	r1, [pc, #108]	; (8009d34 <USB_EPClearStall+0x15c>)
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	b292      	uxth	r2, r2
 8009ccc:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	18d3      	adds	r3, r2, r3
 8009cd8:	881b      	ldrh	r3, [r3, #0]
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	2012      	movs	r0, #18
 8009cde:	183b      	adds	r3, r7, r0
 8009ce0:	4915      	ldr	r1, [pc, #84]	; (8009d38 <USB_EPClearStall+0x160>)
 8009ce2:	400a      	ands	r2, r1
 8009ce4:	801a      	strh	r2, [r3, #0]
 8009ce6:	183b      	adds	r3, r7, r0
 8009ce8:	183a      	adds	r2, r7, r0
 8009cea:	8812      	ldrh	r2, [r2, #0]
 8009cec:	2180      	movs	r1, #128	; 0x80
 8009cee:	0149      	lsls	r1, r1, #5
 8009cf0:	404a      	eors	r2, r1
 8009cf2:	801a      	strh	r2, [r3, #0]
 8009cf4:	183b      	adds	r3, r7, r0
 8009cf6:	183a      	adds	r2, r7, r0
 8009cf8:	8812      	ldrh	r2, [r2, #0]
 8009cfa:	2180      	movs	r1, #128	; 0x80
 8009cfc:	0189      	lsls	r1, r1, #6
 8009cfe:	404a      	eors	r2, r1
 8009d00:	801a      	strh	r2, [r3, #0]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	18d3      	adds	r3, r2, r3
 8009d0c:	183a      	adds	r2, r7, r0
 8009d0e:	8812      	ldrh	r2, [r2, #0]
 8009d10:	4907      	ldr	r1, [pc, #28]	; (8009d30 <USB_EPClearStall+0x158>)
 8009d12:	430a      	orrs	r2, r1
 8009d14:	b292      	uxth	r2, r2
 8009d16:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	0018      	movs	r0, r3
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	b006      	add	sp, #24
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	46c0      	nop			; (mov r8, r8)
 8009d24:	ffff8f8f 	.word	0xffff8f8f
 8009d28:	ffff80c0 	.word	0xffff80c0
 8009d2c:	ffff8fbf 	.word	0xffff8fbf
 8009d30:	ffff8080 	.word	0xffff8080
 8009d34:	ffffc080 	.word	0xffffc080
 8009d38:	ffffbf8f 	.word	0xffffbf8f

08009d3c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	000a      	movs	r2, r1
 8009d46:	1cfb      	adds	r3, r7, #3
 8009d48:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8009d4a:	1cfb      	adds	r3, r7, #3
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d103      	bne.n	8009d5a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	224c      	movs	r2, #76	; 0x4c
 8009d56:	2180      	movs	r1, #128	; 0x80
 8009d58:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	0018      	movs	r0, r3
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	b002      	add	sp, #8
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2258      	movs	r2, #88	; 0x58
 8009d70:	5a9b      	ldrh	r3, [r3, r2]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	4a05      	ldr	r2, [pc, #20]	; (8009d8c <USB_DevConnect+0x28>)
 8009d76:	4313      	orrs	r3, r2
 8009d78:	b299      	uxth	r1, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2258      	movs	r2, #88	; 0x58
 8009d7e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	0018      	movs	r0, r3
 8009d84:	46bd      	mov	sp, r7
 8009d86:	b002      	add	sp, #8
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	46c0      	nop			; (mov r8, r8)
 8009d8c:	ffff8000 	.word	0xffff8000

08009d90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2244      	movs	r2, #68	; 0x44
 8009d9c:	5a9b      	ldrh	r3, [r3, r2]
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009da2:	68fb      	ldr	r3, [r7, #12]
}
 8009da4:	0018      	movs	r0, r3
 8009da6:	46bd      	mov	sp, r7
 8009da8:	b004      	add	sp, #16
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b08c      	sub	sp, #48	; 0x30
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	0019      	movs	r1, r3
 8009db8:	1dbb      	adds	r3, r7, #6
 8009dba:	801a      	strh	r2, [r3, #0]
 8009dbc:	1d3b      	adds	r3, r7, #4
 8009dbe:	1c0a      	adds	r2, r1, #0
 8009dc0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009dc2:	1d3b      	adds	r3, r7, #4
 8009dc4:	881b      	ldrh	r3, [r3, #0]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	085b      	lsrs	r3, r3, #1
 8009dca:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009dd4:	1dbb      	adds	r3, r7, #6
 8009dd6:	881a      	ldrh	r2, [r3, #0]
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	18d3      	adds	r3, r2, r3
 8009ddc:	2280      	movs	r2, #128	; 0x80
 8009dde:	00d2      	lsls	r2, r2, #3
 8009de0:	4694      	mov	ip, r2
 8009de2:	4463      	add	r3, ip
 8009de4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dea:	e01b      	b.n	8009e24 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	3301      	adds	r3, #1
 8009df6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	021b      	lsls	r3, r3, #8
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	001a      	movs	r2, r3
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e10:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e14:	3302      	adds	r3, #2
 8009e16:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e20:	3b01      	subs	r3, #1
 8009e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e0      	bne.n	8009dec <USB_WritePMA+0x40>
  }
}
 8009e2a:	46c0      	nop			; (mov r8, r8)
 8009e2c:	46c0      	nop			; (mov r8, r8)
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	b00c      	add	sp, #48	; 0x30
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b08a      	sub	sp, #40	; 0x28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	0019      	movs	r1, r3
 8009e40:	1dbb      	adds	r3, r7, #6
 8009e42:	801a      	strh	r2, [r3, #0]
 8009e44:	1d3b      	adds	r3, r7, #4
 8009e46:	1c0a      	adds	r2, r1, #0
 8009e48:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009e4a:	1d3b      	adds	r3, r7, #4
 8009e4c:	881b      	ldrh	r3, [r3, #0]
 8009e4e:	085b      	lsrs	r3, r3, #1
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009e5c:	1dbb      	adds	r3, r7, #6
 8009e5e:	881a      	ldrh	r2, [r3, #0]
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	18d3      	adds	r3, r2, r3
 8009e64:	2280      	movs	r2, #128	; 0x80
 8009e66:	00d2      	lsls	r2, r2, #3
 8009e68:	4694      	mov	ip, r2
 8009e6a:	4463      	add	r3, ip
 8009e6c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	627b      	str	r3, [r7, #36]	; 0x24
 8009e72:	e018      	b.n	8009ea6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	881b      	ldrh	r3, [r3, #0]
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
 8009e7e:	3302      	adds	r3, #2
 8009e80:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	0a1b      	lsrs	r3, r3, #8
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1e3      	bne.n	8009e74 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009eac:	1d3b      	adds	r3, r7, #4
 8009eae:	881b      	ldrh	r3, [r3, #0]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	4013      	ands	r3, r2
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d007      	beq.n	8009eca <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8009eba:	6a3b      	ldr	r3, [r7, #32]
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	701a      	strb	r2, [r3, #0]
  }
}
 8009eca:	46c0      	nop			; (mov r8, r8)
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	b00a      	add	sp, #40	; 0x28
 8009ed0:	bd80      	pop	{r7, pc}
	...

08009ed4 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>:
namespace SolarGators {
namespace DataModules {

class DataModule {
public:
  DataModule(uint32_t can_id, uint16_t telem_id, uint32_t size, uint16_t instance_id = 0, bool is_ext_id = false, bool is_rtr = false):
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	603b      	str	r3, [r7, #0]
 8009ee0:	1dbb      	adds	r3, r7, #6
 8009ee2:	801a      	strh	r2, [r3, #0]
    can_id_(can_id), telem_id_(telem_id), size_(size), instance_id_(instance_id), is_ext_id_(is_ext_id), is_rtr_(is_rtr)
 8009ee4:	4a1b      	ldr	r2, [pc, #108]	; (8009f54 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb+0x80>)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	601a      	str	r2, [r3, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	605a      	str	r2, [r3, #4]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	1dba      	adds	r2, r7, #6
 8009ef4:	8812      	ldrh	r2, [r2, #0]
 8009ef6:	811a      	strh	r2, [r3, #8]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	60da      	str	r2, [r3, #12]
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	2318      	movs	r3, #24
 8009f02:	18fb      	adds	r3, r7, r3
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	8213      	strh	r3, [r2, #16]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	221c      	movs	r2, #28
 8009f0c:	18ba      	adds	r2, r7, r2
 8009f0e:	7812      	ldrb	r2, [r2, #0]
 8009f10:	749a      	strb	r2, [r3, #18]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2220      	movs	r2, #32
 8009f16:	18ba      	adds	r2, r7, r2
 8009f18:	7812      	ldrb	r2, [r2, #0]
 8009f1a:	74da      	strb	r2, [r3, #19]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4a0e      	ldr	r2, [pc, #56]	; (8009f58 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb+0x84>)
 8009f20:	669a      	str	r2, [r3, #104]	; 0x68
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2201      	movs	r2, #1
 8009f26:	66da      	str	r2, [r3, #108]	; 0x6c
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3318      	adds	r3, #24
 8009f2c:	001a      	movs	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	671a      	str	r2, [r3, #112]	; 0x70
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2250      	movs	r2, #80	; 0x50
 8009f36:	675a      	str	r2, [r3, #116]	; 0x74
  {
    mutex_id_ = osMutexNew(&mutex_attributes_);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	3368      	adds	r3, #104	; 0x68
 8009f3c:	0018      	movs	r0, r3
 8009f3e:	f003 ff9d 	bl	800de7c <osMutexNew>
 8009f42:	0002      	movs	r2, r0
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	615a      	str	r2, [r3, #20]
  };
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	b004      	add	sp, #16
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	46c0      	nop			; (mov r8, r8)
 8009f54:	08013328 	.word	0x08013328
 8009f58:	080129ec 	.word	0x080129ec

08009f5c <_ZN11SolarGators11DataModules10DataModuleD1Ev>:
  virtual ~DataModule() {};
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	4a03      	ldr	r2, [pc, #12]	; (8009f74 <_ZN11SolarGators11DataModules10DataModuleD1Ev+0x18>)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	0018      	movs	r0, r3
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	b002      	add	sp, #8
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	08013328 	.word	0x08013328

08009f78 <_ZN11SolarGators11DataModules10DataModuleD0Ev>:
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	0018      	movs	r0, r3
 8009f84:	f7ff ffea 	bl	8009f5c <_ZN11SolarGators11DataModules10DataModuleD1Ev>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2178      	movs	r1, #120	; 0x78
 8009f8c:	0018      	movs	r0, r3
 8009f8e:	f007 fc7d 	bl	801188c <_ZdlPvj>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	0018      	movs	r0, r3
 8009f96:	46bd      	mov	sp, r7
 8009f98:	b002      	add	sp, #8
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <_ZN11SolarGators11DataModules8SteeringC1Ev>:
  static constexpr uint32_t ID = 1023;
  static constexpr uint32_t SIZE = 0x2;
}
namespace SolarGators::DataModules
{
  Steering::Steering():
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af04      	add	r7, sp, #16
 8009fa2:	6078      	str	r0, [r7, #4]
    cruise_enable_(false),
    eco_enable_(true),
    headlights_(false),
    horn_(false),
    reverse_(false),
    cruise_speed_(Min_Cruise_Speed_)
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	491d      	ldr	r1, [pc, #116]	; (800a01c <_ZN11SolarGators11DataModules8SteeringC1Ev+0x80>)
 8009fa8:	2300      	movs	r3, #0
 8009faa:	9302      	str	r3, [sp, #8]
 8009fac:	2300      	movs	r3, #0
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f7ff ff8c 	bl	8009ed4 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 8009fbc:	4a18      	ldr	r2, [pc, #96]	; (800a020 <_ZN11SolarGators11DataModules8SteeringC1Ev+0x84>)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	601a      	str	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2278      	movs	r2, #120	; 0x78
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	5499      	strb	r1, [r3, r2]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2279      	movs	r2, #121	; 0x79
 8009fce:	2100      	movs	r1, #0
 8009fd0:	5499      	strb	r1, [r3, r2]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	227a      	movs	r2, #122	; 0x7a
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	5499      	strb	r1, [r3, r2]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	227b      	movs	r2, #123	; 0x7b
 8009fde:	2100      	movs	r1, #0
 8009fe0:	5499      	strb	r1, [r3, r2]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	227c      	movs	r2, #124	; 0x7c
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	5499      	strb	r1, [r3, r2]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	227d      	movs	r2, #125	; 0x7d
 8009fee:	2101      	movs	r1, #1
 8009ff0:	5499      	strb	r1, [r3, r2]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	227e      	movs	r2, #126	; 0x7e
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	5499      	strb	r1, [r3, r2]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	227f      	movs	r2, #127	; 0x7f
 8009ffe:	2100      	movs	r1, #0
 800a000:	5499      	strb	r1, [r3, r2]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2280      	movs	r2, #128	; 0x80
 800a006:	2100      	movs	r1, #0
 800a008:	5499      	strb	r1, [r3, r2]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2281      	movs	r2, #129	; 0x81
 800a00e:	2100      	movs	r1, #0
 800a010:	5499      	strb	r1, [r3, r2]
  {}
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	0018      	movs	r0, r3
 800a016:	46bd      	mov	sp, r7
 800a018:	b002      	add	sp, #8
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	000003ff 	.word	0x000003ff
 800a020:	08013340 	.word	0x08013340

0800a024 <_ZN11SolarGators11DataModules8SteeringD1Ev>:
  Steering::~Steering()
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	4a05      	ldr	r2, [pc, #20]	; (800a044 <_ZN11SolarGators11DataModules8SteeringD1Ev+0x20>)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	601a      	str	r2, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	0018      	movs	r0, r3
 800a036:	f7ff ff91 	bl	8009f5c <_ZN11SolarGators11DataModules10DataModuleD1Ev>
  {}
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	0018      	movs	r0, r3
 800a03e:	46bd      	mov	sp, r7
 800a040:	b002      	add	sp, #8
 800a042:	bd80      	pop	{r7, pc}
 800a044:	08013340 	.word	0x08013340

0800a048 <_ZN11SolarGators11DataModules8SteeringD0Ev>:
  Steering::~Steering()
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  {}
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	0018      	movs	r0, r3
 800a054:	f7ff ffe6 	bl	800a024 <_ZN11SolarGators11DataModules8SteeringD1Ev>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2184      	movs	r1, #132	; 0x84
 800a05c:	0018      	movs	r0, r3
 800a05e:	f007 fc15 	bl	801188c <_ZdlPvj>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	0018      	movs	r0, r3
 800a066:	46bd      	mov	sp, r7
 800a068:	b002      	add	sp, #8
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <_ZNK11SolarGators11DataModules8Steering17GetLeftTurnStatusEv>:
  bool Steering::GetLeftTurnStatus() const
  {
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
    return left_turn_;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2278      	movs	r2, #120	; 0x78
 800a078:	5c9b      	ldrb	r3, [r3, r2]
  }
 800a07a:	0018      	movs	r0, r3
 800a07c:	46bd      	mov	sp, r7
 800a07e:	b002      	add	sp, #8
 800a080:	bd80      	pop	{r7, pc}

0800a082 <_ZNK11SolarGators11DataModules8Steering18GetRightTurnStatusEv>:
  bool Steering::GetRightTurnStatus() const
  {
 800a082:	b580      	push	{r7, lr}
 800a084:	b082      	sub	sp, #8
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
    return right_turn_;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2279      	movs	r2, #121	; 0x79
 800a08e:	5c9b      	ldrb	r3, [r3, r2]
  }
 800a090:	0018      	movs	r0, r3
 800a092:	46bd      	mov	sp, r7
 800a094:	b002      	add	sp, #8
 800a096:	bd80      	pop	{r7, pc}

0800a098 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>:
  bool Steering::GetHazardsStatus() const
  {
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
    return hazards_;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	227a      	movs	r2, #122	; 0x7a
 800a0a4:	5c9b      	ldrb	r3, [r3, r2]
  }
 800a0a6:	0018      	movs	r0, r3
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	b002      	add	sp, #8
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <_ZNK11SolarGators11DataModules8Steering11ToByteArrayEPh>:
  uint8_t Steering::GetCruiseSpeed() const
  {
    return cruise_speed_;
  }
  void Steering::ToByteArray(uint8_t* buff) const
  {
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b082      	sub	sp, #8
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	6039      	str	r1, [r7, #0]
    memset(buff, 0, sizeof(buff));
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	2204      	movs	r2, #4
 800a0bc:	2100      	movs	r1, #0
 800a0be:	0018      	movs	r0, r3
 800a0c0:	f007 fc7a 	bl	80119b8 <memset>
    buff[0] |= (static_cast<uint8_t>(left_turn_)     << 0);
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	2178      	movs	r1, #120	; 0x78
 800a0cc:	5c52      	ldrb	r2, [r2, r1]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(right_turn_)    << 1);
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	b25a      	sxtb	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2179      	movs	r1, #121	; 0x79
 800a0e0:	5c5b      	ldrb	r3, [r3, r1]
 800a0e2:	005b      	lsls	r3, r3, #1
 800a0e4:	b25b      	sxtb	r3, r3
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	b25b      	sxtb	r3, r3
 800a0ea:	b2da      	uxtb	r2, r3
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(hazards_)       << 2);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	b25a      	sxtb	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	217a      	movs	r1, #122	; 0x7a
 800a0fa:	5c5b      	ldrb	r3, [r3, r1]
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	b25b      	sxtb	r3, r3
 800a100:	4313      	orrs	r3, r2
 800a102:	b25b      	sxtb	r3, r3
 800a104:	b2da      	uxtb	r2, r3
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(bps_fault_)     << 3);
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	b25a      	sxtb	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	217b      	movs	r1, #123	; 0x7b
 800a114:	5c5b      	ldrb	r3, [r3, r1]
 800a116:	00db      	lsls	r3, r3, #3
 800a118:	b25b      	sxtb	r3, r3
 800a11a:	4313      	orrs	r3, r2
 800a11c:	b25b      	sxtb	r3, r3
 800a11e:	b2da      	uxtb	r2, r3
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(cruise_enable_) << 4);
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	b25a      	sxtb	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	217c      	movs	r1, #124	; 0x7c
 800a12e:	5c5b      	ldrb	r3, [r3, r1]
 800a130:	011b      	lsls	r3, r3, #4
 800a132:	b25b      	sxtb	r3, r3
 800a134:	4313      	orrs	r3, r2
 800a136:	b25b      	sxtb	r3, r3
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(eco_enable_)    << 5);
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	b25a      	sxtb	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	217d      	movs	r1, #125	; 0x7d
 800a148:	5c5b      	ldrb	r3, [r3, r1]
 800a14a:	015b      	lsls	r3, r3, #5
 800a14c:	b25b      	sxtb	r3, r3
 800a14e:	4313      	orrs	r3, r2
 800a150:	b25b      	sxtb	r3, r3
 800a152:	b2da      	uxtb	r2, r3
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(headlights_)    << 6);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	b25a      	sxtb	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	217e      	movs	r1, #126	; 0x7e
 800a162:	5c5b      	ldrb	r3, [r3, r1]
 800a164:	019b      	lsls	r3, r3, #6
 800a166:	b25b      	sxtb	r3, r3
 800a168:	4313      	orrs	r3, r2
 800a16a:	b25b      	sxtb	r3, r3
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(horn_)          << 7);
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	b25a      	sxtb	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	217f      	movs	r1, #127	; 0x7f
 800a17c:	5c5b      	ldrb	r3, [r3, r1]
 800a17e:	01db      	lsls	r3, r3, #7
 800a180:	b25b      	sxtb	r3, r3
 800a182:	4313      	orrs	r3, r2
 800a184:	b25b      	sxtb	r3, r3
 800a186:	b2da      	uxtb	r2, r3
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	701a      	strb	r2, [r3, #0]
    buff[1] |= (static_cast<uint8_t>(reverse_)       << 0);
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	3301      	adds	r3, #1
 800a190:	781a      	ldrb	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2180      	movs	r1, #128	; 0x80
 800a196:	5c5b      	ldrb	r3, [r3, r1]
 800a198:	0019      	movs	r1, r3
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	3301      	adds	r3, #1
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	b2d2      	uxtb	r2, r2
 800a1a2:	701a      	strb	r2, [r3, #0]
    buff[2] |= cruise_speed_;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	3302      	adds	r3, #2
 800a1a8:	7819      	ldrb	r1, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2281      	movs	r2, #129	; 0x81
 800a1ae:	5c9a      	ldrb	r2, [r3, r2]
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	3302      	adds	r3, #2
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	b2d2      	uxtb	r2, r2
 800a1b8:	701a      	strb	r2, [r3, #0]
  }
 800a1ba:	46c0      	nop			; (mov r8, r8)
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	b002      	add	sp, #8
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <_ZN11SolarGators11DataModules8Steering13FromByteArrayEPh>:
  void Steering::FromByteArray(uint8_t* buff)
  {
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b082      	sub	sp, #8
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	6039      	str	r1, [r7, #0]
    left_turn_      = buff[0] & (1 << 0);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	001a      	movs	r2, r3
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	1e5a      	subs	r2, r3, #1
 800a1d8:	4193      	sbcs	r3, r2
 800a1da:	b2d9      	uxtb	r1, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2278      	movs	r2, #120	; 0x78
 800a1e0:	5499      	strb	r1, [r3, r2]
    right_turn_     = buff[0] & (1 << 1);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	001a      	movs	r2, r3
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	1e5a      	subs	r2, r3, #1
 800a1ee:	4193      	sbcs	r3, r2
 800a1f0:	b2d9      	uxtb	r1, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2279      	movs	r2, #121	; 0x79
 800a1f6:	5499      	strb	r1, [r3, r2]
    hazards_        = buff[0] & (1 << 2);
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	001a      	movs	r2, r3
 800a1fe:	2304      	movs	r3, #4
 800a200:	4013      	ands	r3, r2
 800a202:	1e5a      	subs	r2, r3, #1
 800a204:	4193      	sbcs	r3, r2
 800a206:	b2d9      	uxtb	r1, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	227a      	movs	r2, #122	; 0x7a
 800a20c:	5499      	strb	r1, [r3, r2]
    bps_fault_      = buff[0] & (1 << 3);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	001a      	movs	r2, r3
 800a214:	2308      	movs	r3, #8
 800a216:	4013      	ands	r3, r2
 800a218:	1e5a      	subs	r2, r3, #1
 800a21a:	4193      	sbcs	r3, r2
 800a21c:	b2d9      	uxtb	r1, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	227b      	movs	r2, #123	; 0x7b
 800a222:	5499      	strb	r1, [r3, r2]
    cruise_enable_  = buff[0] & (1 << 4);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	001a      	movs	r2, r3
 800a22a:	2310      	movs	r3, #16
 800a22c:	4013      	ands	r3, r2
 800a22e:	1e5a      	subs	r2, r3, #1
 800a230:	4193      	sbcs	r3, r2
 800a232:	b2d9      	uxtb	r1, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	227c      	movs	r2, #124	; 0x7c
 800a238:	5499      	strb	r1, [r3, r2]
    eco_enable_     = buff[0] & (1 << 5);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	001a      	movs	r2, r3
 800a240:	2320      	movs	r3, #32
 800a242:	4013      	ands	r3, r2
 800a244:	1e5a      	subs	r2, r3, #1
 800a246:	4193      	sbcs	r3, r2
 800a248:	b2d9      	uxtb	r1, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	227d      	movs	r2, #125	; 0x7d
 800a24e:	5499      	strb	r1, [r3, r2]
    headlights_     = buff[0] & (1 << 6);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	001a      	movs	r2, r3
 800a256:	2340      	movs	r3, #64	; 0x40
 800a258:	4013      	ands	r3, r2
 800a25a:	1e5a      	subs	r2, r3, #1
 800a25c:	4193      	sbcs	r3, r2
 800a25e:	b2d9      	uxtb	r1, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	227e      	movs	r2, #126	; 0x7e
 800a264:	5499      	strb	r1, [r3, r2]
    horn_           = buff[0] & (1 << 7);
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	b25b      	sxtb	r3, r3
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	09db      	lsrs	r3, r3, #7
 800a270:	b2d9      	uxtb	r1, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	227f      	movs	r2, #127	; 0x7f
 800a276:	5499      	strb	r1, [r3, r2]
    reverse_        = buff[1] & (1 << 0);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	3301      	adds	r3, #1
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	001a      	movs	r2, r3
 800a280:	2301      	movs	r3, #1
 800a282:	4013      	ands	r3, r2
 800a284:	1e5a      	subs	r2, r3, #1
 800a286:	4193      	sbcs	r3, r2
 800a288:	b2d9      	uxtb	r1, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2280      	movs	r2, #128	; 0x80
 800a28e:	5499      	strb	r1, [r3, r2]
    cruise_speed_   = buff[2];
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	7899      	ldrb	r1, [r3, #2]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2281      	movs	r2, #129	; 0x81
 800a298:	5499      	strb	r1, [r3, r2]
  }
 800a29a:	46c0      	nop			; (mov r8, r8)
 800a29c:	46bd      	mov	sp, r7
 800a29e:	b002      	add	sp, #8
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	6039      	str	r1, [r7, #0]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	0018      	movs	r0, r3
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	b002      	add	sp, #8
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <_ZN3etl5ipool7releaseEPKv>:
    /// Release an object in the pool.
    /// If asserts or exceptions are enabled and the object does not belong to this
    /// pool then an etl::pool_object_not_in_pool is thrown.
    /// \param p_object A pointer to the object to be released.
    //*************************************************************************
    void release(const void* const p_object)
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b084      	sub	sp, #16
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	6039      	str	r1, [r7, #0]
    {
      const uintptr_t p = uintptr_t(p_object);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	60fb      	str	r3, [r7, #12]
      release_item((char*)p);
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	0011      	movs	r1, r2
 800a2ca:	0018      	movs	r0, r3
 800a2cc:	f000 f874 	bl	800a3b8 <_ZN3etl5ipool12release_itemEPc>
    }
 800a2d0:	46c0      	nop			; (mov r8, r8)
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	b004      	add	sp, #16
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <_ZN3etl5ipoolC1EPcmm>:
  protected:

    //*************************************************************************
    /// Constructor
    //*************************************************************************
    ipool(char* p_buffer_, uint32_t item_size_, uint32_t max_size_)
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
      : p_buffer(p_buffer_),
      p_next(p_buffer_),
      items_allocated(0),
      items_initialised(0),
      Item_Size(item_size_),
      Max_Size(max_size_)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	605a      	str	r2, [r3, #4]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	609a      	str	r2, [r3, #8]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	60da      	str	r2, [r3, #12]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	611a      	str	r2, [r3, #16]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	615a      	str	r2, [r3, #20]
    {
    }
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	0018      	movs	r0, r3
 800a30e:	46bd      	mov	sp, r7
 800a310:	b004      	add	sp, #16
 800a312:	bd80      	pop	{r7, pc}

0800a314 <_ZN3etl5ipool13allocate_itemEv>:
  private:

    //*************************************************************************
    /// Allocate an item from the pool.
    //*************************************************************************
    char* allocate_item()
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
    {
      char* p_value = ETL_NULLPTR;
 800a31c:	2300      	movs	r3, #0
 800a31e:	617b      	str	r3, [r7, #20]

      // Any free space left?
      if (items_allocated < Max_Size)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	689a      	ldr	r2, [r3, #8]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d233      	bcs.n	800a394 <_ZN3etl5ipool13allocate_itemEv+0x80>
      {
        // Initialise another one if necessary.
        if (items_initialised < Max_Size)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	68da      	ldr	r2, [r3, #12]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	429a      	cmp	r2, r3
 800a336:	d215      	bcs.n	800a364 <_ZN3etl5ipool13allocate_itemEv+0x50>
        {
          char* p = p_buffer + (items_initialised * Item_Size);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68d9      	ldr	r1, [r3, #12]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	434b      	muls	r3, r1
 800a346:	18d3      	adds	r3, r2, r3
 800a348:	613b      	str	r3, [r7, #16]
          char* np = p + Item_Size;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	18d3      	adds	r3, r2, r3
 800a352:	60fb      	str	r3, [r7, #12]
          *reinterpret_cast<char**>(p) = np;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	601a      	str	r2, [r3, #0]
          ++items_initialised;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	1c5a      	adds	r2, r3, #1
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	60da      	str	r2, [r3, #12]
        }

        // Get the address of new allocated item.
        p_value = p_next;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	617b      	str	r3, [r7, #20]

        ++items_allocated;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	1c5a      	adds	r2, r3, #1
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	609a      	str	r2, [r3, #8]
        if (items_allocated < Max_Size)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	689a      	ldr	r2, [r3, #8]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d205      	bcs.n	800a38c <_ZN3etl5ipool13allocate_itemEv+0x78>
        {
          // Set up the pointer to the next free item
          p_next = *reinterpret_cast<char**>(p_next);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	605a      	str	r2, [r3, #4]
 800a38a:	e00a      	b.n	800a3a2 <_ZN3etl5ipool13allocate_itemEv+0x8e>
        }
        else
        {
          // No more left!
          p_next = ETL_NULLPTR;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	605a      	str	r2, [r3, #4]
 800a392:	e006      	b.n	800a3a2 <_ZN3etl5ipool13allocate_itemEv+0x8e>
        }
      }
      else
      {
        ETL_ASSERT(false, ETL_ERROR(pool_no_allocation));
 800a394:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <_ZN3etl5ipool13allocate_itemEv+0x98>)
 800a396:	4a06      	ldr	r2, [pc, #24]	; (800a3b0 <_ZN3etl5ipool13allocate_itemEv+0x9c>)
 800a398:	2172      	movs	r1, #114	; 0x72
 800a39a:	31ff      	adds	r1, #255	; 0xff
 800a39c:	4805      	ldr	r0, [pc, #20]	; (800a3b4 <_ZN3etl5ipool13allocate_itemEv+0xa0>)
 800a39e:	f007 fa95 	bl	80118cc <__assert_func>
      }

      return p_value;
 800a3a2:	697b      	ldr	r3, [r7, #20]
    }
 800a3a4:	0018      	movs	r0, r3
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	b006      	add	sp, #24
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	080129f0 	.word	0x080129f0
 800a3b0:	080129f8 	.word	0x080129f8
 800a3b4:	08012a1c 	.word	0x08012a1c

0800a3b8 <_ZN3etl5ipool12release_itemEPc>:

    //*************************************************************************
    /// Release an item back to the pool.
    //*************************************************************************
    void release_item(char* p_value)
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
    {
      // Does it belong to us?
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	0011      	movs	r1, r2
 800a3c8:	0018      	movs	r0, r3
 800a3ca:	f000 f829 	bl	800a420 <_ZNK3etl5ipool15is_item_in_poolEPKc>
 800a3ce:	1e03      	subs	r3, r0, #0
 800a3d0:	d106      	bne.n	800a3e0 <_ZN3etl5ipool12release_itemEPc+0x28>
 800a3d2:	4b10      	ldr	r3, [pc, #64]	; (800a414 <_ZN3etl5ipool12release_itemEPc+0x5c>)
 800a3d4:	4a10      	ldr	r2, [pc, #64]	; (800a418 <_ZN3etl5ipool12release_itemEPc+0x60>)
 800a3d6:	217e      	movs	r1, #126	; 0x7e
 800a3d8:	31ff      	adds	r1, #255	; 0xff
 800a3da:	4810      	ldr	r0, [pc, #64]	; (800a41c <_ZN3etl5ipool12release_itemEPc+0x64>)
 800a3dc:	f007 fa76 	bl	80118cc <__assert_func>

      if (p_next != ETL_NULLPTR)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d005      	beq.n	800a3f4 <_ZN3etl5ipool12release_itemEPc+0x3c>
      {
        // Point it to the current free item.
        *(uintptr_t*)p_value = reinterpret_cast<uintptr_t>(p_next);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	001a      	movs	r2, r3
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	601a      	str	r2, [r3, #0]
 800a3f2:	e002      	b.n	800a3fa <_ZN3etl5ipool12release_itemEPc+0x42>
      }
      else
      {
        // This is the only free item.
        *((uintptr_t*)p_value) = 0;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	601a      	str	r2, [r3, #0]
      }

      p_next = p_value;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	683a      	ldr	r2, [r7, #0]
 800a3fe:	605a      	str	r2, [r3, #4]

      --items_allocated;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	1e5a      	subs	r2, r3, #1
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	609a      	str	r2, [r3, #8]
    }
 800a40a:	46c0      	nop			; (mov r8, r8)
 800a40c:	46bd      	mov	sp, r7
 800a40e:	b002      	add	sp, #8
 800a410:	bd80      	pop	{r7, pc}
 800a412:	46c0      	nop			; (mov r8, r8)
 800a414:	08012a84 	.word	0x08012a84
 800a418:	08012aa0 	.word	0x08012aa0
 800a41c:	08012a1c 	.word	0x08012a1c

0800a420 <_ZNK3etl5ipool15is_item_in_poolEPKc>:

    //*************************************************************************
    /// Check if the item belongs to this pool.
    //*************************************************************************
    bool is_item_in_pool(const char* p) const
 800a420:	b590      	push	{r4, r7, lr}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
    {
      // Within the range of the buffer?
      intptr_t distance = p - p_buffer;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	60fb      	str	r3, [r7, #12]
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	db0b      	blt.n	800a452 <_ZNK3etl5ipool15is_item_in_poolEPKc+0x32>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	1e5a      	subs	r2, r3, #1
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	4353      	muls	r3, r2
 800a446:	001a      	movs	r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4293      	cmp	r3, r2
 800a44c:	dc01      	bgt.n	800a452 <_ZNK3etl5ipool15is_item_in_poolEPKc+0x32>
 800a44e:	2201      	movs	r2, #1
 800a450:	e000      	b.n	800a454 <_ZNK3etl5ipool15is_item_in_poolEPKc+0x34>
 800a452:	2200      	movs	r2, #0
 800a454:	240b      	movs	r4, #11
 800a456:	193b      	adds	r3, r7, r4
 800a458:	701a      	strb	r2, [r3, #0]

      // Modulus and division can be slow on some architectures, so only do this in debug.
#if defined(ETL_DEBUG)
      // Is the address on a valid object boundary?
      bool is_valid_address = ((distance % Item_Size) == 0);
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	0019      	movs	r1, r3
 800a462:	0010      	movs	r0, r2
 800a464:	f7f5 fee0 	bl	8000228 <__aeabi_uidivmod>
 800a468:	000b      	movs	r3, r1
 800a46a:	001a      	movs	r2, r3
 800a46c:	200a      	movs	r0, #10
 800a46e:	183b      	adds	r3, r7, r0
 800a470:	4251      	negs	r1, r2
 800a472:	414a      	adcs	r2, r1
 800a474:	701a      	strb	r2, [r3, #0]
#else
      bool is_valid_address = true;
#endif

      return is_within_range && is_valid_address;
 800a476:	193b      	adds	r3, r7, r4
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d005      	beq.n	800a48a <_ZNK3etl5ipool15is_item_in_poolEPKc+0x6a>
 800a47e:	183b      	adds	r3, r7, r0
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <_ZNK3etl5ipool15is_item_in_poolEPKc+0x6a>
 800a486:	2301      	movs	r3, #1
 800a488:	e000      	b.n	800a48c <_ZNK3etl5ipool15is_item_in_poolEPKc+0x6c>
 800a48a:	2300      	movs	r3, #0
    }
 800a48c:	0018      	movs	r0, r3
 800a48e:	46bd      	mov	sp, r7
 800a490:	b005      	add	sp, #20
 800a492:	bd90      	pop	{r4, r7, pc}

0800a494 <_ZN3etl5ipoolD1Ev>:
    virtual ~ipool()
    {
    }
#else
  protected:
    ~ipool()
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
    {
    }
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	0018      	movs	r0, r3
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	b002      	add	sp, #8
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <_ZNK3etl8map_base4fullEv>:
    }

    //*************************************************************************
    /// Checks to see if the map is full.
    //*************************************************************************
    bool full() const
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b082      	sub	sp, #8
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
    {
      return current_size == CAPACITY;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	425a      	negs	r2, r3
 800a4ba:	4153      	adcs	r3, r2
 800a4bc:	b2db      	uxtb	r3, r3
    }
 800a4be:	0018      	movs	r0, r3
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	b002      	add	sp, #8
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <_ZN3etl8map_base4Node12mark_as_leafEv>:
      }

      //***********************************************************************
      /// Marks the node as a leaf.
      //***********************************************************************
      void mark_as_leaf()
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
      {
        weight = uint_least8_t(kNeither);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2202      	movs	r2, #2
 800a4d2:	721a      	strb	r2, [r3, #8]
        dir = uint_least8_t(kNeither);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	725a      	strb	r2, [r3, #9]
        children[0] = ETL_NULLPTR;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	601a      	str	r2, [r3, #0]
        children[1] = ETL_NULLPTR;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	605a      	str	r2, [r3, #4]
      }
 800a4e6:	46c0      	nop			; (mov r8, r8)
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	b002      	add	sp, #8
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <_ZN3etl8map_baseC1Ej>:
    };

    //*************************************************************************
    /// The constructor that is called from derived classes.
    //*************************************************************************
    map_base(size_type max_size_)
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	6039      	str	r1, [r7, #0]
      : current_size(0)
      , CAPACITY(max_size_)
      , root_node(ETL_NULLPTR)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	601a      	str	r2, [r3, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	683a      	ldr	r2, [r7, #0]
 800a502:	605a      	str	r2, [r3, #4]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	609a      	str	r2, [r3, #8]

    {
    }
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	0018      	movs	r0, r3
 800a50e:	46bd      	mov	sp, r7
 800a510:	b002      	add	sp, #8
 800a512:	bd80      	pop	{r7, pc}

0800a514 <_ZN3etl8map_baseD1Ev>:

    //*************************************************************************
    /// Destructor
    //*************************************************************************
    ~map_base()
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
    {
    }
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	0018      	movs	r0, r3
 800a520:	46bd      	mov	sp, r7
 800a522:	b002      	add	sp, #8
 800a524:	bd80      	pop	{r7, pc}

0800a526 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>:

    //*************************************************************************
    /// Balance the critical node at the position provided as needed
    //*************************************************************************
    void balance_node(Node*& critical_node)
 800a526:	b590      	push	{r4, r7, lr}
 800a528:	b085      	sub	sp, #20
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
 800a52e:	6039      	str	r1, [r7, #0]
    {
      // Step 1: Update weights for all children of the critical node up to the
      // newly inserted node. This step is costly (in terms of traversing nodes
      // multiple times during insertion) but doesn't require as much recursion
      Node* weight_node = critical_node->children[critical_node->dir];
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	7a5b      	ldrb	r3, [r3, #9]
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	589b      	ldr	r3, [r3, r2]
 800a53e:	60fb      	str	r3, [r7, #12]
      while (weight_node)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d01e      	beq.n	800a584 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x5e>
      {
        // Keep going until we reach a terminal node (dir == kNeither)
        if (uint_least8_t(kNeither) != weight_node->dir)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	7a5b      	ldrb	r3, [r3, #9]
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d019      	beq.n	800a582 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x5c>
        {
          // Does this insert balance the previous weight factor value?
          if (weight_node->weight == 1 - weight_node->dir)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	7a1b      	ldrb	r3, [r3, #8]
 800a552:	001a      	movs	r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	7a5b      	ldrb	r3, [r3, #9]
 800a558:	0019      	movs	r1, r3
 800a55a:	2301      	movs	r3, #1
 800a55c:	1a5b      	subs	r3, r3, r1
 800a55e:	429a      	cmp	r2, r3
 800a560:	d103      	bne.n	800a56a <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x44>
          {
            weight_node->weight = uint_least8_t(kNeither);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2202      	movs	r2, #2
 800a566:	721a      	strb	r2, [r3, #8]
 800a568:	e003      	b.n	800a572 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x4c>
          }
          else
          {
            weight_node->weight = weight_node->dir;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	7a5a      	ldrb	r2, [r3, #9]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	721a      	strb	r2, [r3, #8]
          }

          // Update weight factor node to point to next node
          weight_node = weight_node->children[weight_node->dir];
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	7a5b      	ldrb	r3, [r3, #9]
 800a576:	001a      	movs	r2, r3
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	0092      	lsls	r2, r2, #2
 800a57c:	58d3      	ldr	r3, [r2, r3]
 800a57e:	60fb      	str	r3, [r7, #12]
      while (weight_node)
 800a580:	e7de      	b.n	800a540 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x1a>
        }
        else
        {
          // Stop loop, terminal node found
          break;
 800a582:	46c0      	nop			; (mov r8, r8)
        }
      } // while(weight_node)

        // Step 2: Update weight for critical_node or rotate tree to balance node
      if (uint_least8_t(kNeither) == critical_node->weight)
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	7a1b      	ldrb	r3, [r3, #8]
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	d106      	bne.n	800a59c <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x76>
      {
        critical_node->weight = critical_node->dir;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	7a52      	ldrb	r2, [r2, #9]
 800a598:	721a      	strb	r2, [r3, #8]
        {
          rotate_3node(critical_node, critical_node->dir,
            critical_node->children[critical_node->dir]->children[1 - critical_node->dir]->dir);
        }
      }
    }
 800a59a:	e03a      	b.n	800a612 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xec>
      else if (critical_node->dir != critical_node->weight)
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	7a5a      	ldrb	r2, [r3, #9]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	7a1b      	ldrb	r3, [r3, #8]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d004      	beq.n	800a5b6 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x90>
        critical_node->weight = uint_least8_t(kNeither);
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2202      	movs	r2, #2
 800a5b2:	721a      	strb	r2, [r3, #8]
    }
 800a5b4:	e02d      	b.n	800a612 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xec>
        if (critical_node->weight == critical_node->children[critical_node->dir]->dir)
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	7a1a      	ldrb	r2, [r3, #8]
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	6819      	ldr	r1, [r3, #0]
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	7a5b      	ldrb	r3, [r3, #9]
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	585b      	ldr	r3, [r3, r1]
 800a5ca:	7a5b      	ldrb	r3, [r3, #9]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d108      	bne.n	800a5e2 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xbc>
          rotate_2node(critical_node, critical_node->dir);
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	7a5a      	ldrb	r2, [r3, #9]
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	0018      	movs	r0, r3
 800a5dc:	f000 f81d 	bl	800a61a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
    }
 800a5e0:	e017      	b.n	800a612 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xec>
          rotate_3node(critical_node, critical_node->dir,
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	7a5c      	ldrb	r4, [r3, #9]
            critical_node->children[critical_node->dir]->children[1 - critical_node->dir]->dir);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	7a5b      	ldrb	r3, [r3, #9]
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	589a      	ldr	r2, [r3, r2]
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	7a5b      	ldrb	r3, [r3, #9]
 800a5fc:	0019      	movs	r1, r3
 800a5fe:	2301      	movs	r3, #1
 800a600:	1a5b      	subs	r3, r3, r1
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	589b      	ldr	r3, [r3, r2]
          rotate_3node(critical_node, critical_node->dir,
 800a606:	7a5b      	ldrb	r3, [r3, #9]
 800a608:	6839      	ldr	r1, [r7, #0]
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	0022      	movs	r2, r4
 800a60e:	f000 f837 	bl	800a680 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
    }
 800a612:	46c0      	nop			; (mov r8, r8)
 800a614:	46bd      	mov	sp, r7
 800a616:	b005      	add	sp, #20
 800a618:	bd90      	pop	{r4, r7, pc}

0800a61a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>:

    //*************************************************************************
    /// Rotate two nodes at the position provided the to balance the tree
    //*************************************************************************
    void rotate_2node(Node*& position, uint_least8_t dir)
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b086      	sub	sp, #24
 800a61e:	af00      	add	r7, sp, #0
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	1dfb      	adds	r3, r7, #7
 800a626:	701a      	strb	r2, [r3, #0]
      // B (new position) becomes the root
      // A (position) takes ownership of E as its left child
      // B (new position) takes ownership of A as its right child

      // Capture new root
      Node* new_root = position->children[dir];
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	1dfa      	adds	r2, r7, #7
 800a62e:	7812      	ldrb	r2, [r2, #0]
 800a630:	0092      	lsls	r2, r2, #2
 800a632:	58d3      	ldr	r3, [r2, r3]
 800a634:	617b      	str	r3, [r7, #20]
      // Replace position's previous child with new root's other child
      position->children[dir] = new_root->children[1 - dir];
 800a636:	1dfb      	adds	r3, r7, #7
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2201      	movs	r2, #1
 800a63c:	1ad0      	subs	r0, r2, r3
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	1dfa      	adds	r2, r7, #7
 800a644:	7812      	ldrb	r2, [r2, #0]
 800a646:	6979      	ldr	r1, [r7, #20]
 800a648:	0080      	lsls	r0, r0, #2
 800a64a:	5841      	ldr	r1, [r0, r1]
 800a64c:	0092      	lsls	r2, r2, #2
 800a64e:	50d1      	str	r1, [r2, r3]
      // New root now becomes parent of current position
      new_root->children[1 - dir] = position;
 800a650:	1dfb      	adds	r3, r7, #7
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	2201      	movs	r2, #1
 800a656:	1ad2      	subs	r2, r2, r3
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	6819      	ldr	r1, [r3, #0]
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	0092      	lsls	r2, r2, #2
 800a660:	50d1      	str	r1, [r2, r3]
      // Clear weight factor from current position
      position->weight = uint_least8_t(kNeither);
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2202      	movs	r2, #2
 800a668:	721a      	strb	r2, [r3, #8]
      // Newly detached right now becomes current position
      position = new_root;
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	697a      	ldr	r2, [r7, #20]
 800a66e:	601a      	str	r2, [r3, #0]
      // Clear weight factor from new root
      position->weight = uint_least8_t(kNeither);
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2202      	movs	r2, #2
 800a676:	721a      	strb	r2, [r3, #8]
    }
 800a678:	46c0      	nop			; (mov r8, r8)
 800a67a:	46bd      	mov	sp, r7
 800a67c:	b006      	add	sp, #24
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>:

    //*************************************************************************
    /// Rotate three nodes at the position provided the to balance the tree
    //*************************************************************************
    void rotate_3node(Node*& position, uint_least8_t dir, uint_least8_t third)
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	0019      	movs	r1, r3
 800a68c:	1dfb      	adds	r3, r7, #7
 800a68e:	701a      	strb	r2, [r3, #0]
 800a690:	1dbb      	adds	r3, r7, #6
 800a692:	1c0a      	adds	r2, r1, #0
 800a694:	701a      	strb	r2, [r3, #0]
      // D (new position) becomes the root
      // A (position) takes ownership of F as its right child
      // C takes ownership of G as its left child

      // Capture new root (either E or D depending on dir)
      Node* new_root = position->children[dir]->children[1 - dir];
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	1dfa      	adds	r2, r7, #7
 800a69c:	7812      	ldrb	r2, [r2, #0]
 800a69e:	0092      	lsls	r2, r2, #2
 800a6a0:	58d3      	ldr	r3, [r2, r3]
 800a6a2:	1dfa      	adds	r2, r7, #7
 800a6a4:	7812      	ldrb	r2, [r2, #0]
 800a6a6:	2101      	movs	r1, #1
 800a6a8:	1a8a      	subs	r2, r1, r2
 800a6aa:	0092      	lsls	r2, r2, #2
 800a6ac:	58d3      	ldr	r3, [r2, r3]
 800a6ae:	617b      	str	r3, [r7, #20]
      // Set weight factor for B or C based on F or G existing and being a different than dir
      position->children[dir]->weight = third != uint_least8_t(kNeither) && third != dir ? dir : uint_least8_t(kNeither);
 800a6b0:	1dbb      	adds	r3, r7, #6
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d008      	beq.n	800a6ca <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0x4a>
 800a6b8:	1dba      	adds	r2, r7, #6
 800a6ba:	1dfb      	adds	r3, r7, #7
 800a6bc:	7812      	ldrb	r2, [r2, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d002      	beq.n	800a6ca <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0x4a>
 800a6c4:	1dfb      	adds	r3, r7, #7
 800a6c6:	7819      	ldrb	r1, [r3, #0]
 800a6c8:	e000      	b.n	800a6cc <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0x4c>
 800a6ca:	2102      	movs	r1, #2
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	1dfa      	adds	r2, r7, #7
 800a6d2:	7812      	ldrb	r2, [r2, #0]
 800a6d4:	0092      	lsls	r2, r2, #2
 800a6d6:	58d3      	ldr	r3, [r2, r3]
 800a6d8:	1c0a      	adds	r2, r1, #0
 800a6da:	721a      	strb	r2, [r3, #8]

      // Detach new root from its tree (replace with new roots child)
      position->children[dir]->children[1 - dir] =
        new_root->children[dir];
 800a6dc:	1dfb      	adds	r3, r7, #7
 800a6de:	7818      	ldrb	r0, [r3, #0]
      position->children[dir]->children[1 - dir] =
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	1dfa      	adds	r2, r7, #7
 800a6e6:	7812      	ldrb	r2, [r2, #0]
 800a6e8:	0092      	lsls	r2, r2, #2
 800a6ea:	58d3      	ldr	r3, [r2, r3]
 800a6ec:	1dfa      	adds	r2, r7, #7
 800a6ee:	7812      	ldrb	r2, [r2, #0]
 800a6f0:	2101      	movs	r1, #1
 800a6f2:	1a8a      	subs	r2, r1, r2
        new_root->children[dir];
 800a6f4:	6979      	ldr	r1, [r7, #20]
 800a6f6:	0080      	lsls	r0, r0, #2
 800a6f8:	5841      	ldr	r1, [r0, r1]
      position->children[dir]->children[1 - dir] =
 800a6fa:	0092      	lsls	r2, r2, #2
 800a6fc:	50d1      	str	r1, [r2, r3]
      // Attach current left tree to new root
      new_root->children[dir] = position->children[dir];
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	1dfa      	adds	r2, r7, #7
 800a704:	7811      	ldrb	r1, [r2, #0]
 800a706:	1dfa      	adds	r2, r7, #7
 800a708:	7812      	ldrb	r2, [r2, #0]
 800a70a:	0089      	lsls	r1, r1, #2
 800a70c:	58c9      	ldr	r1, [r1, r3]
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	0092      	lsls	r2, r2, #2
 800a712:	50d1      	str	r1, [r2, r3]
      // Set weight factor for A based on F or G
      position->weight = third != uint_least8_t(kNeither) && third == dir ? 1 - dir : uint_least8_t(kNeither);
 800a714:	1dbb      	adds	r3, r7, #6
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d00b      	beq.n	800a734 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0xb4>
 800a71c:	1dba      	adds	r2, r7, #6
 800a71e:	1dfb      	adds	r3, r7, #7
 800a720:	7812      	ldrb	r2, [r2, #0]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	429a      	cmp	r2, r3
 800a726:	d105      	bne.n	800a734 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0xb4>
 800a728:	1dfb      	adds	r3, r7, #7
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2201      	movs	r2, #1
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	b2da      	uxtb	r2, r3
 800a732:	e000      	b.n	800a736 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0xb6>
 800a734:	2202      	movs	r2, #2
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	721a      	strb	r2, [r3, #8]

      // Move new root's right tree to current roots left tree
      position->children[dir] = new_root->children[1 - dir];
 800a73c:	1dfb      	adds	r3, r7, #7
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	2201      	movs	r2, #1
 800a742:	1ad0      	subs	r0, r2, r3
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	1dfa      	adds	r2, r7, #7
 800a74a:	7812      	ldrb	r2, [r2, #0]
 800a74c:	6979      	ldr	r1, [r7, #20]
 800a74e:	0080      	lsls	r0, r0, #2
 800a750:	5841      	ldr	r1, [r0, r1]
 800a752:	0092      	lsls	r2, r2, #2
 800a754:	50d1      	str	r1, [r2, r3]
      // Attach current root to new roots right tree
      new_root->children[1 - dir] = position;
 800a756:	1dfb      	adds	r3, r7, #7
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	2201      	movs	r2, #1
 800a75c:	1ad2      	subs	r2, r2, r3
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	6819      	ldr	r1, [r3, #0]
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	0092      	lsls	r2, r2, #2
 800a766:	50d1      	str	r1, [r2, r3]
      // Replace current position with new root
      position = new_root;
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	601a      	str	r2, [r3, #0]
      // Clear weight factor for new current position
      position->weight = uint_least8_t(kNeither);
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2202      	movs	r2, #2
 800a774:	721a      	strb	r2, [r3, #8]
    }
 800a776:	46c0      	nop			; (mov r8, r8)
 800a778:	46bd      	mov	sp, r7
 800a77a:	b006      	add	sp, #24
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>:

    //*************************************************************************
    /// Find the node whose key would go before all the other keys from the
    /// position provided
    //*************************************************************************
    Node* find_limit_node(Node* position, const int8_t dir) const
 800a77e:	b580      	push	{r7, lr}
 800a780:	b086      	sub	sp, #24
 800a782:	af00      	add	r7, sp, #0
 800a784:	60f8      	str	r0, [r7, #12]
 800a786:	60b9      	str	r1, [r7, #8]
 800a788:	1dfb      	adds	r3, r7, #7
 800a78a:	701a      	strb	r2, [r3, #0]
    {
      // Something at this position and in the direction specified? keep going
      Node* limit_node = position;
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	617b      	str	r3, [r7, #20]
      while (limit_node && limit_node->children[dir])
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00f      	beq.n	800a7b6 <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa+0x38>
 800a796:	1dfb      	adds	r3, r7, #7
 800a798:	2200      	movs	r2, #0
 800a79a:	569a      	ldrsb	r2, [r3, r2]
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	0092      	lsls	r2, r2, #2
 800a7a0:	58d3      	ldr	r3, [r2, r3]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d007      	beq.n	800a7b6 <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa+0x38>
      {
        limit_node = limit_node->children[dir];
 800a7a6:	1dfb      	adds	r3, r7, #7
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	569a      	ldrsb	r2, [r3, r2]
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	0092      	lsls	r2, r2, #2
 800a7b0:	58d3      	ldr	r3, [r2, r3]
 800a7b2:	617b      	str	r3, [r7, #20]
      while (limit_node && limit_node->children[dir])
 800a7b4:	e7ec      	b.n	800a790 <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa+0x12>
      }

      // Return the limit node position found
      return limit_node;
 800a7b6:	697b      	ldr	r3, [r7, #20]
    }
 800a7b8:	0018      	movs	r0, r3
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	b006      	add	sp, #24
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>:
    }

    //*************************************************************************
    /// Attach the provided node to the position provided
    //*************************************************************************
    void attach_node(Node*& position, Node& node)
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
    {
      // Mark new node as leaf on attach to tree at position provided
      node.mark_as_leaf();
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	0018      	movs	r0, r3
 800a7d0:	f7ff fe79 	bl	800a4c6 <_ZN3etl8map_base4Node12mark_as_leafEv>

      // Add the node here
      position = &node;
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	601a      	str	r2, [r3, #0]

      // One more.
      ++current_size;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	1c5a      	adds	r2, r3, #1
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	601a      	str	r2, [r3, #0]
    }
 800a7e4:	46c0      	nop			; (mov r8, r8)
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	b004      	add	sp, #16
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>:

    //*************************************************************************
    /// Detach the node at the position provided
    //*************************************************************************
    void detach_node(Node*& position, Node*& replacement)
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
    {
      // Make temporary copy of actual nodes involved because we might lose
      // their references in the process (e.g. position is the same as
      // replacement or replacement is a child of position)
      Node* detached = position;
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	617b      	str	r3, [r7, #20]
      Node* swap = replacement;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	613b      	str	r3, [r7, #16]

      // Update current position to point to swap (replacement) node first
      position = swap;
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	693a      	ldr	r2, [r7, #16]
 800a808:	601a      	str	r2, [r3, #0]

      // Update replacement node to point to child in opposite direction
      // otherwise we might lose the other child of the swap node
      replacement = swap->children[1 - swap->dir];
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	7a5b      	ldrb	r3, [r3, #9]
 800a80e:	001a      	movs	r2, r3
 800a810:	2301      	movs	r3, #1
 800a812:	1a9a      	subs	r2, r3, r2
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	0092      	lsls	r2, r2, #2
 800a818:	58d2      	ldr	r2, [r2, r3]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	601a      	str	r2, [r3, #0]

      // Point swap node to detached node's children and weight
      swap->children[kLeft] = detached->children[kLeft];
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	601a      	str	r2, [r3, #0]
      swap->children[kRight] = detached->children[kRight];
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	685a      	ldr	r2, [r3, #4]
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	605a      	str	r2, [r3, #4]
      swap->weight = detached->weight;
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	7a1a      	ldrb	r2, [r3, #8]
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	721a      	strb	r2, [r3, #8]
    }
 800a836:	46c0      	nop			; (mov r8, r8)
 800a838:	46bd      	mov	sp, r7
 800a83a:	b006      	add	sp, #24
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a83e:	b580      	push	{r7, lr}
 800a840:	b082      	sub	sp, #8
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	0018      	movs	r0, r3
 800a84a:	46bd      	mov	sp, r7
 800a84c:	b002      	add	sp, #8
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <_ZNK3etl4lessItEclERKtS3_>:
  template <typename T = void>
  struct less : public etl::binary_function<T, T, bool>
  {
    typedef T value_type;

    ETL_CONSTEXPR bool operator()(const T &lhs, const T &rhs) const
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
    {
      return (lhs < rhs);
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	881a      	ldrh	r2, [r3, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	881b      	ldrh	r3, [r3, #0]
 800a864:	429a      	cmp	r2, r3
 800a866:	419b      	sbcs	r3, r3
 800a868:	425b      	negs	r3, r3
 800a86a:	b2db      	uxtb	r3, r3
    }
 800a86c:	0018      	movs	r0, r3
 800a86e:	46bd      	mov	sp, r7
 800a870:	b004      	add	sp, #16
 800a872:	bd80      	pop	{r7, pc}

0800a874 <_ZN11SolarGators7Drivers7ADCS747C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
#include <ADCS747.hpp>

namespace SolarGators {
namespace Drivers {

ADCS747::ADCS747(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_port, uint16_t cs_pin):
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
 800a880:	001a      	movs	r2, r3
 800a882:	1cbb      	adds	r3, r7, #2
 800a884:	801a      	strh	r2, [r3, #0]
    hspi_(hspi), cs_port_(cs_port), cs_pin_(cs_pin)
 800a886:	4a0b      	ldr	r2, [pc, #44]	; (800a8b4 <_ZN11SolarGators7Drivers7ADCS747C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft+0x40>)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	601a      	str	r2, [r3, #0]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2280      	movs	r2, #128	; 0x80
 800a890:	0052      	lsls	r2, r2, #1
 800a892:	809a      	strh	r2, [r3, #4]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	609a      	str	r2, [r3, #8]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	60da      	str	r2, [r3, #12]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	1cba      	adds	r2, r7, #2
 800a8a4:	8812      	ldrh	r2, [r2, #0]
 800a8a6:	821a      	strh	r2, [r3, #16]
{

}
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	0018      	movs	r0, r3
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	b004      	add	sp, #16
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	46c0      	nop			; (mov r8, r8)
 800a8b4:	08013358 	.word	0x08013358

0800a8b8 <_ZN11SolarGators7Drivers7ADCS747D1Ev>:

ADCS747::~ADCS747() {
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	4a03      	ldr	r2, [pc, #12]	; (800a8d0 <_ZN11SolarGators7Drivers7ADCS747D1Ev+0x18>)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	601a      	str	r2, [r3, #0]
  // TODO Auto-generated destructor stub
}
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	0018      	movs	r0, r3
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	b002      	add	sp, #8
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	08013358 	.word	0x08013358

0800a8d4 <_ZN11SolarGators7Drivers7ADCS747D0Ev>:
ADCS747::~ADCS747() {
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
}
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	0018      	movs	r0, r3
 800a8e0:	f7ff ffea 	bl	800a8b8 <_ZN11SolarGators7Drivers7ADCS747D1Ev>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2114      	movs	r1, #20
 800a8e8:	0018      	movs	r0, r3
 800a8ea:	f006 ffcf 	bl	801188c <_ZdlPvj>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	0018      	movs	r0, r3
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	b002      	add	sp, #8
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <_ZN11SolarGators7Drivers7ADCS7474InitEv>:

void ADCS747::Init()
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  // Just need 16 clock cycles result of this is invalid
  GetVoltage();
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	0018      	movs	r0, r3
 800a904:	f000 f825 	bl	800a952 <_ZN11SolarGators7Drivers7ADCS74710GetVoltageEv>
}
 800a908:	46c0      	nop			; (mov r8, r8)
 800a90a:	46bd      	mov	sp, r7
 800a90c:	b002      	add	sp, #8
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <_ZN11SolarGators7Drivers7ADCS7474ReadEPh>:

void ADCS747::Read(uint8_t* buff)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(cs_port_, cs_pin_, GPIO_PIN_RESET);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	68d8      	ldr	r0, [r3, #12]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	8a1b      	ldrh	r3, [r3, #16]
 800a922:	2200      	movs	r2, #0
 800a924:	0019      	movs	r1, r3
 800a926:	f7f8 ff99 	bl	800385c <HAL_GPIO_WritePin>
  HAL_SPI_Receive(hspi_, buff, 2, HAL_MAX_DELAY);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6898      	ldr	r0, [r3, #8]
 800a92e:	2301      	movs	r3, #1
 800a930:	425b      	negs	r3, r3
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	2202      	movs	r2, #2
 800a936:	f7fc fb53 	bl	8006fe0 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(cs_port_, cs_pin_, GPIO_PIN_SET);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	68d8      	ldr	r0, [r3, #12]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	8a1b      	ldrh	r3, [r3, #16]
 800a942:	2201      	movs	r2, #1
 800a944:	0019      	movs	r1, r3
 800a946:	f7f8 ff89 	bl	800385c <HAL_GPIO_WritePin>
}
 800a94a:	46c0      	nop			; (mov r8, r8)
 800a94c:	46bd      	mov	sp, r7
 800a94e:	b002      	add	sp, #8
 800a950:	bd80      	pop	{r7, pc}

0800a952 <_ZN11SolarGators7Drivers7ADCS74710GetVoltageEv>:

uint8_t ADCS747::GetVoltage()
{
 800a952:	b590      	push	{r4, r7, lr}
 800a954:	b085      	sub	sp, #20
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
  uint8_t buff[2];
  Read(buff);
 800a95a:	240c      	movs	r4, #12
 800a95c:	193a      	adds	r2, r7, r4
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	0011      	movs	r1, r2
 800a962:	0018      	movs	r0, r3
 800a964:	f7ff ffd4 	bl	800a910 <_ZN11SolarGators7Drivers7ADCS7474ReadEPh>
  uint16_t temp = static_cast<uint16_t>(buff[0]) << 8 | buff[1];
 800a968:	0021      	movs	r1, r4
 800a96a:	187b      	adds	r3, r7, r1
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	021b      	lsls	r3, r3, #8
 800a970:	b21a      	sxth	r2, r3
 800a972:	187b      	adds	r3, r7, r1
 800a974:	785b      	ldrb	r3, [r3, #1]
 800a976:	b21b      	sxth	r3, r3
 800a978:	4313      	orrs	r3, r2
 800a97a:	b21a      	sxth	r2, r3
 800a97c:	210e      	movs	r1, #14
 800a97e:	187b      	adds	r3, r7, r1
 800a980:	801a      	strh	r2, [r3, #0]
  temp = temp >> 4;
 800a982:	187b      	adds	r3, r7, r1
 800a984:	881b      	ldrh	r3, [r3, #0]
 800a986:	111a      	asrs	r2, r3, #4
 800a988:	187b      	adds	r3, r7, r1
 800a98a:	801a      	strh	r2, [r3, #0]
  return static_cast<uint8_t>(temp);
 800a98c:	187b      	adds	r3, r7, r1
 800a98e:	881b      	ldrh	r3, [r3, #0]
 800a990:	b2db      	uxtb	r3, r3
}
 800a992:	0018      	movs	r0, r3
 800a994:	46bd      	mov	sp, r7
 800a996:	b005      	add	sp, #20
 800a998:	bd90      	pop	{r4, r7, pc}
	...

0800a99c <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm>:
#include <CAN.hpp>

namespace SolarGators {
namespace Drivers {

CANDriver::CANDriver(CAN_HandleTypeDef* hcan, uint32_t rx_fifo_num_):hcan_(hcan),rx_fifo_num_(rx_fifo_num_)
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
 800a9a8:	4a20      	ldr	r2, [pc, #128]	; (800aa2c <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm+0x90>)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	601a      	str	r2, [r3, #0]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	0018      	movs	r0, r3
 800a9b4:	f000 f9da 	bl	800ad6c <_ZN3etl3mapItPN11SolarGators11DataModules10DataModuleELj5ENS_4lessItEEEC1Ev>
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2194      	movs	r1, #148	; 0x94
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	505a      	str	r2, [r3, r1]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2198      	movs	r1, #152	; 0x98
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	505a      	str	r2, [r3, r1]
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	23c0      	movs	r3, #192	; 0xc0
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	18d3      	adds	r3, r2, r3
 800a9d0:	2224      	movs	r2, #36	; 0x24
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	0018      	movs	r0, r3
 800a9d6:	f006 ffef 	bl	80119b8 <memset>
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	23c0      	movs	r3, #192	; 0xc0
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4913      	ldr	r1, [pc, #76]	; (800aa30 <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm+0x94>)
 800a9e2:	50d1      	str	r1, [r2, r3]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	22a9      	movs	r2, #169	; 0xa9
 800a9e8:	0092      	lsls	r2, r2, #2
 800a9ea:	1899      	adds	r1, r3, r2
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	23c2      	movs	r3, #194	; 0xc2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	50d1      	str	r1, [r2, r3]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	23c3      	movs	r3, #195	; 0xc3
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	215c      	movs	r1, #92	; 0x5c
 800a9fc:	50d1      	str	r1, [r2, r3]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	33a4      	adds	r3, #164	; 0xa4
 800aa02:	0019      	movs	r1, r3
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	23c4      	movs	r3, #196	; 0xc4
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	50d1      	str	r1, [r2, r3]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	23c5      	movs	r3, #197	; 0xc5
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	2180      	movs	r1, #128	; 0x80
 800aa14:	0089      	lsls	r1, r1, #2
 800aa16:	50d1      	str	r1, [r2, r3]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	23c6      	movs	r3, #198	; 0xc6
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	2130      	movs	r1, #48	; 0x30
 800aa20:	50d1      	str	r1, [r2, r3]
{

}
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	0018      	movs	r0, r3
 800aa26:	46bd      	mov	sp, r7
 800aa28:	b004      	add	sp, #16
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	08013368 	.word	0x08013368
 800aa30:	08012ed4 	.word	0x08012ed4

0800aa34 <_ZN11SolarGators7Drivers9CANDriver4InitEv>:

void CANDriver::Init()
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08c      	sub	sp, #48	; 0x30
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  // Configure Filter
  //Initialize a hardware filter that passes everything
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; /*Enable the filter*/
 800aa3c:	2108      	movs	r1, #8
 800aa3e:	187b      	adds	r3, r7, r1
 800aa40:	2201      	movs	r2, #1
 800aa42:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;   /*Mask mode*/
 800aa44:	187b      	adds	r3, r7, r1
 800aa46:	2200      	movs	r2, #0
 800aa48:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterMaskIdHigh = 0;
 800aa4a:	187b      	adds	r3, r7, r1
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;                  /*Accept everything*/
 800aa50:	187b      	adds	r3, r7, r1
 800aa52:	2200      	movs	r2, #0
 800aa54:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;  /*One 32-bit filter*/
 800aa56:	187b      	adds	r3, r7, r1
 800aa58:	2201      	movs	r2, #1
 800aa5a:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterBank = 0;                       /*Init bank 0*/
 800aa5c:	187b      	adds	r3, r7, r1
 800aa5e:	2200      	movs	r2, #0
 800aa60:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = 0;             /*Assign to FIFO 0*/
 800aa62:	187b      	adds	r3, r7, r1
 800aa64:	2200      	movs	r2, #0
 800aa66:	611a      	str	r2, [r3, #16]
  HAL_CAN_ConfigFilter(hcan_, &sFilterConfig);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2294      	movs	r2, #148	; 0x94
 800aa6c:	589b      	ldr	r3, [r3, r2]
 800aa6e:	187a      	adds	r2, r7, r1
 800aa70:	0011      	movs	r1, r2
 800aa72:	0018      	movs	r0, r3
 800aa74:	f7f7 fdf6 	bl	8002664 <HAL_CAN_ConfigFilter>

  can_rx_event_ = osEventFlagsNew(NULL);
 800aa78:	2000      	movs	r0, #0
 800aa7a:	f003 f8f5 	bl	800dc68 <osEventFlagsNew>
 800aa7e:	0002      	movs	r2, r0
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	219c      	movs	r1, #156	; 0x9c
 800aa84:	505a      	str	r2, [r3, r1]
  if (can_rx_event_ == NULL)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	229c      	movs	r2, #156	; 0x9c
 800aa8a:	589b      	ldr	r3, [r3, r2]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d101      	bne.n	800aa94 <_ZN11SolarGators7Drivers9CANDriver4InitEv+0x60>
  {
      Error_Handler();
 800aa90:	f7f6 f8e8 	bl	8000c64 <Error_Handler>
  }

  rx_task_handle_ = osThreadNew((osThreadFunc_t)&CANDriver::HandleReceive, this, &rx_task_attributes_);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	22c0      	movs	r2, #192	; 0xc0
 800aa98:	0092      	lsls	r2, r2, #2
 800aa9a:	189a      	adds	r2, r3, r2
 800aa9c:	6879      	ldr	r1, [r7, #4]
 800aa9e:	4b10      	ldr	r3, [pc, #64]	; (800aae0 <_ZN11SolarGators7Drivers9CANDriver4InitEv+0xac>)
 800aaa0:	0018      	movs	r0, r3
 800aaa2:	f002 ff37 	bl	800d914 <osThreadNew>
 800aaa6:	0002      	movs	r2, r0
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	21a0      	movs	r1, #160	; 0xa0
 800aaac:	505a      	str	r2, [r3, r1]
  if (rx_task_handle_ == NULL)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	22a0      	movs	r2, #160	; 0xa0
 800aab2:	589b      	ldr	r3, [r3, r2]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <_ZN11SolarGators7Drivers9CANDriver4InitEv+0x88>
  {
      Error_Handler();
 800aab8:	f7f6 f8d4 	bl	8000c64 <Error_Handler>
  }
  HAL_CAN_ActivateNotification(hcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2294      	movs	r2, #148	; 0x94
 800aac0:	589b      	ldr	r3, [r3, r2]
 800aac2:	2102      	movs	r1, #2
 800aac4:	0018      	movs	r0, r3
 800aac6:	f7f8 f962 	bl	8002d8e <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(hcan_);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2294      	movs	r2, #148	; 0x94
 800aace:	589b      	ldr	r3, [r3, r2]
 800aad0:	0018      	movs	r0, r3
 800aad2:	f7f7 feb9 	bl	8002848 <HAL_CAN_Start>
}
 800aad6:	46c0      	nop			; (mov r8, r8)
 800aad8:	46bd      	mov	sp, r7
 800aada:	b00c      	add	sp, #48	; 0x30
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	46c0      	nop			; (mov r8, r8)
 800aae0:	0800ab35 	.word	0x0800ab35

0800aae4 <_ZN11SolarGators7Drivers9CANDriverD1Ev>:

CANDriver::~CANDriver()
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	4a06      	ldr	r2, [pc, #24]	; (800ab08 <_ZN11SolarGators7Drivers9CANDriverD1Ev+0x24>)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	601a      	str	r2, [r3, #0]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	0018      	movs	r0, r3
 800aaf8:	f000 f951 	bl	800ad9e <_ZN3etl3mapItPN11SolarGators11DataModules10DataModuleELj5ENS_4lessItEEED1Ev>
{ }
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	0018      	movs	r0, r3
 800ab00:	46bd      	mov	sp, r7
 800ab02:	b002      	add	sp, #8
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	46c0      	nop			; (mov r8, r8)
 800ab08:	08013368 	.word	0x08013368

0800ab0c <_ZN11SolarGators7Drivers9CANDriverD0Ev>:
CANDriver::~CANDriver()
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
{ }
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	0018      	movs	r0, r3
 800ab18:	f7ff ffe4 	bl	800aae4 <_ZN11SolarGators7Drivers9CANDriverD1Ev>
 800ab1c:	23c9      	movs	r3, #201	; 0xc9
 800ab1e:	009a      	lsls	r2, r3, #2
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	0011      	movs	r1, r2
 800ab24:	0018      	movs	r0, r3
 800ab26:	f006 feb1 	bl	801188c <_ZdlPvj>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	0018      	movs	r0, r3
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	b002      	add	sp, #8
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv>:

void CANDriver::HandleReceive()
{
 800ab34:	b590      	push	{r4, r7, lr}
 800ab36:	b093      	sub	sp, #76	; 0x4c
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  while(1)
  {
    osEventFlagsWait(can_rx_event_, 0x1, osFlagsWaitAny, osWaitForever);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	229c      	movs	r2, #156	; 0x9c
 800ab40:	5898      	ldr	r0, [r3, r2]
 800ab42:	2301      	movs	r3, #1
 800ab44:	425b      	negs	r3, r3
 800ab46:	2200      	movs	r2, #0
 800ab48:	2101      	movs	r1, #1
 800ab4a:	f003 f929 	bl	800dda0 <osEventFlagsWait>
    CAN_RxHeaderTypeDef pHeader;
    uint8_t aData[MAX_DATA_SIZE];

    while(HAL_CAN_GetRxFifoFillLevel(hcan_, rx_fifo_num_))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2294      	movs	r2, #148	; 0x94
 800ab52:	589a      	ldr	r2, [r3, r2]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2198      	movs	r1, #152	; 0x98
 800ab58:	585b      	ldr	r3, [r3, r1]
 800ab5a:	0019      	movs	r1, r3
 800ab5c:	0010      	movs	r0, r2
 800ab5e:	f7f8 f8eb 	bl	8002d38 <HAL_CAN_GetRxFifoFillLevel>
 800ab62:	0003      	movs	r3, r0
 800ab64:	1e5a      	subs	r2, r3, #1
 800ab66:	4193      	sbcs	r3, r2
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d048      	beq.n	800ac00 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0xcc>
    {
      HAL_CAN_GetRxMessage(hcan_, rx_fifo_num_, &pHeader, aData);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2294      	movs	r2, #148	; 0x94
 800ab72:	5898      	ldr	r0, [r3, r2]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2298      	movs	r2, #152	; 0x98
 800ab78:	5899      	ldr	r1, [r3, r2]
 800ab7a:	230c      	movs	r3, #12
 800ab7c:	18fb      	adds	r3, r7, r3
 800ab7e:	241c      	movs	r4, #28
 800ab80:	193a      	adds	r2, r7, r4
 800ab82:	f7f7 ffbd 	bl	8002b00 <HAL_CAN_GetRxMessage>
      DataModules::DataModule* rx_module = (*modules_.find(pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId)).second;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	1d19      	adds	r1, r3, #4
 800ab8a:	0022      	movs	r2, r4
 800ab8c:	18bb      	adds	r3, r7, r2
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d103      	bne.n	800ab9c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x68>
 800ab94:	18bb      	adds	r3, r7, r2
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	e003      	b.n	800aba4 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x70>
 800ab9c:	231c      	movs	r3, #28
 800ab9e:	18fb      	adds	r3, r7, r3
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	2042      	movs	r0, #66	; 0x42
 800aba6:	183a      	adds	r2, r7, r0
 800aba8:	8013      	strh	r3, [r2, #0]
 800abaa:	2438      	movs	r4, #56	; 0x38
 800abac:	193b      	adds	r3, r7, r4
 800abae:	183a      	adds	r2, r7, r0
 800abb0:	0018      	movs	r0, r3
 800abb2:	f000 f90a 	bl	800adca <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE4findERKt>
 800abb6:	193b      	adds	r3, r7, r4
 800abb8:	0018      	movs	r0, r3
 800abba:	f000 f926 	bl	800ae0a <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratordeEv>
 800abbe:	0003      	movs	r3, r0
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	647b      	str	r3, [r7, #68]	; 0x44
 800abc4:	193b      	adds	r3, r7, r4
 800abc6:	0018      	movs	r0, r3
 800abc8:	f000 f916 	bl	800adf8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
      if(rx_module != nullptr)
 800abcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d0bd      	beq.n	800ab4e <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x1a>
      {
        osMutexAcquire(rx_module->mutex_id_, osWaitForever);
 800abd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	2201      	movs	r2, #1
 800abd8:	4252      	negs	r2, r2
 800abda:	0011      	movs	r1, r2
 800abdc:	0018      	movs	r0, r3
 800abde:	f003 f9e7 	bl	800dfb0 <osMutexAcquire>
        rx_module->FromByteArray(aData);
 800abe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	330c      	adds	r3, #12
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	220c      	movs	r2, #12
 800abec:	18b9      	adds	r1, r7, r2
 800abee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abf0:	0010      	movs	r0, r2
 800abf2:	4798      	blx	r3
        osMutexRelease(rx_module->mutex_id_);
 800abf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abf6:	695b      	ldr	r3, [r3, #20]
 800abf8:	0018      	movs	r0, r3
 800abfa:	f003 fa35 	bl	800e068 <osMutexRelease>
    while(HAL_CAN_GetRxFifoFillLevel(hcan_, rx_fifo_num_))
 800abfe:	e7a6      	b.n	800ab4e <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x1a>
      }
    }
    HAL_CAN_ActivateNotification(hcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2294      	movs	r2, #148	; 0x94
 800ac04:	589b      	ldr	r3, [r3, r2]
 800ac06:	2102      	movs	r1, #2
 800ac08:	0018      	movs	r0, r3
 800ac0a:	f7f8 f8c0 	bl	8002d8e <HAL_CAN_ActivateNotification>
  }
 800ac0e:	e795      	b.n	800ab3c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

0800ac10 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE>:
}

void CANDriver::Send(SolarGators::DataModules::DataModule* data)
{
 800ac10:	b590      	push	{r4, r7, lr}
 800ac12:	b08f      	sub	sp, #60	; 0x3c
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  //Spinlock until a tx mailbox is empty
  while(!HAL_CAN_GetTxMailboxesFreeLevel(hcan_));
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2294      	movs	r2, #148	; 0x94
 800ac1e:	589b      	ldr	r3, [r3, r2]
 800ac20:	0018      	movs	r0, r3
 800ac22:	f7f7 ff35 	bl	8002a90 <HAL_CAN_GetTxMailboxesFreeLevel>
 800ac26:	0003      	movs	r3, r0
 800ac28:	425a      	negs	r2, r3
 800ac2a:	4153      	adcs	r3, r2
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d000      	beq.n	800ac34 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x24>
 800ac32:	e7f2      	b.n	800ac1a <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0xa>

  //Initialize Header
  uint32_t pTxMailbox;
  CAN_TxHeaderTypeDef pHeader;
  pHeader.RTR = CAN_RTR_DATA;
 800ac34:	211c      	movs	r1, #28
 800ac36:	187b      	adds	r3, r7, r1
 800ac38:	2200      	movs	r2, #0
 800ac3a:	60da      	str	r2, [r3, #12]
  pHeader.DLC = data->size_;
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	68da      	ldr	r2, [r3, #12]
 800ac40:	187b      	adds	r3, r7, r1
 800ac42:	611a      	str	r2, [r3, #16]
  if(data->is_ext_id_)
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	7c9b      	ldrb	r3, [r3, #18]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d007      	beq.n	800ac5c <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x4c>
  {
    pHeader.ExtId = data->can_id_;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	187b      	adds	r3, r7, r1
 800ac52:	605a      	str	r2, [r3, #4]
    pHeader.IDE = CAN_ID_EXT;
 800ac54:	187b      	adds	r3, r7, r1
 800ac56:	2204      	movs	r2, #4
 800ac58:	609a      	str	r2, [r3, #8]
 800ac5a:	e007      	b.n	800ac6c <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x5c>
  }
  else
  {
    pHeader.StdId = data->can_id_;
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	685a      	ldr	r2, [r3, #4]
 800ac60:	211c      	movs	r1, #28
 800ac62:	187b      	adds	r3, r7, r1
 800ac64:	601a      	str	r2, [r3, #0]
    pHeader.IDE = CAN_ID_STD;
 800ac66:	187b      	adds	r3, r7, r1
 800ac68:	2200      	movs	r2, #0
 800ac6a:	609a      	str	r2, [r3, #8]
  }
  //Put CAN message in tx mailbox
  uint8_t aData[MAX_DATA_SIZE];
  osMutexAcquire(data->mutex_id_, osWaitForever);
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	695b      	ldr	r3, [r3, #20]
 800ac70:	2201      	movs	r2, #1
 800ac72:	4252      	negs	r2, r2
 800ac74:	0011      	movs	r1, r2
 800ac76:	0018      	movs	r0, r3
 800ac78:	f003 f99a 	bl	800dfb0 <osMutexAcquire>
  data->ToByteArray(aData);
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3308      	adds	r3, #8
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	240c      	movs	r4, #12
 800ac86:	1939      	adds	r1, r7, r4
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	0010      	movs	r0, r2
 800ac8c:	4798      	blx	r3
  osMutexRelease(data->mutex_id_);
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	695b      	ldr	r3, [r3, #20]
 800ac92:	0018      	movs	r0, r3
 800ac94:	f003 f9e8 	bl	800e068 <osMutexRelease>
  HAL_CAN_AddTxMessage(hcan_, &pHeader, aData, &pTxMailbox);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2294      	movs	r2, #148	; 0x94
 800ac9c:	5898      	ldr	r0, [r3, r2]
 800ac9e:	2334      	movs	r3, #52	; 0x34
 800aca0:	18fb      	adds	r3, r7, r3
 800aca2:	193a      	adds	r2, r7, r4
 800aca4:	211c      	movs	r1, #28
 800aca6:	1879      	adds	r1, r7, r1
 800aca8:	f7f7 fe14 	bl	80028d4 <HAL_CAN_AddTxMessage>
}
 800acac:	46c0      	nop			; (mov r8, r8)
 800acae:	46bd      	mov	sp, r7
 800acb0:	b00f      	add	sp, #60	; 0x3c
 800acb2:	bd90      	pop	{r4, r7, pc}

0800acb4 <_ZNSt4pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEbED1Ev>:
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<typename _T1, typename _T2>
    struct pair
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	0018      	movs	r0, r3
 800acc0:	f000 f89a 	bl	800adf8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	0018      	movs	r0, r3
 800acc8:	46bd      	mov	sp, r7
 800acca:	b002      	add	sp, #8
 800accc:	bd80      	pop	{r7, pc}

0800acce <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>:

bool CANDriver::AddRxModule(DataModules::DataModule* module)
{
 800acce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acd0:	b08b      	sub	sp, #44	; 0x2c
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	6039      	str	r1, [r7, #0]
  modules_.insert(etl::make_pair(module->can_id_, module));
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	1d1c      	adds	r4, r3, #4
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	1d19      	adds	r1, r3, #4
 800ace0:	2520      	movs	r5, #32
 800ace2:	197b      	adds	r3, r7, r5
 800ace4:	003a      	movs	r2, r7
 800ace6:	0018      	movs	r0, r3
 800ace8:	f000 f89e 	bl	800ae28 <_ZN3etl9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEEENS_4pairIT_T0_EEOS9_OSA_>
 800acec:	2618      	movs	r6, #24
 800acee:	19bb      	adds	r3, r7, r6
 800acf0:	197a      	adds	r2, r7, r5
 800acf2:	0011      	movs	r1, r2
 800acf4:	0018      	movs	r0, r3
 800acf6:	f000 f8b7 	bl	800ae68 <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEcvSt4pairIT_T0_EIKtS6_EEv>
 800acfa:	250c      	movs	r5, #12
 800acfc:	197b      	adds	r3, r7, r5
 800acfe:	19ba      	adds	r2, r7, r6
 800ad00:	0021      	movs	r1, r4
 800ad02:	0018      	movs	r0, r3
 800ad04:	f000 f8c8 	bl	800ae98 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E>
 800ad08:	197b      	adds	r3, r7, r5
 800ad0a:	0018      	movs	r0, r3
 800ad0c:	f7ff ffd2 	bl	800acb4 <_ZNSt4pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEbED1Ev>
  // TODO: Check if successful insertion
  return true;
 800ad10:	2301      	movs	r3, #1
}
 800ad12:	0018      	movs	r0, r3
 800ad14:	46bd      	mov	sp, r7
 800ad16:	b00b      	add	sp, #44	; 0x2c
 800ad18:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad1a <_ZN11SolarGators7Drivers9CANDriver9SetRxFlagEv>:
  // TODO: Implement (Remove needs to be added to tree container)
  return false;
}

void CANDriver::SetRxFlag()
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b082      	sub	sp, #8
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
  osEventFlagsSet(can_rx_event_, 0x1);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	229c      	movs	r2, #156	; 0x9c
 800ad26:	589b      	ldr	r3, [r3, r2]
 800ad28:	2101      	movs	r1, #1
 800ad2a:	0018      	movs	r0, r3
 800ad2c:	f002 ffea 	bl	800dd04 <osEventFlagsSet>
}
 800ad30:	46c0      	nop			; (mov r8, r8)
 800ad32:	46bd      	mov	sp, r7
 800ad34:	b002      	add	sp, #8
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <_ZN3etl12generic_poolILj20ELj4ELj5EED1Ev>:
  //*************************************************************************
  /// A templated abstract pool implementation that uses a fixed size pool.
  ///\ingroup pool
  //*************************************************************************
  template <const size_t VTypeSize, const size_t VAlignment, const size_t VSize>
  class generic_pool : public etl::ipool
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	0018      	movs	r0, r3
 800ad44:	f7ff fba6 	bl	800a494 <_ZN3etl5ipoolD1Ev>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	0018      	movs	r0, r3
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	b002      	add	sp, #8
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <_ZN3etl4poolINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeELj5EED1Ev>:
  //*************************************************************************
  /// A templated pool implementation that uses a fixed size pool.
  ///\ingroup pool
  //*************************************************************************
  template <typename T, const size_t VSize>
  class pool : public etl::generic_pool<sizeof(T), etl::alignment_of<T>::value, VSize>
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	0018      	movs	r0, r3
 800ad5e:	f7ff ffeb 	bl	800ad38 <_ZN3etl12generic_poolILj20ELj4ELj5EED1Ev>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	0018      	movs	r0, r3
 800ad66:	46bd      	mov	sp, r7
 800ad68:	b002      	add	sp, #8
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <_ZN3etl3mapItPN11SolarGators11DataModules10DataModuleELj5ENS_4lessItEEEC1Ev>:
    static ETL_CONSTANT size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Default constructor.
    //*************************************************************************
    map()
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
      : etl::imap<TKey, TValue, TCompare>(node_pool, MAX_SIZE)
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	3314      	adds	r3, #20
 800ad7a:	2205      	movs	r2, #5
 800ad7c:	0019      	movs	r1, r3
 800ad7e:	f000 f8e5 	bl	800af4c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEEC1ERNS_5ipoolEj>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	3314      	adds	r3, #20
 800ad86:	0018      	movs	r0, r3
 800ad88:	f000 f901 	bl	800af8e <_ZN3etl4poolINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeELj5EEC1Ev>
    {
      this->initialise();
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	0018      	movs	r0, r3
 800ad90:	f000 f90a 	bl	800afa8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE10initialiseEv>
    }
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	0018      	movs	r0, r3
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	b002      	add	sp, #8
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <_ZN3etl3mapItPN11SolarGators11DataModules10DataModuleELj5ENS_4lessItEEED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~map()
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b082      	sub	sp, #8
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
    {
      this->initialise();
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	0018      	movs	r0, r3
 800adaa:	f000 f8fd 	bl	800afa8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE10initialiseEv>
    }
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	3314      	adds	r3, #20
 800adb2:	0018      	movs	r0, r3
 800adb4:	f7ff ffcd 	bl	800ad52 <_ZN3etl4poolINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeELj5EED1Ev>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	0018      	movs	r0, r3
 800adbc:	f000 f8da 	bl	800af74 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEED1Ev>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	0018      	movs	r0, r3
 800adc4:	46bd      	mov	sp, r7
 800adc6:	b002      	add	sp, #8
 800adc8:	bd80      	pop	{r7, pc}

0800adca <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE4findERKt>:
    iterator find(key_parameter_t key)
 800adca:	b580      	push	{r7, lr}
 800adcc:	b084      	sub	sp, #16
 800adce:	af00      	add	r7, sp, #0
 800add0:	60f8      	str	r0, [r7, #12]
 800add2:	60b9      	str	r1, [r7, #8]
 800add4:	607a      	str	r2, [r7, #4]
      return iterator(*this, find_node(root_node, key));
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	6899      	ldr	r1, [r3, #8]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	0018      	movs	r0, r3
 800ade0:	f000 f94d 	bl	800b07e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt>
 800ade4:	0002      	movs	r2, r0
 800ade6:	68b9      	ldr	r1, [r7, #8]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	0018      	movs	r0, r3
 800adec:	f000 f976 	bl	800b0dc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_PNS_8map_base4NodeE>
    }
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	46bd      	mov	sp, r7
 800adf4:	b004      	add	sp, #16
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>:
      ~iterator()
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
      }
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	0018      	movs	r0, r3
 800ae04:	46bd      	mov	sp, r7
 800ae06:	b002      	add	sp, #8
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratordeEv>:
      reference operator *() const
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b082      	sub	sp, #8
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
        return imap::data_cast(p_node)->value;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	0018      	movs	r0, r3
 800ae18:	f000 f983 	bl	800b122 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castEPNS_8map_base4NodeE>
 800ae1c:	0003      	movs	r3, r0
 800ae1e:	330c      	adds	r3, #12
      }
 800ae20:	0018      	movs	r0, r3
 800ae22:	46bd      	mov	sp, r7
 800ae24:	b002      	add	sp, #8
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <_ZN3etl9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEEENS_4pairIT_T0_EEOS9_OSA_>:
  };

  //******************************************************************************
#if ETL_CPP11_SUPPORTED
  template <typename T1, typename T2>
  inline pair<T1, T2> make_pair(T1&& a, T2&& b)
 800ae28:	b5b0      	push	{r4, r5, r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
  {
    return pair<T1, T2>(etl::forward<T1>(a), etl::forward<T2>(b));
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	0018      	movs	r0, r3
 800ae38:	f000 f97c 	bl	800b134 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 800ae3c:	0004      	movs	r4, r0
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	0018      	movs	r0, r3
 800ae42:	f000 f980 	bl	800b146 <_ZN3etl7forwardIRPN11SolarGators11DataModules10DataModuleEEEOT_RNS_16remove_referenceIS6_E4typeE>
 800ae46:	0002      	movs	r2, r0
 800ae48:	2510      	movs	r5, #16
 800ae4a:	197b      	adds	r3, r7, r5
 800ae4c:	0021      	movs	r1, r4
 800ae4e:	0018      	movs	r0, r3
 800ae50:	f000 f982 	bl	800b158 <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1ES2_S7_>
 800ae54:	197a      	adds	r2, r7, r5
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	0011      	movs	r1, r2
 800ae5a:	0018      	movs	r0, r3
 800ae5c:	f000 f98d 	bl	800b17a <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1IS2_S7_EEONS0_IT_T0_EE>
  }
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	46bd      	mov	sp, r7
 800ae64:	b006      	add	sp, #24
 800ae66:	bdb0      	pop	{r4, r5, r7, pc}

0800ae68 <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEcvSt4pairIT_T0_EIKtS6_EEv>:
    operator std::pair<U1, U2>()
 800ae68:	b590      	push	{r4, r7, lr}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
      return std::make_pair(first, second);
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	6819      	ldr	r1, [r3, #0]
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	685a      	ldr	r2, [r3, #4]
 800ae7a:	2408      	movs	r4, #8
 800ae7c:	193b      	adds	r3, r7, r4
 800ae7e:	0018      	movs	r0, r3
 800ae80:	f000 f995 	bl	800b1ae <_ZSt9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEESt4pairINSt17__decay_and_stripIT_E6__typeENS8_IT0_E6__typeEEOS9_OSC_>
 800ae84:	193a      	adds	r2, r7, r4
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	0011      	movs	r1, r2
 800ae8a:	0018      	movs	r0, r3
 800ae8c:	f000 f9b1 	bl	800b1f2 <_ZNSt4pairIKtPN11SolarGators11DataModules10DataModuleEEC1ImS4_Lb1EEEOS_IT_T0_E>
    }
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	46bd      	mov	sp, r7
 800ae94:	b005      	add	sp, #20
 800ae96:	bd90      	pop	{r4, r7, pc}

0800ae98 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E>:
    ETL_OR_STD::pair<iterator, bool> insert(rvalue_reference value)
 800ae98:	b5b0      	push	{r4, r5, r7, lr}
 800ae9a:	b08a      	sub	sp, #40	; 0x28
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
      Node* inserted_node = ETL_NULLPTR;
 800aea4:	2300      	movs	r3, #0
 800aea6:	627b      	str	r3, [r7, #36]	; 0x24
      bool inserted = false;
 800aea8:	2317      	movs	r3, #23
 800aeaa:	18fb      	adds	r3, r7, r3
 800aeac:	2200      	movs	r2, #0
 800aeae:	701a      	strb	r2, [r3, #0]
      ETL_ASSERT(!full(), ETL_ERROR(map_full));
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	0018      	movs	r0, r3
 800aeb4:	f7ff faf7 	bl	800a4a6 <_ZNK3etl8map_base4fullEv>
 800aeb8:	0003      	movs	r3, r0
 800aeba:	001a      	movs	r2, r3
 800aebc:	2301      	movs	r3, #1
 800aebe:	4053      	eors	r3, r2
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d105      	bne.n	800aed2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E+0x3a>
 800aec6:	4b1d      	ldr	r3, [pc, #116]	; (800af3c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E+0xa4>)
 800aec8:	4a1d      	ldr	r2, [pc, #116]	; (800af40 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E+0xa8>)
 800aeca:	491e      	ldr	r1, [pc, #120]	; (800af44 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E+0xac>)
 800aecc:	481e      	ldr	r0, [pc, #120]	; (800af48 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E+0xb0>)
 800aece:	f006 fcfd 	bl	80118cc <__assert_func>
      Data_Node& node = allocate_data_node(etl::move(value));
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	0018      	movs	r0, r3
 800aed6:	f000 f9a8 	bl	800b22a <_ZN3etl4moveIRSt4pairIKtPN11SolarGators11DataModules10DataModuleEEEEONS_16remove_referenceIT_E4typeEOSA_>
 800aeda:	0002      	movs	r2, r0
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	0011      	movs	r1, r2
 800aee0:	0018      	movs	r0, r3
 800aee2:	f000 f9ab 	bl	800b23c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE18allocate_data_nodeEOSt4pairIKtS4_E>
 800aee6:	0003      	movs	r3, r0
 800aee8:	623b      	str	r3, [r7, #32]
      inserted_node = insert_node(root_node, node);
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	3308      	adds	r3, #8
 800aeee:	0019      	movs	r1, r3
 800aef0:	6a3a      	ldr	r2, [r7, #32]
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	0018      	movs	r0, r3
 800aef6:	f000 f9c0 	bl	800b27a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE>
 800aefa:	0003      	movs	r3, r0
 800aefc:	627b      	str	r3, [r7, #36]	; 0x24
      inserted = inserted_node == &node;
 800aefe:	6a3b      	ldr	r3, [r7, #32]
 800af00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	425a      	negs	r2, r3
 800af06:	4153      	adcs	r3, r2
 800af08:	b2da      	uxtb	r2, r3
 800af0a:	2517      	movs	r5, #23
 800af0c:	197b      	adds	r3, r7, r5
 800af0e:	701a      	strb	r2, [r3, #0]
      return ETL_OR_STD::make_pair(iterator(*this, inserted_node), inserted);
 800af10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af12:	68b9      	ldr	r1, [r7, #8]
 800af14:	2418      	movs	r4, #24
 800af16:	193b      	adds	r3, r7, r4
 800af18:	0018      	movs	r0, r3
 800af1a:	f000 f8df 	bl	800b0dc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_PNS_8map_base4NodeE>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	197a      	adds	r2, r7, r5
 800af22:	1939      	adds	r1, r7, r4
 800af24:	0018      	movs	r0, r3
 800af26:	f000 fa57 	bl	800b3d8 <_ZSt9make_pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorERbESt4pairINSt17__decay_and_stripIT_E6__typeENSC_IT0_E6__typeEEOSD_OSG_>
 800af2a:	193b      	adds	r3, r7, r4
 800af2c:	0018      	movs	r0, r3
 800af2e:	f7ff ff63 	bl	800adf8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
 800af32:	46c0      	nop			; (mov r8, r8)
    }
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	46bd      	mov	sp, r7
 800af38:	b00a      	add	sp, #40	; 0x28
 800af3a:	bdb0      	pop	{r4, r5, r7, pc}
 800af3c:	08012ee4 	.word	0x08012ee4
 800af40:	08012ef0 	.word	0x08012ef0
 800af44:	000004a7 	.word	0x000004a7
 800af48:	08013120 	.word	0x08013120

0800af4c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEEC1ERNS_5ipoolEj>:
    imap(etl::ipool& node_pool, size_t max_size_)
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	607a      	str	r2, [r7, #4]
      , p_node_pool(&node_pool)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	0011      	movs	r1, r2
 800af5e:	0018      	movs	r0, r3
 800af60:	f7ff fac5 	bl	800a4ee <_ZN3etl8map_baseC1Ej>
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	60da      	str	r2, [r3, #12]
    }
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	0018      	movs	r0, r3
 800af6e:	46bd      	mov	sp, r7
 800af70:	b004      	add	sp, #16
 800af72:	bd80      	pop	{r7, pc}

0800af74 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEED1Ev>:
    ~imap()
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
    }
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	0018      	movs	r0, r3
 800af80:	f7ff fac8 	bl	800a514 <_ZN3etl8map_baseD1Ev>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	0018      	movs	r0, r3
 800af88:	46bd      	mov	sp, r7
 800af8a:	b002      	add	sp, #8
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <_ZN3etl4poolINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeELj5EEC1Ev>:
    using base_t::TYPE_SIZE;

    //*************************************************************************
    /// Constructor
    //*************************************************************************
    pool()
 800af8e:	b580      	push	{r7, lr}
 800af90:	b082      	sub	sp, #8
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
    {
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	0018      	movs	r0, r3
 800af9a:	f000 fa36 	bl	800b40a <_ZN3etl12generic_poolILj20ELj4ELj5EEC1Ev>
    }
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	0018      	movs	r0, r3
 800afa2:	46bd      	mov	sp, r7
 800afa4:	b002      	add	sp, #8
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE10initialiseEv>:
    void initialise()
 800afa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afaa:	b091      	sub	sp, #68	; 0x44
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
      const_iterator item = begin();
 800afb0:	2410      	movs	r4, #16
 800afb2:	193b      	adds	r3, r7, r4
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	0011      	movs	r1, r2
 800afb8:	0018      	movs	r0, r3
 800afba:	f000 fa37 	bl	800b42c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE5beginEv>
 800afbe:	193a      	adds	r2, r7, r4
 800afc0:	2308      	movs	r3, #8
 800afc2:	18fb      	adds	r3, r7, r3
 800afc4:	0011      	movs	r1, r2
 800afc6:	0018      	movs	r0, r3
 800afc8:	f000 fa46 	bl	800b458 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKNS7_8iteratorE>
 800afcc:	193b      	adds	r3, r7, r4
 800afce:	0018      	movs	r0, r3
 800afd0:	f7ff ff12 	bl	800adf8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
      while (item != end())
 800afd4:	2520      	movs	r5, #32
 800afd6:	197b      	adds	r3, r7, r5
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	0011      	movs	r1, r2
 800afdc:	0018      	movs	r0, r3
 800afde:	f000 fa68 	bl	800b4b2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE3endEv>
 800afe2:	197a      	adds	r2, r7, r5
 800afe4:	2618      	movs	r6, #24
 800afe6:	19bb      	adds	r3, r7, r6
 800afe8:	0011      	movs	r1, r2
 800afea:	0018      	movs	r0, r3
 800afec:	f000 fa34 	bl	800b458 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKNS7_8iteratorE>
 800aff0:	19ba      	adds	r2, r7, r6
 800aff2:	2408      	movs	r4, #8
 800aff4:	193b      	adds	r3, r7, r4
 800aff6:	0011      	movs	r1, r2
 800aff8:	0018      	movs	r0, r3
 800affa:	f000 fa69 	bl	800b4d0 <_ZN3etlneERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_>
 800affe:	0003      	movs	r3, r0
 800b000:	001c      	movs	r4, r3
 800b002:	19bb      	adds	r3, r7, r6
 800b004:	0018      	movs	r0, r3
 800b006:	f000 fa39 	bl	800b47c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorD1Ev>
 800b00a:	197b      	adds	r3, r7, r5
 800b00c:	0018      	movs	r0, r3
 800b00e:	f7ff fef3 	bl	800adf8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
 800b012:	2c00      	cmp	r4, #0
 800b014:	d02a      	beq.n	800b06c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE10initialiseEv+0xc4>
        item = erase(item);
 800b016:	2408      	movs	r4, #8
 800b018:	193a      	adds	r2, r7, r4
 800b01a:	2538      	movs	r5, #56	; 0x38
 800b01c:	197b      	adds	r3, r7, r5
 800b01e:	0011      	movs	r1, r2
 800b020:	0018      	movs	r0, r3
 800b022:	f000 fa34 	bl	800b48e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKS8_>
 800b026:	2630      	movs	r6, #48	; 0x30
 800b028:	19bb      	adds	r3, r7, r6
 800b02a:	197a      	adds	r2, r7, r5
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	0018      	movs	r0, r3
 800b030:	f000 fa62 	bl	800b4f8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE5eraseENS7_14const_iteratorE>
 800b034:	19ba      	adds	r2, r7, r6
 800b036:	2328      	movs	r3, #40	; 0x28
 800b038:	18fb      	adds	r3, r7, r3
 800b03a:	0011      	movs	r1, r2
 800b03c:	0018      	movs	r0, r3
 800b03e:	f000 fa0b 	bl	800b458 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKNS7_8iteratorE>
 800b042:	2328      	movs	r3, #40	; 0x28
 800b044:	18fa      	adds	r2, r7, r3
 800b046:	193b      	adds	r3, r7, r4
 800b048:	0011      	movs	r1, r2
 800b04a:	0018      	movs	r0, r3
 800b04c:	f000 fa83 	bl	800b556 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratoraSERKS8_>
 800b050:	2328      	movs	r3, #40	; 0x28
 800b052:	18fb      	adds	r3, r7, r3
 800b054:	0018      	movs	r0, r3
 800b056:	f000 fa11 	bl	800b47c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorD1Ev>
 800b05a:	19bb      	adds	r3, r7, r6
 800b05c:	0018      	movs	r0, r3
 800b05e:	f7ff fecb 	bl	800adf8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
 800b062:	197b      	adds	r3, r7, r5
 800b064:	0018      	movs	r0, r3
 800b066:	f000 fa09 	bl	800b47c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorD1Ev>
      while (item != end())
 800b06a:	e7b3      	b.n	800afd4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE10initialiseEv+0x2c>
      const_iterator item = begin();
 800b06c:	2308      	movs	r3, #8
 800b06e:	18fb      	adds	r3, r7, r3
 800b070:	0018      	movs	r0, r3
 800b072:	f000 fa03 	bl	800b47c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorD1Ev>
    }
 800b076:	46c0      	nop			; (mov r8, r8)
 800b078:	46bd      	mov	sp, r7
 800b07a:	b011      	add	sp, #68	; 0x44
 800b07c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b07e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt>:
    Node* find_node(Node* position, key_parameter_t key)
 800b07e:	b580      	push	{r7, lr}
 800b080:	b086      	sub	sp, #24
 800b082:	af00      	add	r7, sp, #0
 800b084:	60f8      	str	r0, [r7, #12]
 800b086:	60b9      	str	r1, [r7, #8]
 800b088:	607a      	str	r2, [r7, #4]
      Node* found = position;
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	617b      	str	r3, [r7, #20]
      while (found)
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d01e      	beq.n	800b0d2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x54>
        Data_Node& found_data_node = imap::data_cast(*found);
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	0018      	movs	r0, r3
 800b098:	f000 fa6f 	bl	800b57a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800b09c:	0003      	movs	r3, r0
 800b09e:	613b      	str	r3, [r7, #16]
        if (node_comp(key, found_data_node))
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	6879      	ldr	r1, [r7, #4]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	0018      	movs	r0, r3
 800b0a8:	f000 fa70 	bl	800b58c <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKtRKNS7_9Data_NodeE>
 800b0ac:	1e03      	subs	r3, r0, #0
 800b0ae:	d003      	beq.n	800b0b8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x3a>
          found = found->children[kLeft];
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	617b      	str	r3, [r7, #20]
 800b0b6:	e7ea      	b.n	800b08e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x10>
        else if (node_comp(found_data_node, key))
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	6939      	ldr	r1, [r7, #16]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	0018      	movs	r0, r3
 800b0c0:	f000 fa79 	bl	800b5b6 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeERKt>
 800b0c4:	1e03      	subs	r3, r0, #0
 800b0c6:	d003      	beq.n	800b0d0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x52>
          found = found->children[kRight];
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	617b      	str	r3, [r7, #20]
      while (found)
 800b0ce:	e7de      	b.n	800b08e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x10>
          break;
 800b0d0:	46c0      	nop			; (mov r8, r8)
      return found;
 800b0d2:	697b      	ldr	r3, [r7, #20]
    }
 800b0d4:	0018      	movs	r0, r3
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	b006      	add	sp, #24
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_PNS_8map_base4NodeE>:
      iterator(imap& map, Node* node)
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
        , p_node(node)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	601a      	str	r2, [r3, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	605a      	str	r2, [r3, #4]
      }
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	0018      	movs	r0, r3
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	b004      	add	sp, #16
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERKS8_>:
      iterator(const iterator& other)
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b082      	sub	sp, #8
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	601a      	str	r2, [r3, #0]
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	605a      	str	r2, [r3, #4]
      }
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	0018      	movs	r0, r3
 800b11c:	46bd      	mov	sp, r7
 800b11e:	b002      	add	sp, #8
 800b120:	bd80      	pop	{r7, pc}

0800b122 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castEPNS_8map_base4NodeE>:
    static Data_Node* data_cast(Node* p_node)
 800b122:	b580      	push	{r7, lr}
 800b124:	b082      	sub	sp, #8
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
      return static_cast<Data_Node*>(p_node);
 800b12a:	687b      	ldr	r3, [r7, #4]
    }
 800b12c:	0018      	movs	r0, r3
 800b12e:	46bd      	mov	sp, r7
 800b130:	b002      	add	sp, #8
 800b132:	bd80      	pop	{r7, pc}

0800b134 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 800b13c:	687b      	ldr	r3, [r7, #4]
  }
 800b13e:	0018      	movs	r0, r3
 800b140:	46bd      	mov	sp, r7
 800b142:	b002      	add	sp, #8
 800b144:	bd80      	pop	{r7, pc}

0800b146 <_ZN3etl7forwardIRPN11SolarGators11DataModules10DataModuleEEEOT_RNS_16remove_referenceIS6_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 800b146:	b580      	push	{r7, lr}
 800b148:	b082      	sub	sp, #8
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 800b14e:	687b      	ldr	r3, [r7, #4]
  }
 800b150:	0018      	movs	r0, r3
 800b152:	46bd      	mov	sp, r7
 800b154:	b002      	add	sp, #8
 800b156:	bd80      	pop	{r7, pc}

0800b158 <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1ES2_S7_>:
    ETL_CONSTEXPR14 pair(const T1& a, const T2& b)
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
      , second(b)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	601a      	str	r2, [r3, #0]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	605a      	str	r2, [r3, #4]
    }
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	0018      	movs	r0, r3
 800b174:	46bd      	mov	sp, r7
 800b176:	b004      	add	sp, #16
 800b178:	bd80      	pop	{r7, pc}

0800b17a <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1IS2_S7_EEONS0_IT_T0_EE>:
    ETL_CONSTEXPR14 pair(pair<U1, U2>&& other)
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b082      	sub	sp, #8
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	6039      	str	r1, [r7, #0]
      : first(etl::forward<U1>(other.first))
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	0018      	movs	r0, r3
 800b18a:	f7ff ffd3 	bl	800b134 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 800b18e:	0002      	movs	r2, r0
      , second(etl::forward<U2>(other.second))
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	0018      	movs	r0, r3
 800b19a:	f7ff ffd4 	bl	800b146 <_ZN3etl7forwardIRPN11SolarGators11DataModules10DataModuleEEEOT_RNS_16remove_referenceIS6_E4typeE>
 800b19e:	0002      	movs	r2, r0
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	605a      	str	r2, [r3, #4]
    }
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	0018      	movs	r0, r3
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	b002      	add	sp, #8
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <_ZSt9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEESt4pairINSt17__decay_and_stripIT_E6__typeENS8_IT0_E6__typeEEOS9_OSC_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 800b1ae:	b590      	push	{r4, r7, lr}
 800b1b0:	b085      	sub	sp, #20
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	60f8      	str	r0, [r7, #12]
 800b1b6:	60b9      	str	r1, [r7, #8]
 800b1b8:	607a      	str	r2, [r7, #4]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	0018      	movs	r0, r3
 800b1be:	f000 fa0e 	bl	800b5de <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800b1c2:	0004      	movs	r4, r0
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	0018      	movs	r0, r3
 800b1c8:	f000 fa12 	bl	800b5f0 <_ZSt7forwardIRPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 800b1cc:	0002      	movs	r2, r0
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	0021      	movs	r1, r4
 800b1d2:	0018      	movs	r0, r3
 800b1d4:	f000 fa15 	bl	800b602 <_ZNSt4pairImPN11SolarGators11DataModules10DataModuleEEC1IRS3_Lb1EEERKmOT_>
    }
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	b005      	add	sp, #20
 800b1de:	bd90      	pop	{r4, r7, pc}

0800b1e0 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	0018      	movs	r0, r3
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	b002      	add	sp, #8
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <_ZNSt4pairIKtPN11SolarGators11DataModules10DataModuleEEC1ImS4_Lb1EEEOS_IT_T0_E>:
	constexpr pair(pair<_U1, _U2>&& __p)
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b082      	sub	sp, #8
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	0018      	movs	r0, r3
 800b200:	f7ff ffee 	bl	800b1e0 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800b204:	0003      	movs	r3, r0
	  second(std::forward<_U2>(__p.second)) { }
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	b29a      	uxth	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	801a      	strh	r2, [r3, #0]
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	3304      	adds	r3, #4
 800b212:	0018      	movs	r0, r3
 800b214:	f000 fa0c 	bl	800b630 <_ZSt7forwardIPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS4_E4typeE>
 800b218:	0003      	movs	r3, r0
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	605a      	str	r2, [r3, #4]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	0018      	movs	r0, r3
 800b224:	46bd      	mov	sp, r7
 800b226:	b002      	add	sp, #8
 800b228:	bd80      	pop	{r7, pc}

0800b22a <_ZN3etl4moveIRSt4pairIKtPN11SolarGators11DataModules10DataModuleEEEEONS_16remove_referenceIT_E4typeEOSA_>:
  constexpr typename etl::remove_reference<T>::type&& move(T&& t) ETL_NOEXCEPT
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b082      	sub	sp, #8
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
 800b232:	687b      	ldr	r3, [r7, #4]
  }
 800b234:	0018      	movs	r0, r3
 800b236:	46bd      	mov	sp, r7
 800b238:	b002      	add	sp, #8
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE18allocate_data_nodeEOSt4pairIKtS4_E>:
    Data_Node& allocate_data_node(rvalue_reference value)
 800b23c:	b590      	push	{r4, r7, lr}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
      Data_Node& node = create_data_node();
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	0018      	movs	r0, r3
 800b24a:	f000 f9fb 	bl	800b644 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16create_data_nodeEv>
 800b24e:	0003      	movs	r3, r0
 800b250:	60fb      	str	r3, [r7, #12]
      ::new (&node.value) value_type(etl::move(value));
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	0018      	movs	r0, r3
 800b256:	f7ff ffe8 	bl	800b22a <_ZN3etl4moveIRSt4pairIKtPN11SolarGators11DataModules10DataModuleEEEEONS_16remove_referenceIT_E4typeEOSA_>
 800b25a:	0004      	movs	r4, r0
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	330c      	adds	r3, #12
 800b260:	0019      	movs	r1, r3
 800b262:	2008      	movs	r0, #8
 800b264:	f7ff f81d 	bl	800a2a2 <_ZnwjPv>
 800b268:	0003      	movs	r3, r0
 800b26a:	0022      	movs	r2, r4
 800b26c:	ca03      	ldmia	r2!, {r0, r1}
 800b26e:	c303      	stmia	r3!, {r0, r1}
      return node;
 800b270:	68fb      	ldr	r3, [r7, #12]
    }
 800b272:	0018      	movs	r0, r3
 800b274:	46bd      	mov	sp, r7
 800b276:	b005      	add	sp, #20
 800b278:	bd90      	pop	{r4, r7, pc}

0800b27a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE>:
    Node* insert_node(Node*& position, Data_Node& node)
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b088      	sub	sp, #32
 800b27e:	af00      	add	r7, sp, #0
 800b280:	60f8      	str	r0, [r7, #12]
 800b282:	60b9      	str	r1, [r7, #8]
 800b284:	607a      	str	r2, [r7, #4]
      Node* found = position;
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	61fb      	str	r3, [r7, #28]
      if (position)
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d100      	bne.n	800b296 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x1c>
 800b294:	e092      	b.n	800b3bc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x142>
        Node* critical_parent_node = ETL_NULLPTR;
 800b296:	2300      	movs	r3, #0
 800b298:	61bb      	str	r3, [r7, #24]
        Node* critical_node = root_node;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	617b      	str	r3, [r7, #20]
        while (found)
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d05b      	beq.n	800b35e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xe4>
          if (kNeither != found->weight)
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	7a1b      	ldrb	r3, [r3, #8]
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	d001      	beq.n	800b2b2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x38>
            critical_node = found;
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	617b      	str	r3, [r7, #20]
          Data_Node& found_data_node = imap::data_cast(*found);
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	0018      	movs	r0, r3
 800b2b6:	f000 f960 	bl	800b57a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800b2ba:	0003      	movs	r3, r0
 800b2bc:	613b      	str	r3, [r7, #16]
          if (node_comp(node, found_data_node))
 800b2be:	693a      	ldr	r2, [r7, #16]
 800b2c0:	6879      	ldr	r1, [r7, #4]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	0018      	movs	r0, r3
 800b2c6:	f000 f9eb 	bl	800b6a0 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 800b2ca:	1e03      	subs	r3, r0, #0
 800b2cc:	d003      	beq.n	800b2d6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x5c>
            found->dir = kLeft;
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	725a      	strb	r2, [r3, #9]
 800b2d4:	e017      	b.n	800b306 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x8c>
          else if (node_comp(found_data_node, node))
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	6939      	ldr	r1, [r7, #16]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	0018      	movs	r0, r3
 800b2de:	f000 f9df 	bl	800b6a0 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 800b2e2:	1e03      	subs	r3, r0, #0
 800b2e4:	d003      	beq.n	800b2ee <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x74>
            found->dir = kRight;
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	725a      	strb	r2, [r3, #9]
 800b2ec:	e00b      	b.n	800b306 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x8c>
            found->dir = kNeither;
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	2202      	movs	r2, #2
 800b2f2:	725a      	strb	r2, [r3, #9]
            critical_node = ETL_NULLPTR;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	617b      	str	r3, [r7, #20]
            destroy_data_node(node);
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	0011      	movs	r1, r2
 800b2fe:	0018      	movs	r0, r3
 800b300:	f000 f9e4 	bl	800b6cc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE17destroy_data_nodeERNS7_9Data_NodeE>
            break;
 800b304:	e02b      	b.n	800b35e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xe4>
          if (found->children[found->dir])
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	7a5b      	ldrb	r3, [r3, #9]
 800b30a:	001a      	movs	r2, r3
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	0092      	lsls	r2, r2, #2
 800b310:	58d3      	ldr	r3, [r2, r3]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d012      	beq.n	800b33c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xc2>
            if (kNeither != found->children[found->dir]->weight)
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	7a5b      	ldrb	r3, [r3, #9]
 800b31a:	001a      	movs	r2, r3
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	0092      	lsls	r2, r2, #2
 800b320:	58d3      	ldr	r3, [r2, r3]
 800b322:	7a1b      	ldrb	r3, [r3, #8]
 800b324:	2b02      	cmp	r3, #2
 800b326:	d001      	beq.n	800b32c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xb2>
              critical_parent_node = found;
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	61bb      	str	r3, [r7, #24]
            found = found->children[found->dir];
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	7a5b      	ldrb	r3, [r3, #9]
 800b330:	001a      	movs	r2, r3
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	0092      	lsls	r2, r2, #2
 800b336:	58d3      	ldr	r3, [r2, r3]
 800b338:	61fb      	str	r3, [r7, #28]
 800b33a:	e7b1      	b.n	800b2a0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x26>
            attach_node(found->children[found->dir], node);
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	7a5b      	ldrb	r3, [r3, #9]
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	69fa      	ldr	r2, [r7, #28]
 800b346:	18d3      	adds	r3, r2, r3
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	0019      	movs	r1, r3
 800b34c:	f7ff fa38 	bl	800a7c0 <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>
            found = found->children[found->dir];
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	7a5b      	ldrb	r3, [r3, #9]
 800b354:	001a      	movs	r2, r3
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	0092      	lsls	r2, r2, #2
 800b35a:	58d3      	ldr	r3, [r2, r3]
 800b35c:	61fb      	str	r3, [r7, #28]
        if (critical_node)
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d034      	beq.n	800b3ce <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x154>
          if (critical_parent_node == ETL_NULLPTR && critical_node == root_node)
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10c      	bne.n	800b384 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x10a>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	697a      	ldr	r2, [r7, #20]
 800b370:	429a      	cmp	r2, r3
 800b372:	d107      	bne.n	800b384 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x10a>
            balance_node(root_node);
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	3308      	adds	r3, #8
 800b37a:	0019      	movs	r1, r3
 800b37c:	0010      	movs	r0, r2
 800b37e:	f7ff f8d2 	bl	800a526 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 800b382:	e024      	b.n	800b3ce <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x154>
          else if (critical_parent_node == ETL_NULLPTR && critical_node == position)
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10b      	bne.n	800b3a2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x128>
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	429a      	cmp	r2, r3
 800b392:	d106      	bne.n	800b3a2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x128>
            balance_node(position);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	0011      	movs	r1, r2
 800b39a:	0018      	movs	r0, r3
 800b39c:	f7ff f8c3 	bl	800a526 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 800b3a0:	e015      	b.n	800b3ce <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x154>
            if (critical_parent_node != ETL_NULLPTR)
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d012      	beq.n	800b3ce <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x154>
              balance_node(critical_parent_node->children[critical_parent_node->dir]);
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	7a5b      	ldrb	r3, [r3, #9]
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	69ba      	ldr	r2, [r7, #24]
 800b3b2:	18d3      	adds	r3, r2, r3
 800b3b4:	0019      	movs	r1, r3
 800b3b6:	f7ff f8b6 	bl	800a526 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 800b3ba:	e008      	b.n	800b3ce <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x154>
        attach_node(position, node);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	68b9      	ldr	r1, [r7, #8]
 800b3c2:	0018      	movs	r0, r3
 800b3c4:	f7ff f9fc 	bl	800a7c0 <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>
        found = position;
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	61fb      	str	r3, [r7, #28]
      return found;
 800b3ce:	69fb      	ldr	r3, [r7, #28]
    }
 800b3d0:	0018      	movs	r0, r3
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	b008      	add	sp, #32
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <_ZSt9make_pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorERbESt4pairINSt17__decay_and_stripIT_E6__typeENSC_IT0_E6__typeEEOSD_OSG_>:
    make_pair(_T1&& __x, _T2&& __y)
 800b3d8:	b590      	push	{r4, r7, lr}
 800b3da:	b085      	sub	sp, #20
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	607a      	str	r2, [r7, #4]
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	0018      	movs	r0, r3
 800b3e8:	f000 f980 	bl	800b6ec <_ZSt7forwardIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEEOT_RNSt16remove_referenceISA_E4typeE>
 800b3ec:	0004      	movs	r4, r0
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	0018      	movs	r0, r3
 800b3f2:	f7ff fa24 	bl	800a83e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800b3f6:	0002      	movs	r2, r0
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	0021      	movs	r1, r4
 800b3fc:	0018      	movs	r0, r3
 800b3fe:	f000 f97e 	bl	800b6fe <_ZNSt4pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEbEC1IS9_RbLb1EEEOT_OT0_>
    }
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	46bd      	mov	sp, r7
 800b406:	b005      	add	sp, #20
 800b408:	bd90      	pop	{r4, r7, pc}

0800b40a <_ZN3etl12generic_poolILj20ELj4ELj5EEC1Ev>:
    static ETL_CONSTANT size_t TYPE_SIZE = VTypeSize;

    //*************************************************************************
    /// Constructor
    //*************************************************************************
    generic_pool()
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b082      	sub	sp, #8
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
      : etl::ipool(reinterpret_cast<char*>(&buffer[0]), Element_Size, VSize)
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	3318      	adds	r3, #24
 800b418:	0019      	movs	r1, r3
 800b41a:	2305      	movs	r3, #5
 800b41c:	2214      	movs	r2, #20
 800b41e:	f7fe ff5b 	bl	800a2d8 <_ZN3etl5ipoolC1EPcmm>
    {
    }
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	0018      	movs	r0, r3
 800b426:	46bd      	mov	sp, r7
 800b428:	b002      	add	sp, #8
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE5beginEv>:
    iterator begin()
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
      return iterator(*this, find_limit_node(root_node, kLeft));
 800b436:	6838      	ldr	r0, [r7, #0]
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	2200      	movs	r2, #0
 800b43e:	0019      	movs	r1, r3
 800b440:	f7ff f99d 	bl	800a77e <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>
 800b444:	0002      	movs	r2, r0
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	0018      	movs	r0, r3
 800b44c:	f7ff fe46 	bl	800b0dc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_PNS_8map_base4NodeE>
    }
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	46bd      	mov	sp, r7
 800b454:	b002      	add	sp, #8
 800b456:	bd80      	pop	{r7, pc}

0800b458 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKNS7_8iteratorE>:
      const_iterator(const typename imap::iterator& other)
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	601a      	str	r2, [r3, #0]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	685a      	ldr	r2, [r3, #4]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	605a      	str	r2, [r3, #4]
      }
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	0018      	movs	r0, r3
 800b476:	46bd      	mov	sp, r7
 800b478:	b002      	add	sp, #8
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorD1Ev>:
      ~const_iterator()
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
      }
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	0018      	movs	r0, r3
 800b488:	46bd      	mov	sp, r7
 800b48a:	b002      	add	sp, #8
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKS8_>:
      const_iterator(const const_iterator& other)
 800b48e:	b580      	push	{r7, lr}
 800b490:	b082      	sub	sp, #8
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	601a      	str	r2, [r3, #0]
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	685a      	ldr	r2, [r3, #4]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	605a      	str	r2, [r3, #4]
      }
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	0018      	movs	r0, r3
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	b002      	add	sp, #8
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE3endEv>:
    iterator end()
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b082      	sub	sp, #8
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	6039      	str	r1, [r7, #0]
      return iterator(*this);
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	0011      	movs	r1, r2
 800b4c2:	0018      	movs	r0, r3
 800b4c4:	f000 f938 	bl	800b738 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_>
    }
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	b002      	add	sp, #8
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <_ZN3etlneERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_>:
      friend bool operator != (const const_iterator& lhs, const const_iterator& rhs)
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
        return !(lhs == rhs);
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	0011      	movs	r1, r2
 800b4e0:	0018      	movs	r0, r3
 800b4e2:	f000 f939 	bl	800b758 <_ZN3etleqERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_>
 800b4e6:	0003      	movs	r3, r0
 800b4e8:	001a      	movs	r2, r3
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	4053      	eors	r3, r2
 800b4ee:	b2db      	uxtb	r3, r3
      }
 800b4f0:	0018      	movs	r0, r3
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	b002      	add	sp, #8
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE5eraseENS7_14const_iteratorE>:
    iterator erase(const_iterator position)
 800b4f8:	b590      	push	{r4, r7, lr}
 800b4fa:	b087      	sub	sp, #28
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
      Node*& reference_node = find_node(root_node, position.p_node);
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	3308      	adds	r3, #8
 800b508:	0019      	movs	r1, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	685a      	ldr	r2, [r3, #4]
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	0018      	movs	r0, r3
 800b512:	f000 f939 	bl	800b788 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_>
 800b516:	0003      	movs	r3, r0
 800b518:	617b      	str	r3, [r7, #20]
      iterator next(*this, reference_node);
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	68b9      	ldr	r1, [r7, #8]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	0018      	movs	r0, r3
 800b524:	f7ff fdda 	bl	800b0dc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_PNS_8map_base4NodeE>
      ++next;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	0018      	movs	r0, r3
 800b52c:	f000 f973 	bl	800b816 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorppEv>
      remove_node(root_node, (*position).first);
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	3308      	adds	r3, #8
 800b534:	001c      	movs	r4, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	0018      	movs	r0, r3
 800b53a:	f000 f97d 	bl	800b838 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratordeEv>
 800b53e:	0003      	movs	r3, r0
 800b540:	001a      	movs	r2, r3
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	0021      	movs	r1, r4
 800b546:	0018      	movs	r0, r3
 800b548:	f000 f985 	bl	800b856 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt>
      return next;
 800b54c:	46c0      	nop			; (mov r8, r8)
    }
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	46bd      	mov	sp, r7
 800b552:	b007      	add	sp, #28
 800b554:	bd90      	pop	{r4, r7, pc}

0800b556 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratoraSERKS8_>:
      const_iterator& operator =(const const_iterator& other)
 800b556:	b580      	push	{r7, lr}
 800b558:	b082      	sub	sp, #8
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	6039      	str	r1, [r7, #0]
        p_map = other.p_map;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	601a      	str	r2, [r3, #0]
        p_node = other.p_node;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	685a      	ldr	r2, [r3, #4]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	605a      	str	r2, [r3, #4]
        return *this;
 800b570:	687b      	ldr	r3, [r7, #4]
      }
 800b572:	0018      	movs	r0, r3
 800b574:	46bd      	mov	sp, r7
 800b576:	b002      	add	sp, #8
 800b578:	bd80      	pop	{r7, pc}

0800b57a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>:
    static Data_Node& data_cast(Node& node)
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b082      	sub	sp, #8
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
      return static_cast<Data_Node&>(node);
 800b582:	687b      	ldr	r3, [r7, #4]
    }
 800b584:	0018      	movs	r0, r3
 800b586:	46bd      	mov	sp, r7
 800b588:	b002      	add	sp, #8
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKtRKNS7_9Data_NodeE>:
    bool node_comp(key_parameter_t key, const Data_Node& node) const
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]
      return kcompare(key, node.value.first);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	3310      	adds	r3, #16
 800b59c:	0018      	movs	r0, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	330c      	adds	r3, #12
 800b5a2:	001a      	movs	r2, r3
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	0019      	movs	r1, r3
 800b5a8:	f7ff f952 	bl	800a850 <_ZNK3etl4lessItEclERKtS3_>
 800b5ac:	0003      	movs	r3, r0
    }
 800b5ae:	0018      	movs	r0, r3
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	b004      	add	sp, #16
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeERKt>:
    bool node_comp(const Data_Node& node, key_parameter_t key) const
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b084      	sub	sp, #16
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	60f8      	str	r0, [r7, #12]
 800b5be:	60b9      	str	r1, [r7, #8]
 800b5c0:	607a      	str	r2, [r7, #4]
      return kcompare(node.value.first, key);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	3310      	adds	r3, #16
 800b5c6:	0018      	movs	r0, r3
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	330c      	adds	r3, #12
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	0019      	movs	r1, r3
 800b5d0:	f7ff f93e 	bl	800a850 <_ZNK3etl4lessItEclERKtS3_>
 800b5d4:	0003      	movs	r3, r0
    }
 800b5d6:	0018      	movs	r0, r3
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	b004      	add	sp, #16
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b082      	sub	sp, #8
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	0018      	movs	r0, r3
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	b002      	add	sp, #8
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <_ZSt7forwardIRPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	0018      	movs	r0, r3
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	b002      	add	sp, #8
 800b600:	bd80      	pop	{r7, pc}

0800b602 <_ZNSt4pairImPN11SolarGators11DataModules10DataModuleEEC1IRS3_Lb1EEERKmOT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 800b602:	b580      	push	{r7, lr}
 800b604:	b084      	sub	sp, #16
 800b606:	af00      	add	r7, sp, #0
 800b608:	60f8      	str	r0, [r7, #12]
 800b60a:	60b9      	str	r1, [r7, #8]
 800b60c:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	0018      	movs	r0, r3
 800b61a:	f7ff ffe9 	bl	800b5f0 <_ZSt7forwardIRPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 800b61e:	0003      	movs	r3, r0
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	605a      	str	r2, [r3, #4]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	0018      	movs	r0, r3
 800b62a:	46bd      	mov	sp, r7
 800b62c:	b004      	add	sp, #16
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <_ZSt7forwardIPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	0018      	movs	r0, r3
 800b63c:	46bd      	mov	sp, r7
 800b63e:	b002      	add	sp, #8
 800b640:	bd80      	pop	{r7, pc}
	...

0800b644 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16create_data_nodeEv>:
    Data_Node& create_data_node()
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
      Data_Node* (etl::ipool::*func)() = &etl::ipool::allocate<Data_Node>;
 800b64c:	2008      	movs	r0, #8
 800b64e:	183b      	adds	r3, r7, r0
 800b650:	4a12      	ldr	r2, [pc, #72]	; (800b69c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16create_data_nodeEv+0x58>)
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	183b      	adds	r3, r7, r0
 800b656:	2200      	movs	r2, #0
 800b658:	605a      	str	r2, [r3, #4]
      return *(p_node_pool->*func)();
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	68da      	ldr	r2, [r3, #12]
 800b65e:	183b      	adds	r3, r7, r0
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	105b      	asrs	r3, r3, #1
 800b664:	18d1      	adds	r1, r2, r3
 800b666:	183b      	adds	r3, r7, r0
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	4013      	ands	r3, r2
 800b66e:	d102      	bne.n	800b676 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16create_data_nodeEv+0x32>
 800b670:	183b      	adds	r3, r7, r0
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	e00b      	b.n	800b68e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16create_data_nodeEv+0x4a>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	68da      	ldr	r2, [r3, #12]
 800b67a:	2008      	movs	r0, #8
 800b67c:	183b      	adds	r3, r7, r0
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	105b      	asrs	r3, r3, #1
 800b682:	18d3      	adds	r3, r2, r3
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	183b      	adds	r3, r7, r0
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	18d3      	adds	r3, r2, r3
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	0008      	movs	r0, r1
 800b690:	4798      	blx	r3
 800b692:	0003      	movs	r3, r0
    }
 800b694:	0018      	movs	r0, r3
 800b696:	46bd      	mov	sp, r7
 800b698:	b004      	add	sp, #16
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	0800bba9 	.word	0x0800bba9

0800b6a0 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>:
    bool node_comp(const Data_Node& node1, const Data_Node& node2) const
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
      return kcompare(node1.value.first, node2.value.first);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	3310      	adds	r3, #16
 800b6b0:	0018      	movs	r0, r3
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	330c      	adds	r3, #12
 800b6b6:	0019      	movs	r1, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	330c      	adds	r3, #12
 800b6bc:	001a      	movs	r2, r3
 800b6be:	f7ff f8c7 	bl	800a850 <_ZNK3etl4lessItEclERKtS3_>
 800b6c2:	0003      	movs	r3, r0
    }
 800b6c4:	0018      	movs	r0, r3
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	b004      	add	sp, #16
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE17destroy_data_nodeERNS7_9Data_NodeE>:
    void destroy_data_node(Data_Node& node)
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
      p_node_pool->release(&node);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	0011      	movs	r1, r2
 800b6de:	0018      	movs	r0, r3
 800b6e0:	f7fe fde9 	bl	800a2b6 <_ZN3etl5ipool7releaseEPKv>
    }
 800b6e4:	46c0      	nop			; (mov r8, r8)
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	b002      	add	sp, #8
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <_ZSt7forwardIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	0018      	movs	r0, r3
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	b002      	add	sp, #8
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <_ZNSt4pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEbEC1IS9_RbLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800b6fe:	b590      	push	{r4, r7, lr}
 800b700:	b085      	sub	sp, #20
 800b702:	af00      	add	r7, sp, #0
 800b704:	60f8      	str	r0, [r7, #12]
 800b706:	60b9      	str	r1, [r7, #8]
 800b708:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800b70a:	68fc      	ldr	r4, [r7, #12]
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	0018      	movs	r0, r3
 800b710:	f7ff ffec 	bl	800b6ec <_ZSt7forwardIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEEOT_RNSt16remove_referenceISA_E4typeE>
 800b714:	0003      	movs	r3, r0
 800b716:	0019      	movs	r1, r3
 800b718:	0020      	movs	r0, r4
 800b71a:	f7ff fcf0 	bl	800b0fe <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERKS8_>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	0018      	movs	r0, r3
 800b722:	f7ff f88c 	bl	800a83e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800b726:	0003      	movs	r3, r0
 800b728:	781a      	ldrb	r2, [r3, #0]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	721a      	strb	r2, [r3, #8]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	0018      	movs	r0, r3
 800b732:	46bd      	mov	sp, r7
 800b734:	b005      	add	sp, #20
 800b736:	bd90      	pop	{r4, r7, pc}

0800b738 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_>:
      iterator(imap& map)
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
        , p_node(ETL_NULLPTR)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	601a      	str	r2, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	605a      	str	r2, [r3, #4]
      }
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	0018      	movs	r0, r3
 800b752:	46bd      	mov	sp, r7
 800b754:	b002      	add	sp, #8
 800b756:	bd80      	pop	{r7, pc}

0800b758 <_ZN3etleqERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_>:
      friend bool operator == (const const_iterator& lhs, const const_iterator& rhs)
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
        return lhs.p_map == rhs.p_map && lhs.p_node == rhs.p_node;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d107      	bne.n	800b77e <_ZN3etleqERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_+0x26>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	685a      	ldr	r2, [r3, #4]
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	429a      	cmp	r2, r3
 800b778:	d101      	bne.n	800b77e <_ZN3etleqERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_+0x26>
 800b77a:	2301      	movs	r3, #1
 800b77c:	e000      	b.n	800b780 <_ZN3etleqERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_+0x28>
 800b77e:	2300      	movs	r3, #0
      }
 800b780:	0018      	movs	r0, r3
 800b782:	46bd      	mov	sp, r7
 800b784:	b002      	add	sp, #8
 800b786:	bd80      	pop	{r7, pc}

0800b788 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_>:
    Node*& find_node(Node*& position, const Node* node)
 800b788:	b580      	push	{r7, lr}
 800b78a:	b088      	sub	sp, #32
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
      Node* found = position;
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	61fb      	str	r3, [r7, #28]
      while (found)
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d034      	beq.n	800b80a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x82>
        if (found->children[kLeft] == node)
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d101      	bne.n	800b7ae <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x26>
          return found->children[kLeft];
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	e02f      	b.n	800b80e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x86>
        else if (found->children[kRight] == node)
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d102      	bne.n	800b7be <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x36>
          return found->children[kRight];
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	e027      	b.n	800b80e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x86>
          Data_Node& found_data_node = imap::data_cast(*found);
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	0018      	movs	r0, r3
 800b7c2:	f7ff feda 	bl	800b57a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800b7c6:	0003      	movs	r3, r0
 800b7c8:	61bb      	str	r3, [r7, #24]
          const Data_Node& data_node = imap::data_cast(*node);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	0018      	movs	r0, r3
 800b7ce:	f000 fa09 	bl	800bbe4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERKNS_8map_base4NodeE>
 800b7d2:	0003      	movs	r3, r0
 800b7d4:	617b      	str	r3, [r7, #20]
          if (node_comp(data_node, found_data_node))
 800b7d6:	69ba      	ldr	r2, [r7, #24]
 800b7d8:	6979      	ldr	r1, [r7, #20]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	0018      	movs	r0, r3
 800b7de:	f7ff ff5f 	bl	800b6a0 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 800b7e2:	1e03      	subs	r3, r0, #0
 800b7e4:	d003      	beq.n	800b7ee <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x66>
            found = found->children[kLeft];
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	61fb      	str	r3, [r7, #28]
 800b7ec:	e7d5      	b.n	800b79a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x12>
          else if (node_comp(found_data_node, data_node))
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	69b9      	ldr	r1, [r7, #24]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	0018      	movs	r0, r3
 800b7f6:	f7ff ff53 	bl	800b6a0 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 800b7fa:	1e03      	subs	r3, r0, #0
 800b7fc:	d003      	beq.n	800b806 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x7e>
            found = found->children[kRight];
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	61fb      	str	r3, [r7, #28]
 800b804:	e7c9      	b.n	800b79a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x12>
            return position;
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	e001      	b.n	800b80e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x86>
      return root_node;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	3308      	adds	r3, #8
    }
 800b80e:	0018      	movs	r0, r3
 800b810:	46bd      	mov	sp, r7
 800b812:	b008      	add	sp, #32
 800b814:	bd80      	pop	{r7, pc}

0800b816 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorppEv>:
      iterator& operator ++()
 800b816:	b580      	push	{r7, lr}
 800b818:	b082      	sub	sp, #8
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
        p_map->next_node(p_node);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	3304      	adds	r3, #4
 800b826:	0019      	movs	r1, r3
 800b828:	0010      	movs	r0, r2
 800b82a:	f000 f9e4 	bl	800bbf6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE>
        return *this;
 800b82e:	687b      	ldr	r3, [r7, #4]
      }
 800b830:	0018      	movs	r0, r3
 800b832:	46bd      	mov	sp, r7
 800b834:	b002      	add	sp, #8
 800b836:	bd80      	pop	{r7, pc}

0800b838 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratordeEv>:
      const_reference operator *() const
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
        return imap::data_cast(p_node)->value;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	0018      	movs	r0, r3
 800b846:	f000 fa11 	bl	800bc6c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castEPKNS_8map_base4NodeE>
 800b84a:	0003      	movs	r3, r0
 800b84c:	330c      	adds	r3, #12
      }
 800b84e:	0018      	movs	r0, r3
 800b850:	46bd      	mov	sp, r7
 800b852:	b002      	add	sp, #8
 800b854:	bd80      	pop	{r7, pc}

0800b856 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt>:
    Node* remove_node(Node*& position, key_parameter_t key)
 800b856:	b590      	push	{r4, r7, lr}
 800b858:	b08f      	sub	sp, #60	; 0x3c
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	60f8      	str	r0, [r7, #12]
 800b85e:	60b9      	str	r1, [r7, #8]
 800b860:	607a      	str	r2, [r7, #4]
      Node* found_parent = ETL_NULLPTR;
 800b862:	2300      	movs	r3, #0
 800b864:	637b      	str	r3, [r7, #52]	; 0x34
      Node* found = ETL_NULLPTR;
 800b866:	2300      	movs	r3, #0
 800b868:	633b      	str	r3, [r7, #48]	; 0x30
      Node* replace_parent = ETL_NULLPTR;
 800b86a:	2300      	movs	r3, #0
 800b86c:	62fb      	str	r3, [r7, #44]	; 0x2c
      Node* replace = position;
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	62bb      	str	r3, [r7, #40]	; 0x28
      Node* balance_parent = ETL_NULLPTR;
 800b874:	2300      	movs	r3, #0
 800b876:	627b      	str	r3, [r7, #36]	; 0x24
      Node* balance = root_node;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	623b      	str	r3, [r7, #32]
      while (replace)
 800b87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b880:	2b00      	cmp	r3, #0
 800b882:	d059      	beq.n	800b938 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xe2>
        Data_Node& replace_data_node = imap::data_cast(*replace);
 800b884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b886:	0018      	movs	r0, r3
 800b888:	f7ff fe77 	bl	800b57a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800b88c:	0003      	movs	r3, r0
 800b88e:	61fb      	str	r3, [r7, #28]
        if (node_comp(key, replace_data_node))
 800b890:	69fa      	ldr	r2, [r7, #28]
 800b892:	6879      	ldr	r1, [r7, #4]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	0018      	movs	r0, r3
 800b898:	f7ff fe78 	bl	800b58c <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKtRKNS7_9Data_NodeE>
 800b89c:	1e03      	subs	r3, r0, #0
 800b89e:	d003      	beq.n	800b8a8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x52>
          replace->dir = kLeft;
 800b8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	725a      	strb	r2, [r3, #9]
 800b8a6:	e017      	b.n	800b8d8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x82>
        else if (node_comp(replace_data_node, key))
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	69f9      	ldr	r1, [r7, #28]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	0018      	movs	r0, r3
 800b8b0:	f7ff fe81 	bl	800b5b6 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeERKt>
 800b8b4:	1e03      	subs	r3, r0, #0
 800b8b6:	d003      	beq.n	800b8c0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x6a>
          replace->dir = kRight;
 800b8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	725a      	strb	r2, [r3, #9]
 800b8be:	e00b      	b.n	800b8d8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x82>
          replace->dir = replace->children[kLeft] ? kLeft : kRight;
 800b8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	425a      	negs	r2, r3
 800b8c6:	4153      	adcs	r3, r2
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	001a      	movs	r2, r3
 800b8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ce:	725a      	strb	r2, [r3, #9]
          found_parent = replace_parent;
 800b8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d2:	637b      	str	r3, [r7, #52]	; 0x34
          found = replace;
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	633b      	str	r3, [r7, #48]	; 0x30
        if (replace->children[replace->dir] == ETL_NULLPTR)
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8da:	7a5b      	ldrb	r3, [r3, #9]
 800b8dc:	001a      	movs	r2, r3
 800b8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e0:	0092      	lsls	r2, r2, #2
 800b8e2:	58d3      	ldr	r3, [r2, r3]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d026      	beq.n	800b936 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xe0>
        if ((replace->weight == kNeither) ||
 800b8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ea:	7a1b      	ldrb	r3, [r3, #8]
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d014      	beq.n	800b91a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xc4>
          (replace->weight == (1 - replace->dir) &&
 800b8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f2:	7a1b      	ldrb	r3, [r3, #8]
 800b8f4:	001a      	movs	r2, r3
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	7a5b      	ldrb	r3, [r3, #9]
 800b8fa:	0019      	movs	r1, r3
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	1a5b      	subs	r3, r3, r1
        if ((replace->weight == kNeither) ||
 800b900:	429a      	cmp	r2, r3
 800b902:	d10e      	bne.n	800b922 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xcc>
            replace->children[1 - replace->dir]->weight == kNeither))
 800b904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b906:	7a5b      	ldrb	r3, [r3, #9]
 800b908:	001a      	movs	r2, r3
 800b90a:	2301      	movs	r3, #1
 800b90c:	1a9a      	subs	r2, r3, r2
 800b90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b910:	0092      	lsls	r2, r2, #2
 800b912:	58d3      	ldr	r3, [r2, r3]
 800b914:	7a1b      	ldrb	r3, [r3, #8]
          (replace->weight == (1 - replace->dir) &&
 800b916:	2b02      	cmp	r3, #2
 800b918:	d103      	bne.n	800b922 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xcc>
          balance_parent = replace_parent;
 800b91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91c:	627b      	str	r3, [r7, #36]	; 0x24
          balance = replace;
 800b91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b920:	623b      	str	r3, [r7, #32]
        replace_parent = replace;
 800b922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b924:	62fb      	str	r3, [r7, #44]	; 0x2c
        replace = replace->children[replace->dir];
 800b926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b928:	7a5b      	ldrb	r3, [r3, #9]
 800b92a:	001a      	movs	r2, r3
 800b92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92e:	0092      	lsls	r2, r2, #2
 800b930:	58d3      	ldr	r3, [r2, r3]
 800b932:	62bb      	str	r3, [r7, #40]	; 0x28
      while (replace)
 800b934:	e7a3      	b.n	800b87e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x28>
          break;
 800b936:	46c0      	nop			; (mov r8, r8)
      if (found)
 800b938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d100      	bne.n	800b940 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xea>
 800b93e:	e12e      	b.n	800bb9e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x348>
        while (balance)
 800b940:	6a3b      	ldr	r3, [r7, #32]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d100      	bne.n	800b948 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xf2>
 800b946:	e0ee      	b.n	800bb26 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2d0>
          if (balance->children[balance->dir] == ETL_NULLPTR)
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	7a5b      	ldrb	r3, [r3, #9]
 800b94c:	001a      	movs	r2, r3
 800b94e:	6a3b      	ldr	r3, [r7, #32]
 800b950:	0092      	lsls	r2, r2, #2
 800b952:	58d3      	ldr	r3, [r2, r3]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d100      	bne.n	800b95a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x104>
 800b958:	e0e4      	b.n	800bb24 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ce>
          if (balance->weight == kNeither)
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	7a1b      	ldrb	r3, [r3, #8]
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d107      	bne.n	800b972 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x11c>
            balance->weight = 1 - balance->dir;
 800b962:	6a3b      	ldr	r3, [r7, #32]
 800b964:	7a5b      	ldrb	r3, [r3, #9]
 800b966:	2201      	movs	r2, #1
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	b2da      	uxtb	r2, r3
 800b96c:	6a3b      	ldr	r3, [r7, #32]
 800b96e:	721a      	strb	r2, [r3, #8]
 800b970:	e0ce      	b.n	800bb10 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
          else if (balance->weight == balance->dir)
 800b972:	6a3b      	ldr	r3, [r7, #32]
 800b974:	7a1a      	ldrb	r2, [r3, #8]
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	7a5b      	ldrb	r3, [r3, #9]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d103      	bne.n	800b986 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x130>
            balance->weight = kNeither;
 800b97e:	6a3b      	ldr	r3, [r7, #32]
 800b980:	2202      	movs	r2, #2
 800b982:	721a      	strb	r2, [r3, #8]
 800b984:	e0c4      	b.n	800bb10 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
            int weight = balance->children[1 - balance->dir]->weight;
 800b986:	6a3b      	ldr	r3, [r7, #32]
 800b988:	7a5b      	ldrb	r3, [r3, #9]
 800b98a:	001a      	movs	r2, r3
 800b98c:	2301      	movs	r3, #1
 800b98e:	1a9a      	subs	r2, r3, r2
 800b990:	6a3b      	ldr	r3, [r7, #32]
 800b992:	0092      	lsls	r2, r2, #2
 800b994:	58d3      	ldr	r3, [r2, r3]
 800b996:	7a1b      	ldrb	r3, [r3, #8]
 800b998:	61bb      	str	r3, [r7, #24]
            if (weight == balance->dir)
 800b99a:	6a3b      	ldr	r3, [r7, #32]
 800b99c:	7a5b      	ldrb	r3, [r3, #9]
 800b99e:	001a      	movs	r2, r3
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d138      	bne.n	800ba18 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x1c2>
              if (balance_parent == ETL_NULLPTR)
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d119      	bne.n	800b9e0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x18a>
                rotate_3node(root_node, 1 - balance->dir,
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	3308      	adds	r3, #8
 800b9b2:	0019      	movs	r1, r3
 800b9b4:	6a3b      	ldr	r3, [r7, #32]
 800b9b6:	7a5b      	ldrb	r3, [r3, #9]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	1ad3      	subs	r3, r2, r3
 800b9bc:	b2dc      	uxtb	r4, r3
                  balance->children[1 - balance->dir]->children[balance->dir]->weight);
 800b9be:	6a3b      	ldr	r3, [r7, #32]
 800b9c0:	7a5b      	ldrb	r3, [r3, #9]
 800b9c2:	001a      	movs	r2, r3
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	1a9a      	subs	r2, r3, r2
 800b9c8:	6a3b      	ldr	r3, [r7, #32]
 800b9ca:	0092      	lsls	r2, r2, #2
 800b9cc:	58d3      	ldr	r3, [r2, r3]
 800b9ce:	6a3a      	ldr	r2, [r7, #32]
 800b9d0:	7a52      	ldrb	r2, [r2, #9]
 800b9d2:	0092      	lsls	r2, r2, #2
 800b9d4:	58d3      	ldr	r3, [r2, r3]
                rotate_3node(root_node, 1 - balance->dir,
 800b9d6:	7a1b      	ldrb	r3, [r3, #8]
 800b9d8:	0022      	movs	r2, r4
 800b9da:	f7fe fe51 	bl	800a680 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
 800b9de:	e070      	b.n	800bac2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
                rotate_3node(balance_parent->children[balance_parent->dir], 1 - balance->dir,
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e4:	7a5b      	ldrb	r3, [r3, #9]
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ea:	18d1      	adds	r1, r2, r3
 800b9ec:	6a3b      	ldr	r3, [r7, #32]
 800b9ee:	7a5b      	ldrb	r3, [r3, #9]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	b2dc      	uxtb	r4, r3
                  balance->children[1 - balance->dir]->children[balance->dir]->weight);
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	7a5b      	ldrb	r3, [r3, #9]
 800b9fa:	001a      	movs	r2, r3
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	1a9a      	subs	r2, r3, r2
 800ba00:	6a3b      	ldr	r3, [r7, #32]
 800ba02:	0092      	lsls	r2, r2, #2
 800ba04:	58d3      	ldr	r3, [r2, r3]
 800ba06:	6a3a      	ldr	r2, [r7, #32]
 800ba08:	7a52      	ldrb	r2, [r2, #9]
 800ba0a:	0092      	lsls	r2, r2, #2
 800ba0c:	58d3      	ldr	r3, [r2, r3]
                rotate_3node(balance_parent->children[balance_parent->dir], 1 - balance->dir,
 800ba0e:	7a1b      	ldrb	r3, [r3, #8]
 800ba10:	0022      	movs	r2, r4
 800ba12:	f7fe fe35 	bl	800a680 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
 800ba16:	e054      	b.n	800bac2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
            else if (weight == kNeither)
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d133      	bne.n	800ba86 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x230>
              if (balance_parent == ETL_NULLPTR)
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d111      	bne.n	800ba48 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x1f2>
                rotate_2node(root_node, 1 - balance->dir);
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	3308      	adds	r3, #8
 800ba2a:	0019      	movs	r1, r3
 800ba2c:	6a3b      	ldr	r3, [r7, #32]
 800ba2e:	7a5b      	ldrb	r3, [r3, #9]
 800ba30:	2201      	movs	r2, #1
 800ba32:	1ad3      	subs	r3, r2, r3
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	001a      	movs	r2, r3
 800ba38:	f7fe fdef 	bl	800a61a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
                root_node->weight = balance->dir;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	6a3a      	ldr	r2, [r7, #32]
 800ba42:	7a52      	ldrb	r2, [r2, #9]
 800ba44:	721a      	strb	r2, [r3, #8]
 800ba46:	e016      	b.n	800ba76 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x220>
                rotate_2node(balance_parent->children[balance_parent->dir], 1 - balance->dir);
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	7a5b      	ldrb	r3, [r3, #9]
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba52:	18d1      	adds	r1, r2, r3
 800ba54:	6a3b      	ldr	r3, [r7, #32]
 800ba56:	7a5b      	ldrb	r3, [r3, #9]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	1ad3      	subs	r3, r2, r3
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	001a      	movs	r2, r3
 800ba60:	f7fe fddb 	bl	800a61a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
                balance_parent->children[balance_parent->dir]->weight = balance->dir;
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	7a5b      	ldrb	r3, [r3, #9]
 800ba68:	001a      	movs	r2, r3
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6c:	0092      	lsls	r2, r2, #2
 800ba6e:	58d3      	ldr	r3, [r2, r3]
 800ba70:	6a3a      	ldr	r2, [r7, #32]
 800ba72:	7a52      	ldrb	r2, [r2, #9]
 800ba74:	721a      	strb	r2, [r3, #8]
              balance->weight = 1 - balance->dir;
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	7a5b      	ldrb	r3, [r3, #9]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	b2da      	uxtb	r2, r3
 800ba80:	6a3b      	ldr	r3, [r7, #32]
 800ba82:	721a      	strb	r2, [r3, #8]
 800ba84:	e01d      	b.n	800bac2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
              if (balance_parent == ETL_NULLPTR)
 800ba86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10c      	bne.n	800baa6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x250>
                rotate_2node(root_node, 1 - balance->dir);
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3308      	adds	r3, #8
 800ba92:	0019      	movs	r1, r3
 800ba94:	6a3b      	ldr	r3, [r7, #32]
 800ba96:	7a5b      	ldrb	r3, [r3, #9]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	001a      	movs	r2, r3
 800baa0:	f7fe fdbb 	bl	800a61a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
 800baa4:	e00d      	b.n	800bac2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
                rotate_2node(balance_parent->children[balance_parent->dir], 1 - balance->dir);
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baaa:	7a5b      	ldrb	r3, [r3, #9]
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bab0:	18d1      	adds	r1, r2, r3
 800bab2:	6a3b      	ldr	r3, [r7, #32]
 800bab4:	7a5b      	ldrb	r3, [r3, #9]
 800bab6:	2201      	movs	r2, #1
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	b2db      	uxtb	r3, r3
 800babc:	001a      	movs	r2, r3
 800babe:	f7fe fdac 	bl	800a61a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
            if (balance == found)
 800bac2:	6a3a      	ldr	r2, [r7, #32]
 800bac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d122      	bne.n	800bb10 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
              if (balance_parent)
 800baca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d011      	beq.n	800baf4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x29e>
                found_parent = balance_parent->children[balance_parent->dir];
 800bad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad2:	7a5b      	ldrb	r3, [r3, #9]
 800bad4:	001a      	movs	r2, r3
 800bad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad8:	0092      	lsls	r2, r2, #2
 800bada:	58d3      	ldr	r3, [r2, r3]
 800badc:	637b      	str	r3, [r7, #52]	; 0x34
                found_parent->dir = found_parent->children[kLeft] == found ? kLeft : kRight;
 800bade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bae4:	1ad3      	subs	r3, r2, r3
 800bae6:	1e5a      	subs	r2, r3, #1
 800bae8:	4193      	sbcs	r3, r2
 800baea:	b2db      	uxtb	r3, r3
 800baec:	001a      	movs	r2, r3
 800baee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baf0:	725a      	strb	r2, [r3, #9]
 800baf2:	e00d      	b.n	800bb10 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
                found_parent = root_node;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	637b      	str	r3, [r7, #52]	; 0x34
                root_node->dir = root_node->children[kLeft] == found ? kLeft : kRight;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb02:	1ad3      	subs	r3, r2, r3
 800bb04:	1e5a      	subs	r2, r3, #1
 800bb06:	4193      	sbcs	r3, r2
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	725a      	strb	r2, [r3, #9]
          balance_parent = balance;
 800bb10:	6a3b      	ldr	r3, [r7, #32]
 800bb12:	627b      	str	r3, [r7, #36]	; 0x24
          balance = balance->children[balance->dir];
 800bb14:	6a3b      	ldr	r3, [r7, #32]
 800bb16:	7a5b      	ldrb	r3, [r3, #9]
 800bb18:	001a      	movs	r2, r3
 800bb1a:	6a3b      	ldr	r3, [r7, #32]
 800bb1c:	0092      	lsls	r2, r2, #2
 800bb1e:	58d3      	ldr	r3, [r2, r3]
 800bb20:	623b      	str	r3, [r7, #32]
        while (balance)
 800bb22:	e70d      	b.n	800b940 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xea>
            break;
 800bb24:	46c0      	nop			; (mov r8, r8)
        if (found_parent)
 800bb26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00e      	beq.n	800bb4a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2f4>
          detach_node(found_parent->children[found_parent->dir],
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb30:	7a5b      	ldrb	r3, [r3, #9]
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb36:	18d1      	adds	r1, r2, r3
            replace_parent->children[replace_parent->dir]);
 800bb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3a:	7a5b      	ldrb	r3, [r3, #9]
          detach_node(found_parent->children[found_parent->dir],
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb40:	18d3      	adds	r3, r2, r3
 800bb42:	001a      	movs	r2, r3
 800bb44:	f7fe fe52 	bl	800a7ec <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
 800bb48:	e018      	b.n	800bb7c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x326>
          if (replace_parent)
 800bb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00c      	beq.n	800bb6a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x314>
            detach_node(root_node, replace_parent->children[replace_parent->dir]);
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	3308      	adds	r3, #8
 800bb56:	0019      	movs	r1, r3
 800bb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5a:	7a5b      	ldrb	r3, [r3, #9]
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb60:	18d3      	adds	r3, r2, r3
 800bb62:	001a      	movs	r2, r3
 800bb64:	f7fe fe42 	bl	800a7ec <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
 800bb68:	e008      	b.n	800bb7c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x326>
            detach_node(root_node, root_node);
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	3308      	adds	r3, #8
 800bb70:	0019      	movs	r1, r3
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	3308      	adds	r3, #8
 800bb76:	001a      	movs	r2, r3
 800bb78:	f7fe fe38 	bl	800a7ec <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
        Data_Node& found_data_node = imap::data_cast(*found);
 800bb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7e:	0018      	movs	r0, r3
 800bb80:	f7ff fcfb 	bl	800b57a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800bb84:	0003      	movs	r3, r0
 800bb86:	617b      	str	r3, [r7, #20]
        --current_size;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	1e5a      	subs	r2, r3, #1
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	601a      	str	r2, [r3, #0]
        destroy_data_node(found_data_node);
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	0011      	movs	r1, r2
 800bb98:	0018      	movs	r0, r3
 800bb9a:	f7ff fd97 	bl	800b6cc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE17destroy_data_nodeERNS7_9Data_NodeE>
      return found;
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
 800bba0:	0018      	movs	r0, r3
 800bba2:	46bd      	mov	sp, r7
 800bba4:	b00f      	add	sp, #60	; 0x3c
 800bba6:	bd90      	pop	{r4, r7, pc}

0800bba8 <_ZN3etl5ipool8allocateINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeEEEPT_v>:
    T* allocate()
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
      if (sizeof(T) > Item_Size)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	2b13      	cmp	r3, #19
 800bbb6:	d805      	bhi.n	800bbc4 <_ZN3etl5ipool8allocateINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeEEEPT_v+0x1c>
        ETL_ASSERT(false, ETL_ERROR(etl::pool_element_size));
 800bbb8:	4b07      	ldr	r3, [pc, #28]	; (800bbd8 <_ZN3etl5ipool8allocateINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeEEEPT_v+0x30>)
 800bbba:	4a08      	ldr	r2, [pc, #32]	; (800bbdc <_ZN3etl5ipool8allocateINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeEEEPT_v+0x34>)
 800bbbc:	4808      	ldr	r0, [pc, #32]	; (800bbe0 <_ZN3etl5ipool8allocateINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeEEEPT_v+0x38>)
 800bbbe:	2175      	movs	r1, #117	; 0x75
 800bbc0:	f005 fe84 	bl	80118cc <__assert_func>
      return reinterpret_cast<T*>(allocate_item());
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	0018      	movs	r0, r3
 800bbc8:	f7fe fba4 	bl	800a314 <_ZN3etl5ipool13allocate_itemEv>
 800bbcc:	0003      	movs	r3, r0
    }
 800bbce:	0018      	movs	r0, r3
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	b002      	add	sp, #8
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	46c0      	nop			; (mov r8, r8)
 800bbd8:	08012dfc 	.word	0x08012dfc
 800bbdc:	08013188 	.word	0x08013188
 800bbe0:	08012e28 	.word	0x08012e28

0800bbe4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERKNS_8map_base4NodeE>:
    static const Data_Node& data_cast(const Node& node)
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
      return static_cast<const Data_Node&>(node);
 800bbec:	687b      	ldr	r3, [r7, #4]
    }
 800bbee:	0018      	movs	r0, r3
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	b002      	add	sp, #8
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE>:
    void next_node(Node*&position)
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b084      	sub	sp, #16
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
 800bbfe:	6039      	str	r1, [r7, #0]
      if (position)
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d02d      	beq.n	800bc64 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x6e>
        if (position->children[kRight])
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00b      	beq.n	800bc2a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x34>
          position = find_limit_node(position->children[kRight], kLeft);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	0019      	movs	r1, r3
 800bc1e:	f7fe fdae 	bl	800a77e <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>
 800bc22:	0002      	movs	r2, r0
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	601a      	str	r2, [r3, #0]
    }
 800bc28:	e01c      	b.n	800bc64 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x6e>
          Node* parent = position;
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	60fb      	str	r3, [r7, #12]
            position = parent;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	68fa      	ldr	r2, [r7, #12]
 800bc34:	601a      	str	r2, [r3, #0]
            parent = find_parent_node(root_node, position);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6899      	ldr	r1, [r3, #8]
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	0018      	movs	r0, r3
 800bc42:	f000 f81c 	bl	800bc7e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_>
 800bc46:	0003      	movs	r3, r0
 800bc48:	60fb      	str	r3, [r7, #12]
          } while (parent && parent->children[kRight] == position);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d006      	beq.n	800bc5e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x68>
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	685a      	ldr	r2, [r3, #4]
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d100      	bne.n	800bc5e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x68>
          do {
 800bc5c:	e7e8      	b.n	800bc30 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x3a>
          position = parent;
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	601a      	str	r2, [r3, #0]
    }
 800bc64:	46c0      	nop			; (mov r8, r8)
 800bc66:	46bd      	mov	sp, r7
 800bc68:	b004      	add	sp, #16
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castEPKNS_8map_base4NodeE>:
    static const Data_Node* data_cast(const Node* p_node)
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
      return static_cast<const Data_Node*>(p_node);
 800bc74:	687b      	ldr	r3, [r7, #4]
    }
 800bc76:	0018      	movs	r0, r3
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	b002      	add	sp, #8
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_>:
    Node* find_parent_node(Node* position, const Node* node)
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b088      	sub	sp, #32
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	60f8      	str	r0, [r7, #12]
 800bc86:	60b9      	str	r1, [r7, #8]
 800bc88:	607a      	str	r2, [r7, #4]
      Node* found = ETL_NULLPTR;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	61fb      	str	r3, [r7, #28]
      if (position && node && position != node)
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d03c      	beq.n	800bd0e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x90>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d039      	beq.n	800bd0e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x90>
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d035      	beq.n	800bd0e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x90>
        while (position)
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d032      	beq.n	800bd0e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x90>
          if (position->children[kLeft] != node &&
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d028      	beq.n	800bd04 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x86>
            position->children[kRight] != node)
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	685b      	ldr	r3, [r3, #4]
          if (position->children[kLeft] != node &&
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d023      	beq.n	800bd04 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x86>
            const Data_Node& node_data_node = imap::data_cast(*node);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	0018      	movs	r0, r3
 800bcc0:	f7ff ff90 	bl	800bbe4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERKNS_8map_base4NodeE>
 800bcc4:	0003      	movs	r3, r0
 800bcc6:	61bb      	str	r3, [r7, #24]
            Data_Node& position_data_node = imap::data_cast(*position);
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	0018      	movs	r0, r3
 800bccc:	f7ff fc55 	bl	800b57a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800bcd0:	0003      	movs	r3, r0
 800bcd2:	617b      	str	r3, [r7, #20]
            if (node_comp(node_data_node, position_data_node))
 800bcd4:	697a      	ldr	r2, [r7, #20]
 800bcd6:	69b9      	ldr	r1, [r7, #24]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	0018      	movs	r0, r3
 800bcdc:	f7ff fce0 	bl	800b6a0 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 800bce0:	1e03      	subs	r3, r0, #0
 800bce2:	d003      	beq.n	800bcec <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x6e>
              position = position->children[kLeft];
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	60bb      	str	r3, [r7, #8]
            }
 800bcea:	e00e      	b.n	800bd0a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x8c>
            else if (node_comp(position_data_node, node_data_node))
 800bcec:	69ba      	ldr	r2, [r7, #24]
 800bcee:	6979      	ldr	r1, [r7, #20]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	0018      	movs	r0, r3
 800bcf4:	f7ff fcd4 	bl	800b6a0 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 800bcf8:	1e03      	subs	r3, r0, #0
 800bcfa:	d006      	beq.n	800bd0a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x8c>
              position = position->children[kRight];
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	60bb      	str	r3, [r7, #8]
            }
 800bd02:	e002      	b.n	800bd0a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x8c>
            found = position;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	61fb      	str	r3, [r7, #28]
            break;
 800bd08:	e001      	b.n	800bd0e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x90>
            }
 800bd0a:	46c0      	nop			; (mov r8, r8)
        while (position)
 800bd0c:	e7c9      	b.n	800bca2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x24>
      return found;
 800bd0e:	69fb      	ldr	r3, [r7, #28]
    }
 800bd10:	0018      	movs	r0, r3
 800bd12:	46bd      	mov	sp, r7
 800bd14:	b008      	add	sp, #32
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>:

#include <LED.hpp>

namespace SolarGators::Drivers {

LED::LED(const char* name, GPIO_TypeDef* port, uint16_t pin):on_(false), name_(name), port_(port), pin_(pin)
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
 800bd24:	001a      	movs	r2, r3
 800bd26:	1cbb      	adds	r3, r7, #2
 800bd28:	801a      	strh	r2, [r3, #0]
 800bd2a:	4a0c      	ldr	r2, [pc, #48]	; (800bd5c <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft+0x44>)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	601a      	str	r2, [r3, #0]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2200      	movs	r2, #0
 800bd34:	711a      	strb	r2, [r3, #4]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	609a      	str	r2, [r3, #8]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	60da      	str	r2, [r3, #12]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	1cba      	adds	r2, r7, #2
 800bd46:	8812      	ldrh	r2, [r2, #0]
 800bd48:	821a      	strh	r2, [r3, #16]
{
  TurnOff();
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	0018      	movs	r0, r3
 800bd4e:	f000 f83a 	bl	800bdc6 <_ZN11SolarGators7Drivers3LED7TurnOffEv>
}
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	0018      	movs	r0, r3
 800bd56:	46bd      	mov	sp, r7
 800bd58:	b004      	add	sp, #16
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	08013378 	.word	0x08013378

0800bd60 <_ZN11SolarGators7Drivers3LEDD1Ev>:

LED::~LED()
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	4a03      	ldr	r2, [pc, #12]	; (800bd78 <_ZN11SolarGators7Drivers3LEDD1Ev+0x18>)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	601a      	str	r2, [r3, #0]
{

}
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	0018      	movs	r0, r3
 800bd72:	46bd      	mov	sp, r7
 800bd74:	b002      	add	sp, #8
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	08013378 	.word	0x08013378

0800bd7c <_ZN11SolarGators7Drivers3LEDD0Ev>:
LED::~LED()
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
}
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	0018      	movs	r0, r3
 800bd88:	f7ff ffea 	bl	800bd60 <_ZN11SolarGators7Drivers3LEDD1Ev>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2114      	movs	r1, #20
 800bd90:	0018      	movs	r0, r3
 800bd92:	f005 fd7b 	bl	801188c <_ZdlPvj>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	0018      	movs	r0, r3
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	b002      	add	sp, #8
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <_ZN11SolarGators7Drivers3LED6TurnOnEv>:

void LED::TurnOn()
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(port_, pin_, GPIO_PIN_SET);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	68d8      	ldr	r0, [r3, #12]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	8a1b      	ldrh	r3, [r3, #16]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	0019      	movs	r1, r3
 800bdb4:	f7f7 fd52 	bl	800385c <HAL_GPIO_WritePin>
  on_ = true;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	711a      	strb	r2, [r3, #4]
}
 800bdbe:	46c0      	nop			; (mov r8, r8)
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	b002      	add	sp, #8
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <_ZN11SolarGators7Drivers3LED7TurnOffEv>:
void LED::TurnOff()
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b082      	sub	sp, #8
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(port_, pin_, GPIO_PIN_RESET);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	68d8      	ldr	r0, [r3, #12]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	8a1b      	ldrh	r3, [r3, #16]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	0019      	movs	r1, r3
 800bdda:	f7f7 fd3f 	bl	800385c <HAL_GPIO_WritePin>
  on_ = false;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	711a      	strb	r2, [r3, #4]
}
 800bde4:	46c0      	nop			; (mov r8, r8)
 800bde6:	46bd      	mov	sp, r7
 800bde8:	b002      	add	sp, #8
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <_ZN11SolarGators7Drivers3LED6ToggleEv>:
void LED::Toggle()
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(port_, pin_);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68da      	ldr	r2, [r3, #12]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	8a1b      	ldrh	r3, [r3, #16]
 800bdfc:	0019      	movs	r1, r3
 800bdfe:	0010      	movs	r0, r2
 800be00:	f7f7 fd49 	bl	8003896 <HAL_GPIO_TogglePin>
  on_ = !on_;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	791b      	ldrb	r3, [r3, #4]
 800be08:	2201      	movs	r2, #1
 800be0a:	4053      	eors	r3, r2
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	711a      	strb	r2, [r3, #4]
}
 800be12:	46c0      	nop			; (mov r8, r8)
 800be14:	46bd      	mov	sp, r7
 800be16:	b002      	add	sp, #8
 800be18:	bd80      	pop	{r7, pc}

0800be1a <_ZN11SolarGators7Drivers3LED4IsOnEv>:
{
  return on_;
}

bool LED::IsOn()
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b082      	sub	sp, #8
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
  return on_;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	791b      	ldrb	r3, [r3, #4]
}
 800be26:	0018      	movs	r0, r3
 800be28:	46bd      	mov	sp, r7
 800be2a:	b002      	add	sp, #8
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b084      	sub	sp, #16
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	000a      	movs	r2, r1
 800be38:	1cfb      	adds	r3, r7, #3
 800be3a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800be3c:	230f      	movs	r3, #15
 800be3e:	18fb      	adds	r3, r7, r3
 800be40:	2200      	movs	r2, #0
 800be42:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	7c1b      	ldrb	r3, [r3, #16]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d116      	bne.n	800be7a <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800be4c:	2380      	movs	r3, #128	; 0x80
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	2202      	movs	r2, #2
 800be54:	2181      	movs	r1, #129	; 0x81
 800be56:	f005 fb2e 	bl	80114b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2201      	movs	r2, #1
 800be5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800be60:	2380      	movs	r3, #128	; 0x80
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	2202      	movs	r2, #2
 800be68:	2101      	movs	r1, #1
 800be6a:	f005 fb24 	bl	80114b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	23b6      	movs	r3, #182	; 0xb6
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	2101      	movs	r1, #1
 800be76:	50d1      	str	r1, [r2, r3]
 800be78:	e013      	b.n	800bea2 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	2340      	movs	r3, #64	; 0x40
 800be7e:	2202      	movs	r2, #2
 800be80:	2181      	movs	r1, #129	; 0x81
 800be82:	f005 fb18 	bl	80114b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2201      	movs	r2, #1
 800be8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	2340      	movs	r3, #64	; 0x40
 800be90:	2202      	movs	r2, #2
 800be92:	2101      	movs	r1, #1
 800be94:	f005 fb0f 	bl	80114b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	23b6      	movs	r3, #182	; 0xb6
 800be9c:	005b      	lsls	r3, r3, #1
 800be9e:	2101      	movs	r1, #1
 800bea0:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	2308      	movs	r3, #8
 800bea6:	2203      	movs	r2, #3
 800bea8:	2182      	movs	r1, #130	; 0x82
 800beaa:	f005 fb04 	bl	80114b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2201      	movs	r2, #1
 800beb2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800beb4:	2387      	movs	r3, #135	; 0x87
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	0018      	movs	r0, r3
 800beba:	f005 fc95 	bl	80117e8 <USBD_static_malloc>
 800bebe:	0001      	movs	r1, r0
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	23ae      	movs	r3, #174	; 0xae
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	23ae      	movs	r3, #174	; 0xae
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	58d3      	ldr	r3, [r2, r3]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d104      	bne.n	800bede <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800bed4:	230f      	movs	r3, #15
 800bed6:	18fb      	adds	r3, r7, r3
 800bed8:	2201      	movs	r2, #1
 800beda:	701a      	strb	r2, [r3, #0]
 800bedc:	e02c      	b.n	800bf38 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	23ae      	movs	r3, #174	; 0xae
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	58d3      	ldr	r3, [r2, r3]
 800bee6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	23af      	movs	r3, #175	; 0xaf
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	58d3      	ldr	r3, [r2, r3]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800bef4:	68ba      	ldr	r2, [r7, #8]
 800bef6:	2385      	movs	r3, #133	; 0x85
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	2100      	movs	r1, #0
 800befc:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800befe:	68ba      	ldr	r2, [r7, #8]
 800bf00:	2386      	movs	r3, #134	; 0x86
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	2100      	movs	r1, #0
 800bf06:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	7c1b      	ldrb	r3, [r3, #16]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d10a      	bne.n	800bf26 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf10:	68ba      	ldr	r2, [r7, #8]
 800bf12:	2381      	movs	r3, #129	; 0x81
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	58d2      	ldr	r2, [r2, r3]
 800bf18:	2380      	movs	r3, #128	; 0x80
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	2101      	movs	r1, #1
 800bf20:	f005 fc14 	bl	801174c <USBD_LL_PrepareReceive>
 800bf24:	e008      	b.n	800bf38 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf26:	68ba      	ldr	r2, [r7, #8]
 800bf28:	2381      	movs	r3, #129	; 0x81
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	58d2      	ldr	r2, [r2, r3]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	2340      	movs	r3, #64	; 0x40
 800bf32:	2101      	movs	r1, #1
 800bf34:	f005 fc0a 	bl	801174c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bf38:	230f      	movs	r3, #15
 800bf3a:	18fb      	adds	r3, r7, r3
 800bf3c:	781b      	ldrb	r3, [r3, #0]
}
 800bf3e:	0018      	movs	r0, r3
 800bf40:	46bd      	mov	sp, r7
 800bf42:	b004      	add	sp, #16
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b084      	sub	sp, #16
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	000a      	movs	r2, r1
 800bf50:	1cfb      	adds	r3, r7, #3
 800bf52:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800bf54:	230f      	movs	r3, #15
 800bf56:	18fb      	adds	r3, r7, r3
 800bf58:	2200      	movs	r2, #0
 800bf5a:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2181      	movs	r1, #129	; 0x81
 800bf60:	0018      	movs	r0, r3
 800bf62:	f005 fadf 	bl	8011524 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2101      	movs	r1, #1
 800bf70:	0018      	movs	r0, r3
 800bf72:	f005 fad7 	bl	8011524 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	23b6      	movs	r3, #182	; 0xb6
 800bf7a:	005b      	lsls	r3, r3, #1
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2182      	movs	r1, #130	; 0x82
 800bf84:	0018      	movs	r0, r3
 800bf86:	f005 facd 	bl	8011524 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	23ae      	movs	r3, #174	; 0xae
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	58d3      	ldr	r3, [r2, r3]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d011      	beq.n	800bfc0 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	23af      	movs	r3, #175	; 0xaf
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	58d3      	ldr	r3, [r2, r3]
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	23ae      	movs	r3, #174	; 0xae
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	58d3      	ldr	r3, [r2, r3]
 800bfb0:	0018      	movs	r0, r3
 800bfb2:	f005 fc25 	bl	8011800 <USBD_static_free>
    pdev->pClassData = NULL;
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	23ae      	movs	r3, #174	; 0xae
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	2100      	movs	r1, #0
 800bfbe:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800bfc0:	230f      	movs	r3, #15
 800bfc2:	18fb      	adds	r3, r7, r3
 800bfc4:	781b      	ldrb	r3, [r3, #0]
}
 800bfc6:	0018      	movs	r0, r3
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	b004      	add	sp, #16
 800bfcc:	bd80      	pop	{r7, pc}
	...

0800bfd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	23ae      	movs	r3, #174	; 0xae
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	58d3      	ldr	r3, [r2, r3]
 800bfe2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bfe4:	230f      	movs	r3, #15
 800bfe6:	18fb      	adds	r3, r7, r3
 800bfe8:	2200      	movs	r2, #0
 800bfea:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800bfec:	230c      	movs	r3, #12
 800bfee:	18fb      	adds	r3, r7, r3
 800bff0:	2200      	movs	r2, #0
 800bff2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800bff4:	2317      	movs	r3, #23
 800bff6:	18fb      	adds	r3, r7, r3
 800bff8:	2200      	movs	r2, #0
 800bffa:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	001a      	movs	r2, r3
 800c002:	2360      	movs	r3, #96	; 0x60
 800c004:	4013      	ands	r3, r2
 800c006:	d03d      	beq.n	800c084 <USBD_CDC_Setup+0xb4>
 800c008:	2b20      	cmp	r3, #32
 800c00a:	d000      	beq.n	800c00e <USBD_CDC_Setup+0x3e>
 800c00c:	e094      	b.n	800c138 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	88db      	ldrh	r3, [r3, #6]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d02b      	beq.n	800c06e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	b25b      	sxtb	r3, r3
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	da12      	bge.n	800c046 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	23af      	movs	r3, #175	; 0xaf
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	58d3      	ldr	r3, [r2, r3]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	683a      	ldr	r2, [r7, #0]
 800c02c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800c02e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c030:	683a      	ldr	r2, [r7, #0]
 800c032:	88d2      	ldrh	r2, [r2, #6]
 800c034:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c036:	6939      	ldr	r1, [r7, #16]
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	88da      	ldrh	r2, [r3, #6]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	0018      	movs	r0, r3
 800c040:	f001 fb7c 	bl	800d73c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800c044:	e083      	b.n	800c14e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	7859      	ldrb	r1, [r3, #1]
 800c04a:	693a      	ldr	r2, [r7, #16]
 800c04c:	2380      	movs	r3, #128	; 0x80
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	88db      	ldrh	r3, [r3, #6]
 800c056:	b2d9      	uxtb	r1, r3
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	4a40      	ldr	r2, [pc, #256]	; (800c15c <USBD_CDC_Setup+0x18c>)
 800c05c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c05e:	6939      	ldr	r1, [r7, #16]
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	88da      	ldrh	r2, [r3, #6]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	0018      	movs	r0, r3
 800c068:	f001 fb9b 	bl	800d7a2 <USBD_CtlPrepareRx>
      break;
 800c06c:	e06f      	b.n	800c14e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	23af      	movs	r3, #175	; 0xaf
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	58d3      	ldr	r3, [r2, r3]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	7850      	ldrb	r0, [r2, #1]
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	2200      	movs	r2, #0
 800c080:	4798      	blx	r3
      break;
 800c082:	e064      	b.n	800c14e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	785b      	ldrb	r3, [r3, #1]
 800c088:	2b0b      	cmp	r3, #11
 800c08a:	d037      	beq.n	800c0fc <USBD_CDC_Setup+0x12c>
 800c08c:	dc47      	bgt.n	800c11e <USBD_CDC_Setup+0x14e>
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d002      	beq.n	800c098 <USBD_CDC_Setup+0xc8>
 800c092:	2b0a      	cmp	r3, #10
 800c094:	d019      	beq.n	800c0ca <USBD_CDC_Setup+0xfa>
 800c096:	e042      	b.n	800c11e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	23a7      	movs	r3, #167	; 0xa7
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	5cd3      	ldrb	r3, [r2, r3]
 800c0a0:	2b03      	cmp	r3, #3
 800c0a2:	d107      	bne.n	800c0b4 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800c0a4:	230c      	movs	r3, #12
 800c0a6:	18f9      	adds	r1, r7, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2202      	movs	r2, #2
 800c0ac:	0018      	movs	r0, r3
 800c0ae:	f001 fb45 	bl	800d73c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0b2:	e040      	b.n	800c136 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800c0b4:	683a      	ldr	r2, [r7, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	0011      	movs	r1, r2
 800c0ba:	0018      	movs	r0, r3
 800c0bc:	f001 fac0 	bl	800d640 <USBD_CtlError>
            ret = USBD_FAIL;
 800c0c0:	2317      	movs	r3, #23
 800c0c2:	18fb      	adds	r3, r7, r3
 800c0c4:	2202      	movs	r2, #2
 800c0c6:	701a      	strb	r2, [r3, #0]
          break;
 800c0c8:	e035      	b.n	800c136 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	23a7      	movs	r3, #167	; 0xa7
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	5cd3      	ldrb	r3, [r2, r3]
 800c0d2:	2b03      	cmp	r3, #3
 800c0d4:	d107      	bne.n	800c0e6 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800c0d6:	230f      	movs	r3, #15
 800c0d8:	18f9      	adds	r1, r7, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	0018      	movs	r0, r3
 800c0e0:	f001 fb2c 	bl	800d73c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0e4:	e027      	b.n	800c136 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	0011      	movs	r1, r2
 800c0ec:	0018      	movs	r0, r3
 800c0ee:	f001 faa7 	bl	800d640 <USBD_CtlError>
            ret = USBD_FAIL;
 800c0f2:	2317      	movs	r3, #23
 800c0f4:	18fb      	adds	r3, r7, r3
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	701a      	strb	r2, [r3, #0]
          break;
 800c0fa:	e01c      	b.n	800c136 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	23a7      	movs	r3, #167	; 0xa7
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	5cd3      	ldrb	r3, [r2, r3]
 800c104:	2b03      	cmp	r3, #3
 800c106:	d015      	beq.n	800c134 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800c108:	683a      	ldr	r2, [r7, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	0011      	movs	r1, r2
 800c10e:	0018      	movs	r0, r3
 800c110:	f001 fa96 	bl	800d640 <USBD_CtlError>
            ret = USBD_FAIL;
 800c114:	2317      	movs	r3, #23
 800c116:	18fb      	adds	r3, r7, r3
 800c118:	2202      	movs	r2, #2
 800c11a:	701a      	strb	r2, [r3, #0]
          }
          break;
 800c11c:	e00a      	b.n	800c134 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800c11e:	683a      	ldr	r2, [r7, #0]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	0011      	movs	r1, r2
 800c124:	0018      	movs	r0, r3
 800c126:	f001 fa8b 	bl	800d640 <USBD_CtlError>
          ret = USBD_FAIL;
 800c12a:	2317      	movs	r3, #23
 800c12c:	18fb      	adds	r3, r7, r3
 800c12e:	2202      	movs	r2, #2
 800c130:	701a      	strb	r2, [r3, #0]
          break;
 800c132:	e000      	b.n	800c136 <USBD_CDC_Setup+0x166>
          break;
 800c134:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800c136:	e00a      	b.n	800c14e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	0011      	movs	r1, r2
 800c13e:	0018      	movs	r0, r3
 800c140:	f001 fa7e 	bl	800d640 <USBD_CtlError>
      ret = USBD_FAIL;
 800c144:	2317      	movs	r3, #23
 800c146:	18fb      	adds	r3, r7, r3
 800c148:	2202      	movs	r2, #2
 800c14a:	701a      	strb	r2, [r3, #0]
      break;
 800c14c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800c14e:	2317      	movs	r3, #23
 800c150:	18fb      	adds	r3, r7, r3
 800c152:	781b      	ldrb	r3, [r3, #0]
}
 800c154:	0018      	movs	r0, r3
 800c156:	46bd      	mov	sp, r7
 800c158:	b006      	add	sp, #24
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	00000201 	.word	0x00000201

0800c160 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	000a      	movs	r2, r1
 800c16a:	1cfb      	adds	r3, r7, #3
 800c16c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	23ae      	movs	r3, #174	; 0xae
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	58d3      	ldr	r3, [r2, r3]
 800c176:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	23b0      	movs	r3, #176	; 0xb0
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	58d3      	ldr	r3, [r2, r3]
 800c180:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	23ae      	movs	r3, #174	; 0xae
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	58d3      	ldr	r3, [r2, r3]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d03e      	beq.n	800c20c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c18e:	1cfb      	adds	r3, r7, #3
 800c190:	781a      	ldrb	r2, [r3, #0]
 800c192:	6879      	ldr	r1, [r7, #4]
 800c194:	0013      	movs	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	189b      	adds	r3, r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	18cb      	adds	r3, r1, r3
 800c19e:	331c      	adds	r3, #28
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d02b      	beq.n	800c1fe <USBD_CDC_DataIn+0x9e>
 800c1a6:	1cfb      	adds	r3, r7, #3
 800c1a8:	781a      	ldrb	r2, [r3, #0]
 800c1aa:	6879      	ldr	r1, [r7, #4]
 800c1ac:	0013      	movs	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	189b      	adds	r3, r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	18cb      	adds	r3, r1, r3
 800c1b6:	331c      	adds	r3, #28
 800c1b8:	6818      	ldr	r0, [r3, #0]
 800c1ba:	1cfb      	adds	r3, r7, #3
 800c1bc:	781a      	ldrb	r2, [r3, #0]
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	0013      	movs	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	189b      	adds	r3, r3, r2
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	18cb      	adds	r3, r1, r3
 800c1ca:	3338      	adds	r3, #56	; 0x38
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	0019      	movs	r1, r3
 800c1d0:	f7f4 f82a 	bl	8000228 <__aeabi_uidivmod>
 800c1d4:	1e0b      	subs	r3, r1, #0
 800c1d6:	d112      	bne.n	800c1fe <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c1d8:	1cfb      	adds	r3, r7, #3
 800c1da:	781a      	ldrb	r2, [r3, #0]
 800c1dc:	6879      	ldr	r1, [r7, #4]
 800c1de:	0013      	movs	r3, r2
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	189b      	adds	r3, r3, r2
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	18cb      	adds	r3, r1, r3
 800c1e8:	331c      	adds	r3, #28
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c1ee:	1cfb      	adds	r3, r7, #3
 800c1f0:	7819      	ldrb	r1, [r3, #0]
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f005 fa71 	bl	80116de <USBD_LL_Transmit>
 800c1fc:	e004      	b.n	800c208 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	2385      	movs	r3, #133	; 0x85
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	2100      	movs	r1, #0
 800c206:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800c208:	2300      	movs	r3, #0
 800c20a:	e000      	b.n	800c20e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800c20c:	2302      	movs	r3, #2
  }
}
 800c20e:	0018      	movs	r0, r3
 800c210:	46bd      	mov	sp, r7
 800c212:	b004      	add	sp, #16
 800c214:	bd80      	pop	{r7, pc}

0800c216 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b084      	sub	sp, #16
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	000a      	movs	r2, r1
 800c220:	1cfb      	adds	r3, r7, #3
 800c222:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	23ae      	movs	r3, #174	; 0xae
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	58d3      	ldr	r3, [r2, r3]
 800c22c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c22e:	1cfb      	adds	r3, r7, #3
 800c230:	781a      	ldrb	r2, [r3, #0]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	0011      	movs	r1, r2
 800c236:	0018      	movs	r0, r3
 800c238:	f005 fabf 	bl	80117ba <USBD_LL_GetRxDataSize>
 800c23c:	0001      	movs	r1, r0
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	2383      	movs	r3, #131	; 0x83
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	23ae      	movs	r3, #174	; 0xae
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	58d3      	ldr	r3, [r2, r3]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d011      	beq.n	800c276 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	23af      	movs	r3, #175	; 0xaf
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	58d3      	ldr	r3, [r2, r3]
 800c25a:	68da      	ldr	r2, [r3, #12]
 800c25c:	68f9      	ldr	r1, [r7, #12]
 800c25e:	2381      	movs	r3, #129	; 0x81
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	58c8      	ldr	r0, [r1, r3]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2183      	movs	r1, #131	; 0x83
 800c268:	0089      	lsls	r1, r1, #2
 800c26a:	468c      	mov	ip, r1
 800c26c:	4463      	add	r3, ip
 800c26e:	0019      	movs	r1, r3
 800c270:	4790      	blx	r2

    return USBD_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	e000      	b.n	800c278 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800c276:	2302      	movs	r3, #2
  }
}
 800c278:	0018      	movs	r0, r3
 800c27a:	46bd      	mov	sp, r7
 800c27c:	b004      	add	sp, #16
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c280:	b590      	push	{r4, r7, lr}
 800c282:	b085      	sub	sp, #20
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	23ae      	movs	r3, #174	; 0xae
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	58d3      	ldr	r3, [r2, r3]
 800c290:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	23af      	movs	r3, #175	; 0xaf
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	58d3      	ldr	r3, [r2, r3]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d019      	beq.n	800c2d2 <USBD_CDC_EP0_RxReady+0x52>
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	2380      	movs	r3, #128	; 0x80
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	5cd3      	ldrb	r3, [r2, r3]
 800c2a6:	2bff      	cmp	r3, #255	; 0xff
 800c2a8:	d013      	beq.n	800c2d2 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	23af      	movs	r3, #175	; 0xaf
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	58d3      	ldr	r3, [r2, r3]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	68f9      	ldr	r1, [r7, #12]
 800c2b6:	2280      	movs	r2, #128	; 0x80
 800c2b8:	0092      	lsls	r2, r2, #2
 800c2ba:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800c2bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c2be:	68fa      	ldr	r2, [r7, #12]
 800c2c0:	4c06      	ldr	r4, [pc, #24]	; (800c2dc <USBD_CDC_EP0_RxReady+0x5c>)
 800c2c2:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c2c4:	b292      	uxth	r2, r2
 800c2c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	2380      	movs	r3, #128	; 0x80
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	21ff      	movs	r1, #255	; 0xff
 800c2d0:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	0018      	movs	r0, r3
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	b005      	add	sp, #20
 800c2da:	bd90      	pop	{r4, r7, pc}
 800c2dc:	00000201 	.word	0x00000201

0800c2e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2243      	movs	r2, #67	; 0x43
 800c2ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c2ee:	4b02      	ldr	r3, [pc, #8]	; (800c2f8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800c2f0:	0018      	movs	r0, r3
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	b002      	add	sp, #8
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	200000ec 	.word	0x200000ec

0800c2fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2243      	movs	r2, #67	; 0x43
 800c308:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c30a:	4b02      	ldr	r3, [pc, #8]	; (800c314 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800c30c:	0018      	movs	r0, r3
 800c30e:	46bd      	mov	sp, r7
 800c310:	b002      	add	sp, #8
 800c312:	bd80      	pop	{r7, pc}
 800c314:	200000a8 	.word	0x200000a8

0800c318 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2243      	movs	r2, #67	; 0x43
 800c324:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c326:	4b02      	ldr	r3, [pc, #8]	; (800c330 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800c328:	0018      	movs	r0, r3
 800c32a:	46bd      	mov	sp, r7
 800c32c:	b002      	add	sp, #8
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	20000130 	.word	0x20000130

0800c334 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	220a      	movs	r2, #10
 800c340:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c342:	4b02      	ldr	r3, [pc, #8]	; (800c34c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800c344:	0018      	movs	r0, r3
 800c346:	46bd      	mov	sp, r7
 800c348:	b002      	add	sp, #8
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	20000064 	.word	0x20000064

0800c350 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c35a:	200f      	movs	r0, #15
 800c35c:	183b      	adds	r3, r7, r0
 800c35e:	2202      	movs	r2, #2
 800c360:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d007      	beq.n	800c378 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	23af      	movs	r3, #175	; 0xaf
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	6839      	ldr	r1, [r7, #0]
 800c370:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800c372:	183b      	adds	r3, r7, r0
 800c374:	2200      	movs	r2, #0
 800c376:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800c378:	230f      	movs	r3, #15
 800c37a:	18fb      	adds	r3, r7, r3
 800c37c:	781b      	ldrb	r3, [r3, #0]
}
 800c37e:	0018      	movs	r0, r3
 800c380:	46bd      	mov	sp, r7
 800c382:	b004      	add	sp, #16
 800c384:	bd80      	pop	{r7, pc}

0800c386 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c386:	b580      	push	{r7, lr}
 800c388:	b086      	sub	sp, #24
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	60f8      	str	r0, [r7, #12]
 800c38e:	60b9      	str	r1, [r7, #8]
 800c390:	1dbb      	adds	r3, r7, #6
 800c392:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	23ae      	movs	r3, #174	; 0xae
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	58d3      	ldr	r3, [r2, r3]
 800c39c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	2382      	movs	r3, #130	; 0x82
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	68b9      	ldr	r1, [r7, #8]
 800c3a6:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800c3a8:	1dbb      	adds	r3, r7, #6
 800c3aa:	8819      	ldrh	r1, [r3, #0]
 800c3ac:	697a      	ldr	r2, [r7, #20]
 800c3ae:	2384      	movs	r3, #132	; 0x84
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	0018      	movs	r0, r3
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	b006      	add	sp, #24
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b084      	sub	sp, #16
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	23ae      	movs	r3, #174	; 0xae
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	58d3      	ldr	r3, [r2, r3]
 800c3d0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	2381      	movs	r3, #129	; 0x81
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	6839      	ldr	r1, [r7, #0]
 800c3da:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	0018      	movs	r0, r3
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	b004      	add	sp, #16
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	23ae      	movs	r3, #174	; 0xae
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	58d3      	ldr	r3, [r2, r3]
 800c3f6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	23ae      	movs	r3, #174	; 0xae
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	58d3      	ldr	r3, [r2, r3]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d019      	beq.n	800c438 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	7c1b      	ldrb	r3, [r3, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10a      	bne.n	800c422 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	2381      	movs	r3, #129	; 0x81
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	58d2      	ldr	r2, [r2, r3]
 800c414:	2380      	movs	r3, #128	; 0x80
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	2101      	movs	r1, #1
 800c41c:	f005 f996 	bl	801174c <USBD_LL_PrepareReceive>
 800c420:	e008      	b.n	800c434 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	2381      	movs	r3, #129	; 0x81
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	58d2      	ldr	r2, [r2, r3]
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	2340      	movs	r3, #64	; 0x40
 800c42e:	2101      	movs	r1, #1
 800c430:	f005 f98c 	bl	801174c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c434:	2300      	movs	r3, #0
 800c436:	e000      	b.n	800c43a <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800c438:	2302      	movs	r3, #2
  }
}
 800c43a:	0018      	movs	r0, r3
 800c43c:	46bd      	mov	sp, r7
 800c43e:	b004      	add	sp, #16
 800c440:	bd80      	pop	{r7, pc}

0800c442 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b084      	sub	sp, #16
 800c446:	af00      	add	r7, sp, #0
 800c448:	60f8      	str	r0, [r7, #12]
 800c44a:	60b9      	str	r1, [r7, #8]
 800c44c:	1dfb      	adds	r3, r7, #7
 800c44e:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d101      	bne.n	800c45a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c456:	2302      	movs	r3, #2
 800c458:	e020      	b.n	800c49c <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	23ad      	movs	r3, #173	; 0xad
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	58d3      	ldr	r3, [r2, r3]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d004      	beq.n	800c470 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800c466:	68fa      	ldr	r2, [r7, #12]
 800c468:	23ad      	movs	r3, #173	; 0xad
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	2100      	movs	r1, #0
 800c46e:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d004      	beq.n	800c480 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c476:	68fa      	ldr	r2, [r7, #12]
 800c478:	23ac      	movs	r3, #172	; 0xac
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	68b9      	ldr	r1, [r7, #8]
 800c47e:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	23a7      	movs	r3, #167	; 0xa7
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	2101      	movs	r1, #1
 800c488:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	1dfa      	adds	r2, r7, #7
 800c48e:	7812      	ldrb	r2, [r2, #0]
 800c490:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	0018      	movs	r0, r3
 800c496:	f004 ff85 	bl	80113a4 <USBD_LL_Init>

  return USBD_OK;
 800c49a:	2300      	movs	r3, #0
}
 800c49c:	0018      	movs	r0, r3
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	b004      	add	sp, #16
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c4ae:	200f      	movs	r0, #15
 800c4b0:	183b      	adds	r3, r7, r0
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d008      	beq.n	800c4ce <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	23ad      	movs	r3, #173	; 0xad
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	6839      	ldr	r1, [r7, #0]
 800c4c4:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800c4c6:	183b      	adds	r3, r7, r0
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	701a      	strb	r2, [r3, #0]
 800c4cc:	e003      	b.n	800c4d6 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c4ce:	230f      	movs	r3, #15
 800c4d0:	18fb      	adds	r3, r7, r3
 800c4d2:	2202      	movs	r2, #2
 800c4d4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800c4d6:	230f      	movs	r3, #15
 800c4d8:	18fb      	adds	r3, r7, r3
 800c4da:	781b      	ldrb	r3, [r3, #0]
}
 800c4dc:	0018      	movs	r0, r3
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	b004      	add	sp, #16
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	0018      	movs	r0, r3
 800c4f0:	f004 ffbc 	bl	801146c <USBD_LL_Start>

  return USBD_OK;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	0018      	movs	r0, r3
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	b002      	add	sp, #8
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b082      	sub	sp, #8
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c506:	2300      	movs	r3, #0
}
 800c508:	0018      	movs	r0, r3
 800c50a:	46bd      	mov	sp, r7
 800c50c:	b002      	add	sp, #8
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c510:	b590      	push	{r4, r7, lr}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	000a      	movs	r2, r1
 800c51a:	1cfb      	adds	r3, r7, #3
 800c51c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c51e:	240f      	movs	r4, #15
 800c520:	193b      	adds	r3, r7, r4
 800c522:	2202      	movs	r2, #2
 800c524:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	23ad      	movs	r3, #173	; 0xad
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	58d3      	ldr	r3, [r2, r3]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00e      	beq.n	800c550 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	23ad      	movs	r3, #173	; 0xad
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	58d3      	ldr	r3, [r2, r3]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	1cfa      	adds	r2, r7, #3
 800c53e:	7811      	ldrb	r1, [r2, #0]
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	0010      	movs	r0, r2
 800c544:	4798      	blx	r3
 800c546:	1e03      	subs	r3, r0, #0
 800c548:	d102      	bne.n	800c550 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800c54a:	193b      	adds	r3, r7, r4
 800c54c:	2200      	movs	r2, #0
 800c54e:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800c550:	230f      	movs	r3, #15
 800c552:	18fb      	adds	r3, r7, r3
 800c554:	781b      	ldrb	r3, [r3, #0]
}
 800c556:	0018      	movs	r0, r3
 800c558:	46bd      	mov	sp, r7
 800c55a:	b005      	add	sp, #20
 800c55c:	bd90      	pop	{r4, r7, pc}

0800c55e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b082      	sub	sp, #8
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
 800c566:	000a      	movs	r2, r1
 800c568:	1cfb      	adds	r3, r7, #3
 800c56a:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	23ad      	movs	r3, #173	; 0xad
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	58d3      	ldr	r3, [r2, r3]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	1cfa      	adds	r2, r7, #3
 800c578:	7811      	ldrb	r1, [r2, #0]
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	0010      	movs	r0, r2
 800c57e:	4798      	blx	r3

  return USBD_OK;
 800c580:	2300      	movs	r3, #0
}
 800c582:	0018      	movs	r0, r3
 800c584:	46bd      	mov	sp, r7
 800c586:	b002      	add	sp, #8
 800c588:	bd80      	pop	{r7, pc}
	...

0800c58c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	22aa      	movs	r2, #170	; 0xaa
 800c59a:	0092      	lsls	r2, r2, #2
 800c59c:	4694      	mov	ip, r2
 800c59e:	4463      	add	r3, ip
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	0011      	movs	r1, r2
 800c5a4:	0018      	movs	r0, r3
 800c5a6:	f001 f810 	bl	800d5ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	23a5      	movs	r3, #165	; 0xa5
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	2101      	movs	r1, #1
 800c5b2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a23      	ldr	r2, [pc, #140]	; (800c644 <USBD_LL_SetupStage+0xb8>)
 800c5b8:	5a9b      	ldrh	r3, [r3, r2]
 800c5ba:	0019      	movs	r1, r3
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	23a6      	movs	r3, #166	; 0xa6
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	23aa      	movs	r3, #170	; 0xaa
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	5cd3      	ldrb	r3, [r2, r3]
 800c5cc:	001a      	movs	r2, r3
 800c5ce:	231f      	movs	r3, #31
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	2b02      	cmp	r3, #2
 800c5d4:	d019      	beq.n	800c60a <USBD_LL_SetupStage+0x7e>
 800c5d6:	d822      	bhi.n	800c61e <USBD_LL_SetupStage+0x92>
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d002      	beq.n	800c5e2 <USBD_LL_SetupStage+0x56>
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d00a      	beq.n	800c5f6 <USBD_LL_SetupStage+0x6a>
 800c5e0:	e01d      	b.n	800c61e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	22aa      	movs	r2, #170	; 0xaa
 800c5e6:	0092      	lsls	r2, r2, #2
 800c5e8:	189a      	adds	r2, r3, r2
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	0011      	movs	r1, r2
 800c5ee:	0018      	movs	r0, r3
 800c5f0:	f000 fa10 	bl	800ca14 <USBD_StdDevReq>
      break;
 800c5f4:	e020      	b.n	800c638 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	22aa      	movs	r2, #170	; 0xaa
 800c5fa:	0092      	lsls	r2, r2, #2
 800c5fc:	189a      	adds	r2, r3, r2
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	0011      	movs	r1, r2
 800c602:	0018      	movs	r0, r3
 800c604:	f000 fa78 	bl	800caf8 <USBD_StdItfReq>
      break;
 800c608:	e016      	b.n	800c638 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	22aa      	movs	r2, #170	; 0xaa
 800c60e:	0092      	lsls	r2, r2, #2
 800c610:	189a      	adds	r2, r3, r2
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	0011      	movs	r1, r2
 800c616:	0018      	movs	r0, r3
 800c618:	f000 fac5 	bl	800cba6 <USBD_StdEPReq>
      break;
 800c61c:	e00c      	b.n	800c638 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	23aa      	movs	r3, #170	; 0xaa
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	5cd3      	ldrb	r3, [r2, r3]
 800c626:	227f      	movs	r2, #127	; 0x7f
 800c628:	4393      	bics	r3, r2
 800c62a:	b2da      	uxtb	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	0011      	movs	r1, r2
 800c630:	0018      	movs	r0, r3
 800c632:	f004 ffa2 	bl	801157a <USBD_LL_StallEP>
      break;
 800c636:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	0018      	movs	r0, r3
 800c63c:	46bd      	mov	sp, r7
 800c63e:	b002      	add	sp, #8
 800c640:	bd80      	pop	{r7, pc}
 800c642:	46c0      	nop			; (mov r8, r8)
 800c644:	000002ae 	.word	0x000002ae

0800c648 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	607a      	str	r2, [r7, #4]
 800c652:	200b      	movs	r0, #11
 800c654:	183b      	adds	r3, r7, r0
 800c656:	1c0a      	adds	r2, r1, #0
 800c658:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c65a:	183b      	adds	r3, r7, r0
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d154      	bne.n	800c70c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	3355      	adds	r3, #85	; 0x55
 800c666:	33ff      	adds	r3, #255	; 0xff
 800c668:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	23a5      	movs	r3, #165	; 0xa5
 800c66e:	009b      	lsls	r3, r3, #2
 800c670:	58d3      	ldr	r3, [r2, r3]
 800c672:	2b03      	cmp	r3, #3
 800c674:	d139      	bne.n	800c6ea <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	68da      	ldr	r2, [r3, #12]
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	691b      	ldr	r3, [r3, #16]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d919      	bls.n	800c6b6 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	68da      	ldr	r2, [r3, #12]
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	691b      	ldr	r3, [r3, #16]
 800c68a:	1ad2      	subs	r2, r2, r3
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	68da      	ldr	r2, [r3, #12]
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c698:	429a      	cmp	r2, r3
 800c69a:	d203      	bcs.n	800c6a4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	e002      	b.n	800c6aa <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	6879      	ldr	r1, [r7, #4]
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	001a      	movs	r2, r3
 800c6b0:	f001 f89b 	bl	800d7ea <USBD_CtlContinueRx>
 800c6b4:	e045      	b.n	800c742 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	23ad      	movs	r3, #173	; 0xad
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	58d3      	ldr	r3, [r2, r3]
 800c6be:	691b      	ldr	r3, [r3, #16]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d00d      	beq.n	800c6e0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	23a7      	movs	r3, #167	; 0xa7
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c6cc:	2b03      	cmp	r3, #3
 800c6ce:	d107      	bne.n	800c6e0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	23ad      	movs	r3, #173	; 0xad
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	58d3      	ldr	r3, [r2, r3]
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	0010      	movs	r0, r2
 800c6de:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	0018      	movs	r0, r3
 800c6e4:	f001 f894 	bl	800d810 <USBD_CtlSendStatus>
 800c6e8:	e02b      	b.n	800c742 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	23a5      	movs	r3, #165	; 0xa5
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	58d3      	ldr	r3, [r2, r3]
 800c6f2:	2b05      	cmp	r3, #5
 800c6f4:	d125      	bne.n	800c742 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	23a5      	movs	r3, #165	; 0xa5
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2100      	movs	r1, #0
 800c704:	0018      	movs	r0, r3
 800c706:	f004 ff38 	bl	801157a <USBD_LL_StallEP>
 800c70a:	e01a      	b.n	800c742 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	23ad      	movs	r3, #173	; 0xad
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	58d3      	ldr	r3, [r2, r3]
 800c714:	699b      	ldr	r3, [r3, #24]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d011      	beq.n	800c73e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	23a7      	movs	r3, #167	; 0xa7
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800c722:	2b03      	cmp	r3, #3
 800c724:	d10b      	bne.n	800c73e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c726:	68fa      	ldr	r2, [r7, #12]
 800c728:	23ad      	movs	r3, #173	; 0xad
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	58d3      	ldr	r3, [r2, r3]
 800c72e:	699b      	ldr	r3, [r3, #24]
 800c730:	220b      	movs	r2, #11
 800c732:	18ba      	adds	r2, r7, r2
 800c734:	7811      	ldrb	r1, [r2, #0]
 800c736:	68fa      	ldr	r2, [r7, #12]
 800c738:	0010      	movs	r0, r2
 800c73a:	4798      	blx	r3
 800c73c:	e001      	b.n	800c742 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c73e:	2302      	movs	r3, #2
 800c740:	e000      	b.n	800c744 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800c742:	2300      	movs	r3, #0
}
 800c744:	0018      	movs	r0, r3
 800c746:	46bd      	mov	sp, r7
 800c748:	b006      	add	sp, #24
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	607a      	str	r2, [r7, #4]
 800c756:	200b      	movs	r0, #11
 800c758:	183b      	adds	r3, r7, r0
 800c75a:	1c0a      	adds	r2, r1, #0
 800c75c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c75e:	183b      	adds	r3, r7, r0
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d000      	beq.n	800c768 <USBD_LL_DataInStage+0x1c>
 800c766:	e08e      	b.n	800c886 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	3314      	adds	r3, #20
 800c76c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c76e:	68fa      	ldr	r2, [r7, #12]
 800c770:	23a5      	movs	r3, #165	; 0xa5
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	58d3      	ldr	r3, [r2, r3]
 800c776:	2b02      	cmp	r3, #2
 800c778:	d164      	bne.n	800c844 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	68da      	ldr	r2, [r3, #12]
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	691b      	ldr	r3, [r3, #16]
 800c782:	429a      	cmp	r2, r3
 800c784:	d915      	bls.n	800c7b2 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	68da      	ldr	r2, [r3, #12]
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	691b      	ldr	r3, [r3, #16]
 800c78e:	1ad2      	subs	r2, r2, r3
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	b29a      	uxth	r2, r3
 800c79a:	6879      	ldr	r1, [r7, #4]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	0018      	movs	r0, r3
 800c7a0:	f000 ffec 	bl	800d77c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	f004 ffce 	bl	801174c <USBD_LL_PrepareReceive>
 800c7b0:	e059      	b.n	800c866 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	689a      	ldr	r2, [r3, #8]
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	0019      	movs	r1, r3
 800c7bc:	0010      	movs	r0, r2
 800c7be:	f7f3 fd33 	bl	8000228 <__aeabi_uidivmod>
 800c7c2:	1e0b      	subs	r3, r1, #0
 800c7c4:	d11f      	bne.n	800c806 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	689a      	ldr	r2, [r3, #8]
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d319      	bcc.n	800c806 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	689a      	ldr	r2, [r3, #8]
 800c7d6:	68f9      	ldr	r1, [r7, #12]
 800c7d8:	23a6      	movs	r3, #166	; 0xa6
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d211      	bcs.n	800c806 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	0018      	movs	r0, r3
 800c7ea:	f000 ffc7 	bl	800d77c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	23a6      	movs	r3, #166	; 0xa6
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7f8:	68f8      	ldr	r0, [r7, #12]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	2100      	movs	r1, #0
 800c800:	f004 ffa4 	bl	801174c <USBD_LL_PrepareReceive>
 800c804:	e02f      	b.n	800c866 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	23ad      	movs	r3, #173	; 0xad
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	58d3      	ldr	r3, [r2, r3]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d00d      	beq.n	800c830 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	23a7      	movs	r3, #167	; 0xa7
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c81c:	2b03      	cmp	r3, #3
 800c81e:	d107      	bne.n	800c830 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	23ad      	movs	r3, #173	; 0xad
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	58d3      	ldr	r3, [r2, r3]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	68fa      	ldr	r2, [r7, #12]
 800c82c:	0010      	movs	r0, r2
 800c82e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2180      	movs	r1, #128	; 0x80
 800c834:	0018      	movs	r0, r3
 800c836:	f004 fea0 	bl	801157a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	0018      	movs	r0, r3
 800c83e:	f000 fffb 	bl	800d838 <USBD_CtlReceiveStatus>
 800c842:	e010      	b.n	800c866 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	23a5      	movs	r3, #165	; 0xa5
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	58d3      	ldr	r3, [r2, r3]
 800c84c:	2b04      	cmp	r3, #4
 800c84e:	d005      	beq.n	800c85c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c850:	68fa      	ldr	r2, [r7, #12]
 800c852:	23a5      	movs	r3, #165	; 0xa5
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d104      	bne.n	800c866 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2180      	movs	r1, #128	; 0x80
 800c860:	0018      	movs	r0, r3
 800c862:	f004 fe8a 	bl	801157a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	23a8      	movs	r3, #168	; 0xa8
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	5cd3      	ldrb	r3, [r2, r3]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d124      	bne.n	800c8bc <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	0018      	movs	r0, r3
 800c876:	f7ff fe42 	bl	800c4fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	23a8      	movs	r3, #168	; 0xa8
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	2100      	movs	r1, #0
 800c882:	54d1      	strb	r1, [r2, r3]
 800c884:	e01a      	b.n	800c8bc <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	23ad      	movs	r3, #173	; 0xad
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	58d3      	ldr	r3, [r2, r3]
 800c88e:	695b      	ldr	r3, [r3, #20]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d011      	beq.n	800c8b8 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	23a7      	movs	r3, #167	; 0xa7
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800c89c:	2b03      	cmp	r3, #3
 800c89e:	d10b      	bne.n	800c8b8 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	23ad      	movs	r3, #173	; 0xad
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	58d3      	ldr	r3, [r2, r3]
 800c8a8:	695b      	ldr	r3, [r3, #20]
 800c8aa:	220b      	movs	r2, #11
 800c8ac:	18ba      	adds	r2, r7, r2
 800c8ae:	7811      	ldrb	r1, [r2, #0]
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	0010      	movs	r0, r2
 800c8b4:	4798      	blx	r3
 800c8b6:	e001      	b.n	800c8bc <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c8b8:	2302      	movs	r3, #2
 800c8ba:	e000      	b.n	800c8be <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	0018      	movs	r0, r3
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	b006      	add	sp, #24
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b082      	sub	sp, #8
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	2340      	movs	r3, #64	; 0x40
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	f004 fdee 	bl	80114b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	23ac      	movs	r3, #172	; 0xac
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	2101      	movs	r1, #1
 800c8e2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	23b2      	movs	r3, #178	; 0xb2
 800c8e8:	005b      	lsls	r3, r3, #1
 800c8ea:	2140      	movs	r1, #64	; 0x40
 800c8ec:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	2340      	movs	r3, #64	; 0x40
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	2180      	movs	r1, #128	; 0x80
 800c8f6:	f004 fdde 	bl	80114b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2240      	movs	r2, #64	; 0x40
 800c904:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	23a7      	movs	r3, #167	; 0xa7
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	2101      	movs	r1, #1
 800c90e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	23a5      	movs	r3, #165	; 0xa5
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	2100      	movs	r1, #0
 800c918:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2200      	movs	r2, #0
 800c91e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	23a9      	movs	r3, #169	; 0xa9
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	2100      	movs	r1, #0
 800c928:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	23ae      	movs	r3, #174	; 0xae
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	58d3      	ldr	r3, [r2, r3]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00a      	beq.n	800c94c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	23ad      	movs	r3, #173	; 0xad
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	58d3      	ldr	r3, [r2, r3]
 800c93e:	685a      	ldr	r2, [r3, #4]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	b2d9      	uxtb	r1, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	0018      	movs	r0, r3
 800c94a:	4790      	blx	r2
  }

  return USBD_OK;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	0018      	movs	r0, r3
 800c950:	46bd      	mov	sp, r7
 800c952:	b002      	add	sp, #8
 800c954:	bd80      	pop	{r7, pc}

0800c956 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b082      	sub	sp, #8
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
 800c95e:	000a      	movs	r2, r1
 800c960:	1cfb      	adds	r3, r7, #3
 800c962:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	1cfa      	adds	r2, r7, #3
 800c968:	7812      	ldrb	r2, [r2, #0]
 800c96a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	0018      	movs	r0, r3
 800c970:	46bd      	mov	sp, r7
 800c972:	b002      	add	sp, #8
 800c974:	bd80      	pop	{r7, pc}
	...

0800c978 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	23a7      	movs	r3, #167	; 0xa7
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	5cd1      	ldrb	r1, [r2, r3]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	4a06      	ldr	r2, [pc, #24]	; (800c9a4 <USBD_LL_Suspend+0x2c>)
 800c98c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	23a7      	movs	r3, #167	; 0xa7
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	2104      	movs	r1, #4
 800c996:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	0018      	movs	r0, r3
 800c99c:	46bd      	mov	sp, r7
 800c99e:	b002      	add	sp, #8
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	46c0      	nop			; (mov r8, r8)
 800c9a4:	0000029d 	.word	0x0000029d

0800c9a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	23a7      	movs	r3, #167	; 0xa7
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	5cd3      	ldrb	r3, [r2, r3]
 800c9b8:	2b04      	cmp	r3, #4
 800c9ba:	d106      	bne.n	800c9ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4a05      	ldr	r2, [pc, #20]	; (800c9d4 <USBD_LL_Resume+0x2c>)
 800c9c0:	5c99      	ldrb	r1, [r3, r2]
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	23a7      	movs	r3, #167	; 0xa7
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800c9ca:	2300      	movs	r3, #0
}
 800c9cc:	0018      	movs	r0, r3
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	b002      	add	sp, #8
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	0000029d 	.word	0x0000029d

0800c9d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	23a7      	movs	r3, #167	; 0xa7
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	5cd3      	ldrb	r3, [r2, r3]
 800c9e8:	2b03      	cmp	r3, #3
 800c9ea:	d10e      	bne.n	800ca0a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	23ad      	movs	r3, #173	; 0xad
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	58d3      	ldr	r3, [r2, r3]
 800c9f4:	69db      	ldr	r3, [r3, #28]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d007      	beq.n	800ca0a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	23ad      	movs	r3, #173	; 0xad
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	58d3      	ldr	r3, [r2, r3]
 800ca02:	69db      	ldr	r3, [r3, #28]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	0010      	movs	r0, r2
 800ca08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	0018      	movs	r0, r3
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	b002      	add	sp, #8
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca1e:	230f      	movs	r3, #15
 800ca20:	18fb      	adds	r3, r7, r3
 800ca22:	2200      	movs	r2, #0
 800ca24:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	001a      	movs	r2, r3
 800ca2c:	2360      	movs	r3, #96	; 0x60
 800ca2e:	4013      	ands	r3, r2
 800ca30:	2b40      	cmp	r3, #64	; 0x40
 800ca32:	d004      	beq.n	800ca3e <USBD_StdDevReq+0x2a>
 800ca34:	d84f      	bhi.n	800cad6 <USBD_StdDevReq+0xc2>
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00b      	beq.n	800ca52 <USBD_StdDevReq+0x3e>
 800ca3a:	2b20      	cmp	r3, #32
 800ca3c:	d14b      	bne.n	800cad6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	23ad      	movs	r3, #173	; 0xad
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	58d3      	ldr	r3, [r2, r3]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	6839      	ldr	r1, [r7, #0]
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	0010      	movs	r0, r2
 800ca4e:	4798      	blx	r3
      break;
 800ca50:	e048      	b.n	800cae4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	785b      	ldrb	r3, [r3, #1]
 800ca56:	2b09      	cmp	r3, #9
 800ca58:	d835      	bhi.n	800cac6 <USBD_StdDevReq+0xb2>
 800ca5a:	009a      	lsls	r2, r3, #2
 800ca5c:	4b25      	ldr	r3, [pc, #148]	; (800caf4 <USBD_StdDevReq+0xe0>)
 800ca5e:	18d3      	adds	r3, r2, r3
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca64:	683a      	ldr	r2, [r7, #0]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	0011      	movs	r1, r2
 800ca6a:	0018      	movs	r0, r3
 800ca6c:	f000 fa52 	bl	800cf14 <USBD_GetDescriptor>
          break;
 800ca70:	e030      	b.n	800cad4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	0011      	movs	r1, r2
 800ca78:	0018      	movs	r0, r3
 800ca7a:	f000 fbfd 	bl	800d278 <USBD_SetAddress>
          break;
 800ca7e:	e029      	b.n	800cad4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ca80:	683a      	ldr	r2, [r7, #0]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	0011      	movs	r1, r2
 800ca86:	0018      	movs	r0, r3
 800ca88:	f000 fc4a 	bl	800d320 <USBD_SetConfig>
          break;
 800ca8c:	e022      	b.n	800cad4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca8e:	683a      	ldr	r2, [r7, #0]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	0011      	movs	r1, r2
 800ca94:	0018      	movs	r0, r3
 800ca96:	f000 fce7 	bl	800d468 <USBD_GetConfig>
          break;
 800ca9a:	e01b      	b.n	800cad4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ca9c:	683a      	ldr	r2, [r7, #0]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	0011      	movs	r1, r2
 800caa2:	0018      	movs	r0, r3
 800caa4:	f000 fd1b 	bl	800d4de <USBD_GetStatus>
          break;
 800caa8:	e014      	b.n	800cad4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800caaa:	683a      	ldr	r2, [r7, #0]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	0011      	movs	r1, r2
 800cab0:	0018      	movs	r0, r3
 800cab2:	f000 fd4e 	bl	800d552 <USBD_SetFeature>
          break;
 800cab6:	e00d      	b.n	800cad4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cab8:	683a      	ldr	r2, [r7, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	0011      	movs	r1, r2
 800cabe:	0018      	movs	r0, r3
 800cac0:	f000 fd5d 	bl	800d57e <USBD_ClrFeature>
          break;
 800cac4:	e006      	b.n	800cad4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cac6:	683a      	ldr	r2, [r7, #0]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	0011      	movs	r1, r2
 800cacc:	0018      	movs	r0, r3
 800cace:	f000 fdb7 	bl	800d640 <USBD_CtlError>
          break;
 800cad2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800cad4:	e006      	b.n	800cae4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	0011      	movs	r1, r2
 800cadc:	0018      	movs	r0, r3
 800cade:	f000 fdaf 	bl	800d640 <USBD_CtlError>
      break;
 800cae2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800cae4:	230f      	movs	r3, #15
 800cae6:	18fb      	adds	r3, r7, r3
 800cae8:	781b      	ldrb	r3, [r3, #0]
}
 800caea:	0018      	movs	r0, r3
 800caec:	46bd      	mov	sp, r7
 800caee:	b004      	add	sp, #16
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	46c0      	nop			; (mov r8, r8)
 800caf4:	08013380 	.word	0x08013380

0800caf8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800caf8:	b5b0      	push	{r4, r5, r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb02:	230f      	movs	r3, #15
 800cb04:	18fb      	adds	r3, r7, r3
 800cb06:	2200      	movs	r2, #0
 800cb08:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	001a      	movs	r2, r3
 800cb10:	2360      	movs	r3, #96	; 0x60
 800cb12:	4013      	ands	r3, r2
 800cb14:	2b40      	cmp	r3, #64	; 0x40
 800cb16:	d004      	beq.n	800cb22 <USBD_StdItfReq+0x2a>
 800cb18:	d839      	bhi.n	800cb8e <USBD_StdItfReq+0x96>
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d001      	beq.n	800cb22 <USBD_StdItfReq+0x2a>
 800cb1e:	2b20      	cmp	r3, #32
 800cb20:	d135      	bne.n	800cb8e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	23a7      	movs	r3, #167	; 0xa7
 800cb26:	009b      	lsls	r3, r3, #2
 800cb28:	5cd3      	ldrb	r3, [r2, r3]
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	2b02      	cmp	r3, #2
 800cb2e:	d825      	bhi.n	800cb7c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	889b      	ldrh	r3, [r3, #4]
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d819      	bhi.n	800cb6e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	23ad      	movs	r3, #173	; 0xad
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	58d3      	ldr	r3, [r2, r3]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	250f      	movs	r5, #15
 800cb46:	197c      	adds	r4, r7, r5
 800cb48:	6839      	ldr	r1, [r7, #0]
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	0010      	movs	r0, r2
 800cb4e:	4798      	blx	r3
 800cb50:	0003      	movs	r3, r0
 800cb52:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	88db      	ldrh	r3, [r3, #6]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d116      	bne.n	800cb8a <USBD_StdItfReq+0x92>
 800cb5c:	197b      	adds	r3, r7, r5
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d112      	bne.n	800cb8a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	0018      	movs	r0, r3
 800cb68:	f000 fe52 	bl	800d810 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cb6c:	e00d      	b.n	800cb8a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800cb6e:	683a      	ldr	r2, [r7, #0]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	0011      	movs	r1, r2
 800cb74:	0018      	movs	r0, r3
 800cb76:	f000 fd63 	bl	800d640 <USBD_CtlError>
          break;
 800cb7a:	e006      	b.n	800cb8a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800cb7c:	683a      	ldr	r2, [r7, #0]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	0011      	movs	r1, r2
 800cb82:	0018      	movs	r0, r3
 800cb84:	f000 fd5c 	bl	800d640 <USBD_CtlError>
          break;
 800cb88:	e000      	b.n	800cb8c <USBD_StdItfReq+0x94>
          break;
 800cb8a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800cb8c:	e006      	b.n	800cb9c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	0011      	movs	r1, r2
 800cb94:	0018      	movs	r0, r3
 800cb96:	f000 fd53 	bl	800d640 <USBD_CtlError>
      break;
 800cb9a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	0018      	movs	r0, r3
 800cba0:	46bd      	mov	sp, r7
 800cba2:	b004      	add	sp, #16
 800cba4:	bdb0      	pop	{r4, r5, r7, pc}

0800cba6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800cba6:	b5b0      	push	{r4, r5, r7, lr}
 800cba8:	b084      	sub	sp, #16
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
 800cbae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cbb0:	230f      	movs	r3, #15
 800cbb2:	18fb      	adds	r3, r7, r3
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	889a      	ldrh	r2, [r3, #4]
 800cbbc:	230e      	movs	r3, #14
 800cbbe:	18fb      	adds	r3, r7, r3
 800cbc0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	001a      	movs	r2, r3
 800cbc8:	2360      	movs	r3, #96	; 0x60
 800cbca:	4013      	ands	r3, r2
 800cbcc:	2b40      	cmp	r3, #64	; 0x40
 800cbce:	d006      	beq.n	800cbde <USBD_StdEPReq+0x38>
 800cbd0:	d900      	bls.n	800cbd4 <USBD_StdEPReq+0x2e>
 800cbd2:	e190      	b.n	800cef6 <USBD_StdEPReq+0x350>
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00c      	beq.n	800cbf2 <USBD_StdEPReq+0x4c>
 800cbd8:	2b20      	cmp	r3, #32
 800cbda:	d000      	beq.n	800cbde <USBD_StdEPReq+0x38>
 800cbdc:	e18b      	b.n	800cef6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	23ad      	movs	r3, #173	; 0xad
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	58d3      	ldr	r3, [r2, r3]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	6839      	ldr	r1, [r7, #0]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	0010      	movs	r0, r2
 800cbee:	4798      	blx	r3
      break;
 800cbf0:	e188      	b.n	800cf04 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	001a      	movs	r2, r3
 800cbf8:	2360      	movs	r3, #96	; 0x60
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	2b20      	cmp	r3, #32
 800cbfe:	d10f      	bne.n	800cc20 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	23ad      	movs	r3, #173	; 0xad
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	58d3      	ldr	r3, [r2, r3]
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	250f      	movs	r5, #15
 800cc0c:	197c      	adds	r4, r7, r5
 800cc0e:	6839      	ldr	r1, [r7, #0]
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	0010      	movs	r0, r2
 800cc14:	4798      	blx	r3
 800cc16:	0003      	movs	r3, r0
 800cc18:	7023      	strb	r3, [r4, #0]

        return ret;
 800cc1a:	197b      	adds	r3, r7, r5
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	e174      	b.n	800cf0a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	785b      	ldrb	r3, [r3, #1]
 800cc24:	2b03      	cmp	r3, #3
 800cc26:	d007      	beq.n	800cc38 <USBD_StdEPReq+0x92>
 800cc28:	dd00      	ble.n	800cc2c <USBD_StdEPReq+0x86>
 800cc2a:	e15c      	b.n	800cee6 <USBD_StdEPReq+0x340>
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d100      	bne.n	800cc32 <USBD_StdEPReq+0x8c>
 800cc30:	e092      	b.n	800cd58 <USBD_StdEPReq+0x1b2>
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d04b      	beq.n	800ccce <USBD_StdEPReq+0x128>
 800cc36:	e156      	b.n	800cee6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	23a7      	movs	r3, #167	; 0xa7
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	5cd3      	ldrb	r3, [r2, r3]
 800cc40:	2b02      	cmp	r3, #2
 800cc42:	d002      	beq.n	800cc4a <USBD_StdEPReq+0xa4>
 800cc44:	2b03      	cmp	r3, #3
 800cc46:	d01d      	beq.n	800cc84 <USBD_StdEPReq+0xde>
 800cc48:	e039      	b.n	800ccbe <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc4a:	220e      	movs	r2, #14
 800cc4c:	18bb      	adds	r3, r7, r2
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d010      	beq.n	800cc76 <USBD_StdEPReq+0xd0>
 800cc54:	18bb      	adds	r3, r7, r2
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	2b80      	cmp	r3, #128	; 0x80
 800cc5a:	d00c      	beq.n	800cc76 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800cc5c:	18bb      	adds	r3, r7, r2
 800cc5e:	781a      	ldrb	r2, [r3, #0]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	0011      	movs	r1, r2
 800cc64:	0018      	movs	r0, r3
 800cc66:	f004 fc88 	bl	801157a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2180      	movs	r1, #128	; 0x80
 800cc6e:	0018      	movs	r0, r3
 800cc70:	f004 fc83 	bl	801157a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc74:	e02a      	b.n	800cccc <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	0011      	movs	r1, r2
 800cc7c:	0018      	movs	r0, r3
 800cc7e:	f000 fcdf 	bl	800d640 <USBD_CtlError>
              break;
 800cc82:	e023      	b.n	800cccc <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	885b      	ldrh	r3, [r3, #2]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d113      	bne.n	800ccb4 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800cc8c:	220e      	movs	r2, #14
 800cc8e:	18bb      	adds	r3, r7, r2
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00e      	beq.n	800ccb4 <USBD_StdEPReq+0x10e>
 800cc96:	18bb      	adds	r3, r7, r2
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	2b80      	cmp	r3, #128	; 0x80
 800cc9c:	d00a      	beq.n	800ccb4 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	88db      	ldrh	r3, [r3, #6]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d106      	bne.n	800ccb4 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800cca6:	18bb      	adds	r3, r7, r2
 800cca8:	781a      	ldrb	r2, [r3, #0]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	0011      	movs	r1, r2
 800ccae:	0018      	movs	r0, r3
 800ccb0:	f004 fc63 	bl	801157a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	0018      	movs	r0, r3
 800ccb8:	f000 fdaa 	bl	800d810 <USBD_CtlSendStatus>

              break;
 800ccbc:	e006      	b.n	800cccc <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800ccbe:	683a      	ldr	r2, [r7, #0]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	0011      	movs	r1, r2
 800ccc4:	0018      	movs	r0, r3
 800ccc6:	f000 fcbb 	bl	800d640 <USBD_CtlError>
              break;
 800ccca:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800cccc:	e112      	b.n	800cef4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	23a7      	movs	r3, #167	; 0xa7
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	5cd3      	ldrb	r3, [r2, r3]
 800ccd6:	2b02      	cmp	r3, #2
 800ccd8:	d002      	beq.n	800cce0 <USBD_StdEPReq+0x13a>
 800ccda:	2b03      	cmp	r3, #3
 800ccdc:	d01d      	beq.n	800cd1a <USBD_StdEPReq+0x174>
 800ccde:	e032      	b.n	800cd46 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cce0:	220e      	movs	r2, #14
 800cce2:	18bb      	adds	r3, r7, r2
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d010      	beq.n	800cd0c <USBD_StdEPReq+0x166>
 800ccea:	18bb      	adds	r3, r7, r2
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	2b80      	cmp	r3, #128	; 0x80
 800ccf0:	d00c      	beq.n	800cd0c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ccf2:	18bb      	adds	r3, r7, r2
 800ccf4:	781a      	ldrb	r2, [r3, #0]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	0011      	movs	r1, r2
 800ccfa:	0018      	movs	r0, r3
 800ccfc:	f004 fc3d 	bl	801157a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2180      	movs	r1, #128	; 0x80
 800cd04:	0018      	movs	r0, r3
 800cd06:	f004 fc38 	bl	801157a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd0a:	e024      	b.n	800cd56 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800cd0c:	683a      	ldr	r2, [r7, #0]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	0011      	movs	r1, r2
 800cd12:	0018      	movs	r0, r3
 800cd14:	f000 fc94 	bl	800d640 <USBD_CtlError>
              break;
 800cd18:	e01d      	b.n	800cd56 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	885b      	ldrh	r3, [r3, #2]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d118      	bne.n	800cd54 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cd22:	210e      	movs	r1, #14
 800cd24:	187b      	adds	r3, r7, r1
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	227f      	movs	r2, #127	; 0x7f
 800cd2a:	4013      	ands	r3, r2
 800cd2c:	d006      	beq.n	800cd3c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800cd2e:	187b      	adds	r3, r7, r1
 800cd30:	781a      	ldrb	r2, [r3, #0]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	0011      	movs	r1, r2
 800cd36:	0018      	movs	r0, r3
 800cd38:	f004 fc4a 	bl	80115d0 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	0018      	movs	r0, r3
 800cd40:	f000 fd66 	bl	800d810 <USBD_CtlSendStatus>
              }
              break;
 800cd44:	e006      	b.n	800cd54 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800cd46:	683a      	ldr	r2, [r7, #0]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	0011      	movs	r1, r2
 800cd4c:	0018      	movs	r0, r3
 800cd4e:	f000 fc77 	bl	800d640 <USBD_CtlError>
              break;
 800cd52:	e000      	b.n	800cd56 <USBD_StdEPReq+0x1b0>
              break;
 800cd54:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800cd56:	e0cd      	b.n	800cef4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	23a7      	movs	r3, #167	; 0xa7
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	5cd3      	ldrb	r3, [r2, r3]
 800cd60:	2b02      	cmp	r3, #2
 800cd62:	d002      	beq.n	800cd6a <USBD_StdEPReq+0x1c4>
 800cd64:	2b03      	cmp	r3, #3
 800cd66:	d03c      	beq.n	800cde2 <USBD_StdEPReq+0x23c>
 800cd68:	e0b5      	b.n	800ced6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd6a:	220e      	movs	r2, #14
 800cd6c:	18bb      	adds	r3, r7, r2
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d00a      	beq.n	800cd8a <USBD_StdEPReq+0x1e4>
 800cd74:	18bb      	adds	r3, r7, r2
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	2b80      	cmp	r3, #128	; 0x80
 800cd7a:	d006      	beq.n	800cd8a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800cd7c:	683a      	ldr	r2, [r7, #0]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	0011      	movs	r1, r2
 800cd82:	0018      	movs	r0, r3
 800cd84:	f000 fc5c 	bl	800d640 <USBD_CtlError>
                break;
 800cd88:	e0ac      	b.n	800cee4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd8a:	220e      	movs	r2, #14
 800cd8c:	18bb      	adds	r3, r7, r2
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	b25b      	sxtb	r3, r3
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	da0c      	bge.n	800cdb0 <USBD_StdEPReq+0x20a>
 800cd96:	18bb      	adds	r3, r7, r2
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	227f      	movs	r2, #127	; 0x7f
 800cd9c:	401a      	ands	r2, r3
 800cd9e:	0013      	movs	r3, r2
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	189b      	adds	r3, r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	3310      	adds	r3, #16
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	18d3      	adds	r3, r2, r3
 800cdac:	3304      	adds	r3, #4
 800cdae:	e00d      	b.n	800cdcc <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cdb0:	230e      	movs	r3, #14
 800cdb2:	18fb      	adds	r3, r7, r3
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	227f      	movs	r2, #127	; 0x7f
 800cdb8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cdba:	0013      	movs	r3, r2
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	189b      	adds	r3, r3, r2
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	3351      	adds	r3, #81	; 0x51
 800cdc4:	33ff      	adds	r3, #255	; 0xff
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	18d3      	adds	r3, r2, r3
 800cdca:	3304      	adds	r3, #4
 800cdcc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cdd4:	68b9      	ldr	r1, [r7, #8]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2202      	movs	r2, #2
 800cdda:	0018      	movs	r0, r3
 800cddc:	f000 fcae 	bl	800d73c <USBD_CtlSendData>
              break;
 800cde0:	e080      	b.n	800cee4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cde2:	220e      	movs	r2, #14
 800cde4:	18bb      	adds	r3, r7, r2
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	b25b      	sxtb	r3, r3
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	da14      	bge.n	800ce18 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cdee:	18bb      	adds	r3, r7, r2
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	220f      	movs	r2, #15
 800cdf4:	401a      	ands	r2, r3
 800cdf6:	6879      	ldr	r1, [r7, #4]
 800cdf8:	0013      	movs	r3, r2
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	189b      	adds	r3, r3, r2
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	18cb      	adds	r3, r1, r3
 800ce02:	3318      	adds	r3, #24
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d11e      	bne.n	800ce48 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800ce0a:	683a      	ldr	r2, [r7, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	0011      	movs	r1, r2
 800ce10:	0018      	movs	r0, r3
 800ce12:	f000 fc15 	bl	800d640 <USBD_CtlError>
                  break;
 800ce16:	e065      	b.n	800cee4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ce18:	230e      	movs	r3, #14
 800ce1a:	18fb      	adds	r3, r7, r3
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	220f      	movs	r2, #15
 800ce20:	401a      	ands	r2, r3
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	23ac      	movs	r3, #172	; 0xac
 800ce26:	0059      	lsls	r1, r3, #1
 800ce28:	0013      	movs	r3, r2
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	189b      	adds	r3, r3, r2
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	18c3      	adds	r3, r0, r3
 800ce32:	185b      	adds	r3, r3, r1
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d106      	bne.n	800ce48 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800ce3a:	683a      	ldr	r2, [r7, #0]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	0011      	movs	r1, r2
 800ce40:	0018      	movs	r0, r3
 800ce42:	f000 fbfd 	bl	800d640 <USBD_CtlError>
                  break;
 800ce46:	e04d      	b.n	800cee4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce48:	220e      	movs	r2, #14
 800ce4a:	18bb      	adds	r3, r7, r2
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	b25b      	sxtb	r3, r3
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	da0c      	bge.n	800ce6e <USBD_StdEPReq+0x2c8>
 800ce54:	18bb      	adds	r3, r7, r2
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	227f      	movs	r2, #127	; 0x7f
 800ce5a:	401a      	ands	r2, r3
 800ce5c:	0013      	movs	r3, r2
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	189b      	adds	r3, r3, r2
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	3310      	adds	r3, #16
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	18d3      	adds	r3, r2, r3
 800ce6a:	3304      	adds	r3, #4
 800ce6c:	e00d      	b.n	800ce8a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ce6e:	230e      	movs	r3, #14
 800ce70:	18fb      	adds	r3, r7, r3
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	227f      	movs	r2, #127	; 0x7f
 800ce76:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce78:	0013      	movs	r3, r2
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	189b      	adds	r3, r3, r2
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	3351      	adds	r3, #81	; 0x51
 800ce82:	33ff      	adds	r3, #255	; 0xff
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	18d3      	adds	r3, r2, r3
 800ce88:	3304      	adds	r3, #4
 800ce8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ce8c:	220e      	movs	r2, #14
 800ce8e:	18bb      	adds	r3, r7, r2
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d003      	beq.n	800ce9e <USBD_StdEPReq+0x2f8>
 800ce96:	18bb      	adds	r3, r7, r2
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	2b80      	cmp	r3, #128	; 0x80
 800ce9c:	d103      	bne.n	800cea6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	2200      	movs	r2, #0
 800cea2:	601a      	str	r2, [r3, #0]
 800cea4:	e010      	b.n	800cec8 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800cea6:	230e      	movs	r3, #14
 800cea8:	18fb      	adds	r3, r7, r3
 800ceaa:	781a      	ldrb	r2, [r3, #0]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	0011      	movs	r1, r2
 800ceb0:	0018      	movs	r0, r3
 800ceb2:	f004 fbb8 	bl	8011626 <USBD_LL_IsStallEP>
 800ceb6:	1e03      	subs	r3, r0, #0
 800ceb8:	d003      	beq.n	800cec2 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	2201      	movs	r2, #1
 800cebe:	601a      	str	r2, [r3, #0]
 800cec0:	e002      	b.n	800cec8 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	2200      	movs	r2, #0
 800cec6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cec8:	68b9      	ldr	r1, [r7, #8]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2202      	movs	r2, #2
 800cece:	0018      	movs	r0, r3
 800ced0:	f000 fc34 	bl	800d73c <USBD_CtlSendData>
              break;
 800ced4:	e006      	b.n	800cee4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800ced6:	683a      	ldr	r2, [r7, #0]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	0011      	movs	r1, r2
 800cedc:	0018      	movs	r0, r3
 800cede:	f000 fbaf 	bl	800d640 <USBD_CtlError>
              break;
 800cee2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800cee4:	e006      	b.n	800cef4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800cee6:	683a      	ldr	r2, [r7, #0]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	0011      	movs	r1, r2
 800ceec:	0018      	movs	r0, r3
 800ceee:	f000 fba7 	bl	800d640 <USBD_CtlError>
          break;
 800cef2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800cef4:	e006      	b.n	800cf04 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800cef6:	683a      	ldr	r2, [r7, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	0011      	movs	r1, r2
 800cefc:	0018      	movs	r0, r3
 800cefe:	f000 fb9f 	bl	800d640 <USBD_CtlError>
      break;
 800cf02:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800cf04:	230f      	movs	r3, #15
 800cf06:	18fb      	adds	r3, r7, r3
 800cf08:	781b      	ldrb	r3, [r3, #0]
}
 800cf0a:	0018      	movs	r0, r3
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	b004      	add	sp, #16
 800cf10:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800cf14 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cf1e:	2308      	movs	r3, #8
 800cf20:	18fb      	adds	r3, r7, r3
 800cf22:	2200      	movs	r2, #0
 800cf24:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800cf26:	2300      	movs	r3, #0
 800cf28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cf2a:	230b      	movs	r3, #11
 800cf2c:	18fb      	adds	r3, r7, r3
 800cf2e:	2200      	movs	r2, #0
 800cf30:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	885b      	ldrh	r3, [r3, #2]
 800cf36:	0a1b      	lsrs	r3, r3, #8
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	2b07      	cmp	r3, #7
 800cf3c:	d900      	bls.n	800cf40 <USBD_GetDescriptor+0x2c>
 800cf3e:	e159      	b.n	800d1f4 <USBD_GetDescriptor+0x2e0>
 800cf40:	009a      	lsls	r2, r3, #2
 800cf42:	4bcb      	ldr	r3, [pc, #812]	; (800d270 <USBD_GetDescriptor+0x35c>)
 800cf44:	18d3      	adds	r3, r2, r3
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	23ac      	movs	r3, #172	; 0xac
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	58d3      	ldr	r3, [r2, r3]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	7c12      	ldrb	r2, [r2, #16]
 800cf58:	2108      	movs	r1, #8
 800cf5a:	1879      	adds	r1, r7, r1
 800cf5c:	0010      	movs	r0, r2
 800cf5e:	4798      	blx	r3
 800cf60:	0003      	movs	r3, r0
 800cf62:	60fb      	str	r3, [r7, #12]
      break;
 800cf64:	e153      	b.n	800d20e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	7c1b      	ldrb	r3, [r3, #16]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d10f      	bne.n	800cf8e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	23ad      	movs	r3, #173	; 0xad
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	58d3      	ldr	r3, [r2, r3]
 800cf76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf78:	2208      	movs	r2, #8
 800cf7a:	18ba      	adds	r2, r7, r2
 800cf7c:	0010      	movs	r0, r2
 800cf7e:	4798      	blx	r3
 800cf80:	0003      	movs	r3, r0
 800cf82:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	3301      	adds	r3, #1
 800cf88:	2202      	movs	r2, #2
 800cf8a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cf8c:	e13f      	b.n	800d20e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	23ad      	movs	r3, #173	; 0xad
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	58d3      	ldr	r3, [r2, r3]
 800cf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf98:	2208      	movs	r2, #8
 800cf9a:	18ba      	adds	r2, r7, r2
 800cf9c:	0010      	movs	r0, r2
 800cf9e:	4798      	blx	r3
 800cfa0:	0003      	movs	r3, r0
 800cfa2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	2202      	movs	r2, #2
 800cfaa:	701a      	strb	r2, [r3, #0]
      break;
 800cfac:	e12f      	b.n	800d20e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	885b      	ldrh	r3, [r3, #2]
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	2b05      	cmp	r3, #5
 800cfb6:	d900      	bls.n	800cfba <USBD_GetDescriptor+0xa6>
 800cfb8:	e0d0      	b.n	800d15c <USBD_GetDescriptor+0x248>
 800cfba:	009a      	lsls	r2, r3, #2
 800cfbc:	4bad      	ldr	r3, [pc, #692]	; (800d274 <USBD_GetDescriptor+0x360>)
 800cfbe:	18d3      	adds	r3, r2, r3
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	23ac      	movs	r3, #172	; 0xac
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	58d3      	ldr	r3, [r2, r3]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00d      	beq.n	800cfee <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	23ac      	movs	r3, #172	; 0xac
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	58d3      	ldr	r3, [r2, r3]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	7c12      	ldrb	r2, [r2, #16]
 800cfe0:	2108      	movs	r1, #8
 800cfe2:	1879      	adds	r1, r7, r1
 800cfe4:	0010      	movs	r0, r2
 800cfe6:	4798      	blx	r3
 800cfe8:	0003      	movs	r3, r0
 800cfea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfec:	e0c3      	b.n	800d176 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800cfee:	683a      	ldr	r2, [r7, #0]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	0011      	movs	r1, r2
 800cff4:	0018      	movs	r0, r3
 800cff6:	f000 fb23 	bl	800d640 <USBD_CtlError>
            err++;
 800cffa:	210b      	movs	r1, #11
 800cffc:	187b      	adds	r3, r7, r1
 800cffe:	781a      	ldrb	r2, [r3, #0]
 800d000:	187b      	adds	r3, r7, r1
 800d002:	3201      	adds	r2, #1
 800d004:	701a      	strb	r2, [r3, #0]
          break;
 800d006:	e0b6      	b.n	800d176 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	23ac      	movs	r3, #172	; 0xac
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	58d3      	ldr	r3, [r2, r3]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00d      	beq.n	800d032 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	23ac      	movs	r3, #172	; 0xac
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	58d3      	ldr	r3, [r2, r3]
 800d01e:	689b      	ldr	r3, [r3, #8]
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	7c12      	ldrb	r2, [r2, #16]
 800d024:	2108      	movs	r1, #8
 800d026:	1879      	adds	r1, r7, r1
 800d028:	0010      	movs	r0, r2
 800d02a:	4798      	blx	r3
 800d02c:	0003      	movs	r3, r0
 800d02e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d030:	e0a1      	b.n	800d176 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d032:	683a      	ldr	r2, [r7, #0]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	0011      	movs	r1, r2
 800d038:	0018      	movs	r0, r3
 800d03a:	f000 fb01 	bl	800d640 <USBD_CtlError>
            err++;
 800d03e:	210b      	movs	r1, #11
 800d040:	187b      	adds	r3, r7, r1
 800d042:	781a      	ldrb	r2, [r3, #0]
 800d044:	187b      	adds	r3, r7, r1
 800d046:	3201      	adds	r2, #1
 800d048:	701a      	strb	r2, [r3, #0]
          break;
 800d04a:	e094      	b.n	800d176 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	23ac      	movs	r3, #172	; 0xac
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	58d3      	ldr	r3, [r2, r3]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00d      	beq.n	800d076 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	23ac      	movs	r3, #172	; 0xac
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	58d3      	ldr	r3, [r2, r3]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	7c12      	ldrb	r2, [r2, #16]
 800d068:	2108      	movs	r1, #8
 800d06a:	1879      	adds	r1, r7, r1
 800d06c:	0010      	movs	r0, r2
 800d06e:	4798      	blx	r3
 800d070:	0003      	movs	r3, r0
 800d072:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d074:	e07f      	b.n	800d176 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d076:	683a      	ldr	r2, [r7, #0]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	0011      	movs	r1, r2
 800d07c:	0018      	movs	r0, r3
 800d07e:	f000 fadf 	bl	800d640 <USBD_CtlError>
            err++;
 800d082:	210b      	movs	r1, #11
 800d084:	187b      	adds	r3, r7, r1
 800d086:	781a      	ldrb	r2, [r3, #0]
 800d088:	187b      	adds	r3, r7, r1
 800d08a:	3201      	adds	r2, #1
 800d08c:	701a      	strb	r2, [r3, #0]
          break;
 800d08e:	e072      	b.n	800d176 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	23ac      	movs	r3, #172	; 0xac
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	58d3      	ldr	r3, [r2, r3]
 800d098:	691b      	ldr	r3, [r3, #16]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00d      	beq.n	800d0ba <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	23ac      	movs	r3, #172	; 0xac
 800d0a2:	009b      	lsls	r3, r3, #2
 800d0a4:	58d3      	ldr	r3, [r2, r3]
 800d0a6:	691b      	ldr	r3, [r3, #16]
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	7c12      	ldrb	r2, [r2, #16]
 800d0ac:	2108      	movs	r1, #8
 800d0ae:	1879      	adds	r1, r7, r1
 800d0b0:	0010      	movs	r0, r2
 800d0b2:	4798      	blx	r3
 800d0b4:	0003      	movs	r3, r0
 800d0b6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0b8:	e05d      	b.n	800d176 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d0ba:	683a      	ldr	r2, [r7, #0]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	0011      	movs	r1, r2
 800d0c0:	0018      	movs	r0, r3
 800d0c2:	f000 fabd 	bl	800d640 <USBD_CtlError>
            err++;
 800d0c6:	210b      	movs	r1, #11
 800d0c8:	187b      	adds	r3, r7, r1
 800d0ca:	781a      	ldrb	r2, [r3, #0]
 800d0cc:	187b      	adds	r3, r7, r1
 800d0ce:	3201      	adds	r2, #1
 800d0d0:	701a      	strb	r2, [r3, #0]
          break;
 800d0d2:	e050      	b.n	800d176 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	23ac      	movs	r3, #172	; 0xac
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	58d3      	ldr	r3, [r2, r3]
 800d0dc:	695b      	ldr	r3, [r3, #20]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d00d      	beq.n	800d0fe <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	23ac      	movs	r3, #172	; 0xac
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	58d3      	ldr	r3, [r2, r3]
 800d0ea:	695b      	ldr	r3, [r3, #20]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	7c12      	ldrb	r2, [r2, #16]
 800d0f0:	2108      	movs	r1, #8
 800d0f2:	1879      	adds	r1, r7, r1
 800d0f4:	0010      	movs	r0, r2
 800d0f6:	4798      	blx	r3
 800d0f8:	0003      	movs	r3, r0
 800d0fa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0fc:	e03b      	b.n	800d176 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d0fe:	683a      	ldr	r2, [r7, #0]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	0011      	movs	r1, r2
 800d104:	0018      	movs	r0, r3
 800d106:	f000 fa9b 	bl	800d640 <USBD_CtlError>
            err++;
 800d10a:	210b      	movs	r1, #11
 800d10c:	187b      	adds	r3, r7, r1
 800d10e:	781a      	ldrb	r2, [r3, #0]
 800d110:	187b      	adds	r3, r7, r1
 800d112:	3201      	adds	r2, #1
 800d114:	701a      	strb	r2, [r3, #0]
          break;
 800d116:	e02e      	b.n	800d176 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	23ac      	movs	r3, #172	; 0xac
 800d11c:	009b      	lsls	r3, r3, #2
 800d11e:	58d3      	ldr	r3, [r2, r3]
 800d120:	699b      	ldr	r3, [r3, #24]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d00d      	beq.n	800d142 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	23ac      	movs	r3, #172	; 0xac
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	58d3      	ldr	r3, [r2, r3]
 800d12e:	699b      	ldr	r3, [r3, #24]
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	7c12      	ldrb	r2, [r2, #16]
 800d134:	2108      	movs	r1, #8
 800d136:	1879      	adds	r1, r7, r1
 800d138:	0010      	movs	r0, r2
 800d13a:	4798      	blx	r3
 800d13c:	0003      	movs	r3, r0
 800d13e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d140:	e019      	b.n	800d176 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d142:	683a      	ldr	r2, [r7, #0]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	0011      	movs	r1, r2
 800d148:	0018      	movs	r0, r3
 800d14a:	f000 fa79 	bl	800d640 <USBD_CtlError>
            err++;
 800d14e:	210b      	movs	r1, #11
 800d150:	187b      	adds	r3, r7, r1
 800d152:	781a      	ldrb	r2, [r3, #0]
 800d154:	187b      	adds	r3, r7, r1
 800d156:	3201      	adds	r2, #1
 800d158:	701a      	strb	r2, [r3, #0]
          break;
 800d15a:	e00c      	b.n	800d176 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800d15c:	683a      	ldr	r2, [r7, #0]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	0011      	movs	r1, r2
 800d162:	0018      	movs	r0, r3
 800d164:	f000 fa6c 	bl	800d640 <USBD_CtlError>
          err++;
 800d168:	210b      	movs	r1, #11
 800d16a:	187b      	adds	r3, r7, r1
 800d16c:	781a      	ldrb	r2, [r3, #0]
 800d16e:	187b      	adds	r3, r7, r1
 800d170:	3201      	adds	r2, #1
 800d172:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800d174:	e04b      	b.n	800d20e <USBD_GetDescriptor+0x2fa>
 800d176:	e04a      	b.n	800d20e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	7c1b      	ldrb	r3, [r3, #16]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10b      	bne.n	800d198 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	23ad      	movs	r3, #173	; 0xad
 800d184:	009b      	lsls	r3, r3, #2
 800d186:	58d3      	ldr	r3, [r2, r3]
 800d188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d18a:	2208      	movs	r2, #8
 800d18c:	18ba      	adds	r2, r7, r2
 800d18e:	0010      	movs	r0, r2
 800d190:	4798      	blx	r3
 800d192:	0003      	movs	r3, r0
 800d194:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d196:	e03a      	b.n	800d20e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800d198:	683a      	ldr	r2, [r7, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	0011      	movs	r1, r2
 800d19e:	0018      	movs	r0, r3
 800d1a0:	f000 fa4e 	bl	800d640 <USBD_CtlError>
        err++;
 800d1a4:	210b      	movs	r1, #11
 800d1a6:	187b      	adds	r3, r7, r1
 800d1a8:	781a      	ldrb	r2, [r3, #0]
 800d1aa:	187b      	adds	r3, r7, r1
 800d1ac:	3201      	adds	r2, #1
 800d1ae:	701a      	strb	r2, [r3, #0]
      break;
 800d1b0:	e02d      	b.n	800d20e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	7c1b      	ldrb	r3, [r3, #16]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d10f      	bne.n	800d1da <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	23ad      	movs	r3, #173	; 0xad
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	58d3      	ldr	r3, [r2, r3]
 800d1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1c4:	2208      	movs	r2, #8
 800d1c6:	18ba      	adds	r2, r7, r2
 800d1c8:	0010      	movs	r0, r2
 800d1ca:	4798      	blx	r3
 800d1cc:	0003      	movs	r3, r0
 800d1ce:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	2207      	movs	r2, #7
 800d1d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1d8:	e019      	b.n	800d20e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800d1da:	683a      	ldr	r2, [r7, #0]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	0011      	movs	r1, r2
 800d1e0:	0018      	movs	r0, r3
 800d1e2:	f000 fa2d 	bl	800d640 <USBD_CtlError>
        err++;
 800d1e6:	210b      	movs	r1, #11
 800d1e8:	187b      	adds	r3, r7, r1
 800d1ea:	781a      	ldrb	r2, [r3, #0]
 800d1ec:	187b      	adds	r3, r7, r1
 800d1ee:	3201      	adds	r2, #1
 800d1f0:	701a      	strb	r2, [r3, #0]
      break;
 800d1f2:	e00c      	b.n	800d20e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800d1f4:	683a      	ldr	r2, [r7, #0]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	0011      	movs	r1, r2
 800d1fa:	0018      	movs	r0, r3
 800d1fc:	f000 fa20 	bl	800d640 <USBD_CtlError>
      err++;
 800d200:	210b      	movs	r1, #11
 800d202:	187b      	adds	r3, r7, r1
 800d204:	781a      	ldrb	r2, [r3, #0]
 800d206:	187b      	adds	r3, r7, r1
 800d208:	3201      	adds	r2, #1
 800d20a:	701a      	strb	r2, [r3, #0]
      break;
 800d20c:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800d20e:	230b      	movs	r3, #11
 800d210:	18fb      	adds	r3, r7, r3
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d127      	bne.n	800d268 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d218:	2108      	movs	r1, #8
 800d21a:	187b      	adds	r3, r7, r1
 800d21c:	881b      	ldrh	r3, [r3, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d019      	beq.n	800d256 <USBD_GetDescriptor+0x342>
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	88db      	ldrh	r3, [r3, #6]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d015      	beq.n	800d256 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	88da      	ldrh	r2, [r3, #6]
 800d22e:	187b      	adds	r3, r7, r1
 800d230:	881b      	ldrh	r3, [r3, #0]
 800d232:	1c18      	adds	r0, r3, #0
 800d234:	1c11      	adds	r1, r2, #0
 800d236:	b28a      	uxth	r2, r1
 800d238:	b283      	uxth	r3, r0
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d900      	bls.n	800d240 <USBD_GetDescriptor+0x32c>
 800d23e:	1c01      	adds	r1, r0, #0
 800d240:	b28a      	uxth	r2, r1
 800d242:	2108      	movs	r1, #8
 800d244:	187b      	adds	r3, r7, r1
 800d246:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d248:	187b      	adds	r3, r7, r1
 800d24a:	881a      	ldrh	r2, [r3, #0]
 800d24c:	68f9      	ldr	r1, [r7, #12]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	0018      	movs	r0, r3
 800d252:	f000 fa73 	bl	800d73c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	88db      	ldrh	r3, [r3, #6]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d105      	bne.n	800d26a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	0018      	movs	r0, r3
 800d262:	f000 fad5 	bl	800d810 <USBD_CtlSendStatus>
 800d266:	e000      	b.n	800d26a <USBD_GetDescriptor+0x356>
    return;
 800d268:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800d26a:	46bd      	mov	sp, r7
 800d26c:	b004      	add	sp, #16
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	080133a8 	.word	0x080133a8
 800d274:	080133c8 	.word	0x080133c8

0800d278 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d278:	b590      	push	{r4, r7, lr}
 800d27a:	b085      	sub	sp, #20
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	889b      	ldrh	r3, [r3, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d13d      	bne.n	800d306 <USBD_SetAddress+0x8e>
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	88db      	ldrh	r3, [r3, #6]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d139      	bne.n	800d306 <USBD_SetAddress+0x8e>
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	885b      	ldrh	r3, [r3, #2]
 800d296:	2b7f      	cmp	r3, #127	; 0x7f
 800d298:	d835      	bhi.n	800d306 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	885b      	ldrh	r3, [r3, #2]
 800d29e:	b2da      	uxtb	r2, r3
 800d2a0:	230f      	movs	r3, #15
 800d2a2:	18fb      	adds	r3, r7, r3
 800d2a4:	217f      	movs	r1, #127	; 0x7f
 800d2a6:	400a      	ands	r2, r1
 800d2a8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	23a7      	movs	r3, #167	; 0xa7
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	5cd3      	ldrb	r3, [r2, r3]
 800d2b2:	2b03      	cmp	r3, #3
 800d2b4:	d106      	bne.n	800d2c4 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800d2b6:	683a      	ldr	r2, [r7, #0]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	0011      	movs	r1, r2
 800d2bc:	0018      	movs	r0, r3
 800d2be:	f000 f9bf 	bl	800d640 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2c2:	e027      	b.n	800d314 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	240f      	movs	r4, #15
 800d2c8:	193a      	adds	r2, r7, r4
 800d2ca:	4914      	ldr	r1, [pc, #80]	; (800d31c <USBD_SetAddress+0xa4>)
 800d2cc:	7812      	ldrb	r2, [r2, #0]
 800d2ce:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d2d0:	193b      	adds	r3, r7, r4
 800d2d2:	781a      	ldrb	r2, [r3, #0]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	0011      	movs	r1, r2
 800d2d8:	0018      	movs	r0, r3
 800d2da:	f004 f9d5 	bl	8011688 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	0018      	movs	r0, r3
 800d2e2:	f000 fa95 	bl	800d810 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d2e6:	193b      	adds	r3, r7, r4
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d005      	beq.n	800d2fa <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	23a7      	movs	r3, #167	; 0xa7
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	2102      	movs	r1, #2
 800d2f6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2f8:	e00c      	b.n	800d314 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	23a7      	movs	r3, #167	; 0xa7
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	2101      	movs	r1, #1
 800d302:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d304:	e006      	b.n	800d314 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d306:	683a      	ldr	r2, [r7, #0]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	0011      	movs	r1, r2
 800d30c:	0018      	movs	r0, r3
 800d30e:	f000 f997 	bl	800d640 <USBD_CtlError>
  }
}
 800d312:	46c0      	nop			; (mov r8, r8)
 800d314:	46c0      	nop			; (mov r8, r8)
 800d316:	46bd      	mov	sp, r7
 800d318:	b005      	add	sp, #20
 800d31a:	bd90      	pop	{r4, r7, pc}
 800d31c:	0000029e 	.word	0x0000029e

0800d320 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	885b      	ldrh	r3, [r3, #2]
 800d32e:	b2da      	uxtb	r2, r3
 800d330:	4b4c      	ldr	r3, [pc, #304]	; (800d464 <USBD_SetConfig+0x144>)
 800d332:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d334:	4b4b      	ldr	r3, [pc, #300]	; (800d464 <USBD_SetConfig+0x144>)
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d906      	bls.n	800d34a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800d33c:	683a      	ldr	r2, [r7, #0]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	0011      	movs	r1, r2
 800d342:	0018      	movs	r0, r3
 800d344:	f000 f97c 	bl	800d640 <USBD_CtlError>
 800d348:	e088      	b.n	800d45c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	23a7      	movs	r3, #167	; 0xa7
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	5cd3      	ldrb	r3, [r2, r3]
 800d352:	2b02      	cmp	r3, #2
 800d354:	d002      	beq.n	800d35c <USBD_SetConfig+0x3c>
 800d356:	2b03      	cmp	r3, #3
 800d358:	d029      	beq.n	800d3ae <USBD_SetConfig+0x8e>
 800d35a:	e071      	b.n	800d440 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d35c:	4b41      	ldr	r3, [pc, #260]	; (800d464 <USBD_SetConfig+0x144>)
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d01f      	beq.n	800d3a4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800d364:	4b3f      	ldr	r3, [pc, #252]	; (800d464 <USBD_SetConfig+0x144>)
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	001a      	movs	r2, r3
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	23a7      	movs	r3, #167	; 0xa7
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	2103      	movs	r1, #3
 800d376:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d378:	4b3a      	ldr	r3, [pc, #232]	; (800d464 <USBD_SetConfig+0x144>)
 800d37a:	781a      	ldrb	r2, [r3, #0]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	0011      	movs	r1, r2
 800d380:	0018      	movs	r0, r3
 800d382:	f7ff f8c5 	bl	800c510 <USBD_SetClassConfig>
 800d386:	0003      	movs	r3, r0
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d106      	bne.n	800d39a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800d38c:	683a      	ldr	r2, [r7, #0]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	0011      	movs	r1, r2
 800d392:	0018      	movs	r0, r3
 800d394:	f000 f954 	bl	800d640 <USBD_CtlError>
            return;
 800d398:	e060      	b.n	800d45c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	0018      	movs	r0, r3
 800d39e:	f000 fa37 	bl	800d810 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d3a2:	e05b      	b.n	800d45c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	0018      	movs	r0, r3
 800d3a8:	f000 fa32 	bl	800d810 <USBD_CtlSendStatus>
        break;
 800d3ac:	e056      	b.n	800d45c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d3ae:	4b2d      	ldr	r3, [pc, #180]	; (800d464 <USBD_SetConfig+0x144>)
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d115      	bne.n	800d3e2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	23a7      	movs	r3, #167	; 0xa7
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	2102      	movs	r1, #2
 800d3be:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800d3c0:	4b28      	ldr	r3, [pc, #160]	; (800d464 <USBD_SetConfig+0x144>)
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	001a      	movs	r2, r3
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d3ca:	4b26      	ldr	r3, [pc, #152]	; (800d464 <USBD_SetConfig+0x144>)
 800d3cc:	781a      	ldrb	r2, [r3, #0]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	0011      	movs	r1, r2
 800d3d2:	0018      	movs	r0, r3
 800d3d4:	f7ff f8c3 	bl	800c55e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	0018      	movs	r0, r3
 800d3dc:	f000 fa18 	bl	800d810 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d3e0:	e03c      	b.n	800d45c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800d3e2:	4b20      	ldr	r3, [pc, #128]	; (800d464 <USBD_SetConfig+0x144>)
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	001a      	movs	r2, r3
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d022      	beq.n	800d436 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	0011      	movs	r1, r2
 800d3fa:	0018      	movs	r0, r3
 800d3fc:	f7ff f8af 	bl	800c55e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d400:	4b18      	ldr	r3, [pc, #96]	; (800d464 <USBD_SetConfig+0x144>)
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	001a      	movs	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d40a:	4b16      	ldr	r3, [pc, #88]	; (800d464 <USBD_SetConfig+0x144>)
 800d40c:	781a      	ldrb	r2, [r3, #0]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	0011      	movs	r1, r2
 800d412:	0018      	movs	r0, r3
 800d414:	f7ff f87c 	bl	800c510 <USBD_SetClassConfig>
 800d418:	0003      	movs	r3, r0
 800d41a:	2b02      	cmp	r3, #2
 800d41c:	d106      	bne.n	800d42c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800d41e:	683a      	ldr	r2, [r7, #0]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	0011      	movs	r1, r2
 800d424:	0018      	movs	r0, r3
 800d426:	f000 f90b 	bl	800d640 <USBD_CtlError>
            return;
 800d42a:	e017      	b.n	800d45c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	0018      	movs	r0, r3
 800d430:	f000 f9ee 	bl	800d810 <USBD_CtlSendStatus>
        break;
 800d434:	e012      	b.n	800d45c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	0018      	movs	r0, r3
 800d43a:	f000 f9e9 	bl	800d810 <USBD_CtlSendStatus>
        break;
 800d43e:	e00d      	b.n	800d45c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800d440:	683a      	ldr	r2, [r7, #0]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	0011      	movs	r1, r2
 800d446:	0018      	movs	r0, r3
 800d448:	f000 f8fa 	bl	800d640 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d44c:	4b05      	ldr	r3, [pc, #20]	; (800d464 <USBD_SetConfig+0x144>)
 800d44e:	781a      	ldrb	r2, [r3, #0]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	0011      	movs	r1, r2
 800d454:	0018      	movs	r0, r3
 800d456:	f7ff f882 	bl	800c55e <USBD_ClrClassConfig>
        break;
 800d45a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800d45c:	46bd      	mov	sp, r7
 800d45e:	b002      	add	sp, #8
 800d460:	bd80      	pop	{r7, pc}
 800d462:	46c0      	nop			; (mov r8, r8)
 800d464:	200006b8 	.word	0x200006b8

0800d468 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	88db      	ldrh	r3, [r3, #6]
 800d476:	2b01      	cmp	r3, #1
 800d478:	d006      	beq.n	800d488 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	0011      	movs	r1, r2
 800d480:	0018      	movs	r0, r3
 800d482:	f000 f8dd 	bl	800d640 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d486:	e026      	b.n	800d4d6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	23a7      	movs	r3, #167	; 0xa7
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	5cd3      	ldrb	r3, [r2, r3]
 800d490:	2b02      	cmp	r3, #2
 800d492:	dc02      	bgt.n	800d49a <USBD_GetConfig+0x32>
 800d494:	2b00      	cmp	r3, #0
 800d496:	dc03      	bgt.n	800d4a0 <USBD_GetConfig+0x38>
 800d498:	e016      	b.n	800d4c8 <USBD_GetConfig+0x60>
 800d49a:	2b03      	cmp	r3, #3
 800d49c:	d00c      	beq.n	800d4b8 <USBD_GetConfig+0x50>
 800d49e:	e013      	b.n	800d4c8 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	3308      	adds	r3, #8
 800d4aa:	0019      	movs	r1, r3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	0018      	movs	r0, r3
 800d4b2:	f000 f943 	bl	800d73c <USBD_CtlSendData>
        break;
 800d4b6:	e00e      	b.n	800d4d6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	1d19      	adds	r1, r3, #4
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	0018      	movs	r0, r3
 800d4c2:	f000 f93b 	bl	800d73c <USBD_CtlSendData>
        break;
 800d4c6:	e006      	b.n	800d4d6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800d4c8:	683a      	ldr	r2, [r7, #0]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	0011      	movs	r1, r2
 800d4ce:	0018      	movs	r0, r3
 800d4d0:	f000 f8b6 	bl	800d640 <USBD_CtlError>
        break;
 800d4d4:	46c0      	nop			; (mov r8, r8)
}
 800d4d6:	46c0      	nop			; (mov r8, r8)
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	b002      	add	sp, #8
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b082      	sub	sp, #8
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
 800d4e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	23a7      	movs	r3, #167	; 0xa7
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	5cd3      	ldrb	r3, [r2, r3]
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d822      	bhi.n	800d53c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	88db      	ldrh	r3, [r3, #6]
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	d006      	beq.n	800d50c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800d4fe:	683a      	ldr	r2, [r7, #0]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	0011      	movs	r1, r2
 800d504:	0018      	movs	r0, r3
 800d506:	f000 f89b 	bl	800d640 <USBD_CtlError>
        break;
 800d50a:	e01e      	b.n	800d54a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2201      	movs	r2, #1
 800d510:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	23a9      	movs	r3, #169	; 0xa9
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	58d3      	ldr	r3, [r2, r3]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d005      	beq.n	800d52a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	2202      	movs	r2, #2
 800d524:	431a      	orrs	r2, r3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	330c      	adds	r3, #12
 800d52e:	0019      	movs	r1, r3
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2202      	movs	r2, #2
 800d534:	0018      	movs	r0, r3
 800d536:	f000 f901 	bl	800d73c <USBD_CtlSendData>
      break;
 800d53a:	e006      	b.n	800d54a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800d53c:	683a      	ldr	r2, [r7, #0]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	0011      	movs	r1, r2
 800d542:	0018      	movs	r0, r3
 800d544:	f000 f87c 	bl	800d640 <USBD_CtlError>
      break;
 800d548:	46c0      	nop			; (mov r8, r8)
  }
}
 800d54a:	46c0      	nop			; (mov r8, r8)
 800d54c:	46bd      	mov	sp, r7
 800d54e:	b002      	add	sp, #8
 800d550:	bd80      	pop	{r7, pc}

0800d552 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d552:	b580      	push	{r7, lr}
 800d554:	b082      	sub	sp, #8
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
 800d55a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	885b      	ldrh	r3, [r3, #2]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d108      	bne.n	800d576 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	23a9      	movs	r3, #169	; 0xa9
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	2101      	movs	r1, #1
 800d56c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	0018      	movs	r0, r3
 800d572:	f000 f94d 	bl	800d810 <USBD_CtlSendStatus>
  }
}
 800d576:	46c0      	nop			; (mov r8, r8)
 800d578:	46bd      	mov	sp, r7
 800d57a:	b002      	add	sp, #8
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d57e:	b580      	push	{r7, lr}
 800d580:	b082      	sub	sp, #8
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
 800d586:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	23a7      	movs	r3, #167	; 0xa7
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	5cd3      	ldrb	r3, [r2, r3]
 800d590:	3b01      	subs	r3, #1
 800d592:	2b02      	cmp	r3, #2
 800d594:	d80d      	bhi.n	800d5b2 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	885b      	ldrh	r3, [r3, #2]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d110      	bne.n	800d5c0 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	23a9      	movs	r3, #169	; 0xa9
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	2100      	movs	r1, #0
 800d5a6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	0018      	movs	r0, r3
 800d5ac:	f000 f930 	bl	800d810 <USBD_CtlSendStatus>
      }
      break;
 800d5b0:	e006      	b.n	800d5c0 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	0011      	movs	r1, r2
 800d5b8:	0018      	movs	r0, r3
 800d5ba:	f000 f841 	bl	800d640 <USBD_CtlError>
      break;
 800d5be:	e000      	b.n	800d5c2 <USBD_ClrFeature+0x44>
      break;
 800d5c0:	46c0      	nop			; (mov r8, r8)
  }
}
 800d5c2:	46c0      	nop			; (mov r8, r8)
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	b002      	add	sp, #8
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b082      	sub	sp, #8
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
 800d5d2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	781a      	ldrb	r2, [r3, #0]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	785a      	ldrb	r2, [r3, #1]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	3302      	adds	r3, #2
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	b29a      	uxth	r2, r3
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	3303      	adds	r3, #3
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	021b      	lsls	r3, r3, #8
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	18d3      	adds	r3, r2, r3
 800d5fa:	b29a      	uxth	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	3304      	adds	r3, #4
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	b29a      	uxth	r2, r3
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	3305      	adds	r3, #5
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	b29b      	uxth	r3, r3
 800d610:	021b      	lsls	r3, r3, #8
 800d612:	b29b      	uxth	r3, r3
 800d614:	18d3      	adds	r3, r2, r3
 800d616:	b29a      	uxth	r2, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	3306      	adds	r3, #6
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	b29a      	uxth	r2, r3
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	3307      	adds	r3, #7
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	021b      	lsls	r3, r3, #8
 800d62e:	b29b      	uxth	r3, r3
 800d630:	18d3      	adds	r3, r2, r3
 800d632:	b29a      	uxth	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	80da      	strh	r2, [r3, #6]

}
 800d638:	46c0      	nop			; (mov r8, r8)
 800d63a:	46bd      	mov	sp, r7
 800d63c:	b002      	add	sp, #8
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2180      	movs	r1, #128	; 0x80
 800d64e:	0018      	movs	r0, r3
 800d650:	f003 ff93 	bl	801157a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2100      	movs	r1, #0
 800d658:	0018      	movs	r0, r3
 800d65a:	f003 ff8e 	bl	801157a <USBD_LL_StallEP>
}
 800d65e:	46c0      	nop			; (mov r8, r8)
 800d660:	46bd      	mov	sp, r7
 800d662:	b002      	add	sp, #8
 800d664:	bd80      	pop	{r7, pc}

0800d666 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d666:	b590      	push	{r4, r7, lr}
 800d668:	b087      	sub	sp, #28
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	60f8      	str	r0, [r7, #12]
 800d66e:	60b9      	str	r1, [r7, #8]
 800d670:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d672:	2417      	movs	r4, #23
 800d674:	193b      	adds	r3, r7, r4
 800d676:	2200      	movs	r2, #0
 800d678:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d03c      	beq.n	800d6fa <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	0018      	movs	r0, r3
 800d684:	f000 f83d 	bl	800d702 <USBD_GetLen>
 800d688:	0003      	movs	r3, r0
 800d68a:	3301      	adds	r3, #1
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	18db      	adds	r3, r3, r3
 800d690:	b29a      	uxth	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d696:	193b      	adds	r3, r7, r4
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	193a      	adds	r2, r7, r4
 800d69c:	1c59      	adds	r1, r3, #1
 800d69e:	7011      	strb	r1, [r2, #0]
 800d6a0:	001a      	movs	r2, r3
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	189b      	adds	r3, r3, r2
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	7812      	ldrb	r2, [r2, #0]
 800d6aa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d6ac:	193b      	adds	r3, r7, r4
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	193a      	adds	r2, r7, r4
 800d6b2:	1c59      	adds	r1, r3, #1
 800d6b4:	7011      	strb	r1, [r2, #0]
 800d6b6:	001a      	movs	r2, r3
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	189b      	adds	r3, r3, r2
 800d6bc:	2203      	movs	r2, #3
 800d6be:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d6c0:	e017      	b.n	800d6f2 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	1c5a      	adds	r2, r3, #1
 800d6c6:	60fa      	str	r2, [r7, #12]
 800d6c8:	2417      	movs	r4, #23
 800d6ca:	193a      	adds	r2, r7, r4
 800d6cc:	7812      	ldrb	r2, [r2, #0]
 800d6ce:	1939      	adds	r1, r7, r4
 800d6d0:	1c50      	adds	r0, r2, #1
 800d6d2:	7008      	strb	r0, [r1, #0]
 800d6d4:	0011      	movs	r1, r2
 800d6d6:	68ba      	ldr	r2, [r7, #8]
 800d6d8:	1852      	adds	r2, r2, r1
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d6de:	193b      	adds	r3, r7, r4
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	193a      	adds	r2, r7, r4
 800d6e4:	1c59      	adds	r1, r3, #1
 800d6e6:	7011      	strb	r1, [r2, #0]
 800d6e8:	001a      	movs	r2, r3
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	189b      	adds	r3, r3, r2
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d1e3      	bne.n	800d6c2 <USBD_GetString+0x5c>
    }
  }
}
 800d6fa:	46c0      	nop			; (mov r8, r8)
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	b007      	add	sp, #28
 800d700:	bd90      	pop	{r4, r7, pc}

0800d702 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d702:	b580      	push	{r7, lr}
 800d704:	b084      	sub	sp, #16
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d70a:	230f      	movs	r3, #15
 800d70c:	18fb      	adds	r3, r7, r3
 800d70e:	2200      	movs	r2, #0
 800d710:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800d712:	e008      	b.n	800d726 <USBD_GetLen+0x24>
  {
    len++;
 800d714:	210f      	movs	r1, #15
 800d716:	187b      	adds	r3, r7, r1
 800d718:	781a      	ldrb	r2, [r3, #0]
 800d71a:	187b      	adds	r3, r7, r1
 800d71c:	3201      	adds	r2, #1
 800d71e:	701a      	strb	r2, [r3, #0]
    buf++;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	3301      	adds	r3, #1
 800d724:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d1f2      	bne.n	800d714 <USBD_GetLen+0x12>
  }

  return len;
 800d72e:	230f      	movs	r3, #15
 800d730:	18fb      	adds	r3, r7, r3
 800d732:	781b      	ldrb	r3, [r3, #0]
}
 800d734:	0018      	movs	r0, r3
 800d736:	46bd      	mov	sp, r7
 800d738:	b004      	add	sp, #16
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b084      	sub	sp, #16
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	1dbb      	adds	r3, r7, #6
 800d748:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	23a5      	movs	r3, #165	; 0xa5
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	2102      	movs	r1, #2
 800d752:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800d754:	1dbb      	adds	r3, r7, #6
 800d756:	881a      	ldrh	r2, [r3, #0]
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d75c:	1dbb      	adds	r3, r7, #6
 800d75e:	881a      	ldrh	r2, [r3, #0]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d764:	1dbb      	adds	r3, r7, #6
 800d766:	881b      	ldrh	r3, [r3, #0]
 800d768:	68ba      	ldr	r2, [r7, #8]
 800d76a:	68f8      	ldr	r0, [r7, #12]
 800d76c:	2100      	movs	r1, #0
 800d76e:	f003 ffb6 	bl	80116de <USBD_LL_Transmit>

  return USBD_OK;
 800d772:	2300      	movs	r3, #0
}
 800d774:	0018      	movs	r0, r3
 800d776:	46bd      	mov	sp, r7
 800d778:	b004      	add	sp, #16
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	1dbb      	adds	r3, r7, #6
 800d788:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d78a:	1dbb      	adds	r3, r7, #6
 800d78c:	881b      	ldrh	r3, [r3, #0]
 800d78e:	68ba      	ldr	r2, [r7, #8]
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	2100      	movs	r1, #0
 800d794:	f003 ffa3 	bl	80116de <USBD_LL_Transmit>

  return USBD_OK;
 800d798:	2300      	movs	r3, #0
}
 800d79a:	0018      	movs	r0, r3
 800d79c:	46bd      	mov	sp, r7
 800d79e:	b004      	add	sp, #16
 800d7a0:	bd80      	pop	{r7, pc}

0800d7a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b084      	sub	sp, #16
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	60f8      	str	r0, [r7, #12]
 800d7aa:	60b9      	str	r1, [r7, #8]
 800d7ac:	1dbb      	adds	r3, r7, #6
 800d7ae:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	23a5      	movs	r3, #165	; 0xa5
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	2103      	movs	r1, #3
 800d7b8:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800d7ba:	1dbb      	adds	r3, r7, #6
 800d7bc:	8819      	ldrh	r1, [r3, #0]
 800d7be:	68fa      	ldr	r2, [r7, #12]
 800d7c0:	23ae      	movs	r3, #174	; 0xae
 800d7c2:	005b      	lsls	r3, r3, #1
 800d7c4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800d7c6:	1dbb      	adds	r3, r7, #6
 800d7c8:	8819      	ldrh	r1, [r3, #0]
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	23b0      	movs	r3, #176	; 0xb0
 800d7ce:	005b      	lsls	r3, r3, #1
 800d7d0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7d2:	1dbb      	adds	r3, r7, #6
 800d7d4:	881b      	ldrh	r3, [r3, #0]
 800d7d6:	68ba      	ldr	r2, [r7, #8]
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	2100      	movs	r1, #0
 800d7dc:	f003 ffb6 	bl	801174c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7e0:	2300      	movs	r3, #0
}
 800d7e2:	0018      	movs	r0, r3
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	b004      	add	sp, #16
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b084      	sub	sp, #16
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	60f8      	str	r0, [r7, #12]
 800d7f2:	60b9      	str	r1, [r7, #8]
 800d7f4:	1dbb      	adds	r3, r7, #6
 800d7f6:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7f8:	1dbb      	adds	r3, r7, #6
 800d7fa:	881b      	ldrh	r3, [r3, #0]
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	2100      	movs	r1, #0
 800d802:	f003 ffa3 	bl	801174c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d806:	2300      	movs	r3, #0
}
 800d808:	0018      	movs	r0, r3
 800d80a:	46bd      	mov	sp, r7
 800d80c:	b004      	add	sp, #16
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	23a5      	movs	r3, #165	; 0xa5
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	2104      	movs	r1, #4
 800d820:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	2300      	movs	r3, #0
 800d826:	2200      	movs	r2, #0
 800d828:	2100      	movs	r1, #0
 800d82a:	f003 ff58 	bl	80116de <USBD_LL_Transmit>

  return USBD_OK;
 800d82e:	2300      	movs	r3, #0
}
 800d830:	0018      	movs	r0, r3
 800d832:	46bd      	mov	sp, r7
 800d834:	b002      	add	sp, #8
 800d836:	bd80      	pop	{r7, pc}

0800d838 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	23a5      	movs	r3, #165	; 0xa5
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	2105      	movs	r1, #5
 800d848:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	2300      	movs	r3, #0
 800d84e:	2200      	movs	r2, #0
 800d850:	2100      	movs	r1, #0
 800d852:	f003 ff7b 	bl	801174c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	0018      	movs	r0, r3
 800d85a:	46bd      	mov	sp, r7
 800d85c:	b002      	add	sp, #8
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d866:	f3ef 8305 	mrs	r3, IPSR
 800d86a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d86c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d109      	bne.n	800d886 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d872:	f3ef 8310 	mrs	r3, PRIMASK
 800d876:	607b      	str	r3, [r7, #4]
  return(result);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d007      	beq.n	800d88e <osKernelInitialize+0x2e>
 800d87e:	4b0d      	ldr	r3, [pc, #52]	; (800d8b4 <osKernelInitialize+0x54>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2b02      	cmp	r3, #2
 800d884:	d103      	bne.n	800d88e <osKernelInitialize+0x2e>
    stat = osErrorISR;
 800d886:	2306      	movs	r3, #6
 800d888:	425b      	negs	r3, r3
 800d88a:	60fb      	str	r3, [r7, #12]
 800d88c:	e00c      	b.n	800d8a8 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d88e:	4b09      	ldr	r3, [pc, #36]	; (800d8b4 <osKernelInitialize+0x54>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d105      	bne.n	800d8a2 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800d896:	4b07      	ldr	r3, [pc, #28]	; (800d8b4 <osKernelInitialize+0x54>)
 800d898:	2201      	movs	r2, #1
 800d89a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d89c:	2300      	movs	r3, #0
 800d89e:	60fb      	str	r3, [r7, #12]
 800d8a0:	e002      	b.n	800d8a8 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	425b      	negs	r3, r3
 800d8a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
}
 800d8aa:	0018      	movs	r0, r3
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	b004      	add	sp, #16
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	46c0      	nop			; (mov r8, r8)
 800d8b4:	200006bc 	.word	0x200006bc

0800d8b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8be:	f3ef 8305 	mrs	r3, IPSR
 800d8c2:	60bb      	str	r3, [r7, #8]
  return(result);
 800d8c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d109      	bne.n	800d8de <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8ca:	f3ef 8310 	mrs	r3, PRIMASK
 800d8ce:	607b      	str	r3, [r7, #4]
  return(result);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d007      	beq.n	800d8e6 <osKernelStart+0x2e>
 800d8d6:	4b0e      	ldr	r3, [pc, #56]	; (800d910 <osKernelStart+0x58>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2b02      	cmp	r3, #2
 800d8dc:	d103      	bne.n	800d8e6 <osKernelStart+0x2e>
    stat = osErrorISR;
 800d8de:	2306      	movs	r3, #6
 800d8e0:	425b      	negs	r3, r3
 800d8e2:	60fb      	str	r3, [r7, #12]
 800d8e4:	e00e      	b.n	800d904 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d8e6:	4b0a      	ldr	r3, [pc, #40]	; (800d910 <osKernelStart+0x58>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d107      	bne.n	800d8fe <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800d8ee:	4b08      	ldr	r3, [pc, #32]	; (800d910 <osKernelStart+0x58>)
 800d8f0:	2202      	movs	r2, #2
 800d8f2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800d8f4:	f001 fe1e 	bl	800f534 <vTaskStartScheduler>
      stat = osOK;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	60fb      	str	r3, [r7, #12]
 800d8fc:	e002      	b.n	800d904 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800d8fe:	2301      	movs	r3, #1
 800d900:	425b      	negs	r3, r3
 800d902:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d904:	68fb      	ldr	r3, [r7, #12]
}
 800d906:	0018      	movs	r0, r3
 800d908:	46bd      	mov	sp, r7
 800d90a:	b004      	add	sp, #16
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	46c0      	nop			; (mov r8, r8)
 800d910:	200006bc 	.word	0x200006bc

0800d914 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d914:	b5b0      	push	{r4, r5, r7, lr}
 800d916:	b090      	sub	sp, #64	; 0x40
 800d918:	af04      	add	r7, sp, #16
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d920:	2300      	movs	r3, #0
 800d922:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d924:	f3ef 8305 	mrs	r3, IPSR
 800d928:	61fb      	str	r3, [r7, #28]
  return(result);
 800d92a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d000      	beq.n	800d932 <osThreadNew+0x1e>
 800d930:	e090      	b.n	800da54 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d932:	f3ef 8310 	mrs	r3, PRIMASK
 800d936:	61bb      	str	r3, [r7, #24]
  return(result);
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d004      	beq.n	800d948 <osThreadNew+0x34>
 800d93e:	4b48      	ldr	r3, [pc, #288]	; (800da60 <osThreadNew+0x14c>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	2b02      	cmp	r3, #2
 800d944:	d100      	bne.n	800d948 <osThreadNew+0x34>
 800d946:	e085      	b.n	800da54 <osThreadNew+0x140>
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d100      	bne.n	800d950 <osThreadNew+0x3c>
 800d94e:	e081      	b.n	800da54 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 800d950:	2380      	movs	r3, #128	; 0x80
 800d952:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d954:	2318      	movs	r3, #24
 800d956:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 800d958:	2117      	movs	r1, #23
 800d95a:	187b      	adds	r3, r7, r1
 800d95c:	2200      	movs	r2, #0
 800d95e:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 800d960:	187b      	adds	r3, r7, r1
 800d962:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 800d964:	2301      	movs	r3, #1
 800d966:	425b      	negs	r3, r3
 800d968:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d044      	beq.n	800d9fa <osThreadNew+0xe6>
      if (attr->name != NULL) {
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d002      	beq.n	800d97e <osThreadNew+0x6a>
        name = attr->name;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	699b      	ldr	r3, [r3, #24]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d002      	beq.n	800d98c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	699b      	ldr	r3, [r3, #24]
 800d98a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d007      	beq.n	800d9a2 <osThreadNew+0x8e>
 800d992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d994:	2b38      	cmp	r3, #56	; 0x38
 800d996:	d804      	bhi.n	800d9a2 <osThreadNew+0x8e>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	2201      	movs	r2, #1
 800d99e:	4013      	ands	r3, r2
 800d9a0:	d001      	beq.n	800d9a6 <osThreadNew+0x92>
        return (NULL);
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	e057      	b.n	800da56 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	695b      	ldr	r3, [r3, #20]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d003      	beq.n	800d9b6 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	695b      	ldr	r3, [r3, #20]
 800d9b2:	089b      	lsrs	r3, r3, #2
 800d9b4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	689b      	ldr	r3, [r3, #8]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00e      	beq.n	800d9dc <osThreadNew+0xc8>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	2b5b      	cmp	r3, #91	; 0x5b
 800d9c4:	d90a      	bls.n	800d9dc <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d006      	beq.n	800d9dc <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	695b      	ldr	r3, [r3, #20]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d002      	beq.n	800d9dc <osThreadNew+0xc8>
        mem = 1;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	623b      	str	r3, [r7, #32]
 800d9da:	e010      	b.n	800d9fe <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10c      	bne.n	800d9fe <osThreadNew+0xea>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d108      	bne.n	800d9fe <osThreadNew+0xea>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	691b      	ldr	r3, [r3, #16]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d104      	bne.n	800d9fe <osThreadNew+0xea>
          mem = 0;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	623b      	str	r3, [r7, #32]
 800d9f8:	e001      	b.n	800d9fe <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d9fe:	6a3b      	ldr	r3, [r7, #32]
 800da00:	2b01      	cmp	r3, #1
 800da02:	d112      	bne.n	800da2a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800da0c:	68bd      	ldr	r5, [r7, #8]
 800da0e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800da10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	9302      	str	r3, [sp, #8]
 800da16:	9201      	str	r2, [sp, #4]
 800da18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1a:	9300      	str	r3, [sp, #0]
 800da1c:	002b      	movs	r3, r5
 800da1e:	0022      	movs	r2, r4
 800da20:	f001 fbe9 	bl	800f1f6 <xTaskCreateStatic>
 800da24:	0003      	movs	r3, r0
 800da26:	613b      	str	r3, [r7, #16]
 800da28:	e014      	b.n	800da54 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800da2a:	6a3b      	ldr	r3, [r7, #32]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d111      	bne.n	800da54 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800da30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da32:	b29a      	uxth	r2, r3
 800da34:	68bc      	ldr	r4, [r7, #8]
 800da36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da38:	68f8      	ldr	r0, [r7, #12]
 800da3a:	2310      	movs	r3, #16
 800da3c:	18fb      	adds	r3, r7, r3
 800da3e:	9301      	str	r3, [sp, #4]
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	9300      	str	r3, [sp, #0]
 800da44:	0023      	movs	r3, r4
 800da46:	f001 fc19 	bl	800f27c <xTaskCreate>
 800da4a:	0003      	movs	r3, r0
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d001      	beq.n	800da54 <osThreadNew+0x140>
          hTask = NULL;
 800da50:	2300      	movs	r3, #0
 800da52:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800da54:	693b      	ldr	r3, [r7, #16]
}
 800da56:	0018      	movs	r0, r3
 800da58:	46bd      	mov	sp, r7
 800da5a:	b00c      	add	sp, #48	; 0x30
 800da5c:	bdb0      	pop	{r4, r5, r7, pc}
 800da5e:	46c0      	nop			; (mov r8, r8)
 800da60:	200006bc 	.word	0x200006bc

0800da64 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800da64:	b580      	push	{r7, lr}
 800da66:	b086      	sub	sp, #24
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da6c:	f3ef 8305 	mrs	r3, IPSR
 800da70:	613b      	str	r3, [r7, #16]
  return(result);
 800da72:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da74:	2b00      	cmp	r3, #0
 800da76:	d109      	bne.n	800da8c <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da78:	f3ef 8310 	mrs	r3, PRIMASK
 800da7c:	60fb      	str	r3, [r7, #12]
  return(result);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d007      	beq.n	800da94 <osDelay+0x30>
 800da84:	4b0a      	ldr	r3, [pc, #40]	; (800dab0 <osDelay+0x4c>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b02      	cmp	r3, #2
 800da8a:	d103      	bne.n	800da94 <osDelay+0x30>
    stat = osErrorISR;
 800da8c:	2306      	movs	r3, #6
 800da8e:	425b      	negs	r3, r3
 800da90:	617b      	str	r3, [r7, #20]
 800da92:	e008      	b.n	800daa6 <osDelay+0x42>
  }
  else {
    stat = osOK;
 800da94:	2300      	movs	r3, #0
 800da96:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d003      	beq.n	800daa6 <osDelay+0x42>
      vTaskDelay(ticks);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	0018      	movs	r0, r3
 800daa2:	f001 fd21 	bl	800f4e8 <vTaskDelay>
    }
  }

  return (stat);
 800daa6:	697b      	ldr	r3, [r7, #20]
}
 800daa8:	0018      	movs	r0, r3
 800daaa:	46bd      	mov	sp, r7
 800daac:	b006      	add	sp, #24
 800daae:	bd80      	pop	{r7, pc}
 800dab0:	200006bc 	.word	0x200006bc

0800dab4 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	0018      	movs	r0, r3
 800dac0:	f002 fec0 	bl	8010844 <pvTimerGetTimerID>
 800dac4:	0003      	movs	r3, r0
 800dac6:	60fb      	str	r3, [r7, #12]

  if (callb != NULL) {
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d005      	beq.n	800dada <TimerCallback+0x26>
    callb->func (callb->arg);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	0018      	movs	r0, r3
 800dad8:	4790      	blx	r2
  }
}
 800dada:	46c0      	nop			; (mov r8, r8)
 800dadc:	46bd      	mov	sp, r7
 800dade:	b004      	add	sp, #16
 800dae0:	bd80      	pop	{r7, pc}
	...

0800dae4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b08e      	sub	sp, #56	; 0x38
 800dae8:	af02      	add	r7, sp, #8
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	607a      	str	r2, [r7, #4]
 800daee:	603b      	str	r3, [r7, #0]
 800daf0:	230b      	movs	r3, #11
 800daf2:	18fb      	adds	r3, r7, r3
 800daf4:	1c0a      	adds	r2, r1, #0
 800daf6:	701a      	strb	r2, [r3, #0]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800daf8:	2300      	movs	r3, #0
 800dafa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dafc:	f3ef 8305 	mrs	r3, IPSR
 800db00:	61bb      	str	r3, [r7, #24]
  return(result);
 800db02:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800db04:	2b00      	cmp	r3, #0
 800db06:	d000      	beq.n	800db0a <osTimerNew+0x26>
 800db08:	e06b      	b.n	800dbe2 <osTimerNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db0a:	f3ef 8310 	mrs	r3, PRIMASK
 800db0e:	617b      	str	r3, [r7, #20]
  return(result);
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d003      	beq.n	800db1e <osTimerNew+0x3a>
 800db16:	4b35      	ldr	r3, [pc, #212]	; (800dbec <osTimerNew+0x108>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b02      	cmp	r3, #2
 800db1c:	d061      	beq.n	800dbe2 <osTimerNew+0xfe>
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d05e      	beq.n	800dbe2 <osTimerNew+0xfe>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800db24:	2008      	movs	r0, #8
 800db26:	f002 fffb 	bl	8010b20 <pvPortMalloc>
 800db2a:	0003      	movs	r3, r0
 800db2c:	61fb      	str	r3, [r7, #28]

    if (callb != NULL) {
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d056      	beq.n	800dbe2 <osTimerNew+0xfe>
      callb->func = func;
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	68fa      	ldr	r2, [r7, #12]
 800db38:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800db40:	230b      	movs	r3, #11
 800db42:	18fb      	adds	r3, r7, r3
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d102      	bne.n	800db50 <osTimerNew+0x6c>
        reload = pdFALSE;
 800db4a:	2300      	movs	r3, #0
 800db4c:	627b      	str	r3, [r7, #36]	; 0x24
 800db4e:	e001      	b.n	800db54 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800db50:	2301      	movs	r3, #1
 800db52:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800db54:	2301      	movs	r3, #1
 800db56:	425b      	negs	r3, r3
 800db58:	623b      	str	r3, [r7, #32]
      name = NULL;
 800db5a:	2300      	movs	r3, #0
 800db5c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d01c      	beq.n	800db9e <osTimerNew+0xba>
        if (attr->name != NULL) {
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d002      	beq.n	800db72 <osTimerNew+0x8e>
          name = attr->name;
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	689b      	ldr	r3, [r3, #8]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d006      	beq.n	800db88 <osTimerNew+0xa4>
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	2b2f      	cmp	r3, #47	; 0x2f
 800db80:	d902      	bls.n	800db88 <osTimerNew+0xa4>
          mem = 1;
 800db82:	2301      	movs	r3, #1
 800db84:	623b      	str	r3, [r7, #32]
 800db86:	e00c      	b.n	800dba2 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d108      	bne.n	800dba2 <osTimerNew+0xbe>
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d104      	bne.n	800dba2 <osTimerNew+0xbe>
            mem = 0;
 800db98:	2300      	movs	r3, #0
 800db9a:	623b      	str	r3, [r7, #32]
 800db9c:	e001      	b.n	800dba2 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800dba2:	6a3b      	ldr	r3, [r7, #32]
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d10e      	bne.n	800dbc6 <osTimerNew+0xe2>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	689b      	ldr	r3, [r3, #8]
 800dbac:	69f9      	ldr	r1, [r7, #28]
 800dbae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbb2:	9301      	str	r3, [sp, #4]
 800dbb4:	4b0e      	ldr	r3, [pc, #56]	; (800dbf0 <osTimerNew+0x10c>)
 800dbb6:	9300      	str	r3, [sp, #0]
 800dbb8:	000b      	movs	r3, r1
 800dbba:	2101      	movs	r1, #1
 800dbbc:	f002 fb5b 	bl	8010276 <xTimerCreateStatic>
 800dbc0:	0003      	movs	r3, r0
 800dbc2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbc4:	e00d      	b.n	800dbe2 <osTimerNew+0xfe>
      }
      else {
        if (mem == 0) {
 800dbc6:	6a3b      	ldr	r3, [r7, #32]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d10a      	bne.n	800dbe2 <osTimerNew+0xfe>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800dbcc:	69f9      	ldr	r1, [r7, #28]
 800dbce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbd2:	4b07      	ldr	r3, [pc, #28]	; (800dbf0 <osTimerNew+0x10c>)
 800dbd4:	9300      	str	r3, [sp, #0]
 800dbd6:	000b      	movs	r3, r1
 800dbd8:	2101      	movs	r1, #1
 800dbda:	f002 fb29 	bl	8010230 <xTimerCreate>
 800dbde:	0003      	movs	r3, r0
 800dbe0:	62bb      	str	r3, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800dbe4:	0018      	movs	r0, r3
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	b00c      	add	sp, #48	; 0x30
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	200006bc 	.word	0x200006bc
 800dbf0:	0800dab5 	.word	0x0800dab5

0800dbf4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b088      	sub	sp, #32
 800dbf8:	af02      	add	r7, sp, #8
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc02:	f3ef 8305 	mrs	r3, IPSR
 800dc06:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc08:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d109      	bne.n	800dc22 <osTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc0e:	f3ef 8310 	mrs	r3, PRIMASK
 800dc12:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d007      	beq.n	800dc2a <osTimerStart+0x36>
 800dc1a:	4b12      	ldr	r3, [pc, #72]	; (800dc64 <osTimerStart+0x70>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2b02      	cmp	r3, #2
 800dc20:	d103      	bne.n	800dc2a <osTimerStart+0x36>
    stat = osErrorISR;
 800dc22:	2306      	movs	r3, #6
 800dc24:	425b      	negs	r3, r3
 800dc26:	617b      	str	r3, [r7, #20]
 800dc28:	e017      	b.n	800dc5a <osTimerStart+0x66>
  }
  else if (hTimer == NULL) {
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d103      	bne.n	800dc38 <osTimerStart+0x44>
    stat = osErrorParameter;
 800dc30:	2304      	movs	r3, #4
 800dc32:	425b      	negs	r3, r3
 800dc34:	617b      	str	r3, [r7, #20]
 800dc36:	e010      	b.n	800dc5a <osTimerStart+0x66>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800dc38:	683a      	ldr	r2, [r7, #0]
 800dc3a:	6938      	ldr	r0, [r7, #16]
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	2300      	movs	r3, #0
 800dc42:	2104      	movs	r1, #4
 800dc44:	f002 fb6c 	bl	8010320 <xTimerGenericCommand>
 800dc48:	0003      	movs	r3, r0
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d102      	bne.n	800dc54 <osTimerStart+0x60>
      stat = osOK;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	617b      	str	r3, [r7, #20]
 800dc52:	e002      	b.n	800dc5a <osTimerStart+0x66>
    } else {
      stat = osErrorResource;
 800dc54:	2303      	movs	r3, #3
 800dc56:	425b      	negs	r3, r3
 800dc58:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800dc5a:	697b      	ldr	r3, [r7, #20]
}
 800dc5c:	0018      	movs	r0, r3
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	b006      	add	sp, #24
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	200006bc 	.word	0x200006bc

0800dc68 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800dc70:	2300      	movs	r3, #0
 800dc72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc74:	f3ef 8305 	mrs	r3, IPSR
 800dc78:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc7a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d139      	bne.n	800dcf4 <osEventFlagsNew+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc80:	f3ef 8310 	mrs	r3, PRIMASK
 800dc84:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d003      	beq.n	800dc94 <osEventFlagsNew+0x2c>
 800dc8c:	4b1c      	ldr	r3, [pc, #112]	; (800dd00 <osEventFlagsNew+0x98>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	2b02      	cmp	r3, #2
 800dc92:	d02f      	beq.n	800dcf4 <osEventFlagsNew+0x8c>
    mem = -1;
 800dc94:	2301      	movs	r3, #1
 800dc96:	425b      	negs	r3, r3
 800dc98:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d015      	beq.n	800dccc <osEventFlagsNew+0x64>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d006      	beq.n	800dcb6 <osEventFlagsNew+0x4e>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	2b1f      	cmp	r3, #31
 800dcae:	d902      	bls.n	800dcb6 <osEventFlagsNew+0x4e>
        mem = 1;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	613b      	str	r3, [r7, #16]
 800dcb4:	e00c      	b.n	800dcd0 <osEventFlagsNew+0x68>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	689b      	ldr	r3, [r3, #8]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d108      	bne.n	800dcd0 <osEventFlagsNew+0x68>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d104      	bne.n	800dcd0 <osEventFlagsNew+0x68>
          mem = 0;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	613b      	str	r3, [r7, #16]
 800dcca:	e001      	b.n	800dcd0 <osEventFlagsNew+0x68>
        }
      }
    }
    else {
      mem = 0;
 800dccc:	2300      	movs	r3, #0
 800dcce:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	2b01      	cmp	r3, #1
 800dcd4:	d107      	bne.n	800dce6 <osEventFlagsNew+0x7e>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	0018      	movs	r0, r3
 800dcdc:	f000 fa3e 	bl	800e15c <xEventGroupCreateStatic>
 800dce0:	0003      	movs	r3, r0
 800dce2:	617b      	str	r3, [r7, #20]
 800dce4:	e006      	b.n	800dcf4 <osEventFlagsNew+0x8c>
    }
    else {
      if (mem == 0) {
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d103      	bne.n	800dcf4 <osEventFlagsNew+0x8c>
        hEventGroup = xEventGroupCreate();
 800dcec:	f000 fa5b 	bl	800e1a6 <xEventGroupCreate>
 800dcf0:	0003      	movs	r3, r0
 800dcf2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800dcf4:	697b      	ldr	r3, [r7, #20]
}
 800dcf6:	0018      	movs	r0, r3
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	b006      	add	sp, #24
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	46c0      	nop			; (mov r8, r8)
 800dd00:	200006bc 	.word	0x200006bc

0800dd04 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b088      	sub	sp, #32
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800dd12:	69bb      	ldr	r3, [r7, #24]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d003      	beq.n	800dd20 <osEventFlagsSet+0x1c>
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	0e1b      	lsrs	r3, r3, #24
 800dd1c:	061b      	lsls	r3, r3, #24
 800dd1e:	d003      	beq.n	800dd28 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800dd20:	2304      	movs	r3, #4
 800dd22:	425b      	negs	r3, r3
 800dd24:	61fb      	str	r3, [r7, #28]
 800dd26:	e032      	b.n	800dd8e <osEventFlagsSet+0x8a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd28:	f3ef 8305 	mrs	r3, IPSR
 800dd2c:	617b      	str	r3, [r7, #20]
  return(result);
 800dd2e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d109      	bne.n	800dd48 <osEventFlagsSet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd34:	f3ef 8310 	mrs	r3, PRIMASK
 800dd38:	613b      	str	r3, [r7, #16]
  return(result);
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d01c      	beq.n	800dd7a <osEventFlagsSet+0x76>
 800dd40:	4b15      	ldr	r3, [pc, #84]	; (800dd98 <osEventFlagsSet+0x94>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2b02      	cmp	r3, #2
 800dd46:	d118      	bne.n	800dd7a <osEventFlagsSet+0x76>
    yield = pdFALSE;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	60fb      	str	r3, [r7, #12]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800dd4c:	230c      	movs	r3, #12
 800dd4e:	18fa      	adds	r2, r7, r3
 800dd50:	6839      	ldr	r1, [r7, #0]
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	0018      	movs	r0, r3
 800dd56:	f000 fb8f 	bl	800e478 <xEventGroupSetBitsFromISR>
 800dd5a:	1e03      	subs	r3, r0, #0
 800dd5c:	d003      	beq.n	800dd66 <osEventFlagsSet+0x62>
      rflags = (uint32_t)osErrorResource;
 800dd5e:	2303      	movs	r3, #3
 800dd60:	425b      	negs	r3, r3
 800dd62:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800dd64:	e012      	b.n	800dd8c <osEventFlagsSet+0x88>
    } else {
      rflags = flags;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00d      	beq.n	800dd8c <osEventFlagsSet+0x88>
 800dd70:	4b0a      	ldr	r3, [pc, #40]	; (800dd9c <osEventFlagsSet+0x98>)
 800dd72:	2280      	movs	r2, #128	; 0x80
 800dd74:	0552      	lsls	r2, r2, #21
 800dd76:	601a      	str	r2, [r3, #0]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800dd78:	e008      	b.n	800dd8c <osEventFlagsSet+0x88>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800dd7a:	683a      	ldr	r2, [r7, #0]
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	0011      	movs	r1, r2
 800dd80:	0018      	movs	r0, r3
 800dd82:	f000 fad1 	bl	800e328 <xEventGroupSetBits>
 800dd86:	0003      	movs	r3, r0
 800dd88:	61fb      	str	r3, [r7, #28]
 800dd8a:	e000      	b.n	800dd8e <osEventFlagsSet+0x8a>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800dd8c:	46c0      	nop			; (mov r8, r8)
  }

  return (rflags);
 800dd8e:	69fb      	ldr	r3, [r7, #28]
}
 800dd90:	0018      	movs	r0, r3
 800dd92:	46bd      	mov	sp, r7
 800dd94:	b008      	add	sp, #32
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	200006bc 	.word	0x200006bc
 800dd9c:	e000ed04 	.word	0xe000ed04

0800dda0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800dda0:	b590      	push	{r4, r7, lr}
 800dda2:	b08d      	sub	sp, #52	; 0x34
 800dda4:	af02      	add	r7, sp, #8
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]
 800ddac:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800ddb2:	69bb      	ldr	r3, [r7, #24]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d003      	beq.n	800ddc0 <osEventFlagsWait+0x20>
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	0e1b      	lsrs	r3, r3, #24
 800ddbc:	061b      	lsls	r3, r3, #24
 800ddbe:	d003      	beq.n	800ddc8 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800ddc0:	2304      	movs	r3, #4
 800ddc2:	425b      	negs	r3, r3
 800ddc4:	61fb      	str	r3, [r7, #28]
 800ddc6:	e051      	b.n	800de6c <osEventFlagsWait+0xcc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddc8:	f3ef 8305 	mrs	r3, IPSR
 800ddcc:	617b      	str	r3, [r7, #20]
  return(result);
 800ddce:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d109      	bne.n	800dde8 <osEventFlagsWait+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddd4:	f3ef 8310 	mrs	r3, PRIMASK
 800ddd8:	613b      	str	r3, [r7, #16]
  return(result);
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d007      	beq.n	800ddf0 <osEventFlagsWait+0x50>
 800dde0:	4b25      	ldr	r3, [pc, #148]	; (800de78 <osEventFlagsWait+0xd8>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2b02      	cmp	r3, #2
 800dde6:	d103      	bne.n	800ddf0 <osEventFlagsWait+0x50>
    rflags = (uint32_t)osErrorISR;
 800dde8:	2306      	movs	r3, #6
 800ddea:	425b      	negs	r3, r3
 800ddec:	61fb      	str	r3, [r7, #28]
 800ddee:	e03d      	b.n	800de6c <osEventFlagsWait+0xcc>
  }
  else {
    if (options & osFlagsWaitAll) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	4013      	ands	r3, r2
 800ddf6:	d002      	beq.n	800ddfe <osEventFlagsWait+0x5e>
      wait_all = pdTRUE;
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	627b      	str	r3, [r7, #36]	; 0x24
 800ddfc:	e001      	b.n	800de02 <osEventFlagsWait+0x62>
    } else {
      wait_all = pdFAIL;
 800ddfe:	2300      	movs	r3, #0
 800de00:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2202      	movs	r2, #2
 800de06:	4013      	ands	r3, r2
 800de08:	d002      	beq.n	800de10 <osEventFlagsWait+0x70>
      exit_clr = pdFAIL;
 800de0a:	2300      	movs	r3, #0
 800de0c:	623b      	str	r3, [r7, #32]
 800de0e:	e001      	b.n	800de14 <osEventFlagsWait+0x74>
    } else {
      exit_clr = pdTRUE;
 800de10:	2301      	movs	r3, #1
 800de12:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800de14:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800de16:	6a3a      	ldr	r2, [r7, #32]
 800de18:	68b9      	ldr	r1, [r7, #8]
 800de1a:	69b8      	ldr	r0, [r7, #24]
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	9300      	str	r3, [sp, #0]
 800de20:	0023      	movs	r3, r4
 800de22:	f000 f9db 	bl	800e1dc <xEventGroupWaitBits>
 800de26:	0003      	movs	r3, r0
 800de28:	61fb      	str	r3, [r7, #28]

    if (options & osFlagsWaitAll) {
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2201      	movs	r2, #1
 800de2e:	4013      	ands	r3, r2
 800de30:	d00e      	beq.n	800de50 <osEventFlagsWait+0xb0>
      if (flags != rflags) {
 800de32:	68ba      	ldr	r2, [r7, #8]
 800de34:	69fb      	ldr	r3, [r7, #28]
 800de36:	429a      	cmp	r2, r3
 800de38:	d018      	beq.n	800de6c <osEventFlagsWait+0xcc>
        if (timeout > 0U) {
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d003      	beq.n	800de48 <osEventFlagsWait+0xa8>
          rflags = (uint32_t)osErrorTimeout;
 800de40:	2302      	movs	r3, #2
 800de42:	425b      	negs	r3, r3
 800de44:	61fb      	str	r3, [r7, #28]
 800de46:	e011      	b.n	800de6c <osEventFlagsWait+0xcc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800de48:	2303      	movs	r3, #3
 800de4a:	425b      	negs	r3, r3
 800de4c:	61fb      	str	r3, [r7, #28]
 800de4e:	e00d      	b.n	800de6c <osEventFlagsWait+0xcc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	69fa      	ldr	r2, [r7, #28]
 800de54:	4013      	ands	r3, r2
 800de56:	d109      	bne.n	800de6c <osEventFlagsWait+0xcc>
        if (timeout > 0U) {
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d003      	beq.n	800de66 <osEventFlagsWait+0xc6>
          rflags = (uint32_t)osErrorTimeout;
 800de5e:	2302      	movs	r3, #2
 800de60:	425b      	negs	r3, r3
 800de62:	61fb      	str	r3, [r7, #28]
 800de64:	e002      	b.n	800de6c <osEventFlagsWait+0xcc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800de66:	2303      	movs	r3, #3
 800de68:	425b      	negs	r3, r3
 800de6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800de6c:	69fb      	ldr	r3, [r7, #28]
}
 800de6e:	0018      	movs	r0, r3
 800de70:	46bd      	mov	sp, r7
 800de72:	b00b      	add	sp, #44	; 0x2c
 800de74:	bd90      	pop	{r4, r7, pc}
 800de76:	46c0      	nop			; (mov r8, r8)
 800de78:	200006bc 	.word	0x200006bc

0800de7c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b08a      	sub	sp, #40	; 0x28
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800de84:	2300      	movs	r3, #0
 800de86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de88:	f3ef 8305 	mrs	r3, IPSR
 800de8c:	613b      	str	r3, [r7, #16]
  return(result);
 800de8e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800de90:	2b00      	cmp	r3, #0
 800de92:	d000      	beq.n	800de96 <osMutexNew+0x1a>
 800de94:	e084      	b.n	800dfa0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de96:	f3ef 8310 	mrs	r3, PRIMASK
 800de9a:	60fb      	str	r3, [r7, #12]
  return(result);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d004      	beq.n	800deac <osMutexNew+0x30>
 800dea2:	4b42      	ldr	r3, [pc, #264]	; (800dfac <osMutexNew+0x130>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2b02      	cmp	r3, #2
 800dea8:	d100      	bne.n	800deac <osMutexNew+0x30>
 800deaa:	e079      	b.n	800dfa0 <osMutexNew+0x124>
    if (attr != NULL) {
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d003      	beq.n	800deba <osMutexNew+0x3e>
      type = attr->attr_bits;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	623b      	str	r3, [r7, #32]
 800deb8:	e001      	b.n	800debe <osMutexNew+0x42>
    } else {
      type = 0U;
 800deba:	2300      	movs	r3, #0
 800debc:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800debe:	6a3b      	ldr	r3, [r7, #32]
 800dec0:	2201      	movs	r2, #1
 800dec2:	4013      	ands	r3, r2
 800dec4:	d002      	beq.n	800decc <osMutexNew+0x50>
      rmtx = 1U;
 800dec6:	2301      	movs	r3, #1
 800dec8:	61fb      	str	r3, [r7, #28]
 800deca:	e001      	b.n	800ded0 <osMutexNew+0x54>
    } else {
      rmtx = 0U;
 800decc:	2300      	movs	r3, #0
 800dece:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ded0:	6a3b      	ldr	r3, [r7, #32]
 800ded2:	2208      	movs	r2, #8
 800ded4:	4013      	ands	r3, r2
 800ded6:	d000      	beq.n	800deda <osMutexNew+0x5e>
 800ded8:	e062      	b.n	800dfa0 <osMutexNew+0x124>
      mem = -1;
 800deda:	2301      	movs	r3, #1
 800dedc:	425b      	negs	r3, r3
 800dede:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d015      	beq.n	800df12 <osMutexNew+0x96>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d006      	beq.n	800defc <osMutexNew+0x80>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	2b4f      	cmp	r3, #79	; 0x4f
 800def4:	d902      	bls.n	800defc <osMutexNew+0x80>
          mem = 1;
 800def6:	2301      	movs	r3, #1
 800def8:	61bb      	str	r3, [r7, #24]
 800defa:	e00c      	b.n	800df16 <osMutexNew+0x9a>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d108      	bne.n	800df16 <osMutexNew+0x9a>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d104      	bne.n	800df16 <osMutexNew+0x9a>
            mem = 0;
 800df0c:	2300      	movs	r3, #0
 800df0e:	61bb      	str	r3, [r7, #24]
 800df10:	e001      	b.n	800df16 <osMutexNew+0x9a>
          }
        }
      }
      else {
        mem = 0;
 800df12:	2300      	movs	r3, #0
 800df14:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d114      	bne.n	800df46 <osMutexNew+0xca>
        if (rmtx != 0U) {
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d008      	beq.n	800df34 <osMutexNew+0xb8>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	689b      	ldr	r3, [r3, #8]
 800df26:	0019      	movs	r1, r3
 800df28:	2004      	movs	r0, #4
 800df2a:	f000 fc96 	bl	800e85a <xQueueCreateMutexStatic>
 800df2e:	0003      	movs	r3, r0
 800df30:	627b      	str	r3, [r7, #36]	; 0x24
 800df32:	e019      	b.n	800df68 <osMutexNew+0xec>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	0019      	movs	r1, r3
 800df3a:	2001      	movs	r0, #1
 800df3c:	f000 fc8d 	bl	800e85a <xQueueCreateMutexStatic>
 800df40:	0003      	movs	r3, r0
 800df42:	627b      	str	r3, [r7, #36]	; 0x24
 800df44:	e010      	b.n	800df68 <osMutexNew+0xec>
        }
      }
      else {
        if (mem == 0) {
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d10d      	bne.n	800df68 <osMutexNew+0xec>
          if (rmtx != 0U) {
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d005      	beq.n	800df5e <osMutexNew+0xe2>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800df52:	2004      	movs	r0, #4
 800df54:	f000 fc65 	bl	800e822 <xQueueCreateMutex>
 800df58:	0003      	movs	r3, r0
 800df5a:	627b      	str	r3, [r7, #36]	; 0x24
 800df5c:	e004      	b.n	800df68 <osMutexNew+0xec>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800df5e:	2001      	movs	r0, #1
 800df60:	f000 fc5f 	bl	800e822 <xQueueCreateMutex>
 800df64:	0003      	movs	r3, r0
 800df66:	627b      	str	r3, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800df68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00e      	beq.n	800df8c <osMutexNew+0x110>
        if (attr != NULL) {
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d003      	beq.n	800df7c <osMutexNew+0x100>
          name = attr->name;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	617b      	str	r3, [r7, #20]
 800df7a:	e001      	b.n	800df80 <osMutexNew+0x104>
        } else {
          name = NULL;
 800df7c:	2300      	movs	r3, #0
 800df7e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800df80:	697a      	ldr	r2, [r7, #20]
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	0011      	movs	r1, r2
 800df86:	0018      	movs	r0, r3
 800df88:	f001 f8da 	bl	800f140 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800df8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d006      	beq.n	800dfa0 <osMutexNew+0x124>
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d003      	beq.n	800dfa0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800df98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9a:	2201      	movs	r2, #1
 800df9c:	4313      	orrs	r3, r2
 800df9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800dfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dfa2:	0018      	movs	r0, r3
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	b00a      	add	sp, #40	; 0x28
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	46c0      	nop			; (mov r8, r8)
 800dfac:	200006bc 	.word	0x200006bc

0800dfb0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b088      	sub	sp, #32
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	4393      	bics	r3, r2
 800dfc0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	4013      	ands	r3, r2
 800dfc8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfce:	f3ef 8305 	mrs	r3, IPSR
 800dfd2:	613b      	str	r3, [r7, #16]
  return(result);
 800dfd4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d109      	bne.n	800dfee <osMutexAcquire+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfda:	f3ef 8310 	mrs	r3, PRIMASK
 800dfde:	60fb      	str	r3, [r7, #12]
  return(result);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d007      	beq.n	800dff6 <osMutexAcquire+0x46>
 800dfe6:	4b1f      	ldr	r3, [pc, #124]	; (800e064 <osMutexAcquire+0xb4>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2b02      	cmp	r3, #2
 800dfec:	d103      	bne.n	800dff6 <osMutexAcquire+0x46>
    stat = osErrorISR;
 800dfee:	2306      	movs	r3, #6
 800dff0:	425b      	negs	r3, r3
 800dff2:	61fb      	str	r3, [r7, #28]
 800dff4:	e030      	b.n	800e058 <osMutexAcquire+0xa8>
  }
  else if (hMutex == NULL) {
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d103      	bne.n	800e004 <osMutexAcquire+0x54>
    stat = osErrorParameter;
 800dffc:	2304      	movs	r3, #4
 800dffe:	425b      	negs	r3, r3
 800e000:	61fb      	str	r3, [r7, #28]
 800e002:	e029      	b.n	800e058 <osMutexAcquire+0xa8>
  }
  else {
    if (rmtx != 0U) {
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d013      	beq.n	800e032 <osMutexAcquire+0x82>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e00a:	683a      	ldr	r2, [r7, #0]
 800e00c:	69bb      	ldr	r3, [r7, #24]
 800e00e:	0011      	movs	r1, r2
 800e010:	0018      	movs	r0, r3
 800e012:	f000 fc6d 	bl	800e8f0 <xQueueTakeMutexRecursive>
 800e016:	0003      	movs	r3, r0
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d01d      	beq.n	800e058 <osMutexAcquire+0xa8>
        if (timeout != 0U) {
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d003      	beq.n	800e02a <osMutexAcquire+0x7a>
          stat = osErrorTimeout;
 800e022:	2302      	movs	r3, #2
 800e024:	425b      	negs	r3, r3
 800e026:	61fb      	str	r3, [r7, #28]
 800e028:	e016      	b.n	800e058 <osMutexAcquire+0xa8>
        } else {
          stat = osErrorResource;
 800e02a:	2303      	movs	r3, #3
 800e02c:	425b      	negs	r3, r3
 800e02e:	61fb      	str	r3, [r7, #28]
 800e030:	e012      	b.n	800e058 <osMutexAcquire+0xa8>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e032:	683a      	ldr	r2, [r7, #0]
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	0011      	movs	r1, r2
 800e038:	0018      	movs	r0, r3
 800e03a:	f000 fe73 	bl	800ed24 <xQueueSemaphoreTake>
 800e03e:	0003      	movs	r3, r0
 800e040:	2b01      	cmp	r3, #1
 800e042:	d009      	beq.n	800e058 <osMutexAcquire+0xa8>
        if (timeout != 0U) {
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d003      	beq.n	800e052 <osMutexAcquire+0xa2>
          stat = osErrorTimeout;
 800e04a:	2302      	movs	r3, #2
 800e04c:	425b      	negs	r3, r3
 800e04e:	61fb      	str	r3, [r7, #28]
 800e050:	e002      	b.n	800e058 <osMutexAcquire+0xa8>
        } else {
          stat = osErrorResource;
 800e052:	2303      	movs	r3, #3
 800e054:	425b      	negs	r3, r3
 800e056:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e058:	69fb      	ldr	r3, [r7, #28]
}
 800e05a:	0018      	movs	r0, r3
 800e05c:	46bd      	mov	sp, r7
 800e05e:	b008      	add	sp, #32
 800e060:	bd80      	pop	{r7, pc}
 800e062:	46c0      	nop			; (mov r8, r8)
 800e064:	200006bc 	.word	0x200006bc

0800e068 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e068:	b580      	push	{r7, lr}
 800e06a:	b088      	sub	sp, #32
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2201      	movs	r2, #1
 800e074:	4393      	bics	r3, r2
 800e076:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2201      	movs	r2, #1
 800e07c:	4013      	ands	r3, r2
 800e07e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e080:	2300      	movs	r3, #0
 800e082:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e084:	f3ef 8305 	mrs	r3, IPSR
 800e088:	613b      	str	r3, [r7, #16]
  return(result);
 800e08a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d109      	bne.n	800e0a4 <osMutexRelease+0x3c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e090:	f3ef 8310 	mrs	r3, PRIMASK
 800e094:	60fb      	str	r3, [r7, #12]
  return(result);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d007      	beq.n	800e0ac <osMutexRelease+0x44>
 800e09c:	4b16      	ldr	r3, [pc, #88]	; (800e0f8 <osMutexRelease+0x90>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b02      	cmp	r3, #2
 800e0a2:	d103      	bne.n	800e0ac <osMutexRelease+0x44>
    stat = osErrorISR;
 800e0a4:	2306      	movs	r3, #6
 800e0a6:	425b      	negs	r3, r3
 800e0a8:	61fb      	str	r3, [r7, #28]
 800e0aa:	e020      	b.n	800e0ee <osMutexRelease+0x86>
  }
  else if (hMutex == NULL) {
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d103      	bne.n	800e0ba <osMutexRelease+0x52>
    stat = osErrorParameter;
 800e0b2:	2304      	movs	r3, #4
 800e0b4:	425b      	negs	r3, r3
 800e0b6:	61fb      	str	r3, [r7, #28]
 800e0b8:	e019      	b.n	800e0ee <osMutexRelease+0x86>
  }
  else {
    if (rmtx != 0U) {
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d00a      	beq.n	800e0d6 <osMutexRelease+0x6e>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	0018      	movs	r0, r3
 800e0c4:	f000 fbe9 	bl	800e89a <xQueueGiveMutexRecursive>
 800e0c8:	0003      	movs	r3, r0
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d00f      	beq.n	800e0ee <osMutexRelease+0x86>
        stat = osErrorResource;
 800e0ce:	2303      	movs	r3, #3
 800e0d0:	425b      	negs	r3, r3
 800e0d2:	61fb      	str	r3, [r7, #28]
 800e0d4:	e00b      	b.n	800e0ee <osMutexRelease+0x86>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e0d6:	69b8      	ldr	r0, [r7, #24]
 800e0d8:	2300      	movs	r3, #0
 800e0da:	2200      	movs	r2, #0
 800e0dc:	2100      	movs	r1, #0
 800e0de:	f000 fc37 	bl	800e950 <xQueueGenericSend>
 800e0e2:	0003      	movs	r3, r0
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d002      	beq.n	800e0ee <osMutexRelease+0x86>
        stat = osErrorResource;
 800e0e8:	2303      	movs	r3, #3
 800e0ea:	425b      	negs	r3, r3
 800e0ec:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800e0ee:	69fb      	ldr	r3, [r7, #28]
}
 800e0f0:	0018      	movs	r0, r3
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	b008      	add	sp, #32
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	200006bc 	.word	0x200006bc

0800e0fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	4a06      	ldr	r2, [pc, #24]	; (800e124 <vApplicationGetIdleTaskMemory+0x28>)
 800e10c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	4a05      	ldr	r2, [pc, #20]	; (800e128 <vApplicationGetIdleTaskMemory+0x2c>)
 800e112:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2280      	movs	r2, #128	; 0x80
 800e118:	601a      	str	r2, [r3, #0]
}
 800e11a:	46c0      	nop			; (mov r8, r8)
 800e11c:	46bd      	mov	sp, r7
 800e11e:	b004      	add	sp, #16
 800e120:	bd80      	pop	{r7, pc}
 800e122:	46c0      	nop			; (mov r8, r8)
 800e124:	200006c0 	.word	0x200006c0
 800e128:	2000071c 	.word	0x2000071c

0800e12c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af00      	add	r7, sp, #0
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	4a06      	ldr	r2, [pc, #24]	; (800e154 <vApplicationGetTimerTaskMemory+0x28>)
 800e13c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	4a05      	ldr	r2, [pc, #20]	; (800e158 <vApplicationGetTimerTaskMemory+0x2c>)
 800e142:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2280      	movs	r2, #128	; 0x80
 800e148:	0052      	lsls	r2, r2, #1
 800e14a:	601a      	str	r2, [r3, #0]
}
 800e14c:	46c0      	nop			; (mov r8, r8)
 800e14e:	46bd      	mov	sp, r7
 800e150:	b004      	add	sp, #16
 800e152:	bd80      	pop	{r7, pc}
 800e154:	2000091c 	.word	0x2000091c
 800e158:	20000978 	.word	0x20000978

0800e15c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d101      	bne.n	800e16e <xEventGroupCreateStatic+0x12>
 800e16a:	b672      	cpsid	i
 800e16c:	e7fe      	b.n	800e16c <xEventGroupCreateStatic+0x10>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800e16e:	2320      	movs	r3, #32
 800e170:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	2b20      	cmp	r3, #32
 800e176:	d001      	beq.n	800e17c <xEventGroupCreateStatic+0x20>
 800e178:	b672      	cpsid	i
 800e17a:	e7fe      	b.n	800e17a <xEventGroupCreateStatic+0x1e>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	60fb      	str	r3, [r7, #12]

		if( pxEventBits != NULL )
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d00a      	beq.n	800e19c <xEventGroupCreateStatic+0x40>
		{
			pxEventBits->uxEventBits = 0;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	2200      	movs	r2, #0
 800e18a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	3304      	adds	r3, #4
 800e190:	0018      	movs	r0, r3
 800e192:	f000 f987 	bl	800e4a4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2201      	movs	r2, #1
 800e19a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800e19c:	68fb      	ldr	r3, [r7, #12]
	}
 800e19e:	0018      	movs	r0, r3
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	b004      	add	sp, #16
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b082      	sub	sp, #8
 800e1aa:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800e1ac:	2020      	movs	r0, #32
 800e1ae:	f002 fcb7 	bl	8010b20 <pvPortMalloc>
 800e1b2:	0003      	movs	r3, r0
 800e1b4:	607b      	str	r3, [r7, #4]

		if( pxEventBits != NULL )
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d00a      	beq.n	800e1d2 <xEventGroupCreate+0x2c>
		{
			pxEventBits->uxEventBits = 0;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	3304      	adds	r3, #4
 800e1c6:	0018      	movs	r0, r3
 800e1c8:	f000 f96c 	bl	800e4a4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800e1d2:	687b      	ldr	r3, [r7, #4]
	}
 800e1d4:	0018      	movs	r0, r3
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	b002      	add	sp, #8
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b08c      	sub	sp, #48	; 0x30
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	607a      	str	r2, [r7, #4]
 800e1e8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d101      	bne.n	800e200 <xEventGroupWaitBits+0x24>
 800e1fc:	b672      	cpsid	i
 800e1fe:	e7fe      	b.n	800e1fe <xEventGroupWaitBits+0x22>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	0e1b      	lsrs	r3, r3, #24
 800e204:	061b      	lsls	r3, r3, #24
 800e206:	d001      	beq.n	800e20c <xEventGroupWaitBits+0x30>
 800e208:	b672      	cpsid	i
 800e20a:	e7fe      	b.n	800e20a <xEventGroupWaitBits+0x2e>
	configASSERT( uxBitsToWaitFor != 0 );
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d101      	bne.n	800e216 <xEventGroupWaitBits+0x3a>
 800e212:	b672      	cpsid	i
 800e214:	e7fe      	b.n	800e214 <xEventGroupWaitBits+0x38>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e216:	f001 fdf7 	bl	800fe08 <xTaskGetSchedulerState>
 800e21a:	1e03      	subs	r3, r0, #0
 800e21c:	d102      	bne.n	800e224 <xEventGroupWaitBits+0x48>
 800e21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e220:	2b00      	cmp	r3, #0
 800e222:	d101      	bne.n	800e228 <xEventGroupWaitBits+0x4c>
 800e224:	2301      	movs	r3, #1
 800e226:	e000      	b.n	800e22a <xEventGroupWaitBits+0x4e>
 800e228:	2300      	movs	r3, #0
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d101      	bne.n	800e232 <xEventGroupWaitBits+0x56>
 800e22e:	b672      	cpsid	i
 800e230:	e7fe      	b.n	800e230 <xEventGroupWaitBits+0x54>
	}
	#endif

	vTaskSuspendAll();
 800e232:	f001 f9d3 	bl	800f5dc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800e236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800e23c:	683a      	ldr	r2, [r7, #0]
 800e23e:	68b9      	ldr	r1, [r7, #8]
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	0018      	movs	r0, r3
 800e244:	f000 f8f8 	bl	800e438 <prvTestWaitCondition>
 800e248:	0003      	movs	r3, r0
 800e24a:	61bb      	str	r3, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00e      	beq.n	800e270 <xEventGroupWaitBits+0x94>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
 800e256:	2300      	movs	r3, #0
 800e258:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d02a      	beq.n	800e2b6 <xEventGroupWaitBits+0xda>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	68ba      	ldr	r2, [r7, #8]
 800e266:	43d2      	mvns	r2, r2
 800e268:	401a      	ands	r2, r3
 800e26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26c:	601a      	str	r2, [r3, #0]
 800e26e:	e022      	b.n	800e2b6 <xEventGroupWaitBits+0xda>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800e270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e272:	2b00      	cmp	r3, #0
 800e274:	d104      	bne.n	800e280 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800e276:	69fb      	ldr	r3, [r7, #28]
 800e278:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
 800e27a:	2301      	movs	r3, #1
 800e27c:	623b      	str	r3, [r7, #32]
 800e27e:	e01a      	b.n	800e2b6 <xEventGroupWaitBits+0xda>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d004      	beq.n	800e290 <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800e286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e288:	2280      	movs	r2, #128	; 0x80
 800e28a:	0452      	lsls	r2, r2, #17
 800e28c:	4313      	orrs	r3, r2
 800e28e:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d004      	beq.n	800e2a0 <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800e296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e298:	2280      	movs	r2, #128	; 0x80
 800e29a:	04d2      	lsls	r2, r2, #19
 800e29c:	4313      	orrs	r3, r2
 800e29e:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a2:	1d18      	adds	r0, r3, #4
 800e2a4:	68ba      	ldr	r2, [r7, #8]
 800e2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2ac:	0019      	movs	r1, r3
 800e2ae:	f001 fb5f 	bl	800f970 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800e2b6:	f001 f99d 	bl	800f5f4 <xTaskResumeAll>
 800e2ba:	0003      	movs	r3, r0
 800e2bc:	617b      	str	r3, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
 800e2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d02c      	beq.n	800e31e <xEventGroupWaitBits+0x142>
	{
		if( xAlreadyYielded == pdFALSE )
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d101      	bne.n	800e2ce <xEventGroupWaitBits+0xf2>
		{
			portYIELD_WITHIN_API();
 800e2ca:	f002 fb81 	bl	80109d0 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800e2ce:	f001 fef5 	bl	80100bc <uxTaskResetEventItemValue>
 800e2d2:	0003      	movs	r3, r0
 800e2d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800e2d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2d8:	2380      	movs	r3, #128	; 0x80
 800e2da:	049b      	lsls	r3, r3, #18
 800e2dc:	4013      	ands	r3, r2
 800e2de:	d11a      	bne.n	800e316 <xEventGroupWaitBits+0x13a>
		{
			taskENTER_CRITICAL();
 800e2e0:	f002 fb86 	bl	80109f0 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800e2ea:	683a      	ldr	r2, [r7, #0]
 800e2ec:	68b9      	ldr	r1, [r7, #8]
 800e2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f0:	0018      	movs	r0, r3
 800e2f2:	f000 f8a1 	bl	800e438 <prvTestWaitCondition>
 800e2f6:	1e03      	subs	r3, r0, #0
 800e2f8:	d009      	beq.n	800e30e <xEventGroupWaitBits+0x132>
				{
					if( xClearOnExit != pdFALSE )
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d006      	beq.n	800e30e <xEventGroupWaitBits+0x132>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	68ba      	ldr	r2, [r7, #8]
 800e306:	43d2      	mvns	r2, r2
 800e308:	401a      	ands	r2, r3
 800e30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800e30e:	2301      	movs	r3, #1
 800e310:	623b      	str	r3, [r7, #32]
			}
			taskEXIT_CRITICAL();
 800e312:	f002 fb7f 	bl	8010a14 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e318:	021b      	lsls	r3, r3, #8
 800e31a:	0a1b      	lsrs	r3, r3, #8
 800e31c:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800e31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e320:	0018      	movs	r0, r3
 800e322:	46bd      	mov	sp, r7
 800e324:	b00c      	add	sp, #48	; 0x30
 800e326:	bd80      	pop	{r7, pc}

0800e328 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b08c      	sub	sp, #48	; 0x30
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800e332:	2300      	movs	r3, #0
 800e334:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
 800e33a:	2300      	movs	r3, #0
 800e33c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d101      	bne.n	800e348 <xEventGroupSetBits+0x20>
 800e344:	b672      	cpsid	i
 800e346:	e7fe      	b.n	800e346 <xEventGroupSetBits+0x1e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	0e1b      	lsrs	r3, r3, #24
 800e34c:	061b      	lsls	r3, r3, #24
 800e34e:	d001      	beq.n	800e354 <xEventGroupSetBits+0x2c>
 800e350:	b672      	cpsid	i
 800e352:	e7fe      	b.n	800e352 <xEventGroupSetBits+0x2a>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800e354:	6a3b      	ldr	r3, [r7, #32]
 800e356:	3304      	adds	r3, #4
 800e358:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e35a:	69fb      	ldr	r3, [r7, #28]
 800e35c:	3308      	adds	r3, #8
 800e35e:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
 800e360:	f001 f93c 	bl	800f5dc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800e36a:	6a3b      	ldr	r3, [r7, #32]
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	431a      	orrs	r2, r3
 800e372:	6a3b      	ldr	r3, [r7, #32]
 800e374:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800e376:	e03d      	b.n	800e3f4 <xEventGroupSetBits+0xcc>
		{
			pxNext = listGET_NEXT( pxListItem );
 800e378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800e37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
 800e384:	2300      	movs	r3, #0
 800e386:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	0e1b      	lsrs	r3, r3, #24
 800e38c:	061b      	lsls	r3, r3, #24
 800e38e:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	021b      	lsls	r3, r3, #8
 800e394:	0a1b      	lsrs	r3, r3, #8
 800e396:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800e398:	68fa      	ldr	r2, [r7, #12]
 800e39a:	2380      	movs	r3, #128	; 0x80
 800e39c:	04db      	lsls	r3, r3, #19
 800e39e:	4013      	ands	r3, r2
 800e3a0:	d107      	bne.n	800e3b2 <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800e3a2:	6a3b      	ldr	r3, [r7, #32]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	693a      	ldr	r2, [r7, #16]
 800e3a8:	4013      	ands	r3, r2
 800e3aa:	d00b      	beq.n	800e3c4 <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	627b      	str	r3, [r7, #36]	; 0x24
 800e3b0:	e008      	b.n	800e3c4 <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800e3b2:	6a3b      	ldr	r3, [r7, #32]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	693a      	ldr	r2, [r7, #16]
 800e3b8:	4013      	ands	r3, r2
 800e3ba:	693a      	ldr	r2, [r7, #16]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d101      	bne.n	800e3c4 <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d012      	beq.n	800e3f0 <xEventGroupSetBits+0xc8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800e3ca:	68fa      	ldr	r2, [r7, #12]
 800e3cc:	2380      	movs	r3, #128	; 0x80
 800e3ce:	045b      	lsls	r3, r3, #17
 800e3d0:	4013      	ands	r3, r2
 800e3d2:	d003      	beq.n	800e3dc <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800e3d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800e3dc:	6a3b      	ldr	r3, [r7, #32]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2280      	movs	r2, #128	; 0x80
 800e3e2:	0492      	lsls	r2, r2, #18
 800e3e4:	431a      	orrs	r2, r3
 800e3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e8:	0011      	movs	r1, r2
 800e3ea:	0018      	movs	r0, r3
 800e3ec:	f001 fb70 	bl	800fad0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
 800e3f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3f6:	69bb      	ldr	r3, [r7, #24]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d1bd      	bne.n	800e378 <xEventGroupSetBits+0x50>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800e3fc:	6a3b      	ldr	r3, [r7, #32]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e402:	43d2      	mvns	r2, r2
 800e404:	401a      	ands	r2, r3
 800e406:	6a3b      	ldr	r3, [r7, #32]
 800e408:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800e40a:	f001 f8f3 	bl	800f5f4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800e40e:	6a3b      	ldr	r3, [r7, #32]
 800e410:	681b      	ldr	r3, [r3, #0]
}
 800e412:	0018      	movs	r0, r3
 800e414:	46bd      	mov	sp, r7
 800e416:	b00c      	add	sp, #48	; 0x30
 800e418:	bd80      	pop	{r7, pc}

0800e41a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800e41a:	b580      	push	{r7, lr}
 800e41c:	b082      	sub	sp, #8
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
 800e422:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 800e424:	683a      	ldr	r2, [r7, #0]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	0011      	movs	r1, r2
 800e42a:	0018      	movs	r0, r3
 800e42c:	f7ff ff7c 	bl	800e328 <xEventGroupSetBits>
}
 800e430:	46c0      	nop			; (mov r8, r8)
 800e432:	46bd      	mov	sp, r7
 800e434:	b002      	add	sp, #8
 800e436:	bd80      	pop	{r7, pc}

0800e438 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b086      	sub	sp, #24
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800e444:	2300      	movs	r3, #0
 800e446:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d106      	bne.n	800e45c <prvTestWaitCondition+0x24>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	68ba      	ldr	r2, [r7, #8]
 800e452:	4013      	ands	r3, r2
 800e454:	d00a      	beq.n	800e46c <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 800e456:	2301      	movs	r3, #1
 800e458:	617b      	str	r3, [r7, #20]
 800e45a:	e007      	b.n	800e46c <prvTestWaitCondition+0x34>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	4013      	ands	r3, r2
 800e462:	68ba      	ldr	r2, [r7, #8]
 800e464:	429a      	cmp	r2, r3
 800e466:	d101      	bne.n	800e46c <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 800e468:	2301      	movs	r3, #1
 800e46a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800e46c:	697b      	ldr	r3, [r7, #20]
}
 800e46e:	0018      	movs	r0, r3
 800e470:	46bd      	mov	sp, r7
 800e472:	b006      	add	sp, #24
 800e474:	bd80      	pop	{r7, pc}
	...

0800e478 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b086      	sub	sp, #24
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	68ba      	ldr	r2, [r7, #8]
 800e488:	68f9      	ldr	r1, [r7, #12]
 800e48a:	4805      	ldr	r0, [pc, #20]	; (800e4a0 <xEventGroupSetBitsFromISR+0x28>)
 800e48c:	f002 f9f2 	bl	8010874 <xTimerPendFunctionCallFromISR>
 800e490:	0003      	movs	r3, r0
 800e492:	617b      	str	r3, [r7, #20]

		return xReturn;
 800e494:	697b      	ldr	r3, [r7, #20]
	}
 800e496:	0018      	movs	r0, r3
 800e498:	46bd      	mov	sp, r7
 800e49a:	b006      	add	sp, #24
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	46c0      	nop			; (mov r8, r8)
 800e4a0:	0800e41b 	.word	0x0800e41b

0800e4a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	3308      	adds	r3, #8
 800e4b0:	001a      	movs	r2, r3
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	4252      	negs	r2, r2
 800e4bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	3308      	adds	r3, #8
 800e4c2:	001a      	movs	r2, r3
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	3308      	adds	r3, #8
 800e4cc:	001a      	movs	r2, r3
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e4d8:	46c0      	nop			; (mov r8, r8)
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	b002      	add	sp, #8
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e4ee:	46c0      	nop			; (mov r8, r8)
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	b002      	add	sp, #8
 800e4f4:	bd80      	pop	{r7, pc}

0800e4f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b084      	sub	sp, #16
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
 800e4fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	68fa      	ldr	r2, [r7, #12]
 800e50a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	689a      	ldr	r2, [r3, #8]
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	689b      	ldr	r3, [r3, #8]
 800e518:	683a      	ldr	r2, [r7, #0]
 800e51a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	683a      	ldr	r2, [r7, #0]
 800e520:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	1c5a      	adds	r2, r3, #1
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	601a      	str	r2, [r3, #0]
}
 800e532:	46c0      	nop			; (mov r8, r8)
 800e534:	46bd      	mov	sp, r7
 800e536:	b004      	add	sp, #16
 800e538:	bd80      	pop	{r7, pc}

0800e53a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e53a:	b580      	push	{r7, lr}
 800e53c:	b084      	sub	sp, #16
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
 800e542:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	3301      	adds	r3, #1
 800e54e:	d103      	bne.n	800e558 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	691b      	ldr	r3, [r3, #16]
 800e554:	60fb      	str	r3, [r7, #12]
 800e556:	e00c      	b.n	800e572 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	3308      	adds	r3, #8
 800e55c:	60fb      	str	r3, [r7, #12]
 800e55e:	e002      	b.n	800e566 <vListInsert+0x2c>
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	60fb      	str	r3, [r7, #12]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	68ba      	ldr	r2, [r7, #8]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d2f6      	bcs.n	800e560 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	685a      	ldr	r2, [r3, #4]
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	683a      	ldr	r2, [r7, #0]
 800e580:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	68fa      	ldr	r2, [r7, #12]
 800e586:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	683a      	ldr	r2, [r7, #0]
 800e58c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	1c5a      	adds	r2, r3, #1
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	601a      	str	r2, [r3, #0]
}
 800e59e:	46c0      	nop			; (mov r8, r8)
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	b004      	add	sp, #16
 800e5a4:	bd80      	pop	{r7, pc}

0800e5a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e5a6:	b580      	push	{r7, lr}
 800e5a8:	b084      	sub	sp, #16
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	691b      	ldr	r3, [r3, #16]
 800e5b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	6892      	ldr	r2, [r2, #8]
 800e5bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	689b      	ldr	r3, [r3, #8]
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	6852      	ldr	r2, [r2, #4]
 800e5c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	685b      	ldr	r3, [r3, #4]
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d103      	bne.n	800e5da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	689a      	ldr	r2, [r3, #8]
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	1e5a      	subs	r2, r3, #1
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
}
 800e5ee:	0018      	movs	r0, r3
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	b004      	add	sp, #16
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b084      	sub	sp, #16
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d101      	bne.n	800e60e <xQueueGenericReset+0x18>
 800e60a:	b672      	cpsid	i
 800e60c:	e7fe      	b.n	800e60c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800e60e:	f002 f9ef 	bl	80109f0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e61e:	434b      	muls	r3, r1
 800e620:	18d2      	adds	r2, r2, r3
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2200      	movs	r2, #0
 800e62a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e63c:	1e59      	subs	r1, r3, #1
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e642:	434b      	muls	r3, r1
 800e644:	18d2      	adds	r2, r2, r3
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2244      	movs	r2, #68	; 0x44
 800e64e:	21ff      	movs	r1, #255	; 0xff
 800e650:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2245      	movs	r2, #69	; 0x45
 800e656:	21ff      	movs	r1, #255	; 0xff
 800e658:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d10d      	bne.n	800e67c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	691b      	ldr	r3, [r3, #16]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d013      	beq.n	800e690 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	3310      	adds	r3, #16
 800e66c:	0018      	movs	r0, r3
 800e66e:	f001 f9d3 	bl	800fa18 <xTaskRemoveFromEventList>
 800e672:	1e03      	subs	r3, r0, #0
 800e674:	d00c      	beq.n	800e690 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e676:	f002 f9ab 	bl	80109d0 <vPortYield>
 800e67a:	e009      	b.n	800e690 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	3310      	adds	r3, #16
 800e680:	0018      	movs	r0, r3
 800e682:	f7ff ff0f 	bl	800e4a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	3324      	adds	r3, #36	; 0x24
 800e68a:	0018      	movs	r0, r3
 800e68c:	f7ff ff0a 	bl	800e4a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e690:	f002 f9c0 	bl	8010a14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e694:	2301      	movs	r3, #1
}
 800e696:	0018      	movs	r0, r3
 800e698:	46bd      	mov	sp, r7
 800e69a:	b004      	add	sp, #16
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e69e:	b590      	push	{r4, r7, lr}
 800e6a0:	b089      	sub	sp, #36	; 0x24
 800e6a2:	af02      	add	r7, sp, #8
 800e6a4:	60f8      	str	r0, [r7, #12]
 800e6a6:	60b9      	str	r1, [r7, #8]
 800e6a8:	607a      	str	r2, [r7, #4]
 800e6aa:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d101      	bne.n	800e6b6 <xQueueGenericCreateStatic+0x18>
 800e6b2:	b672      	cpsid	i
 800e6b4:	e7fe      	b.n	800e6b4 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d101      	bne.n	800e6c0 <xQueueGenericCreateStatic+0x22>
 800e6bc:	b672      	cpsid	i
 800e6be:	e7fe      	b.n	800e6be <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d002      	beq.n	800e6cc <xQueueGenericCreateStatic+0x2e>
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d001      	beq.n	800e6d0 <xQueueGenericCreateStatic+0x32>
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	e000      	b.n	800e6d2 <xQueueGenericCreateStatic+0x34>
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d101      	bne.n	800e6da <xQueueGenericCreateStatic+0x3c>
 800e6d6:	b672      	cpsid	i
 800e6d8:	e7fe      	b.n	800e6d8 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d102      	bne.n	800e6e6 <xQueueGenericCreateStatic+0x48>
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d101      	bne.n	800e6ea <xQueueGenericCreateStatic+0x4c>
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	e000      	b.n	800e6ec <xQueueGenericCreateStatic+0x4e>
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d101      	bne.n	800e6f4 <xQueueGenericCreateStatic+0x56>
 800e6f0:	b672      	cpsid	i
 800e6f2:	e7fe      	b.n	800e6f2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e6f4:	2350      	movs	r3, #80	; 0x50
 800e6f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	2b50      	cmp	r3, #80	; 0x50
 800e6fc:	d001      	beq.n	800e702 <xQueueGenericCreateStatic+0x64>
 800e6fe:	b672      	cpsid	i
 800e700:	e7fe      	b.n	800e700 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d00e      	beq.n	800e72a <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	2246      	movs	r2, #70	; 0x46
 800e710:	2101      	movs	r1, #1
 800e712:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e714:	2328      	movs	r3, #40	; 0x28
 800e716:	18fb      	adds	r3, r7, r3
 800e718:	781c      	ldrb	r4, [r3, #0]
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	68b9      	ldr	r1, [r7, #8]
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	9300      	str	r3, [sp, #0]
 800e724:	0023      	movs	r3, r4
 800e726:	f000 f83b 	bl	800e7a0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800e72a:	697b      	ldr	r3, [r7, #20]
	}
 800e72c:	0018      	movs	r0, r3
 800e72e:	46bd      	mov	sp, r7
 800e730:	b007      	add	sp, #28
 800e732:	bd90      	pop	{r4, r7, pc}

0800e734 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e734:	b590      	push	{r4, r7, lr}
 800e736:	b08b      	sub	sp, #44	; 0x2c
 800e738:	af02      	add	r7, sp, #8
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	1dfb      	adds	r3, r7, #7
 800e740:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d101      	bne.n	800e74c <xQueueGenericCreate+0x18>
 800e748:	b672      	cpsid	i
 800e74a:	e7fe      	b.n	800e74a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d102      	bne.n	800e758 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e752:	2300      	movs	r3, #0
 800e754:	61fb      	str	r3, [r7, #28]
 800e756:	e003      	b.n	800e760 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	68ba      	ldr	r2, [r7, #8]
 800e75c:	4353      	muls	r3, r2
 800e75e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	3350      	adds	r3, #80	; 0x50
 800e764:	0018      	movs	r0, r3
 800e766:	f002 f9db 	bl	8010b20 <pvPortMalloc>
 800e76a:	0003      	movs	r3, r0
 800e76c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d010      	beq.n	800e796 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	3350      	adds	r3, #80	; 0x50
 800e778:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	2246      	movs	r2, #70	; 0x46
 800e77e:	2100      	movs	r1, #0
 800e780:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e782:	1dfb      	adds	r3, r7, #7
 800e784:	781c      	ldrb	r4, [r3, #0]
 800e786:	697a      	ldr	r2, [r7, #20]
 800e788:	68b9      	ldr	r1, [r7, #8]
 800e78a:	68f8      	ldr	r0, [r7, #12]
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	9300      	str	r3, [sp, #0]
 800e790:	0023      	movs	r3, r4
 800e792:	f000 f805 	bl	800e7a0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800e796:	69bb      	ldr	r3, [r7, #24]
	}
 800e798:	0018      	movs	r0, r3
 800e79a:	46bd      	mov	sp, r7
 800e79c:	b009      	add	sp, #36	; 0x24
 800e79e:	bd90      	pop	{r4, r7, pc}

0800e7a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	60b9      	str	r1, [r7, #8]
 800e7aa:	607a      	str	r2, [r7, #4]
 800e7ac:	001a      	movs	r2, r3
 800e7ae:	1cfb      	adds	r3, r7, #3
 800e7b0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d103      	bne.n	800e7c0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e7b8:	69bb      	ldr	r3, [r7, #24]
 800e7ba:	69ba      	ldr	r2, [r7, #24]
 800e7bc:	601a      	str	r2, [r3, #0]
 800e7be:	e002      	b.n	800e7c6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	68fa      	ldr	r2, [r7, #12]
 800e7ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	68ba      	ldr	r2, [r7, #8]
 800e7d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e7d2:	69bb      	ldr	r3, [r7, #24]
 800e7d4:	2101      	movs	r1, #1
 800e7d6:	0018      	movs	r0, r3
 800e7d8:	f7ff ff0d 	bl	800e5f6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e7dc:	69bb      	ldr	r3, [r7, #24]
 800e7de:	1cfa      	adds	r2, r7, #3
 800e7e0:	214c      	movs	r1, #76	; 0x4c
 800e7e2:	7812      	ldrb	r2, [r2, #0]
 800e7e4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e7e6:	46c0      	nop			; (mov r8, r8)
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	b004      	add	sp, #16
 800e7ec:	bd80      	pop	{r7, pc}

0800e7ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b082      	sub	sp, #8
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d00e      	beq.n	800e81a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2200      	movs	r2, #0
 800e800:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2200      	movs	r2, #0
 800e806:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	2300      	movs	r3, #0
 800e812:	2200      	movs	r2, #0
 800e814:	2100      	movs	r1, #0
 800e816:	f000 f89b 	bl	800e950 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e81a:	46c0      	nop			; (mov r8, r8)
 800e81c:	46bd      	mov	sp, r7
 800e81e:	b002      	add	sp, #8
 800e820:	bd80      	pop	{r7, pc}

0800e822 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e822:	b580      	push	{r7, lr}
 800e824:	b086      	sub	sp, #24
 800e826:	af00      	add	r7, sp, #0
 800e828:	0002      	movs	r2, r0
 800e82a:	1dfb      	adds	r3, r7, #7
 800e82c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e82e:	2301      	movs	r3, #1
 800e830:	617b      	str	r3, [r7, #20]
 800e832:	2300      	movs	r3, #0
 800e834:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e836:	1dfb      	adds	r3, r7, #7
 800e838:	781a      	ldrb	r2, [r3, #0]
 800e83a:	6939      	ldr	r1, [r7, #16]
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	0018      	movs	r0, r3
 800e840:	f7ff ff78 	bl	800e734 <xQueueGenericCreate>
 800e844:	0003      	movs	r3, r0
 800e846:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	0018      	movs	r0, r3
 800e84c:	f7ff ffcf 	bl	800e7ee <prvInitialiseMutex>

		return pxNewQueue;
 800e850:	68fb      	ldr	r3, [r7, #12]
	}
 800e852:	0018      	movs	r0, r3
 800e854:	46bd      	mov	sp, r7
 800e856:	b006      	add	sp, #24
 800e858:	bd80      	pop	{r7, pc}

0800e85a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b088      	sub	sp, #32
 800e85e:	af02      	add	r7, sp, #8
 800e860:	0002      	movs	r2, r0
 800e862:	6039      	str	r1, [r7, #0]
 800e864:	1dfb      	adds	r3, r7, #7
 800e866:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e868:	2301      	movs	r3, #1
 800e86a:	617b      	str	r3, [r7, #20]
 800e86c:	2300      	movs	r3, #0
 800e86e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e870:	683a      	ldr	r2, [r7, #0]
 800e872:	6939      	ldr	r1, [r7, #16]
 800e874:	6978      	ldr	r0, [r7, #20]
 800e876:	1dfb      	adds	r3, r7, #7
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	0013      	movs	r3, r2
 800e87e:	2200      	movs	r2, #0
 800e880:	f7ff ff0d 	bl	800e69e <xQueueGenericCreateStatic>
 800e884:	0003      	movs	r3, r0
 800e886:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	0018      	movs	r0, r3
 800e88c:	f7ff ffaf 	bl	800e7ee <prvInitialiseMutex>

		return pxNewQueue;
 800e890:	68fb      	ldr	r3, [r7, #12]
	}
 800e892:	0018      	movs	r0, r3
 800e894:	46bd      	mov	sp, r7
 800e896:	b006      	add	sp, #24
 800e898:	bd80      	pop	{r7, pc}

0800e89a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e89a:	b590      	push	{r4, r7, lr}
 800e89c:	b085      	sub	sp, #20
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d101      	bne.n	800e8b0 <xQueueGiveMutexRecursive+0x16>
 800e8ac:	b672      	cpsid	i
 800e8ae:	e7fe      	b.n	800e8ae <xQueueGiveMutexRecursive+0x14>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	685c      	ldr	r4, [r3, #4]
 800e8b4:	f001 fa9a 	bl	800fdec <xTaskGetCurrentTaskHandle>
 800e8b8:	0003      	movs	r3, r0
 800e8ba:	429c      	cmp	r4, r3
 800e8bc:	d111      	bne.n	800e8e2 <xQueueGiveMutexRecursive+0x48>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	1e5a      	subs	r2, r3, #1
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d105      	bne.n	800e8dc <xQueueGiveMutexRecursive+0x42>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e8d0:	68b8      	ldr	r0, [r7, #8]
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	2100      	movs	r1, #0
 800e8d8:	f000 f83a 	bl	800e950 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	60fb      	str	r3, [r7, #12]
 800e8e0:	e001      	b.n	800e8e6 <xQueueGiveMutexRecursive+0x4c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
	}
 800e8e8:	0018      	movs	r0, r3
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	b005      	add	sp, #20
 800e8ee:	bd90      	pop	{r4, r7, pc}

0800e8f0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e8f0:	b590      	push	{r4, r7, lr}
 800e8f2:	b085      	sub	sp, #20
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d101      	bne.n	800e908 <xQueueTakeMutexRecursive+0x18>
 800e904:	b672      	cpsid	i
 800e906:	e7fe      	b.n	800e906 <xQueueTakeMutexRecursive+0x16>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	685c      	ldr	r4, [r3, #4]
 800e90c:	f001 fa6e 	bl	800fdec <xTaskGetCurrentTaskHandle>
 800e910:	0003      	movs	r3, r0
 800e912:	429c      	cmp	r4, r3
 800e914:	d107      	bne.n	800e926 <xQueueTakeMutexRecursive+0x36>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	68db      	ldr	r3, [r3, #12]
 800e91a:	1c5a      	adds	r2, r3, #1
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e920:	2301      	movs	r3, #1
 800e922:	60fb      	str	r3, [r7, #12]
 800e924:	e00f      	b.n	800e946 <xQueueTakeMutexRecursive+0x56>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e926:	683a      	ldr	r2, [r7, #0]
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	0011      	movs	r1, r2
 800e92c:	0018      	movs	r0, r3
 800e92e:	f000 f9f9 	bl	800ed24 <xQueueSemaphoreTake>
 800e932:	0003      	movs	r3, r0
 800e934:	60fb      	str	r3, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d004      	beq.n	800e946 <xQueueTakeMutexRecursive+0x56>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	68db      	ldr	r3, [r3, #12]
 800e940:	1c5a      	adds	r2, r3, #1
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e946:	68fb      	ldr	r3, [r7, #12]
	}
 800e948:	0018      	movs	r0, r3
 800e94a:	46bd      	mov	sp, r7
 800e94c:	b005      	add	sp, #20
 800e94e:	bd90      	pop	{r4, r7, pc}

0800e950 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b08a      	sub	sp, #40	; 0x28
 800e954:	af00      	add	r7, sp, #0
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	607a      	str	r2, [r7, #4]
 800e95c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e95e:	2300      	movs	r3, #0
 800e960:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800e966:	6a3b      	ldr	r3, [r7, #32]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d101      	bne.n	800e970 <xQueueGenericSend+0x20>
 800e96c:	b672      	cpsid	i
 800e96e:	e7fe      	b.n	800e96e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d103      	bne.n	800e97e <xQueueGenericSend+0x2e>
 800e976:	6a3b      	ldr	r3, [r7, #32]
 800e978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d101      	bne.n	800e982 <xQueueGenericSend+0x32>
 800e97e:	2301      	movs	r3, #1
 800e980:	e000      	b.n	800e984 <xQueueGenericSend+0x34>
 800e982:	2300      	movs	r3, #0
 800e984:	2b00      	cmp	r3, #0
 800e986:	d101      	bne.n	800e98c <xQueueGenericSend+0x3c>
 800e988:	b672      	cpsid	i
 800e98a:	e7fe      	b.n	800e98a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	2b02      	cmp	r3, #2
 800e990:	d103      	bne.n	800e99a <xQueueGenericSend+0x4a>
 800e992:	6a3b      	ldr	r3, [r7, #32]
 800e994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e996:	2b01      	cmp	r3, #1
 800e998:	d101      	bne.n	800e99e <xQueueGenericSend+0x4e>
 800e99a:	2301      	movs	r3, #1
 800e99c:	e000      	b.n	800e9a0 <xQueueGenericSend+0x50>
 800e99e:	2300      	movs	r3, #0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d101      	bne.n	800e9a8 <xQueueGenericSend+0x58>
 800e9a4:	b672      	cpsid	i
 800e9a6:	e7fe      	b.n	800e9a6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e9a8:	f001 fa2e 	bl	800fe08 <xTaskGetSchedulerState>
 800e9ac:	1e03      	subs	r3, r0, #0
 800e9ae:	d102      	bne.n	800e9b6 <xQueueGenericSend+0x66>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d101      	bne.n	800e9ba <xQueueGenericSend+0x6a>
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	e000      	b.n	800e9bc <xQueueGenericSend+0x6c>
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d101      	bne.n	800e9c4 <xQueueGenericSend+0x74>
 800e9c0:	b672      	cpsid	i
 800e9c2:	e7fe      	b.n	800e9c2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e9c4:	f002 f814 	bl	80109f0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e9c8:	6a3b      	ldr	r3, [r7, #32]
 800e9ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9cc:	6a3b      	ldr	r3, [r7, #32]
 800e9ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d302      	bcc.n	800e9da <xQueueGenericSend+0x8a>
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	2b02      	cmp	r3, #2
 800e9d8:	d11e      	bne.n	800ea18 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e9da:	683a      	ldr	r2, [r7, #0]
 800e9dc:	68b9      	ldr	r1, [r7, #8]
 800e9de:	6a3b      	ldr	r3, [r7, #32]
 800e9e0:	0018      	movs	r0, r3
 800e9e2:	f000 fa8f 	bl	800ef04 <prvCopyDataToQueue>
 800e9e6:	0003      	movs	r3, r0
 800e9e8:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9ea:	6a3b      	ldr	r3, [r7, #32]
 800e9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d009      	beq.n	800ea06 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9f2:	6a3b      	ldr	r3, [r7, #32]
 800e9f4:	3324      	adds	r3, #36	; 0x24
 800e9f6:	0018      	movs	r0, r3
 800e9f8:	f001 f80e 	bl	800fa18 <xTaskRemoveFromEventList>
 800e9fc:	1e03      	subs	r3, r0, #0
 800e9fe:	d007      	beq.n	800ea10 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ea00:	f001 ffe6 	bl	80109d0 <vPortYield>
 800ea04:	e004      	b.n	800ea10 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d001      	beq.n	800ea10 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ea0c:	f001 ffe0 	bl	80109d0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ea10:	f002 f800 	bl	8010a14 <vPortExitCritical>
				return pdPASS;
 800ea14:	2301      	movs	r3, #1
 800ea16:	e05b      	b.n	800ead0 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d103      	bne.n	800ea26 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ea1e:	f001 fff9 	bl	8010a14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ea22:	2300      	movs	r3, #0
 800ea24:	e054      	b.n	800ead0 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d106      	bne.n	800ea3a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea2c:	2314      	movs	r3, #20
 800ea2e:	18fb      	adds	r3, r7, r3
 800ea30:	0018      	movs	r0, r3
 800ea32:	f001 f89f 	bl	800fb74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea36:	2301      	movs	r3, #1
 800ea38:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea3a:	f001 ffeb 	bl	8010a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea3e:	f000 fdcd 	bl	800f5dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea42:	f001 ffd5 	bl	80109f0 <vPortEnterCritical>
 800ea46:	6a3b      	ldr	r3, [r7, #32]
 800ea48:	2244      	movs	r2, #68	; 0x44
 800ea4a:	5c9b      	ldrb	r3, [r3, r2]
 800ea4c:	b25b      	sxtb	r3, r3
 800ea4e:	3301      	adds	r3, #1
 800ea50:	d103      	bne.n	800ea5a <xQueueGenericSend+0x10a>
 800ea52:	6a3b      	ldr	r3, [r7, #32]
 800ea54:	2244      	movs	r2, #68	; 0x44
 800ea56:	2100      	movs	r1, #0
 800ea58:	5499      	strb	r1, [r3, r2]
 800ea5a:	6a3b      	ldr	r3, [r7, #32]
 800ea5c:	2245      	movs	r2, #69	; 0x45
 800ea5e:	5c9b      	ldrb	r3, [r3, r2]
 800ea60:	b25b      	sxtb	r3, r3
 800ea62:	3301      	adds	r3, #1
 800ea64:	d103      	bne.n	800ea6e <xQueueGenericSend+0x11e>
 800ea66:	6a3b      	ldr	r3, [r7, #32]
 800ea68:	2245      	movs	r2, #69	; 0x45
 800ea6a:	2100      	movs	r1, #0
 800ea6c:	5499      	strb	r1, [r3, r2]
 800ea6e:	f001 ffd1 	bl	8010a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea72:	1d3a      	adds	r2, r7, #4
 800ea74:	2314      	movs	r3, #20
 800ea76:	18fb      	adds	r3, r7, r3
 800ea78:	0011      	movs	r1, r2
 800ea7a:	0018      	movs	r0, r3
 800ea7c:	f001 f88e 	bl	800fb9c <xTaskCheckForTimeOut>
 800ea80:	1e03      	subs	r3, r0, #0
 800ea82:	d11e      	bne.n	800eac2 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ea84:	6a3b      	ldr	r3, [r7, #32]
 800ea86:	0018      	movs	r0, r3
 800ea88:	f000 fb41 	bl	800f10e <prvIsQueueFull>
 800ea8c:	1e03      	subs	r3, r0, #0
 800ea8e:	d011      	beq.n	800eab4 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ea90:	6a3b      	ldr	r3, [r7, #32]
 800ea92:	3310      	adds	r3, #16
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	0011      	movs	r1, r2
 800ea98:	0018      	movs	r0, r3
 800ea9a:	f000 ff4b 	bl	800f934 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ea9e:	6a3b      	ldr	r3, [r7, #32]
 800eaa0:	0018      	movs	r0, r3
 800eaa2:	f000 fac0 	bl	800f026 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800eaa6:	f000 fda5 	bl	800f5f4 <xTaskResumeAll>
 800eaaa:	1e03      	subs	r3, r0, #0
 800eaac:	d18a      	bne.n	800e9c4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800eaae:	f001 ff8f 	bl	80109d0 <vPortYield>
 800eab2:	e787      	b.n	800e9c4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800eab4:	6a3b      	ldr	r3, [r7, #32]
 800eab6:	0018      	movs	r0, r3
 800eab8:	f000 fab5 	bl	800f026 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eabc:	f000 fd9a 	bl	800f5f4 <xTaskResumeAll>
 800eac0:	e780      	b.n	800e9c4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eac2:	6a3b      	ldr	r3, [r7, #32]
 800eac4:	0018      	movs	r0, r3
 800eac6:	f000 faae 	bl	800f026 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eaca:	f000 fd93 	bl	800f5f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eace:	2300      	movs	r3, #0
		}
	}
}
 800ead0:	0018      	movs	r0, r3
 800ead2:	46bd      	mov	sp, r7
 800ead4:	b00a      	add	sp, #40	; 0x28
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ead8:	b590      	push	{r4, r7, lr}
 800eada:	b089      	sub	sp, #36	; 0x24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	607a      	str	r2, [r7, #4]
 800eae4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800eaea:	69bb      	ldr	r3, [r7, #24]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d101      	bne.n	800eaf4 <xQueueGenericSendFromISR+0x1c>
 800eaf0:	b672      	cpsid	i
 800eaf2:	e7fe      	b.n	800eaf2 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d103      	bne.n	800eb02 <xQueueGenericSendFromISR+0x2a>
 800eafa:	69bb      	ldr	r3, [r7, #24]
 800eafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d101      	bne.n	800eb06 <xQueueGenericSendFromISR+0x2e>
 800eb02:	2301      	movs	r3, #1
 800eb04:	e000      	b.n	800eb08 <xQueueGenericSendFromISR+0x30>
 800eb06:	2300      	movs	r3, #0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d101      	bne.n	800eb10 <xQueueGenericSendFromISR+0x38>
 800eb0c:	b672      	cpsid	i
 800eb0e:	e7fe      	b.n	800eb0e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	2b02      	cmp	r3, #2
 800eb14:	d103      	bne.n	800eb1e <xQueueGenericSendFromISR+0x46>
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d101      	bne.n	800eb22 <xQueueGenericSendFromISR+0x4a>
 800eb1e:	2301      	movs	r3, #1
 800eb20:	e000      	b.n	800eb24 <xQueueGenericSendFromISR+0x4c>
 800eb22:	2300      	movs	r3, #0
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d101      	bne.n	800eb2c <xQueueGenericSendFromISR+0x54>
 800eb28:	b672      	cpsid	i
 800eb2a:	e7fe      	b.n	800eb2a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb2c:	f001 ff8a 	bl	8010a44 <ulSetInterruptMaskFromISR>
 800eb30:	0003      	movs	r3, r0
 800eb32:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eb34:	69bb      	ldr	r3, [r7, #24]
 800eb36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d302      	bcc.n	800eb46 <xQueueGenericSendFromISR+0x6e>
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	2b02      	cmp	r3, #2
 800eb44:	d12e      	bne.n	800eba4 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eb46:	2413      	movs	r4, #19
 800eb48:	193b      	adds	r3, r7, r4
 800eb4a:	69ba      	ldr	r2, [r7, #24]
 800eb4c:	2145      	movs	r1, #69	; 0x45
 800eb4e:	5c52      	ldrb	r2, [r2, r1]
 800eb50:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb52:	683a      	ldr	r2, [r7, #0]
 800eb54:	68b9      	ldr	r1, [r7, #8]
 800eb56:	69bb      	ldr	r3, [r7, #24]
 800eb58:	0018      	movs	r0, r3
 800eb5a:	f000 f9d3 	bl	800ef04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eb5e:	193b      	adds	r3, r7, r4
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	b25b      	sxtb	r3, r3
 800eb64:	3301      	adds	r3, #1
 800eb66:	d111      	bne.n	800eb8c <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb68:	69bb      	ldr	r3, [r7, #24]
 800eb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d016      	beq.n	800eb9e <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb70:	69bb      	ldr	r3, [r7, #24]
 800eb72:	3324      	adds	r3, #36	; 0x24
 800eb74:	0018      	movs	r0, r3
 800eb76:	f000 ff4f 	bl	800fa18 <xTaskRemoveFromEventList>
 800eb7a:	1e03      	subs	r3, r0, #0
 800eb7c:	d00f      	beq.n	800eb9e <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00c      	beq.n	800eb9e <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2201      	movs	r2, #1
 800eb88:	601a      	str	r2, [r3, #0]
 800eb8a:	e008      	b.n	800eb9e <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eb8c:	2313      	movs	r3, #19
 800eb8e:	18fb      	adds	r3, r7, r3
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	3301      	adds	r3, #1
 800eb94:	b2db      	uxtb	r3, r3
 800eb96:	b259      	sxtb	r1, r3
 800eb98:	69bb      	ldr	r3, [r7, #24]
 800eb9a:	2245      	movs	r2, #69	; 0x45
 800eb9c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	61fb      	str	r3, [r7, #28]
		{
 800eba2:	e001      	b.n	800eba8 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eba4:	2300      	movs	r3, #0
 800eba6:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	0018      	movs	r0, r3
 800ebac:	f001 ff50 	bl	8010a50 <vClearInterruptMaskFromISR>

	return xReturn;
 800ebb0:	69fb      	ldr	r3, [r7, #28]
}
 800ebb2:	0018      	movs	r0, r3
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	b009      	add	sp, #36	; 0x24
 800ebb8:	bd90      	pop	{r4, r7, pc}

0800ebba <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ebba:	b580      	push	{r7, lr}
 800ebbc:	b08a      	sub	sp, #40	; 0x28
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	60f8      	str	r0, [r7, #12]
 800ebc2:	60b9      	str	r1, [r7, #8]
 800ebc4:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ebce:	6a3b      	ldr	r3, [r7, #32]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d101      	bne.n	800ebd8 <xQueueReceive+0x1e>
 800ebd4:	b672      	cpsid	i
 800ebd6:	e7fe      	b.n	800ebd6 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d103      	bne.n	800ebe6 <xQueueReceive+0x2c>
 800ebde:	6a3b      	ldr	r3, [r7, #32]
 800ebe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d101      	bne.n	800ebea <xQueueReceive+0x30>
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	e000      	b.n	800ebec <xQueueReceive+0x32>
 800ebea:	2300      	movs	r3, #0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d101      	bne.n	800ebf4 <xQueueReceive+0x3a>
 800ebf0:	b672      	cpsid	i
 800ebf2:	e7fe      	b.n	800ebf2 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ebf4:	f001 f908 	bl	800fe08 <xTaskGetSchedulerState>
 800ebf8:	1e03      	subs	r3, r0, #0
 800ebfa:	d102      	bne.n	800ec02 <xQueueReceive+0x48>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d101      	bne.n	800ec06 <xQueueReceive+0x4c>
 800ec02:	2301      	movs	r3, #1
 800ec04:	e000      	b.n	800ec08 <xQueueReceive+0x4e>
 800ec06:	2300      	movs	r3, #0
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d101      	bne.n	800ec10 <xQueueReceive+0x56>
 800ec0c:	b672      	cpsid	i
 800ec0e:	e7fe      	b.n	800ec0e <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec10:	f001 feee 	bl	80109f0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec14:	6a3b      	ldr	r3, [r7, #32]
 800ec16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec18:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d01a      	beq.n	800ec56 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ec20:	68ba      	ldr	r2, [r7, #8]
 800ec22:	6a3b      	ldr	r3, [r7, #32]
 800ec24:	0011      	movs	r1, r2
 800ec26:	0018      	movs	r0, r3
 800ec28:	f000 f9d7 	bl	800efda <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	1e5a      	subs	r2, r3, #1
 800ec30:	6a3b      	ldr	r3, [r7, #32]
 800ec32:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec34:	6a3b      	ldr	r3, [r7, #32]
 800ec36:	691b      	ldr	r3, [r3, #16]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d008      	beq.n	800ec4e <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec3c:	6a3b      	ldr	r3, [r7, #32]
 800ec3e:	3310      	adds	r3, #16
 800ec40:	0018      	movs	r0, r3
 800ec42:	f000 fee9 	bl	800fa18 <xTaskRemoveFromEventList>
 800ec46:	1e03      	subs	r3, r0, #0
 800ec48:	d001      	beq.n	800ec4e <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ec4a:	f001 fec1 	bl	80109d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ec4e:	f001 fee1 	bl	8010a14 <vPortExitCritical>
				return pdPASS;
 800ec52:	2301      	movs	r3, #1
 800ec54:	e062      	b.n	800ed1c <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d103      	bne.n	800ec64 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ec5c:	f001 feda 	bl	8010a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ec60:	2300      	movs	r3, #0
 800ec62:	e05b      	b.n	800ed1c <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d106      	bne.n	800ec78 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec6a:	2314      	movs	r3, #20
 800ec6c:	18fb      	adds	r3, r7, r3
 800ec6e:	0018      	movs	r0, r3
 800ec70:	f000 ff80 	bl	800fb74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec74:	2301      	movs	r3, #1
 800ec76:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec78:	f001 fecc 	bl	8010a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec7c:	f000 fcae 	bl	800f5dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec80:	f001 feb6 	bl	80109f0 <vPortEnterCritical>
 800ec84:	6a3b      	ldr	r3, [r7, #32]
 800ec86:	2244      	movs	r2, #68	; 0x44
 800ec88:	5c9b      	ldrb	r3, [r3, r2]
 800ec8a:	b25b      	sxtb	r3, r3
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	d103      	bne.n	800ec98 <xQueueReceive+0xde>
 800ec90:	6a3b      	ldr	r3, [r7, #32]
 800ec92:	2244      	movs	r2, #68	; 0x44
 800ec94:	2100      	movs	r1, #0
 800ec96:	5499      	strb	r1, [r3, r2]
 800ec98:	6a3b      	ldr	r3, [r7, #32]
 800ec9a:	2245      	movs	r2, #69	; 0x45
 800ec9c:	5c9b      	ldrb	r3, [r3, r2]
 800ec9e:	b25b      	sxtb	r3, r3
 800eca0:	3301      	adds	r3, #1
 800eca2:	d103      	bne.n	800ecac <xQueueReceive+0xf2>
 800eca4:	6a3b      	ldr	r3, [r7, #32]
 800eca6:	2245      	movs	r2, #69	; 0x45
 800eca8:	2100      	movs	r1, #0
 800ecaa:	5499      	strb	r1, [r3, r2]
 800ecac:	f001 feb2 	bl	8010a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ecb0:	1d3a      	adds	r2, r7, #4
 800ecb2:	2314      	movs	r3, #20
 800ecb4:	18fb      	adds	r3, r7, r3
 800ecb6:	0011      	movs	r1, r2
 800ecb8:	0018      	movs	r0, r3
 800ecba:	f000 ff6f 	bl	800fb9c <xTaskCheckForTimeOut>
 800ecbe:	1e03      	subs	r3, r0, #0
 800ecc0:	d11e      	bne.n	800ed00 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ecc2:	6a3b      	ldr	r3, [r7, #32]
 800ecc4:	0018      	movs	r0, r3
 800ecc6:	f000 fa0c 	bl	800f0e2 <prvIsQueueEmpty>
 800ecca:	1e03      	subs	r3, r0, #0
 800eccc:	d011      	beq.n	800ecf2 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ecce:	6a3b      	ldr	r3, [r7, #32]
 800ecd0:	3324      	adds	r3, #36	; 0x24
 800ecd2:	687a      	ldr	r2, [r7, #4]
 800ecd4:	0011      	movs	r1, r2
 800ecd6:	0018      	movs	r0, r3
 800ecd8:	f000 fe2c 	bl	800f934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ecdc:	6a3b      	ldr	r3, [r7, #32]
 800ecde:	0018      	movs	r0, r3
 800ece0:	f000 f9a1 	bl	800f026 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ece4:	f000 fc86 	bl	800f5f4 <xTaskResumeAll>
 800ece8:	1e03      	subs	r3, r0, #0
 800ecea:	d191      	bne.n	800ec10 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800ecec:	f001 fe70 	bl	80109d0 <vPortYield>
 800ecf0:	e78e      	b.n	800ec10 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ecf2:	6a3b      	ldr	r3, [r7, #32]
 800ecf4:	0018      	movs	r0, r3
 800ecf6:	f000 f996 	bl	800f026 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ecfa:	f000 fc7b 	bl	800f5f4 <xTaskResumeAll>
 800ecfe:	e787      	b.n	800ec10 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ed00:	6a3b      	ldr	r3, [r7, #32]
 800ed02:	0018      	movs	r0, r3
 800ed04:	f000 f98f 	bl	800f026 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed08:	f000 fc74 	bl	800f5f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed0c:	6a3b      	ldr	r3, [r7, #32]
 800ed0e:	0018      	movs	r0, r3
 800ed10:	f000 f9e7 	bl	800f0e2 <prvIsQueueEmpty>
 800ed14:	1e03      	subs	r3, r0, #0
 800ed16:	d100      	bne.n	800ed1a <xQueueReceive+0x160>
 800ed18:	e77a      	b.n	800ec10 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ed1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ed1c:	0018      	movs	r0, r3
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	b00a      	add	sp, #40	; 0x28
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b08a      	sub	sp, #40	; 0x28
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ed36:	2300      	movs	r3, #0
 800ed38:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ed3a:	69fb      	ldr	r3, [r7, #28]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d101      	bne.n	800ed44 <xQueueSemaphoreTake+0x20>
 800ed40:	b672      	cpsid	i
 800ed42:	e7fe      	b.n	800ed42 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ed44:	69fb      	ldr	r3, [r7, #28]
 800ed46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d001      	beq.n	800ed50 <xQueueSemaphoreTake+0x2c>
 800ed4c:	b672      	cpsid	i
 800ed4e:	e7fe      	b.n	800ed4e <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ed50:	f001 f85a 	bl	800fe08 <xTaskGetSchedulerState>
 800ed54:	1e03      	subs	r3, r0, #0
 800ed56:	d102      	bne.n	800ed5e <xQueueSemaphoreTake+0x3a>
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d101      	bne.n	800ed62 <xQueueSemaphoreTake+0x3e>
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e000      	b.n	800ed64 <xQueueSemaphoreTake+0x40>
 800ed62:	2300      	movs	r3, #0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d101      	bne.n	800ed6c <xQueueSemaphoreTake+0x48>
 800ed68:	b672      	cpsid	i
 800ed6a:	e7fe      	b.n	800ed6a <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ed6c:	f001 fe40 	bl	80109f0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ed70:	69fb      	ldr	r3, [r7, #28]
 800ed72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed74:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d01d      	beq.n	800edb8 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ed7c:	69bb      	ldr	r3, [r7, #24]
 800ed7e:	1e5a      	subs	r2, r3, #1
 800ed80:	69fb      	ldr	r3, [r7, #28]
 800ed82:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ed84:	69fb      	ldr	r3, [r7, #28]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d104      	bne.n	800ed96 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ed8c:	f001 f9ac 	bl	80100e8 <pvTaskIncrementMutexHeldCount>
 800ed90:	0002      	movs	r2, r0
 800ed92:	69fb      	ldr	r3, [r7, #28]
 800ed94:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	691b      	ldr	r3, [r3, #16]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d008      	beq.n	800edb0 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed9e:	69fb      	ldr	r3, [r7, #28]
 800eda0:	3310      	adds	r3, #16
 800eda2:	0018      	movs	r0, r3
 800eda4:	f000 fe38 	bl	800fa18 <xTaskRemoveFromEventList>
 800eda8:	1e03      	subs	r3, r0, #0
 800edaa:	d001      	beq.n	800edb0 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800edac:	f001 fe10 	bl	80109d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800edb0:	f001 fe30 	bl	8010a14 <vPortExitCritical>
				return pdPASS;
 800edb4:	2301      	movs	r3, #1
 800edb6:	e08b      	b.n	800eed0 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d108      	bne.n	800edd0 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800edbe:	6a3b      	ldr	r3, [r7, #32]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d001      	beq.n	800edc8 <xQueueSemaphoreTake+0xa4>
 800edc4:	b672      	cpsid	i
 800edc6:	e7fe      	b.n	800edc6 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800edc8:	f001 fe24 	bl	8010a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800edcc:	2300      	movs	r3, #0
 800edce:	e07f      	b.n	800eed0 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800edd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d106      	bne.n	800ede4 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800edd6:	230c      	movs	r3, #12
 800edd8:	18fb      	adds	r3, r7, r3
 800edda:	0018      	movs	r0, r3
 800eddc:	f000 feca 	bl	800fb74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ede0:	2301      	movs	r3, #1
 800ede2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ede4:	f001 fe16 	bl	8010a14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ede8:	f000 fbf8 	bl	800f5dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800edec:	f001 fe00 	bl	80109f0 <vPortEnterCritical>
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	2244      	movs	r2, #68	; 0x44
 800edf4:	5c9b      	ldrb	r3, [r3, r2]
 800edf6:	b25b      	sxtb	r3, r3
 800edf8:	3301      	adds	r3, #1
 800edfa:	d103      	bne.n	800ee04 <xQueueSemaphoreTake+0xe0>
 800edfc:	69fb      	ldr	r3, [r7, #28]
 800edfe:	2244      	movs	r2, #68	; 0x44
 800ee00:	2100      	movs	r1, #0
 800ee02:	5499      	strb	r1, [r3, r2]
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	2245      	movs	r2, #69	; 0x45
 800ee08:	5c9b      	ldrb	r3, [r3, r2]
 800ee0a:	b25b      	sxtb	r3, r3
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	d103      	bne.n	800ee18 <xQueueSemaphoreTake+0xf4>
 800ee10:	69fb      	ldr	r3, [r7, #28]
 800ee12:	2245      	movs	r2, #69	; 0x45
 800ee14:	2100      	movs	r1, #0
 800ee16:	5499      	strb	r1, [r3, r2]
 800ee18:	f001 fdfc 	bl	8010a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee1c:	003a      	movs	r2, r7
 800ee1e:	230c      	movs	r3, #12
 800ee20:	18fb      	adds	r3, r7, r3
 800ee22:	0011      	movs	r1, r2
 800ee24:	0018      	movs	r0, r3
 800ee26:	f000 feb9 	bl	800fb9c <xTaskCheckForTimeOut>
 800ee2a:	1e03      	subs	r3, r0, #0
 800ee2c:	d12e      	bne.n	800ee8c <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ee2e:	69fb      	ldr	r3, [r7, #28]
 800ee30:	0018      	movs	r0, r3
 800ee32:	f000 f956 	bl	800f0e2 <prvIsQueueEmpty>
 800ee36:	1e03      	subs	r3, r0, #0
 800ee38:	d021      	beq.n	800ee7e <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee3a:	69fb      	ldr	r3, [r7, #28]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d10a      	bne.n	800ee58 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800ee42:	f001 fdd5 	bl	80109f0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	685b      	ldr	r3, [r3, #4]
 800ee4a:	0018      	movs	r0, r3
 800ee4c:	f000 fff8 	bl	800fe40 <xTaskPriorityInherit>
 800ee50:	0003      	movs	r3, r0
 800ee52:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800ee54:	f001 fdde 	bl	8010a14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ee58:	69fb      	ldr	r3, [r7, #28]
 800ee5a:	3324      	adds	r3, #36	; 0x24
 800ee5c:	683a      	ldr	r2, [r7, #0]
 800ee5e:	0011      	movs	r1, r2
 800ee60:	0018      	movs	r0, r3
 800ee62:	f000 fd67 	bl	800f934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	0018      	movs	r0, r3
 800ee6a:	f000 f8dc 	bl	800f026 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ee6e:	f000 fbc1 	bl	800f5f4 <xTaskResumeAll>
 800ee72:	1e03      	subs	r3, r0, #0
 800ee74:	d000      	beq.n	800ee78 <xQueueSemaphoreTake+0x154>
 800ee76:	e779      	b.n	800ed6c <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800ee78:	f001 fdaa 	bl	80109d0 <vPortYield>
 800ee7c:	e776      	b.n	800ed6c <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ee7e:	69fb      	ldr	r3, [r7, #28]
 800ee80:	0018      	movs	r0, r3
 800ee82:	f000 f8d0 	bl	800f026 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee86:	f000 fbb5 	bl	800f5f4 <xTaskResumeAll>
 800ee8a:	e76f      	b.n	800ed6c <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	0018      	movs	r0, r3
 800ee90:	f000 f8c9 	bl	800f026 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee94:	f000 fbae 	bl	800f5f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	0018      	movs	r0, r3
 800ee9c:	f000 f921 	bl	800f0e2 <prvIsQueueEmpty>
 800eea0:	1e03      	subs	r3, r0, #0
 800eea2:	d100      	bne.n	800eea6 <xQueueSemaphoreTake+0x182>
 800eea4:	e762      	b.n	800ed6c <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800eea6:	6a3b      	ldr	r3, [r7, #32]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d010      	beq.n	800eece <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800eeac:	f001 fda0 	bl	80109f0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	0018      	movs	r0, r3
 800eeb4:	f000 f810 	bl	800eed8 <prvGetDisinheritPriorityAfterTimeout>
 800eeb8:	0003      	movs	r3, r0
 800eeba:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800eebc:	69fb      	ldr	r3, [r7, #28]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	697a      	ldr	r2, [r7, #20]
 800eec2:	0011      	movs	r1, r2
 800eec4:	0018      	movs	r0, r3
 800eec6:	f001 f885 	bl	800ffd4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800eeca:	f001 fda3 	bl	8010a14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eece:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800eed0:	0018      	movs	r0, r3
 800eed2:	46bd      	mov	sp, r7
 800eed4:	b00a      	add	sp, #40	; 0x28
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d006      	beq.n	800eef6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	2238      	movs	r2, #56	; 0x38
 800eef0:	1ad3      	subs	r3, r2, r3
 800eef2:	60fb      	str	r3, [r7, #12]
 800eef4:	e001      	b.n	800eefa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800eef6:	2300      	movs	r3, #0
 800eef8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800eefa:	68fb      	ldr	r3, [r7, #12]
	}
 800eefc:	0018      	movs	r0, r3
 800eefe:	46bd      	mov	sp, r7
 800ef00:	b004      	add	sp, #16
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b086      	sub	sp, #24
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ef10:	2300      	movs	r3, #0
 800ef12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d10e      	bne.n	800ef40 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d14e      	bne.n	800efc8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	0018      	movs	r0, r3
 800ef30:	f000 fff4 	bl	800ff1c <xTaskPriorityDisinherit>
 800ef34:	0003      	movs	r3, r0
 800ef36:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	605a      	str	r2, [r3, #4]
 800ef3e:	e043      	b.n	800efc8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d119      	bne.n	800ef7a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	6898      	ldr	r0, [r3, #8]
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	0019      	movs	r1, r3
 800ef52:	f002 fd28 	bl	80119a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	689a      	ldr	r2, [r3, #8]
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef5e:	18d2      	adds	r2, r2, r3
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	689a      	ldr	r2, [r3, #8]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d32b      	bcc.n	800efc8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681a      	ldr	r2, [r3, #0]
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	609a      	str	r2, [r3, #8]
 800ef78:	e026      	b.n	800efc8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	68d8      	ldr	r0, [r3, #12]
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	0019      	movs	r1, r3
 800ef86:	f002 fd0e 	bl	80119a6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	68da      	ldr	r2, [r3, #12]
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef92:	425b      	negs	r3, r3
 800ef94:	18d2      	adds	r2, r2, r3
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	68da      	ldr	r2, [r3, #12]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d207      	bcs.n	800efb6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	685a      	ldr	r2, [r3, #4]
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efae:	425b      	negs	r3, r3
 800efb0:	18d2      	adds	r2, r2, r3
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2b02      	cmp	r3, #2
 800efba:	d105      	bne.n	800efc8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800efbc:	693b      	ldr	r3, [r7, #16]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d002      	beq.n	800efc8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	3b01      	subs	r3, #1
 800efc6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	1c5a      	adds	r2, r3, #1
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800efd0:	697b      	ldr	r3, [r7, #20]
}
 800efd2:	0018      	movs	r0, r3
 800efd4:	46bd      	mov	sp, r7
 800efd6:	b006      	add	sp, #24
 800efd8:	bd80      	pop	{r7, pc}

0800efda <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800efda:	b580      	push	{r7, lr}
 800efdc:	b082      	sub	sp, #8
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
 800efe2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d018      	beq.n	800f01e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	68da      	ldr	r2, [r3, #12]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eff4:	18d2      	adds	r2, r2, r3
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	68da      	ldr	r2, [r3, #12]
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	429a      	cmp	r2, r3
 800f004:	d303      	bcc.n	800f00e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	68d9      	ldr	r1, [r3, #12]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	0018      	movs	r0, r3
 800f01a:	f002 fcc4 	bl	80119a6 <memcpy>
	}
}
 800f01e:	46c0      	nop			; (mov r8, r8)
 800f020:	46bd      	mov	sp, r7
 800f022:	b002      	add	sp, #8
 800f024:	bd80      	pop	{r7, pc}

0800f026 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f026:	b580      	push	{r7, lr}
 800f028:	b084      	sub	sp, #16
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f02e:	f001 fcdf 	bl	80109f0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f032:	230f      	movs	r3, #15
 800f034:	18fb      	adds	r3, r7, r3
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	2145      	movs	r1, #69	; 0x45
 800f03a:	5c52      	ldrb	r2, [r2, r1]
 800f03c:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f03e:	e013      	b.n	800f068 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f044:	2b00      	cmp	r3, #0
 800f046:	d016      	beq.n	800f076 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	3324      	adds	r3, #36	; 0x24
 800f04c:	0018      	movs	r0, r3
 800f04e:	f000 fce3 	bl	800fa18 <xTaskRemoveFromEventList>
 800f052:	1e03      	subs	r3, r0, #0
 800f054:	d001      	beq.n	800f05a <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f056:	f000 fdf1 	bl	800fc3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f05a:	210f      	movs	r1, #15
 800f05c:	187b      	adds	r3, r7, r1
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	3b01      	subs	r3, #1
 800f062:	b2da      	uxtb	r2, r3
 800f064:	187b      	adds	r3, r7, r1
 800f066:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f068:	230f      	movs	r3, #15
 800f06a:	18fb      	adds	r3, r7, r3
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	b25b      	sxtb	r3, r3
 800f070:	2b00      	cmp	r3, #0
 800f072:	dce5      	bgt.n	800f040 <prvUnlockQueue+0x1a>
 800f074:	e000      	b.n	800f078 <prvUnlockQueue+0x52>
					break;
 800f076:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2245      	movs	r2, #69	; 0x45
 800f07c:	21ff      	movs	r1, #255	; 0xff
 800f07e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800f080:	f001 fcc8 	bl	8010a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f084:	f001 fcb4 	bl	80109f0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f088:	230e      	movs	r3, #14
 800f08a:	18fb      	adds	r3, r7, r3
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	2144      	movs	r1, #68	; 0x44
 800f090:	5c52      	ldrb	r2, [r2, r1]
 800f092:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f094:	e013      	b.n	800f0be <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d016      	beq.n	800f0cc <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	3310      	adds	r3, #16
 800f0a2:	0018      	movs	r0, r3
 800f0a4:	f000 fcb8 	bl	800fa18 <xTaskRemoveFromEventList>
 800f0a8:	1e03      	subs	r3, r0, #0
 800f0aa:	d001      	beq.n	800f0b0 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800f0ac:	f000 fdc6 	bl	800fc3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f0b0:	210e      	movs	r1, #14
 800f0b2:	187b      	adds	r3, r7, r1
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	3b01      	subs	r3, #1
 800f0b8:	b2da      	uxtb	r2, r3
 800f0ba:	187b      	adds	r3, r7, r1
 800f0bc:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f0be:	230e      	movs	r3, #14
 800f0c0:	18fb      	adds	r3, r7, r3
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	b25b      	sxtb	r3, r3
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	dce5      	bgt.n	800f096 <prvUnlockQueue+0x70>
 800f0ca:	e000      	b.n	800f0ce <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800f0cc:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2244      	movs	r2, #68	; 0x44
 800f0d2:	21ff      	movs	r1, #255	; 0xff
 800f0d4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800f0d6:	f001 fc9d 	bl	8010a14 <vPortExitCritical>
}
 800f0da:	46c0      	nop			; (mov r8, r8)
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	b004      	add	sp, #16
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b084      	sub	sp, #16
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f0ea:	f001 fc81 	bl	80109f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d102      	bne.n	800f0fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	60fb      	str	r3, [r7, #12]
 800f0fa:	e001      	b.n	800f100 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f100:	f001 fc88 	bl	8010a14 <vPortExitCritical>

	return xReturn;
 800f104:	68fb      	ldr	r3, [r7, #12]
}
 800f106:	0018      	movs	r0, r3
 800f108:	46bd      	mov	sp, r7
 800f10a:	b004      	add	sp, #16
 800f10c:	bd80      	pop	{r7, pc}

0800f10e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f10e:	b580      	push	{r7, lr}
 800f110:	b084      	sub	sp, #16
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f116:	f001 fc6b 	bl	80109f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f122:	429a      	cmp	r2, r3
 800f124:	d102      	bne.n	800f12c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f126:	2301      	movs	r3, #1
 800f128:	60fb      	str	r3, [r7, #12]
 800f12a:	e001      	b.n	800f130 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f12c:	2300      	movs	r3, #0
 800f12e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f130:	f001 fc70 	bl	8010a14 <vPortExitCritical>

	return xReturn;
 800f134:	68fb      	ldr	r3, [r7, #12]
}
 800f136:	0018      	movs	r0, r3
 800f138:	46bd      	mov	sp, r7
 800f13a:	b004      	add	sp, #16
 800f13c:	bd80      	pop	{r7, pc}
	...

0800f140 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f140:	b580      	push	{r7, lr}
 800f142:	b084      	sub	sp, #16
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f14a:	2300      	movs	r3, #0
 800f14c:	60fb      	str	r3, [r7, #12]
 800f14e:	e015      	b.n	800f17c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f150:	4b0e      	ldr	r3, [pc, #56]	; (800f18c <vQueueAddToRegistry+0x4c>)
 800f152:	68fa      	ldr	r2, [r7, #12]
 800f154:	00d2      	lsls	r2, r2, #3
 800f156:	58d3      	ldr	r3, [r2, r3]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d10c      	bne.n	800f176 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f15c:	4b0b      	ldr	r3, [pc, #44]	; (800f18c <vQueueAddToRegistry+0x4c>)
 800f15e:	68fa      	ldr	r2, [r7, #12]
 800f160:	00d2      	lsls	r2, r2, #3
 800f162:	6839      	ldr	r1, [r7, #0]
 800f164:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f166:	4a09      	ldr	r2, [pc, #36]	; (800f18c <vQueueAddToRegistry+0x4c>)
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	00db      	lsls	r3, r3, #3
 800f16c:	18d3      	adds	r3, r2, r3
 800f16e:	3304      	adds	r3, #4
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f174:	e006      	b.n	800f184 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	3301      	adds	r3, #1
 800f17a:	60fb      	str	r3, [r7, #12]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2b07      	cmp	r3, #7
 800f180:	d9e6      	bls.n	800f150 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f182:	46c0      	nop			; (mov r8, r8)
 800f184:	46c0      	nop			; (mov r8, r8)
 800f186:	46bd      	mov	sp, r7
 800f188:	b004      	add	sp, #16
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	200027c8 	.word	0x200027c8

0800f190 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f190:	b580      	push	{r7, lr}
 800f192:	b086      	sub	sp, #24
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f1a0:	f001 fc26 	bl	80109f0 <vPortEnterCritical>
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	2244      	movs	r2, #68	; 0x44
 800f1a8:	5c9b      	ldrb	r3, [r3, r2]
 800f1aa:	b25b      	sxtb	r3, r3
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	d103      	bne.n	800f1b8 <vQueueWaitForMessageRestricted+0x28>
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	2244      	movs	r2, #68	; 0x44
 800f1b4:	2100      	movs	r1, #0
 800f1b6:	5499      	strb	r1, [r3, r2]
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	2245      	movs	r2, #69	; 0x45
 800f1bc:	5c9b      	ldrb	r3, [r3, r2]
 800f1be:	b25b      	sxtb	r3, r3
 800f1c0:	3301      	adds	r3, #1
 800f1c2:	d103      	bne.n	800f1cc <vQueueWaitForMessageRestricted+0x3c>
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	2245      	movs	r2, #69	; 0x45
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	5499      	strb	r1, [r3, r2]
 800f1cc:	f001 fc22 	bl	8010a14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d106      	bne.n	800f1e6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	3324      	adds	r3, #36	; 0x24
 800f1dc:	687a      	ldr	r2, [r7, #4]
 800f1de:	68b9      	ldr	r1, [r7, #8]
 800f1e0:	0018      	movs	r0, r3
 800f1e2:	f000 fbf3 	bl	800f9cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	0018      	movs	r0, r3
 800f1ea:	f7ff ff1c 	bl	800f026 <prvUnlockQueue>
	}
 800f1ee:	46c0      	nop			; (mov r8, r8)
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	b006      	add	sp, #24
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f1f6:	b590      	push	{r4, r7, lr}
 800f1f8:	b08d      	sub	sp, #52	; 0x34
 800f1fa:	af04      	add	r7, sp, #16
 800f1fc:	60f8      	str	r0, [r7, #12]
 800f1fe:	60b9      	str	r1, [r7, #8]
 800f200:	607a      	str	r2, [r7, #4]
 800f202:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f206:	2b00      	cmp	r3, #0
 800f208:	d101      	bne.n	800f20e <xTaskCreateStatic+0x18>
 800f20a:	b672      	cpsid	i
 800f20c:	e7fe      	b.n	800f20c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800f20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f210:	2b00      	cmp	r3, #0
 800f212:	d101      	bne.n	800f218 <xTaskCreateStatic+0x22>
 800f214:	b672      	cpsid	i
 800f216:	e7fe      	b.n	800f216 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f218:	235c      	movs	r3, #92	; 0x5c
 800f21a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	2b5c      	cmp	r3, #92	; 0x5c
 800f220:	d001      	beq.n	800f226 <xTaskCreateStatic+0x30>
 800f222:	b672      	cpsid	i
 800f224:	e7fe      	b.n	800f224 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d020      	beq.n	800f26e <xTaskCreateStatic+0x78>
 800f22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d01d      	beq.n	800f26e <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f234:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f236:	69fb      	ldr	r3, [r7, #28]
 800f238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f23a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	2259      	movs	r2, #89	; 0x59
 800f240:	2102      	movs	r1, #2
 800f242:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f244:	683c      	ldr	r4, [r7, #0]
 800f246:	687a      	ldr	r2, [r7, #4]
 800f248:	68b9      	ldr	r1, [r7, #8]
 800f24a:	68f8      	ldr	r0, [r7, #12]
 800f24c:	2300      	movs	r3, #0
 800f24e:	9303      	str	r3, [sp, #12]
 800f250:	69fb      	ldr	r3, [r7, #28]
 800f252:	9302      	str	r3, [sp, #8]
 800f254:	2318      	movs	r3, #24
 800f256:	18fb      	adds	r3, r7, r3
 800f258:	9301      	str	r3, [sp, #4]
 800f25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f25c:	9300      	str	r3, [sp, #0]
 800f25e:	0023      	movs	r3, r4
 800f260:	f000 f858 	bl	800f314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f264:	69fb      	ldr	r3, [r7, #28]
 800f266:	0018      	movs	r0, r3
 800f268:	f000 f8d6 	bl	800f418 <prvAddNewTaskToReadyList>
 800f26c:	e001      	b.n	800f272 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800f26e:	2300      	movs	r3, #0
 800f270:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f272:	69bb      	ldr	r3, [r7, #24]
	}
 800f274:	0018      	movs	r0, r3
 800f276:	46bd      	mov	sp, r7
 800f278:	b009      	add	sp, #36	; 0x24
 800f27a:	bd90      	pop	{r4, r7, pc}

0800f27c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f27c:	b590      	push	{r4, r7, lr}
 800f27e:	b08d      	sub	sp, #52	; 0x34
 800f280:	af04      	add	r7, sp, #16
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	603b      	str	r3, [r7, #0]
 800f288:	1dbb      	adds	r3, r7, #6
 800f28a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f28c:	1dbb      	adds	r3, r7, #6
 800f28e:	881b      	ldrh	r3, [r3, #0]
 800f290:	009b      	lsls	r3, r3, #2
 800f292:	0018      	movs	r0, r3
 800f294:	f001 fc44 	bl	8010b20 <pvPortMalloc>
 800f298:	0003      	movs	r3, r0
 800f29a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d010      	beq.n	800f2c4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800f2a2:	205c      	movs	r0, #92	; 0x5c
 800f2a4:	f001 fc3c 	bl	8010b20 <pvPortMalloc>
 800f2a8:	0003      	movs	r3, r0
 800f2aa:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d003      	beq.n	800f2ba <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f2b2:	69fb      	ldr	r3, [r7, #28]
 800f2b4:	697a      	ldr	r2, [r7, #20]
 800f2b6:	631a      	str	r2, [r3, #48]	; 0x30
 800f2b8:	e006      	b.n	800f2c8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	0018      	movs	r0, r3
 800f2be:	f001 fcd5 	bl	8010c6c <vPortFree>
 800f2c2:	e001      	b.n	800f2c8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d01a      	beq.n	800f304 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	2259      	movs	r2, #89	; 0x59
 800f2d2:	2100      	movs	r1, #0
 800f2d4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f2d6:	1dbb      	adds	r3, r7, #6
 800f2d8:	881a      	ldrh	r2, [r3, #0]
 800f2da:	683c      	ldr	r4, [r7, #0]
 800f2dc:	68b9      	ldr	r1, [r7, #8]
 800f2de:	68f8      	ldr	r0, [r7, #12]
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	9303      	str	r3, [sp, #12]
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	9302      	str	r3, [sp, #8]
 800f2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ea:	9301      	str	r3, [sp, #4]
 800f2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ee:	9300      	str	r3, [sp, #0]
 800f2f0:	0023      	movs	r3, r4
 800f2f2:	f000 f80f 	bl	800f314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2f6:	69fb      	ldr	r3, [r7, #28]
 800f2f8:	0018      	movs	r0, r3
 800f2fa:	f000 f88d 	bl	800f418 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f2fe:	2301      	movs	r3, #1
 800f300:	61bb      	str	r3, [r7, #24]
 800f302:	e002      	b.n	800f30a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f304:	2301      	movs	r3, #1
 800f306:	425b      	negs	r3, r3
 800f308:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f30a:	69bb      	ldr	r3, [r7, #24]
	}
 800f30c:	0018      	movs	r0, r3
 800f30e:	46bd      	mov	sp, r7
 800f310:	b009      	add	sp, #36	; 0x24
 800f312:	bd90      	pop	{r4, r7, pc}

0800f314 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b086      	sub	sp, #24
 800f318:	af00      	add	r7, sp, #0
 800f31a:	60f8      	str	r0, [r7, #12]
 800f31c:	60b9      	str	r1, [r7, #8]
 800f31e:	607a      	str	r2, [r7, #4]
 800f320:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f324:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	009b      	lsls	r3, r3, #2
 800f32a:	001a      	movs	r2, r3
 800f32c:	21a5      	movs	r1, #165	; 0xa5
 800f32e:	f002 fb43 	bl	80119b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800f332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4936      	ldr	r1, [pc, #216]	; (800f414 <prvInitialiseNewTask+0x100>)
 800f33a:	468c      	mov	ip, r1
 800f33c:	4463      	add	r3, ip
 800f33e:	009b      	lsls	r3, r3, #2
 800f340:	18d3      	adds	r3, r2, r3
 800f342:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	2207      	movs	r2, #7
 800f348:	4393      	bics	r3, r2
 800f34a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	2207      	movs	r2, #7
 800f350:	4013      	ands	r3, r2
 800f352:	d001      	beq.n	800f358 <prvInitialiseNewTask+0x44>
 800f354:	b672      	cpsid	i
 800f356:	e7fe      	b.n	800f356 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f358:	2300      	movs	r3, #0
 800f35a:	617b      	str	r3, [r7, #20]
 800f35c:	e013      	b.n	800f386 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f35e:	68ba      	ldr	r2, [r7, #8]
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	18d3      	adds	r3, r2, r3
 800f364:	7818      	ldrb	r0, [r3, #0]
 800f366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f368:	2134      	movs	r1, #52	; 0x34
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	18d3      	adds	r3, r2, r3
 800f36e:	185b      	adds	r3, r3, r1
 800f370:	1c02      	adds	r2, r0, #0
 800f372:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800f374:	68ba      	ldr	r2, [r7, #8]
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	18d3      	adds	r3, r2, r3
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d006      	beq.n	800f38e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	3301      	adds	r3, #1
 800f384:	617b      	str	r3, [r7, #20]
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	2b0f      	cmp	r3, #15
 800f38a:	d9e8      	bls.n	800f35e <prvInitialiseNewTask+0x4a>
 800f38c:	e000      	b.n	800f390 <prvInitialiseNewTask+0x7c>
		{
			break;
 800f38e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f392:	2243      	movs	r2, #67	; 0x43
 800f394:	2100      	movs	r1, #0
 800f396:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f398:	6a3b      	ldr	r3, [r7, #32]
 800f39a:	2b37      	cmp	r3, #55	; 0x37
 800f39c:	d901      	bls.n	800f3a2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f39e:	2337      	movs	r3, #55	; 0x37
 800f3a0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a4:	6a3a      	ldr	r2, [r7, #32]
 800f3a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3aa:	6a3a      	ldr	r2, [r7, #32]
 800f3ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b6:	3304      	adds	r3, #4
 800f3b8:	0018      	movs	r0, r3
 800f3ba:	f7ff f891 	bl	800e4e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c0:	3318      	adds	r3, #24
 800f3c2:	0018      	movs	r0, r3
 800f3c4:	f7ff f88c 	bl	800e4e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3ce:	6a3b      	ldr	r3, [r7, #32]
 800f3d0:	2238      	movs	r2, #56	; 0x38
 800f3d2:	1ad2      	subs	r2, r2, r3
 800f3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e6:	2258      	movs	r2, #88	; 0x58
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f3ec:	683a      	ldr	r2, [r7, #0]
 800f3ee:	68f9      	ldr	r1, [r7, #12]
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	0018      	movs	r0, r3
 800f3f4:	f001 fa64 	bl	80108c0 <pxPortInitialiseStack>
 800f3f8:	0002      	movs	r2, r0
 800f3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800f3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f400:	2b00      	cmp	r3, #0
 800f402:	d002      	beq.n	800f40a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f40a:	46c0      	nop			; (mov r8, r8)
 800f40c:	46bd      	mov	sp, r7
 800f40e:	b006      	add	sp, #24
 800f410:	bd80      	pop	{r7, pc}
 800f412:	46c0      	nop			; (mov r8, r8)
 800f414:	3fffffff 	.word	0x3fffffff

0800f418 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b082      	sub	sp, #8
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f420:	f001 fae6 	bl	80109f0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f424:	4b2a      	ldr	r3, [pc, #168]	; (800f4d0 <prvAddNewTaskToReadyList+0xb8>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	1c5a      	adds	r2, r3, #1
 800f42a:	4b29      	ldr	r3, [pc, #164]	; (800f4d0 <prvAddNewTaskToReadyList+0xb8>)
 800f42c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800f42e:	4b29      	ldr	r3, [pc, #164]	; (800f4d4 <prvAddNewTaskToReadyList+0xbc>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d109      	bne.n	800f44a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f436:	4b27      	ldr	r3, [pc, #156]	; (800f4d4 <prvAddNewTaskToReadyList+0xbc>)
 800f438:	687a      	ldr	r2, [r7, #4]
 800f43a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f43c:	4b24      	ldr	r3, [pc, #144]	; (800f4d0 <prvAddNewTaskToReadyList+0xb8>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	2b01      	cmp	r3, #1
 800f442:	d110      	bne.n	800f466 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f444:	f000 fc14 	bl	800fc70 <prvInitialiseTaskLists>
 800f448:	e00d      	b.n	800f466 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f44a:	4b23      	ldr	r3, [pc, #140]	; (800f4d8 <prvAddNewTaskToReadyList+0xc0>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d109      	bne.n	800f466 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f452:	4b20      	ldr	r3, [pc, #128]	; (800f4d4 <prvAddNewTaskToReadyList+0xbc>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d802      	bhi.n	800f466 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f460:	4b1c      	ldr	r3, [pc, #112]	; (800f4d4 <prvAddNewTaskToReadyList+0xbc>)
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f466:	4b1d      	ldr	r3, [pc, #116]	; (800f4dc <prvAddNewTaskToReadyList+0xc4>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	1c5a      	adds	r2, r3, #1
 800f46c:	4b1b      	ldr	r3, [pc, #108]	; (800f4dc <prvAddNewTaskToReadyList+0xc4>)
 800f46e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f470:	4b1a      	ldr	r3, [pc, #104]	; (800f4dc <prvAddNewTaskToReadyList+0xc4>)
 800f472:	681a      	ldr	r2, [r3, #0]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f47c:	4b18      	ldr	r3, [pc, #96]	; (800f4e0 <prvAddNewTaskToReadyList+0xc8>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	429a      	cmp	r2, r3
 800f482:	d903      	bls.n	800f48c <prvAddNewTaskToReadyList+0x74>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f488:	4b15      	ldr	r3, [pc, #84]	; (800f4e0 <prvAddNewTaskToReadyList+0xc8>)
 800f48a:	601a      	str	r2, [r3, #0]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f490:	0013      	movs	r3, r2
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	189b      	adds	r3, r3, r2
 800f496:	009b      	lsls	r3, r3, #2
 800f498:	4a12      	ldr	r2, [pc, #72]	; (800f4e4 <prvAddNewTaskToReadyList+0xcc>)
 800f49a:	189a      	adds	r2, r3, r2
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	3304      	adds	r3, #4
 800f4a0:	0019      	movs	r1, r3
 800f4a2:	0010      	movs	r0, r2
 800f4a4:	f7ff f827 	bl	800e4f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f4a8:	f001 fab4 	bl	8010a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f4ac:	4b0a      	ldr	r3, [pc, #40]	; (800f4d8 <prvAddNewTaskToReadyList+0xc0>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d008      	beq.n	800f4c6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f4b4:	4b07      	ldr	r3, [pc, #28]	; (800f4d4 <prvAddNewTaskToReadyList+0xbc>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d201      	bcs.n	800f4c6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f4c2:	f001 fa85 	bl	80109d0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4c6:	46c0      	nop			; (mov r8, r8)
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	b002      	add	sp, #8
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	46c0      	nop			; (mov r8, r8)
 800f4d0:	2000124c 	.word	0x2000124c
 800f4d4:	20000d78 	.word	0x20000d78
 800f4d8:	20001258 	.word	0x20001258
 800f4dc:	20001268 	.word	0x20001268
 800f4e0:	20001254 	.word	0x20001254
 800f4e4:	20000d7c 	.word	0x20000d7c

0800f4e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b084      	sub	sp, #16
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d010      	beq.n	800f51c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f4fa:	4b0d      	ldr	r3, [pc, #52]	; (800f530 <vTaskDelay+0x48>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d001      	beq.n	800f506 <vTaskDelay+0x1e>
 800f502:	b672      	cpsid	i
 800f504:	e7fe      	b.n	800f504 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800f506:	f000 f869 	bl	800f5dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2100      	movs	r1, #0
 800f50e:	0018      	movs	r0, r3
 800f510:	f000 fdfc 	bl	801010c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f514:	f000 f86e 	bl	800f5f4 <xTaskResumeAll>
 800f518:	0003      	movs	r3, r0
 800f51a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d101      	bne.n	800f526 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800f522:	f001 fa55 	bl	80109d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f526:	46c0      	nop			; (mov r8, r8)
 800f528:	46bd      	mov	sp, r7
 800f52a:	b004      	add	sp, #16
 800f52c:	bd80      	pop	{r7, pc}
 800f52e:	46c0      	nop			; (mov r8, r8)
 800f530:	20001274 	.word	0x20001274

0800f534 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f534:	b590      	push	{r4, r7, lr}
 800f536:	b089      	sub	sp, #36	; 0x24
 800f538:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f53a:	2300      	movs	r3, #0
 800f53c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f53e:	2300      	movs	r3, #0
 800f540:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f542:	003a      	movs	r2, r7
 800f544:	1d39      	adds	r1, r7, #4
 800f546:	2308      	movs	r3, #8
 800f548:	18fb      	adds	r3, r7, r3
 800f54a:	0018      	movs	r0, r3
 800f54c:	f7fe fdd6 	bl	800e0fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f550:	683c      	ldr	r4, [r7, #0]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	68ba      	ldr	r2, [r7, #8]
 800f556:	491b      	ldr	r1, [pc, #108]	; (800f5c4 <vTaskStartScheduler+0x90>)
 800f558:	481b      	ldr	r0, [pc, #108]	; (800f5c8 <vTaskStartScheduler+0x94>)
 800f55a:	9202      	str	r2, [sp, #8]
 800f55c:	9301      	str	r3, [sp, #4]
 800f55e:	2300      	movs	r3, #0
 800f560:	9300      	str	r3, [sp, #0]
 800f562:	2300      	movs	r3, #0
 800f564:	0022      	movs	r2, r4
 800f566:	f7ff fe46 	bl	800f1f6 <xTaskCreateStatic>
 800f56a:	0002      	movs	r2, r0
 800f56c:	4b17      	ldr	r3, [pc, #92]	; (800f5cc <vTaskStartScheduler+0x98>)
 800f56e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f570:	4b16      	ldr	r3, [pc, #88]	; (800f5cc <vTaskStartScheduler+0x98>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d002      	beq.n	800f57e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f578:	2301      	movs	r3, #1
 800f57a:	60fb      	str	r3, [r7, #12]
 800f57c:	e001      	b.n	800f582 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f57e:	2300      	movs	r3, #0
 800f580:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2b01      	cmp	r3, #1
 800f586:	d103      	bne.n	800f590 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800f588:	f000 fe14 	bl	80101b4 <xTimerCreateTimerTask>
 800f58c:	0003      	movs	r3, r0
 800f58e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2b01      	cmp	r3, #1
 800f594:	d10d      	bne.n	800f5b2 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800f596:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f598:	4b0d      	ldr	r3, [pc, #52]	; (800f5d0 <vTaskStartScheduler+0x9c>)
 800f59a:	2201      	movs	r2, #1
 800f59c:	4252      	negs	r2, r2
 800f59e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f5a0:	4b0c      	ldr	r3, [pc, #48]	; (800f5d4 <vTaskStartScheduler+0xa0>)
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f5a6:	4b0c      	ldr	r3, [pc, #48]	; (800f5d8 <vTaskStartScheduler+0xa4>)
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f5ac:	f001 f9ec 	bl	8010988 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f5b0:	e004      	b.n	800f5bc <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	d101      	bne.n	800f5bc <vTaskStartScheduler+0x88>
 800f5b8:	b672      	cpsid	i
 800f5ba:	e7fe      	b.n	800f5ba <vTaskStartScheduler+0x86>
}
 800f5bc:	46c0      	nop			; (mov r8, r8)
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	b005      	add	sp, #20
 800f5c2:	bd90      	pop	{r4, r7, pc}
 800f5c4:	08013220 	.word	0x08013220
 800f5c8:	0800fc51 	.word	0x0800fc51
 800f5cc:	20001270 	.word	0x20001270
 800f5d0:	2000126c 	.word	0x2000126c
 800f5d4:	20001258 	.word	0x20001258
 800f5d8:	20001250 	.word	0x20001250

0800f5dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f5e0:	4b03      	ldr	r3, [pc, #12]	; (800f5f0 <vTaskSuspendAll+0x14>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	1c5a      	adds	r2, r3, #1
 800f5e6:	4b02      	ldr	r3, [pc, #8]	; (800f5f0 <vTaskSuspendAll+0x14>)
 800f5e8:	601a      	str	r2, [r3, #0]
}
 800f5ea:	46c0      	nop			; (mov r8, r8)
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}
 800f5f0:	20001274 	.word	0x20001274

0800f5f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b084      	sub	sp, #16
 800f5f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f5fe:	2300      	movs	r3, #0
 800f600:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f602:	4b3a      	ldr	r3, [pc, #232]	; (800f6ec <xTaskResumeAll+0xf8>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d101      	bne.n	800f60e <xTaskResumeAll+0x1a>
 800f60a:	b672      	cpsid	i
 800f60c:	e7fe      	b.n	800f60c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f60e:	f001 f9ef 	bl	80109f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f612:	4b36      	ldr	r3, [pc, #216]	; (800f6ec <xTaskResumeAll+0xf8>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	1e5a      	subs	r2, r3, #1
 800f618:	4b34      	ldr	r3, [pc, #208]	; (800f6ec <xTaskResumeAll+0xf8>)
 800f61a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f61c:	4b33      	ldr	r3, [pc, #204]	; (800f6ec <xTaskResumeAll+0xf8>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d15b      	bne.n	800f6dc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f624:	4b32      	ldr	r3, [pc, #200]	; (800f6f0 <xTaskResumeAll+0xfc>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d057      	beq.n	800f6dc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f62c:	e02f      	b.n	800f68e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f62e:	4b31      	ldr	r3, [pc, #196]	; (800f6f4 <xTaskResumeAll+0x100>)
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	68db      	ldr	r3, [r3, #12]
 800f634:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	3318      	adds	r3, #24
 800f63a:	0018      	movs	r0, r3
 800f63c:	f7fe ffb3 	bl	800e5a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	3304      	adds	r3, #4
 800f644:	0018      	movs	r0, r3
 800f646:	f7fe ffae 	bl	800e5a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f64e:	4b2a      	ldr	r3, [pc, #168]	; (800f6f8 <xTaskResumeAll+0x104>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	429a      	cmp	r2, r3
 800f654:	d903      	bls.n	800f65e <xTaskResumeAll+0x6a>
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f65a:	4b27      	ldr	r3, [pc, #156]	; (800f6f8 <xTaskResumeAll+0x104>)
 800f65c:	601a      	str	r2, [r3, #0]
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f662:	0013      	movs	r3, r2
 800f664:	009b      	lsls	r3, r3, #2
 800f666:	189b      	adds	r3, r3, r2
 800f668:	009b      	lsls	r3, r3, #2
 800f66a:	4a24      	ldr	r2, [pc, #144]	; (800f6fc <xTaskResumeAll+0x108>)
 800f66c:	189a      	adds	r2, r3, r2
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	3304      	adds	r3, #4
 800f672:	0019      	movs	r1, r3
 800f674:	0010      	movs	r0, r2
 800f676:	f7fe ff3e 	bl	800e4f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f67e:	4b20      	ldr	r3, [pc, #128]	; (800f700 <xTaskResumeAll+0x10c>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f684:	429a      	cmp	r2, r3
 800f686:	d302      	bcc.n	800f68e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800f688:	4b1e      	ldr	r3, [pc, #120]	; (800f704 <xTaskResumeAll+0x110>)
 800f68a:	2201      	movs	r2, #1
 800f68c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f68e:	4b19      	ldr	r3, [pc, #100]	; (800f6f4 <xTaskResumeAll+0x100>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d1cb      	bne.n	800f62e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d001      	beq.n	800f6a0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f69c:	f000 fb82 	bl	800fda4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f6a0:	4b19      	ldr	r3, [pc, #100]	; (800f708 <xTaskResumeAll+0x114>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d00f      	beq.n	800f6cc <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f6ac:	f000 f83c 	bl	800f728 <xTaskIncrementTick>
 800f6b0:	1e03      	subs	r3, r0, #0
 800f6b2:	d002      	beq.n	800f6ba <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800f6b4:	4b13      	ldr	r3, [pc, #76]	; (800f704 <xTaskResumeAll+0x110>)
 800f6b6:	2201      	movs	r2, #1
 800f6b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d1f2      	bne.n	800f6ac <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800f6c6:	4b10      	ldr	r3, [pc, #64]	; (800f708 <xTaskResumeAll+0x114>)
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f6cc:	4b0d      	ldr	r3, [pc, #52]	; (800f704 <xTaskResumeAll+0x110>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d003      	beq.n	800f6dc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f6d8:	f001 f97a 	bl	80109d0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f6dc:	f001 f99a 	bl	8010a14 <vPortExitCritical>

	return xAlreadyYielded;
 800f6e0:	68bb      	ldr	r3, [r7, #8]
}
 800f6e2:	0018      	movs	r0, r3
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	b004      	add	sp, #16
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	46c0      	nop			; (mov r8, r8)
 800f6ec:	20001274 	.word	0x20001274
 800f6f0:	2000124c 	.word	0x2000124c
 800f6f4:	2000120c 	.word	0x2000120c
 800f6f8:	20001254 	.word	0x20001254
 800f6fc:	20000d7c 	.word	0x20000d7c
 800f700:	20000d78 	.word	0x20000d78
 800f704:	20001260 	.word	0x20001260
 800f708:	2000125c 	.word	0x2000125c

0800f70c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f712:	4b04      	ldr	r3, [pc, #16]	; (800f724 <xTaskGetTickCount+0x18>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f718:	687b      	ldr	r3, [r7, #4]
}
 800f71a:	0018      	movs	r0, r3
 800f71c:	46bd      	mov	sp, r7
 800f71e:	b002      	add	sp, #8
 800f720:	bd80      	pop	{r7, pc}
 800f722:	46c0      	nop			; (mov r8, r8)
 800f724:	20001250 	.word	0x20001250

0800f728 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b086      	sub	sp, #24
 800f72c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f72e:	2300      	movs	r3, #0
 800f730:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f732:	4b4c      	ldr	r3, [pc, #304]	; (800f864 <xTaskIncrementTick+0x13c>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d000      	beq.n	800f73c <xTaskIncrementTick+0x14>
 800f73a:	e083      	b.n	800f844 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f73c:	4b4a      	ldr	r3, [pc, #296]	; (800f868 <xTaskIncrementTick+0x140>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	3301      	adds	r3, #1
 800f742:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f744:	4b48      	ldr	r3, [pc, #288]	; (800f868 <xTaskIncrementTick+0x140>)
 800f746:	693a      	ldr	r2, [r7, #16]
 800f748:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d117      	bne.n	800f780 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800f750:	4b46      	ldr	r3, [pc, #280]	; (800f86c <xTaskIncrementTick+0x144>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d001      	beq.n	800f75e <xTaskIncrementTick+0x36>
 800f75a:	b672      	cpsid	i
 800f75c:	e7fe      	b.n	800f75c <xTaskIncrementTick+0x34>
 800f75e:	4b43      	ldr	r3, [pc, #268]	; (800f86c <xTaskIncrementTick+0x144>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	60fb      	str	r3, [r7, #12]
 800f764:	4b42      	ldr	r3, [pc, #264]	; (800f870 <xTaskIncrementTick+0x148>)
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	4b40      	ldr	r3, [pc, #256]	; (800f86c <xTaskIncrementTick+0x144>)
 800f76a:	601a      	str	r2, [r3, #0]
 800f76c:	4b40      	ldr	r3, [pc, #256]	; (800f870 <xTaskIncrementTick+0x148>)
 800f76e:	68fa      	ldr	r2, [r7, #12]
 800f770:	601a      	str	r2, [r3, #0]
 800f772:	4b40      	ldr	r3, [pc, #256]	; (800f874 <xTaskIncrementTick+0x14c>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	1c5a      	adds	r2, r3, #1
 800f778:	4b3e      	ldr	r3, [pc, #248]	; (800f874 <xTaskIncrementTick+0x14c>)
 800f77a:	601a      	str	r2, [r3, #0]
 800f77c:	f000 fb12 	bl	800fda4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f780:	4b3d      	ldr	r3, [pc, #244]	; (800f878 <xTaskIncrementTick+0x150>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	693a      	ldr	r2, [r7, #16]
 800f786:	429a      	cmp	r2, r3
 800f788:	d34e      	bcc.n	800f828 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f78a:	4b38      	ldr	r3, [pc, #224]	; (800f86c <xTaskIncrementTick+0x144>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d101      	bne.n	800f798 <xTaskIncrementTick+0x70>
 800f794:	2301      	movs	r3, #1
 800f796:	e000      	b.n	800f79a <xTaskIncrementTick+0x72>
 800f798:	2300      	movs	r3, #0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d004      	beq.n	800f7a8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f79e:	4b36      	ldr	r3, [pc, #216]	; (800f878 <xTaskIncrementTick+0x150>)
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	4252      	negs	r2, r2
 800f7a4:	601a      	str	r2, [r3, #0]
					break;
 800f7a6:	e03f      	b.n	800f828 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f7a8:	4b30      	ldr	r3, [pc, #192]	; (800f86c <xTaskIncrementTick+0x144>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	68db      	ldr	r3, [r3, #12]
 800f7b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f7b8:	693a      	ldr	r2, [r7, #16]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d203      	bcs.n	800f7c8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f7c0:	4b2d      	ldr	r3, [pc, #180]	; (800f878 <xTaskIncrementTick+0x150>)
 800f7c2:	687a      	ldr	r2, [r7, #4]
 800f7c4:	601a      	str	r2, [r3, #0]
						break;
 800f7c6:	e02f      	b.n	800f828 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	3304      	adds	r3, #4
 800f7cc:	0018      	movs	r0, r3
 800f7ce:	f7fe feea 	bl	800e5a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d004      	beq.n	800f7e4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	3318      	adds	r3, #24
 800f7de:	0018      	movs	r0, r3
 800f7e0:	f7fe fee1 	bl	800e5a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7e8:	4b24      	ldr	r3, [pc, #144]	; (800f87c <xTaskIncrementTick+0x154>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d903      	bls.n	800f7f8 <xTaskIncrementTick+0xd0>
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7f4:	4b21      	ldr	r3, [pc, #132]	; (800f87c <xTaskIncrementTick+0x154>)
 800f7f6:	601a      	str	r2, [r3, #0]
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7fc:	0013      	movs	r3, r2
 800f7fe:	009b      	lsls	r3, r3, #2
 800f800:	189b      	adds	r3, r3, r2
 800f802:	009b      	lsls	r3, r3, #2
 800f804:	4a1e      	ldr	r2, [pc, #120]	; (800f880 <xTaskIncrementTick+0x158>)
 800f806:	189a      	adds	r2, r3, r2
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	3304      	adds	r3, #4
 800f80c:	0019      	movs	r1, r3
 800f80e:	0010      	movs	r0, r2
 800f810:	f7fe fe71 	bl	800e4f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f818:	4b1a      	ldr	r3, [pc, #104]	; (800f884 <xTaskIncrementTick+0x15c>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f81e:	429a      	cmp	r2, r3
 800f820:	d3b3      	bcc.n	800f78a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800f822:	2301      	movs	r3, #1
 800f824:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f826:	e7b0      	b.n	800f78a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f828:	4b16      	ldr	r3, [pc, #88]	; (800f884 <xTaskIncrementTick+0x15c>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f82e:	4914      	ldr	r1, [pc, #80]	; (800f880 <xTaskIncrementTick+0x158>)
 800f830:	0013      	movs	r3, r2
 800f832:	009b      	lsls	r3, r3, #2
 800f834:	189b      	adds	r3, r3, r2
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	585b      	ldr	r3, [r3, r1]
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	d907      	bls.n	800f84e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f83e:	2301      	movs	r3, #1
 800f840:	617b      	str	r3, [r7, #20]
 800f842:	e004      	b.n	800f84e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f844:	4b10      	ldr	r3, [pc, #64]	; (800f888 <xTaskIncrementTick+0x160>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	1c5a      	adds	r2, r3, #1
 800f84a:	4b0f      	ldr	r3, [pc, #60]	; (800f888 <xTaskIncrementTick+0x160>)
 800f84c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f84e:	4b0f      	ldr	r3, [pc, #60]	; (800f88c <xTaskIncrementTick+0x164>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d001      	beq.n	800f85a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800f856:	2301      	movs	r3, #1
 800f858:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f85a:	697b      	ldr	r3, [r7, #20]
}
 800f85c:	0018      	movs	r0, r3
 800f85e:	46bd      	mov	sp, r7
 800f860:	b006      	add	sp, #24
 800f862:	bd80      	pop	{r7, pc}
 800f864:	20001274 	.word	0x20001274
 800f868:	20001250 	.word	0x20001250
 800f86c:	20001204 	.word	0x20001204
 800f870:	20001208 	.word	0x20001208
 800f874:	20001264 	.word	0x20001264
 800f878:	2000126c 	.word	0x2000126c
 800f87c:	20001254 	.word	0x20001254
 800f880:	20000d7c 	.word	0x20000d7c
 800f884:	20000d78 	.word	0x20000d78
 800f888:	2000125c 	.word	0x2000125c
 800f88c:	20001260 	.word	0x20001260

0800f890 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f896:	4b22      	ldr	r3, [pc, #136]	; (800f920 <vTaskSwitchContext+0x90>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d003      	beq.n	800f8a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f89e:	4b21      	ldr	r3, [pc, #132]	; (800f924 <vTaskSwitchContext+0x94>)
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f8a4:	e037      	b.n	800f916 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800f8a6:	4b1f      	ldr	r3, [pc, #124]	; (800f924 <vTaskSwitchContext+0x94>)
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f8ac:	4b1e      	ldr	r3, [pc, #120]	; (800f928 <vTaskSwitchContext+0x98>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	607b      	str	r3, [r7, #4]
 800f8b2:	e007      	b.n	800f8c4 <vTaskSwitchContext+0x34>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d101      	bne.n	800f8be <vTaskSwitchContext+0x2e>
 800f8ba:	b672      	cpsid	i
 800f8bc:	e7fe      	b.n	800f8bc <vTaskSwitchContext+0x2c>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	3b01      	subs	r3, #1
 800f8c2:	607b      	str	r3, [r7, #4]
 800f8c4:	4919      	ldr	r1, [pc, #100]	; (800f92c <vTaskSwitchContext+0x9c>)
 800f8c6:	687a      	ldr	r2, [r7, #4]
 800f8c8:	0013      	movs	r3, r2
 800f8ca:	009b      	lsls	r3, r3, #2
 800f8cc:	189b      	adds	r3, r3, r2
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	585b      	ldr	r3, [r3, r1]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d0ee      	beq.n	800f8b4 <vTaskSwitchContext+0x24>
 800f8d6:	687a      	ldr	r2, [r7, #4]
 800f8d8:	0013      	movs	r3, r2
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	189b      	adds	r3, r3, r2
 800f8de:	009b      	lsls	r3, r3, #2
 800f8e0:	4a12      	ldr	r2, [pc, #72]	; (800f92c <vTaskSwitchContext+0x9c>)
 800f8e2:	189b      	adds	r3, r3, r2
 800f8e4:	603b      	str	r3, [r7, #0]
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	685a      	ldr	r2, [r3, #4]
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	605a      	str	r2, [r3, #4]
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	685a      	ldr	r2, [r3, #4]
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	3308      	adds	r3, #8
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d104      	bne.n	800f906 <vTaskSwitchContext+0x76>
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	685a      	ldr	r2, [r3, #4]
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	605a      	str	r2, [r3, #4]
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	68da      	ldr	r2, [r3, #12]
 800f90c:	4b08      	ldr	r3, [pc, #32]	; (800f930 <vTaskSwitchContext+0xa0>)
 800f90e:	601a      	str	r2, [r3, #0]
 800f910:	4b05      	ldr	r3, [pc, #20]	; (800f928 <vTaskSwitchContext+0x98>)
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	601a      	str	r2, [r3, #0]
}
 800f916:	46c0      	nop			; (mov r8, r8)
 800f918:	46bd      	mov	sp, r7
 800f91a:	b002      	add	sp, #8
 800f91c:	bd80      	pop	{r7, pc}
 800f91e:	46c0      	nop			; (mov r8, r8)
 800f920:	20001274 	.word	0x20001274
 800f924:	20001260 	.word	0x20001260
 800f928:	20001254 	.word	0x20001254
 800f92c:	20000d7c 	.word	0x20000d7c
 800f930:	20000d78 	.word	0x20000d78

0800f934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b082      	sub	sp, #8
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d101      	bne.n	800f948 <vTaskPlaceOnEventList+0x14>
 800f944:	b672      	cpsid	i
 800f946:	e7fe      	b.n	800f946 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f948:	4b08      	ldr	r3, [pc, #32]	; (800f96c <vTaskPlaceOnEventList+0x38>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	3318      	adds	r3, #24
 800f94e:	001a      	movs	r2, r3
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	0011      	movs	r1, r2
 800f954:	0018      	movs	r0, r3
 800f956:	f7fe fdf0 	bl	800e53a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	2101      	movs	r1, #1
 800f95e:	0018      	movs	r0, r3
 800f960:	f000 fbd4 	bl	801010c <prvAddCurrentTaskToDelayedList>
}
 800f964:	46c0      	nop			; (mov r8, r8)
 800f966:	46bd      	mov	sp, r7
 800f968:	b002      	add	sp, #8
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	20000d78 	.word	0x20000d78

0800f970 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b084      	sub	sp, #16
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d101      	bne.n	800f986 <vTaskPlaceOnUnorderedEventList+0x16>
 800f982:	b672      	cpsid	i
 800f984:	e7fe      	b.n	800f984 <vTaskPlaceOnUnorderedEventList+0x14>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800f986:	4b0f      	ldr	r3, [pc, #60]	; (800f9c4 <vTaskPlaceOnUnorderedEventList+0x54>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d101      	bne.n	800f992 <vTaskPlaceOnUnorderedEventList+0x22>
 800f98e:	b672      	cpsid	i
 800f990:	e7fe      	b.n	800f990 <vTaskPlaceOnUnorderedEventList+0x20>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f992:	4b0d      	ldr	r3, [pc, #52]	; (800f9c8 <vTaskPlaceOnUnorderedEventList+0x58>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	68ba      	ldr	r2, [r7, #8]
 800f998:	2180      	movs	r1, #128	; 0x80
 800f99a:	0609      	lsls	r1, r1, #24
 800f99c:	430a      	orrs	r2, r1
 800f99e:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f9a0:	4b09      	ldr	r3, [pc, #36]	; (800f9c8 <vTaskPlaceOnUnorderedEventList+0x58>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	3318      	adds	r3, #24
 800f9a6:	001a      	movs	r2, r3
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	0011      	movs	r1, r2
 800f9ac:	0018      	movs	r0, r3
 800f9ae:	f7fe fda2 	bl	800e4f6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2101      	movs	r1, #1
 800f9b6:	0018      	movs	r0, r3
 800f9b8:	f000 fba8 	bl	801010c <prvAddCurrentTaskToDelayedList>
}
 800f9bc:	46c0      	nop			; (mov r8, r8)
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	b004      	add	sp, #16
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	20001274 	.word	0x20001274
 800f9c8:	20000d78 	.word	0x20000d78

0800f9cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d101      	bne.n	800f9e2 <vTaskPlaceOnEventListRestricted+0x16>
 800f9de:	b672      	cpsid	i
 800f9e0:	e7fe      	b.n	800f9e0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f9e2:	4b0c      	ldr	r3, [pc, #48]	; (800fa14 <vTaskPlaceOnEventListRestricted+0x48>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	3318      	adds	r3, #24
 800f9e8:	001a      	movs	r2, r3
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	0011      	movs	r1, r2
 800f9ee:	0018      	movs	r0, r3
 800f9f0:	f7fe fd81 	bl	800e4f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d002      	beq.n	800fa00 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	425b      	negs	r3, r3
 800f9fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fa00:	687a      	ldr	r2, [r7, #4]
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	0011      	movs	r1, r2
 800fa06:	0018      	movs	r0, r3
 800fa08:	f000 fb80 	bl	801010c <prvAddCurrentTaskToDelayedList>
	}
 800fa0c:	46c0      	nop			; (mov r8, r8)
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	b004      	add	sp, #16
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	20000d78 	.word	0x20000d78

0800fa18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b084      	sub	sp, #16
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	68db      	ldr	r3, [r3, #12]
 800fa26:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d101      	bne.n	800fa32 <xTaskRemoveFromEventList+0x1a>
 800fa2e:	b672      	cpsid	i
 800fa30:	e7fe      	b.n	800fa30 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	3318      	adds	r3, #24
 800fa36:	0018      	movs	r0, r3
 800fa38:	f7fe fdb5 	bl	800e5a6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa3c:	4b1e      	ldr	r3, [pc, #120]	; (800fab8 <xTaskRemoveFromEventList+0xa0>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d11d      	bne.n	800fa80 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	3304      	adds	r3, #4
 800fa48:	0018      	movs	r0, r3
 800fa4a:	f7fe fdac 	bl	800e5a6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa52:	4b1a      	ldr	r3, [pc, #104]	; (800fabc <xTaskRemoveFromEventList+0xa4>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d903      	bls.n	800fa62 <xTaskRemoveFromEventList+0x4a>
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa5e:	4b17      	ldr	r3, [pc, #92]	; (800fabc <xTaskRemoveFromEventList+0xa4>)
 800fa60:	601a      	str	r2, [r3, #0]
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa66:	0013      	movs	r3, r2
 800fa68:	009b      	lsls	r3, r3, #2
 800fa6a:	189b      	adds	r3, r3, r2
 800fa6c:	009b      	lsls	r3, r3, #2
 800fa6e:	4a14      	ldr	r2, [pc, #80]	; (800fac0 <xTaskRemoveFromEventList+0xa8>)
 800fa70:	189a      	adds	r2, r3, r2
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	3304      	adds	r3, #4
 800fa76:	0019      	movs	r1, r3
 800fa78:	0010      	movs	r0, r2
 800fa7a:	f7fe fd3c 	bl	800e4f6 <vListInsertEnd>
 800fa7e:	e007      	b.n	800fa90 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	3318      	adds	r3, #24
 800fa84:	001a      	movs	r2, r3
 800fa86:	4b0f      	ldr	r3, [pc, #60]	; (800fac4 <xTaskRemoveFromEventList+0xac>)
 800fa88:	0011      	movs	r1, r2
 800fa8a:	0018      	movs	r0, r3
 800fa8c:	f7fe fd33 	bl	800e4f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa94:	4b0c      	ldr	r3, [pc, #48]	; (800fac8 <xTaskRemoveFromEventList+0xb0>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d905      	bls.n	800faaa <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fa9e:	2301      	movs	r3, #1
 800faa0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800faa2:	4b0a      	ldr	r3, [pc, #40]	; (800facc <xTaskRemoveFromEventList+0xb4>)
 800faa4:	2201      	movs	r2, #1
 800faa6:	601a      	str	r2, [r3, #0]
 800faa8:	e001      	b.n	800faae <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800faaa:	2300      	movs	r3, #0
 800faac:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800faae:	68fb      	ldr	r3, [r7, #12]
}
 800fab0:	0018      	movs	r0, r3
 800fab2:	46bd      	mov	sp, r7
 800fab4:	b004      	add	sp, #16
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	20001274 	.word	0x20001274
 800fabc:	20001254 	.word	0x20001254
 800fac0:	20000d7c 	.word	0x20000d7c
 800fac4:	2000120c 	.word	0x2000120c
 800fac8:	20000d78 	.word	0x20000d78
 800facc:	20001260 	.word	0x20001260

0800fad0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800fada:	4b21      	ldr	r3, [pc, #132]	; (800fb60 <vTaskRemoveFromUnorderedEventList+0x90>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d101      	bne.n	800fae6 <vTaskRemoveFromUnorderedEventList+0x16>
 800fae2:	b672      	cpsid	i
 800fae4:	e7fe      	b.n	800fae4 <vTaskRemoveFromUnorderedEventList+0x14>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	2280      	movs	r2, #128	; 0x80
 800faea:	0612      	lsls	r2, r2, #24
 800faec:	431a      	orrs	r2, r3
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	68db      	ldr	r3, [r3, #12]
 800faf6:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d101      	bne.n	800fb02 <vTaskRemoveFromUnorderedEventList+0x32>
 800fafe:	b672      	cpsid	i
 800fb00:	e7fe      	b.n	800fb00 <vTaskRemoveFromUnorderedEventList+0x30>
	( void ) uxListRemove( pxEventListItem );
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	0018      	movs	r0, r3
 800fb06:	f7fe fd4e 	bl	800e5a6 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	3304      	adds	r3, #4
 800fb0e:	0018      	movs	r0, r3
 800fb10:	f7fe fd49 	bl	800e5a6 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb18:	4b12      	ldr	r3, [pc, #72]	; (800fb64 <vTaskRemoveFromUnorderedEventList+0x94>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	d903      	bls.n	800fb28 <vTaskRemoveFromUnorderedEventList+0x58>
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb24:	4b0f      	ldr	r3, [pc, #60]	; (800fb64 <vTaskRemoveFromUnorderedEventList+0x94>)
 800fb26:	601a      	str	r2, [r3, #0]
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb2c:	0013      	movs	r3, r2
 800fb2e:	009b      	lsls	r3, r3, #2
 800fb30:	189b      	adds	r3, r3, r2
 800fb32:	009b      	lsls	r3, r3, #2
 800fb34:	4a0c      	ldr	r2, [pc, #48]	; (800fb68 <vTaskRemoveFromUnorderedEventList+0x98>)
 800fb36:	189a      	adds	r2, r3, r2
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	3304      	adds	r3, #4
 800fb3c:	0019      	movs	r1, r3
 800fb3e:	0010      	movs	r0, r2
 800fb40:	f7fe fcd9 	bl	800e4f6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb48:	4b08      	ldr	r3, [pc, #32]	; (800fb6c <vTaskRemoveFromUnorderedEventList+0x9c>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d902      	bls.n	800fb58 <vTaskRemoveFromUnorderedEventList+0x88>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800fb52:	4b07      	ldr	r3, [pc, #28]	; (800fb70 <vTaskRemoveFromUnorderedEventList+0xa0>)
 800fb54:	2201      	movs	r2, #1
 800fb56:	601a      	str	r2, [r3, #0]
	}
}
 800fb58:	46c0      	nop			; (mov r8, r8)
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	b004      	add	sp, #16
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	20001274 	.word	0x20001274
 800fb64:	20001254 	.word	0x20001254
 800fb68:	20000d7c 	.word	0x20000d7c
 800fb6c:	20000d78 	.word	0x20000d78
 800fb70:	20001260 	.word	0x20001260

0800fb74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fb7c:	4b05      	ldr	r3, [pc, #20]	; (800fb94 <vTaskInternalSetTimeOutState+0x20>)
 800fb7e:	681a      	ldr	r2, [r3, #0]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fb84:	4b04      	ldr	r3, [pc, #16]	; (800fb98 <vTaskInternalSetTimeOutState+0x24>)
 800fb86:	681a      	ldr	r2, [r3, #0]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	605a      	str	r2, [r3, #4]
}
 800fb8c:	46c0      	nop			; (mov r8, r8)
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	b002      	add	sp, #8
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	20001264 	.word	0x20001264
 800fb98:	20001250 	.word	0x20001250

0800fb9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b086      	sub	sp, #24
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d101      	bne.n	800fbb0 <xTaskCheckForTimeOut+0x14>
 800fbac:	b672      	cpsid	i
 800fbae:	e7fe      	b.n	800fbae <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d101      	bne.n	800fbba <xTaskCheckForTimeOut+0x1e>
 800fbb6:	b672      	cpsid	i
 800fbb8:	e7fe      	b.n	800fbb8 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800fbba:	f000 ff19 	bl	80109f0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fbbe:	4b1d      	ldr	r3, [pc, #116]	; (800fc34 <xTaskCheckForTimeOut+0x98>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	685b      	ldr	r3, [r3, #4]
 800fbc8:	693a      	ldr	r2, [r7, #16]
 800fbca:	1ad3      	subs	r3, r2, r3
 800fbcc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	d102      	bne.n	800fbdc <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	617b      	str	r3, [r7, #20]
 800fbda:	e024      	b.n	800fc26 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681a      	ldr	r2, [r3, #0]
 800fbe0:	4b15      	ldr	r3, [pc, #84]	; (800fc38 <xTaskCheckForTimeOut+0x9c>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d007      	beq.n	800fbf8 <xTaskCheckForTimeOut+0x5c>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	693a      	ldr	r2, [r7, #16]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d302      	bcc.n	800fbf8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	617b      	str	r3, [r7, #20]
 800fbf6:	e016      	b.n	800fc26 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	68fa      	ldr	r2, [r7, #12]
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d20c      	bcs.n	800fc1c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	681a      	ldr	r2, [r3, #0]
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	1ad2      	subs	r2, r2, r3
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	0018      	movs	r0, r3
 800fc12:	f7ff ffaf 	bl	800fb74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fc16:	2300      	movs	r3, #0
 800fc18:	617b      	str	r3, [r7, #20]
 800fc1a:	e004      	b.n	800fc26 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fc22:	2301      	movs	r3, #1
 800fc24:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800fc26:	f000 fef5 	bl	8010a14 <vPortExitCritical>

	return xReturn;
 800fc2a:	697b      	ldr	r3, [r7, #20]
}
 800fc2c:	0018      	movs	r0, r3
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	b006      	add	sp, #24
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	20001250 	.word	0x20001250
 800fc38:	20001264 	.word	0x20001264

0800fc3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fc40:	4b02      	ldr	r3, [pc, #8]	; (800fc4c <vTaskMissedYield+0x10>)
 800fc42:	2201      	movs	r2, #1
 800fc44:	601a      	str	r2, [r3, #0]
}
 800fc46:	46c0      	nop			; (mov r8, r8)
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	20001260 	.word	0x20001260

0800fc50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fc58:	f000 f84e 	bl	800fcf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fc5c:	4b03      	ldr	r3, [pc, #12]	; (800fc6c <prvIdleTask+0x1c>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	d9f9      	bls.n	800fc58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fc64:	f000 feb4 	bl	80109d0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800fc68:	e7f6      	b.n	800fc58 <prvIdleTask+0x8>
 800fc6a:	46c0      	nop			; (mov r8, r8)
 800fc6c:	20000d7c 	.word	0x20000d7c

0800fc70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fc76:	2300      	movs	r3, #0
 800fc78:	607b      	str	r3, [r7, #4]
 800fc7a:	e00c      	b.n	800fc96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	0013      	movs	r3, r2
 800fc80:	009b      	lsls	r3, r3, #2
 800fc82:	189b      	adds	r3, r3, r2
 800fc84:	009b      	lsls	r3, r3, #2
 800fc86:	4a14      	ldr	r2, [pc, #80]	; (800fcd8 <prvInitialiseTaskLists+0x68>)
 800fc88:	189b      	adds	r3, r3, r2
 800fc8a:	0018      	movs	r0, r3
 800fc8c:	f7fe fc0a 	bl	800e4a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	3301      	adds	r3, #1
 800fc94:	607b      	str	r3, [r7, #4]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2b37      	cmp	r3, #55	; 0x37
 800fc9a:	d9ef      	bls.n	800fc7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fc9c:	4b0f      	ldr	r3, [pc, #60]	; (800fcdc <prvInitialiseTaskLists+0x6c>)
 800fc9e:	0018      	movs	r0, r3
 800fca0:	f7fe fc00 	bl	800e4a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fca4:	4b0e      	ldr	r3, [pc, #56]	; (800fce0 <prvInitialiseTaskLists+0x70>)
 800fca6:	0018      	movs	r0, r3
 800fca8:	f7fe fbfc 	bl	800e4a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fcac:	4b0d      	ldr	r3, [pc, #52]	; (800fce4 <prvInitialiseTaskLists+0x74>)
 800fcae:	0018      	movs	r0, r3
 800fcb0:	f7fe fbf8 	bl	800e4a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fcb4:	4b0c      	ldr	r3, [pc, #48]	; (800fce8 <prvInitialiseTaskLists+0x78>)
 800fcb6:	0018      	movs	r0, r3
 800fcb8:	f7fe fbf4 	bl	800e4a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fcbc:	4b0b      	ldr	r3, [pc, #44]	; (800fcec <prvInitialiseTaskLists+0x7c>)
 800fcbe:	0018      	movs	r0, r3
 800fcc0:	f7fe fbf0 	bl	800e4a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fcc4:	4b0a      	ldr	r3, [pc, #40]	; (800fcf0 <prvInitialiseTaskLists+0x80>)
 800fcc6:	4a05      	ldr	r2, [pc, #20]	; (800fcdc <prvInitialiseTaskLists+0x6c>)
 800fcc8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fcca:	4b0a      	ldr	r3, [pc, #40]	; (800fcf4 <prvInitialiseTaskLists+0x84>)
 800fccc:	4a04      	ldr	r2, [pc, #16]	; (800fce0 <prvInitialiseTaskLists+0x70>)
 800fcce:	601a      	str	r2, [r3, #0]
}
 800fcd0:	46c0      	nop			; (mov r8, r8)
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	b002      	add	sp, #8
 800fcd6:	bd80      	pop	{r7, pc}
 800fcd8:	20000d7c 	.word	0x20000d7c
 800fcdc:	200011dc 	.word	0x200011dc
 800fce0:	200011f0 	.word	0x200011f0
 800fce4:	2000120c 	.word	0x2000120c
 800fce8:	20001220 	.word	0x20001220
 800fcec:	20001238 	.word	0x20001238
 800fcf0:	20001204 	.word	0x20001204
 800fcf4:	20001208 	.word	0x20001208

0800fcf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fcfe:	e01a      	b.n	800fd36 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800fd00:	f000 fe76 	bl	80109f0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800fd04:	4b10      	ldr	r3, [pc, #64]	; (800fd48 <prvCheckTasksWaitingTermination+0x50>)
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	68db      	ldr	r3, [r3, #12]
 800fd0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	3304      	adds	r3, #4
 800fd10:	0018      	movs	r0, r3
 800fd12:	f7fe fc48 	bl	800e5a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fd16:	4b0d      	ldr	r3, [pc, #52]	; (800fd4c <prvCheckTasksWaitingTermination+0x54>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	1e5a      	subs	r2, r3, #1
 800fd1c:	4b0b      	ldr	r3, [pc, #44]	; (800fd4c <prvCheckTasksWaitingTermination+0x54>)
 800fd1e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fd20:	4b0b      	ldr	r3, [pc, #44]	; (800fd50 <prvCheckTasksWaitingTermination+0x58>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	1e5a      	subs	r2, r3, #1
 800fd26:	4b0a      	ldr	r3, [pc, #40]	; (800fd50 <prvCheckTasksWaitingTermination+0x58>)
 800fd28:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800fd2a:	f000 fe73 	bl	8010a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	0018      	movs	r0, r3
 800fd32:	f000 f80f 	bl	800fd54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd36:	4b06      	ldr	r3, [pc, #24]	; (800fd50 <prvCheckTasksWaitingTermination+0x58>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d1e0      	bne.n	800fd00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fd3e:	46c0      	nop			; (mov r8, r8)
 800fd40:	46c0      	nop			; (mov r8, r8)
 800fd42:	46bd      	mov	sp, r7
 800fd44:	b002      	add	sp, #8
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	20001220 	.word	0x20001220
 800fd4c:	2000124c 	.word	0x2000124c
 800fd50:	20001234 	.word	0x20001234

0800fd54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2259      	movs	r2, #89	; 0x59
 800fd60:	5c9b      	ldrb	r3, [r3, r2]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d109      	bne.n	800fd7a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd6a:	0018      	movs	r0, r3
 800fd6c:	f000 ff7e 	bl	8010c6c <vPortFree>
				vPortFree( pxTCB );
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	0018      	movs	r0, r3
 800fd74:	f000 ff7a 	bl	8010c6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fd78:	e010      	b.n	800fd9c <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2259      	movs	r2, #89	; 0x59
 800fd7e:	5c9b      	ldrb	r3, [r3, r2]
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d104      	bne.n	800fd8e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	0018      	movs	r0, r3
 800fd88:	f000 ff70 	bl	8010c6c <vPortFree>
	}
 800fd8c:	e006      	b.n	800fd9c <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2259      	movs	r2, #89	; 0x59
 800fd92:	5c9b      	ldrb	r3, [r3, r2]
 800fd94:	2b02      	cmp	r3, #2
 800fd96:	d001      	beq.n	800fd9c <prvDeleteTCB+0x48>
 800fd98:	b672      	cpsid	i
 800fd9a:	e7fe      	b.n	800fd9a <prvDeleteTCB+0x46>
	}
 800fd9c:	46c0      	nop			; (mov r8, r8)
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	b002      	add	sp, #8
 800fda2:	bd80      	pop	{r7, pc}

0800fda4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdaa:	4b0e      	ldr	r3, [pc, #56]	; (800fde4 <prvResetNextTaskUnblockTime+0x40>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d101      	bne.n	800fdb8 <prvResetNextTaskUnblockTime+0x14>
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	e000      	b.n	800fdba <prvResetNextTaskUnblockTime+0x16>
 800fdb8:	2300      	movs	r3, #0
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d004      	beq.n	800fdc8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fdbe:	4b0a      	ldr	r3, [pc, #40]	; (800fde8 <prvResetNextTaskUnblockTime+0x44>)
 800fdc0:	2201      	movs	r2, #1
 800fdc2:	4252      	negs	r2, r2
 800fdc4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fdc6:	e008      	b.n	800fdda <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800fdc8:	4b06      	ldr	r3, [pc, #24]	; (800fde4 <prvResetNextTaskUnblockTime+0x40>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	68db      	ldr	r3, [r3, #12]
 800fdd0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	685a      	ldr	r2, [r3, #4]
 800fdd6:	4b04      	ldr	r3, [pc, #16]	; (800fde8 <prvResetNextTaskUnblockTime+0x44>)
 800fdd8:	601a      	str	r2, [r3, #0]
}
 800fdda:	46c0      	nop			; (mov r8, r8)
 800fddc:	46bd      	mov	sp, r7
 800fdde:	b002      	add	sp, #8
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	46c0      	nop			; (mov r8, r8)
 800fde4:	20001204 	.word	0x20001204
 800fde8:	2000126c 	.word	0x2000126c

0800fdec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fdf2:	4b04      	ldr	r3, [pc, #16]	; (800fe04 <xTaskGetCurrentTaskHandle+0x18>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fdf8:	687b      	ldr	r3, [r7, #4]
	}
 800fdfa:	0018      	movs	r0, r3
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	b002      	add	sp, #8
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	46c0      	nop			; (mov r8, r8)
 800fe04:	20000d78 	.word	0x20000d78

0800fe08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fe0e:	4b0a      	ldr	r3, [pc, #40]	; (800fe38 <xTaskGetSchedulerState+0x30>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d102      	bne.n	800fe1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fe16:	2301      	movs	r3, #1
 800fe18:	607b      	str	r3, [r7, #4]
 800fe1a:	e008      	b.n	800fe2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe1c:	4b07      	ldr	r3, [pc, #28]	; (800fe3c <xTaskGetSchedulerState+0x34>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d102      	bne.n	800fe2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fe24:	2302      	movs	r3, #2
 800fe26:	607b      	str	r3, [r7, #4]
 800fe28:	e001      	b.n	800fe2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fe2e:	687b      	ldr	r3, [r7, #4]
	}
 800fe30:	0018      	movs	r0, r3
 800fe32:	46bd      	mov	sp, r7
 800fe34:	b002      	add	sp, #8
 800fe36:	bd80      	pop	{r7, pc}
 800fe38:	20001258 	.word	0x20001258
 800fe3c:	20001274 	.word	0x20001274

0800fe40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b084      	sub	sp, #16
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d056      	beq.n	800ff04 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe5a:	4b2d      	ldr	r3, [pc, #180]	; (800ff10 <xTaskPriorityInherit+0xd0>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d246      	bcs.n	800fef2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	699b      	ldr	r3, [r3, #24]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	db06      	blt.n	800fe7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe6c:	4b28      	ldr	r3, [pc, #160]	; (800ff10 <xTaskPriorityInherit+0xd0>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe72:	2238      	movs	r2, #56	; 0x38
 800fe74:	1ad2      	subs	r2, r2, r3
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	6959      	ldr	r1, [r3, #20]
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe82:	0013      	movs	r3, r2
 800fe84:	009b      	lsls	r3, r3, #2
 800fe86:	189b      	adds	r3, r3, r2
 800fe88:	009b      	lsls	r3, r3, #2
 800fe8a:	4a22      	ldr	r2, [pc, #136]	; (800ff14 <xTaskPriorityInherit+0xd4>)
 800fe8c:	189b      	adds	r3, r3, r2
 800fe8e:	4299      	cmp	r1, r3
 800fe90:	d101      	bne.n	800fe96 <xTaskPriorityInherit+0x56>
 800fe92:	2301      	movs	r3, #1
 800fe94:	e000      	b.n	800fe98 <xTaskPriorityInherit+0x58>
 800fe96:	2300      	movs	r3, #0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d022      	beq.n	800fee2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	3304      	adds	r3, #4
 800fea0:	0018      	movs	r0, r3
 800fea2:	f7fe fb80 	bl	800e5a6 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fea6:	4b1a      	ldr	r3, [pc, #104]	; (800ff10 <xTaskPriorityInherit+0xd0>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feb4:	4b18      	ldr	r3, [pc, #96]	; (800ff18 <xTaskPriorityInherit+0xd8>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	429a      	cmp	r2, r3
 800feba:	d903      	bls.n	800fec4 <xTaskPriorityInherit+0x84>
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec0:	4b15      	ldr	r3, [pc, #84]	; (800ff18 <xTaskPriorityInherit+0xd8>)
 800fec2:	601a      	str	r2, [r3, #0]
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec8:	0013      	movs	r3, r2
 800feca:	009b      	lsls	r3, r3, #2
 800fecc:	189b      	adds	r3, r3, r2
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	4a10      	ldr	r2, [pc, #64]	; (800ff14 <xTaskPriorityInherit+0xd4>)
 800fed2:	189a      	adds	r2, r3, r2
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	3304      	adds	r3, #4
 800fed8:	0019      	movs	r1, r3
 800feda:	0010      	movs	r0, r2
 800fedc:	f7fe fb0b 	bl	800e4f6 <vListInsertEnd>
 800fee0:	e004      	b.n	800feec <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fee2:	4b0b      	ldr	r3, [pc, #44]	; (800ff10 <xTaskPriorityInherit+0xd0>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800feec:	2301      	movs	r3, #1
 800feee:	60fb      	str	r3, [r7, #12]
 800fef0:	e008      	b.n	800ff04 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fef6:	4b06      	ldr	r3, [pc, #24]	; (800ff10 <xTaskPriorityInherit+0xd0>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d201      	bcs.n	800ff04 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ff00:	2301      	movs	r3, #1
 800ff02:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ff04:	68fb      	ldr	r3, [r7, #12]
	}
 800ff06:	0018      	movs	r0, r3
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	b004      	add	sp, #16
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	46c0      	nop			; (mov r8, r8)
 800ff10:	20000d78 	.word	0x20000d78
 800ff14:	20000d7c 	.word	0x20000d7c
 800ff18:	20001254 	.word	0x20001254

0800ff1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b084      	sub	sp, #16
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d044      	beq.n	800ffbc <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ff32:	4b25      	ldr	r3, [pc, #148]	; (800ffc8 <xTaskPriorityDisinherit+0xac>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	68ba      	ldr	r2, [r7, #8]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d001      	beq.n	800ff40 <xTaskPriorityDisinherit+0x24>
 800ff3c:	b672      	cpsid	i
 800ff3e:	e7fe      	b.n	800ff3e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d101      	bne.n	800ff4c <xTaskPriorityDisinherit+0x30>
 800ff48:	b672      	cpsid	i
 800ff4a:	e7fe      	b.n	800ff4a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff50:	1e5a      	subs	r2, r3, #1
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d02c      	beq.n	800ffbc <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d128      	bne.n	800ffbc <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	3304      	adds	r3, #4
 800ff6e:	0018      	movs	r0, r3
 800ff70:	f7fe fb19 	bl	800e5a6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff80:	2238      	movs	r2, #56	; 0x38
 800ff82:	1ad2      	subs	r2, r2, r3
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff8c:	4b0f      	ldr	r3, [pc, #60]	; (800ffcc <xTaskPriorityDisinherit+0xb0>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d903      	bls.n	800ff9c <xTaskPriorityDisinherit+0x80>
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff98:	4b0c      	ldr	r3, [pc, #48]	; (800ffcc <xTaskPriorityDisinherit+0xb0>)
 800ff9a:	601a      	str	r2, [r3, #0]
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffa0:	0013      	movs	r3, r2
 800ffa2:	009b      	lsls	r3, r3, #2
 800ffa4:	189b      	adds	r3, r3, r2
 800ffa6:	009b      	lsls	r3, r3, #2
 800ffa8:	4a09      	ldr	r2, [pc, #36]	; (800ffd0 <xTaskPriorityDisinherit+0xb4>)
 800ffaa:	189a      	adds	r2, r3, r2
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	3304      	adds	r3, #4
 800ffb0:	0019      	movs	r1, r3
 800ffb2:	0010      	movs	r0, r2
 800ffb4:	f7fe fa9f 	bl	800e4f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
	}
 800ffbe:	0018      	movs	r0, r3
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	b004      	add	sp, #16
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	46c0      	nop			; (mov r8, r8)
 800ffc8:	20000d78 	.word	0x20000d78
 800ffcc:	20001254 	.word	0x20001254
 800ffd0:	20000d7c 	.word	0x20000d7c

0800ffd4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b086      	sub	sp, #24
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d05d      	beq.n	80100a8 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d101      	bne.n	800fff8 <vTaskPriorityDisinheritAfterTimeout+0x24>
 800fff4:	b672      	cpsid	i
 800fff6:	e7fe      	b.n	800fff6 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fffc:	683a      	ldr	r2, [r7, #0]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d902      	bls.n	8010008 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	617b      	str	r3, [r7, #20]
 8010006:	e002      	b.n	801000e <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801000c:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010012:	697a      	ldr	r2, [r7, #20]
 8010014:	429a      	cmp	r2, r3
 8010016:	d047      	beq.n	80100a8 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801001c:	68fa      	ldr	r2, [r7, #12]
 801001e:	429a      	cmp	r2, r3
 8010020:	d142      	bne.n	80100a8 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010022:	4b23      	ldr	r3, [pc, #140]	; (80100b0 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	693a      	ldr	r2, [r7, #16]
 8010028:	429a      	cmp	r2, r3
 801002a:	d101      	bne.n	8010030 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 801002c:	b672      	cpsid	i
 801002e:	e7fe      	b.n	801002e <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010034:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	697a      	ldr	r2, [r7, #20]
 801003a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	699b      	ldr	r3, [r3, #24]
 8010040:	2b00      	cmp	r3, #0
 8010042:	db04      	blt.n	801004e <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	2238      	movs	r2, #56	; 0x38
 8010048:	1ad2      	subs	r2, r2, r3
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	6959      	ldr	r1, [r3, #20]
 8010052:	68ba      	ldr	r2, [r7, #8]
 8010054:	0013      	movs	r3, r2
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	189b      	adds	r3, r3, r2
 801005a:	009b      	lsls	r3, r3, #2
 801005c:	4a15      	ldr	r2, [pc, #84]	; (80100b4 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 801005e:	189b      	adds	r3, r3, r2
 8010060:	4299      	cmp	r1, r3
 8010062:	d101      	bne.n	8010068 <vTaskPriorityDisinheritAfterTimeout+0x94>
 8010064:	2301      	movs	r3, #1
 8010066:	e000      	b.n	801006a <vTaskPriorityDisinheritAfterTimeout+0x96>
 8010068:	2300      	movs	r3, #0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d01c      	beq.n	80100a8 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	3304      	adds	r3, #4
 8010072:	0018      	movs	r0, r3
 8010074:	f7fe fa97 	bl	800e5a6 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010078:	693b      	ldr	r3, [r7, #16]
 801007a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801007c:	4b0e      	ldr	r3, [pc, #56]	; (80100b8 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	429a      	cmp	r2, r3
 8010082:	d903      	bls.n	801008c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010088:	4b0b      	ldr	r3, [pc, #44]	; (80100b8 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 801008a:	601a      	str	r2, [r3, #0]
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010090:	0013      	movs	r3, r2
 8010092:	009b      	lsls	r3, r3, #2
 8010094:	189b      	adds	r3, r3, r2
 8010096:	009b      	lsls	r3, r3, #2
 8010098:	4a06      	ldr	r2, [pc, #24]	; (80100b4 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 801009a:	189a      	adds	r2, r3, r2
 801009c:	693b      	ldr	r3, [r7, #16]
 801009e:	3304      	adds	r3, #4
 80100a0:	0019      	movs	r1, r3
 80100a2:	0010      	movs	r0, r2
 80100a4:	f7fe fa27 	bl	800e4f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80100a8:	46c0      	nop			; (mov r8, r8)
 80100aa:	46bd      	mov	sp, r7
 80100ac:	b006      	add	sp, #24
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	20000d78 	.word	0x20000d78
 80100b4:	20000d7c 	.word	0x20000d7c
 80100b8:	20001254 	.word	0x20001254

080100bc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80100c2:	4b08      	ldr	r3, [pc, #32]	; (80100e4 <uxTaskResetEventItemValue+0x28>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	699b      	ldr	r3, [r3, #24]
 80100c8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100ca:	4b06      	ldr	r3, [pc, #24]	; (80100e4 <uxTaskResetEventItemValue+0x28>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100d0:	4b04      	ldr	r3, [pc, #16]	; (80100e4 <uxTaskResetEventItemValue+0x28>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	2138      	movs	r1, #56	; 0x38
 80100d6:	1a8a      	subs	r2, r1, r2
 80100d8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80100da:	687b      	ldr	r3, [r7, #4]
}
 80100dc:	0018      	movs	r0, r3
 80100de:	46bd      	mov	sp, r7
 80100e0:	b002      	add	sp, #8
 80100e2:	bd80      	pop	{r7, pc}
 80100e4:	20000d78 	.word	0x20000d78

080100e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80100ec:	4b06      	ldr	r3, [pc, #24]	; (8010108 <pvTaskIncrementMutexHeldCount+0x20>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d004      	beq.n	80100fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80100f4:	4b04      	ldr	r3, [pc, #16]	; (8010108 <pvTaskIncrementMutexHeldCount+0x20>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100fa:	3201      	adds	r2, #1
 80100fc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80100fe:	4b02      	ldr	r3, [pc, #8]	; (8010108 <pvTaskIncrementMutexHeldCount+0x20>)
 8010100:	681b      	ldr	r3, [r3, #0]
	}
 8010102:	0018      	movs	r0, r3
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}
 8010108:	20000d78 	.word	0x20000d78

0801010c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b084      	sub	sp, #16
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010116:	4b21      	ldr	r3, [pc, #132]	; (801019c <prvAddCurrentTaskToDelayedList+0x90>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801011c:	4b20      	ldr	r3, [pc, #128]	; (80101a0 <prvAddCurrentTaskToDelayedList+0x94>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	3304      	adds	r3, #4
 8010122:	0018      	movs	r0, r3
 8010124:	f7fe fa3f 	bl	800e5a6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	3301      	adds	r3, #1
 801012c:	d10b      	bne.n	8010146 <prvAddCurrentTaskToDelayedList+0x3a>
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d008      	beq.n	8010146 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010134:	4b1a      	ldr	r3, [pc, #104]	; (80101a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	1d1a      	adds	r2, r3, #4
 801013a:	4b1a      	ldr	r3, [pc, #104]	; (80101a4 <prvAddCurrentTaskToDelayedList+0x98>)
 801013c:	0011      	movs	r1, r2
 801013e:	0018      	movs	r0, r3
 8010140:	f7fe f9d9 	bl	800e4f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010144:	e026      	b.n	8010194 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	18d3      	adds	r3, r2, r3
 801014c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801014e:	4b14      	ldr	r3, [pc, #80]	; (80101a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	68ba      	ldr	r2, [r7, #8]
 8010154:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010156:	68ba      	ldr	r2, [r7, #8]
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	429a      	cmp	r2, r3
 801015c:	d209      	bcs.n	8010172 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801015e:	4b12      	ldr	r3, [pc, #72]	; (80101a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	4b0f      	ldr	r3, [pc, #60]	; (80101a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	3304      	adds	r3, #4
 8010168:	0019      	movs	r1, r3
 801016a:	0010      	movs	r0, r2
 801016c:	f7fe f9e5 	bl	800e53a <vListInsert>
}
 8010170:	e010      	b.n	8010194 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010172:	4b0e      	ldr	r3, [pc, #56]	; (80101ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8010174:	681a      	ldr	r2, [r3, #0]
 8010176:	4b0a      	ldr	r3, [pc, #40]	; (80101a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	3304      	adds	r3, #4
 801017c:	0019      	movs	r1, r3
 801017e:	0010      	movs	r0, r2
 8010180:	f7fe f9db 	bl	800e53a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010184:	4b0a      	ldr	r3, [pc, #40]	; (80101b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	68ba      	ldr	r2, [r7, #8]
 801018a:	429a      	cmp	r2, r3
 801018c:	d202      	bcs.n	8010194 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801018e:	4b08      	ldr	r3, [pc, #32]	; (80101b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010190:	68ba      	ldr	r2, [r7, #8]
 8010192:	601a      	str	r2, [r3, #0]
}
 8010194:	46c0      	nop			; (mov r8, r8)
 8010196:	46bd      	mov	sp, r7
 8010198:	b004      	add	sp, #16
 801019a:	bd80      	pop	{r7, pc}
 801019c:	20001250 	.word	0x20001250
 80101a0:	20000d78 	.word	0x20000d78
 80101a4:	20001238 	.word	0x20001238
 80101a8:	20001208 	.word	0x20001208
 80101ac:	20001204 	.word	0x20001204
 80101b0:	2000126c 	.word	0x2000126c

080101b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80101b4:	b590      	push	{r4, r7, lr}
 80101b6:	b089      	sub	sp, #36	; 0x24
 80101b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80101ba:	2300      	movs	r3, #0
 80101bc:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80101be:	f000 faff 	bl	80107c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80101c2:	4b17      	ldr	r3, [pc, #92]	; (8010220 <xTimerCreateTimerTask+0x6c>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d020      	beq.n	801020c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80101ca:	2300      	movs	r3, #0
 80101cc:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80101ce:	2300      	movs	r3, #0
 80101d0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80101d2:	003a      	movs	r2, r7
 80101d4:	1d39      	adds	r1, r7, #4
 80101d6:	2308      	movs	r3, #8
 80101d8:	18fb      	adds	r3, r7, r3
 80101da:	0018      	movs	r0, r3
 80101dc:	f7fd ffa6 	bl	800e12c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80101e0:	683c      	ldr	r4, [r7, #0]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	68ba      	ldr	r2, [r7, #8]
 80101e6:	490f      	ldr	r1, [pc, #60]	; (8010224 <xTimerCreateTimerTask+0x70>)
 80101e8:	480f      	ldr	r0, [pc, #60]	; (8010228 <xTimerCreateTimerTask+0x74>)
 80101ea:	9202      	str	r2, [sp, #8]
 80101ec:	9301      	str	r3, [sp, #4]
 80101ee:	2302      	movs	r3, #2
 80101f0:	9300      	str	r3, [sp, #0]
 80101f2:	2300      	movs	r3, #0
 80101f4:	0022      	movs	r2, r4
 80101f6:	f7fe fffe 	bl	800f1f6 <xTaskCreateStatic>
 80101fa:	0002      	movs	r2, r0
 80101fc:	4b0b      	ldr	r3, [pc, #44]	; (801022c <xTimerCreateTimerTask+0x78>)
 80101fe:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010200:	4b0a      	ldr	r3, [pc, #40]	; (801022c <xTimerCreateTimerTask+0x78>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d001      	beq.n	801020c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8010208:	2301      	movs	r3, #1
 801020a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d101      	bne.n	8010216 <xTimerCreateTimerTask+0x62>
 8010212:	b672      	cpsid	i
 8010214:	e7fe      	b.n	8010214 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8010216:	68fb      	ldr	r3, [r7, #12]
}
 8010218:	0018      	movs	r0, r3
 801021a:	46bd      	mov	sp, r7
 801021c:	b005      	add	sp, #20
 801021e:	bd90      	pop	{r4, r7, pc}
 8010220:	200012a8 	.word	0x200012a8
 8010224:	08013228 	.word	0x08013228
 8010228:	08010425 	.word	0x08010425
 801022c:	200012ac 	.word	0x200012ac

08010230 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010230:	b590      	push	{r4, r7, lr}
 8010232:	b089      	sub	sp, #36	; 0x24
 8010234:	af02      	add	r7, sp, #8
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	607a      	str	r2, [r7, #4]
 801023c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 801023e:	2030      	movs	r0, #48	; 0x30
 8010240:	f000 fc6e 	bl	8010b20 <pvPortMalloc>
 8010244:	0003      	movs	r3, r0
 8010246:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d00e      	beq.n	801026c <xTimerCreate+0x3c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801024e:	683c      	ldr	r4, [r7, #0]
 8010250:	687a      	ldr	r2, [r7, #4]
 8010252:	68b9      	ldr	r1, [r7, #8]
 8010254:	68f8      	ldr	r0, [r7, #12]
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	9301      	str	r3, [sp, #4]
 801025a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025c:	9300      	str	r3, [sp, #0]
 801025e:	0023      	movs	r3, r4
 8010260:	f000 f835 	bl	80102ce <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	222c      	movs	r2, #44	; 0x2c
 8010268:	2100      	movs	r1, #0
 801026a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 801026c:	697b      	ldr	r3, [r7, #20]
	}
 801026e:	0018      	movs	r0, r3
 8010270:	46bd      	mov	sp, r7
 8010272:	b007      	add	sp, #28
 8010274:	bd90      	pop	{r4, r7, pc}

08010276 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8010276:	b590      	push	{r4, r7, lr}
 8010278:	b089      	sub	sp, #36	; 0x24
 801027a:	af02      	add	r7, sp, #8
 801027c:	60f8      	str	r0, [r7, #12]
 801027e:	60b9      	str	r1, [r7, #8]
 8010280:	607a      	str	r2, [r7, #4]
 8010282:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8010284:	2330      	movs	r3, #48	; 0x30
 8010286:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	2b30      	cmp	r3, #48	; 0x30
 801028c:	d001      	beq.n	8010292 <xTimerCreateStatic+0x1c>
 801028e:	b672      	cpsid	i
 8010290:	e7fe      	b.n	8010290 <xTimerCreateStatic+0x1a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8010292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010294:	2b00      	cmp	r3, #0
 8010296:	d101      	bne.n	801029c <xTimerCreateStatic+0x26>
 8010298:	b672      	cpsid	i
 801029a:	e7fe      	b.n	801029a <xTimerCreateStatic+0x24>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801029c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801029e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d00e      	beq.n	80102c4 <xTimerCreateStatic+0x4e>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80102a6:	683c      	ldr	r4, [r7, #0]
 80102a8:	687a      	ldr	r2, [r7, #4]
 80102aa:	68b9      	ldr	r1, [r7, #8]
 80102ac:	68f8      	ldr	r0, [r7, #12]
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	9301      	str	r3, [sp, #4]
 80102b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b4:	9300      	str	r3, [sp, #0]
 80102b6:	0023      	movs	r3, r4
 80102b8:	f000 f809 	bl	80102ce <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	222c      	movs	r2, #44	; 0x2c
 80102c0:	2101      	movs	r1, #1
 80102c2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80102c4:	697b      	ldr	r3, [r7, #20]
	}
 80102c6:	0018      	movs	r0, r3
 80102c8:	46bd      	mov	sp, r7
 80102ca:	b007      	add	sp, #28
 80102cc:	bd90      	pop	{r4, r7, pc}

080102ce <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80102ce:	b580      	push	{r7, lr}
 80102d0:	b084      	sub	sp, #16
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	60f8      	str	r0, [r7, #12]
 80102d6:	60b9      	str	r1, [r7, #8]
 80102d8:	607a      	str	r2, [r7, #4]
 80102da:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d101      	bne.n	80102e6 <prvInitialiseNewTimer+0x18>
 80102e2:	b672      	cpsid	i
 80102e4:	e7fe      	b.n	80102e4 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d015      	beq.n	8010318 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80102ec:	f000 fa68 	bl	80107c0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	68fa      	ldr	r2, [r7, #12]
 80102f4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	68ba      	ldr	r2, [r7, #8]
 80102fa:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80102fc:	69fb      	ldr	r3, [r7, #28]
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8010302:	69fb      	ldr	r3, [r7, #28]
 8010304:	683a      	ldr	r2, [r7, #0]
 8010306:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010308:	69fb      	ldr	r3, [r7, #28]
 801030a:	69ba      	ldr	r2, [r7, #24]
 801030c:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	3304      	adds	r3, #4
 8010312:	0018      	movs	r0, r3
 8010314:	f7fe f8e4 	bl	800e4e0 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8010318:	46c0      	nop			; (mov r8, r8)
 801031a:	46bd      	mov	sp, r7
 801031c:	b004      	add	sp, #16
 801031e:	bd80      	pop	{r7, pc}

08010320 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010320:	b590      	push	{r4, r7, lr}
 8010322:	b08b      	sub	sp, #44	; 0x2c
 8010324:	af00      	add	r7, sp, #0
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	607a      	str	r2, [r7, #4]
 801032c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801032e:	2300      	movs	r3, #0
 8010330:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d101      	bne.n	801033c <xTimerGenericCommand+0x1c>
 8010338:	b672      	cpsid	i
 801033a:	e7fe      	b.n	801033a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801033c:	4b1c      	ldr	r3, [pc, #112]	; (80103b0 <xTimerGenericCommand+0x90>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d030      	beq.n	80103a6 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010344:	2414      	movs	r4, #20
 8010346:	193b      	adds	r3, r7, r4
 8010348:	68ba      	ldr	r2, [r7, #8]
 801034a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801034c:	193b      	adds	r3, r7, r4
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8010352:	193b      	adds	r3, r7, r4
 8010354:	68fa      	ldr	r2, [r7, #12]
 8010356:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	2b05      	cmp	r3, #5
 801035c:	dc19      	bgt.n	8010392 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801035e:	f7ff fd53 	bl	800fe08 <xTaskGetSchedulerState>
 8010362:	0003      	movs	r3, r0
 8010364:	2b02      	cmp	r3, #2
 8010366:	d109      	bne.n	801037c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010368:	4b11      	ldr	r3, [pc, #68]	; (80103b0 <xTimerGenericCommand+0x90>)
 801036a:	6818      	ldr	r0, [r3, #0]
 801036c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801036e:	1939      	adds	r1, r7, r4
 8010370:	2300      	movs	r3, #0
 8010372:	f7fe faed 	bl	800e950 <xQueueGenericSend>
 8010376:	0003      	movs	r3, r0
 8010378:	627b      	str	r3, [r7, #36]	; 0x24
 801037a:	e014      	b.n	80103a6 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801037c:	4b0c      	ldr	r3, [pc, #48]	; (80103b0 <xTimerGenericCommand+0x90>)
 801037e:	6818      	ldr	r0, [r3, #0]
 8010380:	2314      	movs	r3, #20
 8010382:	18f9      	adds	r1, r7, r3
 8010384:	2300      	movs	r3, #0
 8010386:	2200      	movs	r2, #0
 8010388:	f7fe fae2 	bl	800e950 <xQueueGenericSend>
 801038c:	0003      	movs	r3, r0
 801038e:	627b      	str	r3, [r7, #36]	; 0x24
 8010390:	e009      	b.n	80103a6 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010392:	4b07      	ldr	r3, [pc, #28]	; (80103b0 <xTimerGenericCommand+0x90>)
 8010394:	6818      	ldr	r0, [r3, #0]
 8010396:	683a      	ldr	r2, [r7, #0]
 8010398:	2314      	movs	r3, #20
 801039a:	18f9      	adds	r1, r7, r3
 801039c:	2300      	movs	r3, #0
 801039e:	f7fe fb9b 	bl	800ead8 <xQueueGenericSendFromISR>
 80103a2:	0003      	movs	r3, r0
 80103a4:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80103a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80103a8:	0018      	movs	r0, r3
 80103aa:	46bd      	mov	sp, r7
 80103ac:	b00b      	add	sp, #44	; 0x2c
 80103ae:	bd90      	pop	{r4, r7, pc}
 80103b0:	200012a8 	.word	0x200012a8

080103b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b086      	sub	sp, #24
 80103b8:	af02      	add	r7, sp, #8
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80103be:	4b18      	ldr	r3, [pc, #96]	; (8010420 <prvProcessExpiredTimer+0x6c>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	68db      	ldr	r3, [r3, #12]
 80103c4:	68db      	ldr	r3, [r3, #12]
 80103c6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	3304      	adds	r3, #4
 80103cc:	0018      	movs	r0, r3
 80103ce:	f7fe f8ea 	bl	800e5a6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	69db      	ldr	r3, [r3, #28]
 80103d6:	2b01      	cmp	r3, #1
 80103d8:	d119      	bne.n	801040e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	699a      	ldr	r2, [r3, #24]
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	18d1      	adds	r1, r2, r3
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	683a      	ldr	r2, [r7, #0]
 80103e6:	68f8      	ldr	r0, [r7, #12]
 80103e8:	f000 f8b6 	bl	8010558 <prvInsertTimerInActiveList>
 80103ec:	1e03      	subs	r3, r0, #0
 80103ee:	d00e      	beq.n	801040e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103f0:	687a      	ldr	r2, [r7, #4]
 80103f2:	68f8      	ldr	r0, [r7, #12]
 80103f4:	2300      	movs	r3, #0
 80103f6:	9300      	str	r3, [sp, #0]
 80103f8:	2300      	movs	r3, #0
 80103fa:	2100      	movs	r1, #0
 80103fc:	f7ff ff90 	bl	8010320 <xTimerGenericCommand>
 8010400:	0003      	movs	r3, r0
 8010402:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d101      	bne.n	801040e <prvProcessExpiredTimer+0x5a>
 801040a:	b672      	cpsid	i
 801040c:	e7fe      	b.n	801040c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010412:	68fa      	ldr	r2, [r7, #12]
 8010414:	0010      	movs	r0, r2
 8010416:	4798      	blx	r3
}
 8010418:	46c0      	nop			; (mov r8, r8)
 801041a:	46bd      	mov	sp, r7
 801041c:	b004      	add	sp, #16
 801041e:	bd80      	pop	{r7, pc}
 8010420:	200012a0 	.word	0x200012a0

08010424 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b084      	sub	sp, #16
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801042c:	2308      	movs	r3, #8
 801042e:	18fb      	adds	r3, r7, r3
 8010430:	0018      	movs	r0, r3
 8010432:	f000 f851 	bl	80104d8 <prvGetNextExpireTime>
 8010436:	0003      	movs	r3, r0
 8010438:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801043a:	68ba      	ldr	r2, [r7, #8]
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	0011      	movs	r1, r2
 8010440:	0018      	movs	r0, r3
 8010442:	f000 f803 	bl	801044c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010446:	f000 f8c9 	bl	80105dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801044a:	e7ef      	b.n	801042c <prvTimerTask+0x8>

0801044c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010456:	f7ff f8c1 	bl	800f5dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801045a:	2308      	movs	r3, #8
 801045c:	18fb      	adds	r3, r7, r3
 801045e:	0018      	movs	r0, r3
 8010460:	f000 f85a 	bl	8010518 <prvSampleTimeNow>
 8010464:	0003      	movs	r3, r0
 8010466:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d129      	bne.n	80104c2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d10c      	bne.n	801048e <prvProcessTimerOrBlockTask+0x42>
 8010474:	687a      	ldr	r2, [r7, #4]
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	429a      	cmp	r2, r3
 801047a:	d808      	bhi.n	801048e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 801047c:	f7ff f8ba 	bl	800f5f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010480:	68fa      	ldr	r2, [r7, #12]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	0011      	movs	r1, r2
 8010486:	0018      	movs	r0, r3
 8010488:	f7ff ff94 	bl	80103b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801048c:	e01b      	b.n	80104c6 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d006      	beq.n	80104a2 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010494:	4b0e      	ldr	r3, [pc, #56]	; (80104d0 <prvProcessTimerOrBlockTask+0x84>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	425a      	negs	r2, r3
 801049c:	4153      	adcs	r3, r2
 801049e:	b2db      	uxtb	r3, r3
 80104a0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80104a2:	4b0c      	ldr	r3, [pc, #48]	; (80104d4 <prvProcessTimerOrBlockTask+0x88>)
 80104a4:	6818      	ldr	r0, [r3, #0]
 80104a6:	687a      	ldr	r2, [r7, #4]
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	1ad3      	subs	r3, r2, r3
 80104ac:	683a      	ldr	r2, [r7, #0]
 80104ae:	0019      	movs	r1, r3
 80104b0:	f7fe fe6e 	bl	800f190 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80104b4:	f7ff f89e 	bl	800f5f4 <xTaskResumeAll>
 80104b8:	1e03      	subs	r3, r0, #0
 80104ba:	d104      	bne.n	80104c6 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80104bc:	f000 fa88 	bl	80109d0 <vPortYield>
}
 80104c0:	e001      	b.n	80104c6 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80104c2:	f7ff f897 	bl	800f5f4 <xTaskResumeAll>
}
 80104c6:	46c0      	nop			; (mov r8, r8)
 80104c8:	46bd      	mov	sp, r7
 80104ca:	b004      	add	sp, #16
 80104cc:	bd80      	pop	{r7, pc}
 80104ce:	46c0      	nop			; (mov r8, r8)
 80104d0:	200012a4 	.word	0x200012a4
 80104d4:	200012a8 	.word	0x200012a8

080104d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80104e0:	4b0c      	ldr	r3, [pc, #48]	; (8010514 <prvGetNextExpireTime+0x3c>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	425a      	negs	r2, r3
 80104e8:	4153      	adcs	r3, r2
 80104ea:	b2db      	uxtb	r3, r3
 80104ec:	001a      	movs	r2, r3
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d105      	bne.n	8010506 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80104fa:	4b06      	ldr	r3, [pc, #24]	; (8010514 <prvGetNextExpireTime+0x3c>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	68db      	ldr	r3, [r3, #12]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	60fb      	str	r3, [r7, #12]
 8010504:	e001      	b.n	801050a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010506:	2300      	movs	r3, #0
 8010508:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801050a:	68fb      	ldr	r3, [r7, #12]
}
 801050c:	0018      	movs	r0, r3
 801050e:	46bd      	mov	sp, r7
 8010510:	b004      	add	sp, #16
 8010512:	bd80      	pop	{r7, pc}
 8010514:	200012a0 	.word	0x200012a0

08010518 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010520:	f7ff f8f4 	bl	800f70c <xTaskGetTickCount>
 8010524:	0003      	movs	r3, r0
 8010526:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8010528:	4b0a      	ldr	r3, [pc, #40]	; (8010554 <prvSampleTimeNow+0x3c>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	68fa      	ldr	r2, [r7, #12]
 801052e:	429a      	cmp	r2, r3
 8010530:	d205      	bcs.n	801053e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8010532:	f000 f8eb 	bl	801070c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2201      	movs	r2, #1
 801053a:	601a      	str	r2, [r3, #0]
 801053c:	e002      	b.n	8010544 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2200      	movs	r2, #0
 8010542:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010544:	4b03      	ldr	r3, [pc, #12]	; (8010554 <prvSampleTimeNow+0x3c>)
 8010546:	68fa      	ldr	r2, [r7, #12]
 8010548:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 801054a:	68fb      	ldr	r3, [r7, #12]
}
 801054c:	0018      	movs	r0, r3
 801054e:	46bd      	mov	sp, r7
 8010550:	b004      	add	sp, #16
 8010552:	bd80      	pop	{r7, pc}
 8010554:	200012b0 	.word	0x200012b0

08010558 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b086      	sub	sp, #24
 801055c:	af00      	add	r7, sp, #0
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	607a      	str	r2, [r7, #4]
 8010564:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010566:	2300      	movs	r3, #0
 8010568:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	68ba      	ldr	r2, [r7, #8]
 801056e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	68fa      	ldr	r2, [r7, #12]
 8010574:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010576:	68ba      	ldr	r2, [r7, #8]
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	429a      	cmp	r2, r3
 801057c:	d812      	bhi.n	80105a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801057e:	687a      	ldr	r2, [r7, #4]
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	1ad2      	subs	r2, r2, r3
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	699b      	ldr	r3, [r3, #24]
 8010588:	429a      	cmp	r2, r3
 801058a:	d302      	bcc.n	8010592 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801058c:	2301      	movs	r3, #1
 801058e:	617b      	str	r3, [r7, #20]
 8010590:	e01b      	b.n	80105ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010592:	4b10      	ldr	r3, [pc, #64]	; (80105d4 <prvInsertTimerInActiveList+0x7c>)
 8010594:	681a      	ldr	r2, [r3, #0]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	3304      	adds	r3, #4
 801059a:	0019      	movs	r1, r3
 801059c:	0010      	movs	r0, r2
 801059e:	f7fd ffcc 	bl	800e53a <vListInsert>
 80105a2:	e012      	b.n	80105ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80105a4:	687a      	ldr	r2, [r7, #4]
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d206      	bcs.n	80105ba <prvInsertTimerInActiveList+0x62>
 80105ac:	68ba      	ldr	r2, [r7, #8]
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d302      	bcc.n	80105ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80105b4:	2301      	movs	r3, #1
 80105b6:	617b      	str	r3, [r7, #20]
 80105b8:	e007      	b.n	80105ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80105ba:	4b07      	ldr	r3, [pc, #28]	; (80105d8 <prvInsertTimerInActiveList+0x80>)
 80105bc:	681a      	ldr	r2, [r3, #0]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	3304      	adds	r3, #4
 80105c2:	0019      	movs	r1, r3
 80105c4:	0010      	movs	r0, r2
 80105c6:	f7fd ffb8 	bl	800e53a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80105ca:	697b      	ldr	r3, [r7, #20]
}
 80105cc:	0018      	movs	r0, r3
 80105ce:	46bd      	mov	sp, r7
 80105d0:	b006      	add	sp, #24
 80105d2:	bd80      	pop	{r7, pc}
 80105d4:	200012a4 	.word	0x200012a4
 80105d8:	200012a0 	.word	0x200012a0

080105dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80105dc:	b590      	push	{r4, r7, lr}
 80105de:	b08d      	sub	sp, #52	; 0x34
 80105e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80105e2:	e07f      	b.n	80106e4 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80105e4:	2208      	movs	r2, #8
 80105e6:	18bb      	adds	r3, r7, r2
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	da0f      	bge.n	801060e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80105ee:	18bb      	adds	r3, r7, r2
 80105f0:	3304      	adds	r3, #4
 80105f2:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80105f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d101      	bne.n	80105fe <prvProcessReceivedCommands+0x22>
 80105fa:	b672      	cpsid	i
 80105fc:	e7fe      	b.n	80105fc <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80105fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010604:	6858      	ldr	r0, [r3, #4]
 8010606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010608:	689b      	ldr	r3, [r3, #8]
 801060a:	0019      	movs	r1, r3
 801060c:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801060e:	2208      	movs	r2, #8
 8010610:	18bb      	adds	r3, r7, r2
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	db64      	blt.n	80106e2 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010618:	18bb      	adds	r3, r7, r2
 801061a:	689b      	ldr	r3, [r3, #8]
 801061c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801061e:	6a3b      	ldr	r3, [r7, #32]
 8010620:	695b      	ldr	r3, [r3, #20]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d004      	beq.n	8010630 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010626:	6a3b      	ldr	r3, [r7, #32]
 8010628:	3304      	adds	r3, #4
 801062a:	0018      	movs	r0, r3
 801062c:	f7fd ffbb 	bl	800e5a6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010630:	1d3b      	adds	r3, r7, #4
 8010632:	0018      	movs	r0, r3
 8010634:	f7ff ff70 	bl	8010518 <prvSampleTimeNow>
 8010638:	0003      	movs	r3, r0
 801063a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 801063c:	2308      	movs	r3, #8
 801063e:	18fb      	adds	r3, r7, r3
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	2b09      	cmp	r3, #9
 8010644:	d84e      	bhi.n	80106e4 <prvProcessReceivedCommands+0x108>
 8010646:	009a      	lsls	r2, r3, #2
 8010648:	4b2e      	ldr	r3, [pc, #184]	; (8010704 <prvProcessReceivedCommands+0x128>)
 801064a:	18d3      	adds	r3, r2, r3
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010650:	2408      	movs	r4, #8
 8010652:	193b      	adds	r3, r7, r4
 8010654:	685a      	ldr	r2, [r3, #4]
 8010656:	6a3b      	ldr	r3, [r7, #32]
 8010658:	699b      	ldr	r3, [r3, #24]
 801065a:	18d1      	adds	r1, r2, r3
 801065c:	193b      	adds	r3, r7, r4
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	69fa      	ldr	r2, [r7, #28]
 8010662:	6a38      	ldr	r0, [r7, #32]
 8010664:	f7ff ff78 	bl	8010558 <prvInsertTimerInActiveList>
 8010668:	1e03      	subs	r3, r0, #0
 801066a:	d03b      	beq.n	80106e4 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801066c:	6a3b      	ldr	r3, [r7, #32]
 801066e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010670:	6a3a      	ldr	r2, [r7, #32]
 8010672:	0010      	movs	r0, r2
 8010674:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010676:	6a3b      	ldr	r3, [r7, #32]
 8010678:	69db      	ldr	r3, [r3, #28]
 801067a:	2b01      	cmp	r3, #1
 801067c:	d132      	bne.n	80106e4 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801067e:	193b      	adds	r3, r7, r4
 8010680:	685a      	ldr	r2, [r3, #4]
 8010682:	6a3b      	ldr	r3, [r7, #32]
 8010684:	699b      	ldr	r3, [r3, #24]
 8010686:	18d2      	adds	r2, r2, r3
 8010688:	6a38      	ldr	r0, [r7, #32]
 801068a:	2300      	movs	r3, #0
 801068c:	9300      	str	r3, [sp, #0]
 801068e:	2300      	movs	r3, #0
 8010690:	2100      	movs	r1, #0
 8010692:	f7ff fe45 	bl	8010320 <xTimerGenericCommand>
 8010696:	0003      	movs	r3, r0
 8010698:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 801069a:	69bb      	ldr	r3, [r7, #24]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d121      	bne.n	80106e4 <prvProcessReceivedCommands+0x108>
 80106a0:	b672      	cpsid	i
 80106a2:	e7fe      	b.n	80106a2 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80106a4:	2308      	movs	r3, #8
 80106a6:	18fb      	adds	r3, r7, r3
 80106a8:	685a      	ldr	r2, [r3, #4]
 80106aa:	6a3b      	ldr	r3, [r7, #32]
 80106ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80106ae:	6a3b      	ldr	r3, [r7, #32]
 80106b0:	699b      	ldr	r3, [r3, #24]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d101      	bne.n	80106ba <prvProcessReceivedCommands+0xde>
 80106b6:	b672      	cpsid	i
 80106b8:	e7fe      	b.n	80106b8 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80106ba:	6a3b      	ldr	r3, [r7, #32]
 80106bc:	699a      	ldr	r2, [r3, #24]
 80106be:	69fb      	ldr	r3, [r7, #28]
 80106c0:	18d1      	adds	r1, r2, r3
 80106c2:	69fb      	ldr	r3, [r7, #28]
 80106c4:	69fa      	ldr	r2, [r7, #28]
 80106c6:	6a38      	ldr	r0, [r7, #32]
 80106c8:	f7ff ff46 	bl	8010558 <prvInsertTimerInActiveList>
					break;
 80106cc:	e00a      	b.n	80106e4 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80106ce:	6a3b      	ldr	r3, [r7, #32]
 80106d0:	222c      	movs	r2, #44	; 0x2c
 80106d2:	5c9b      	ldrb	r3, [r3, r2]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d105      	bne.n	80106e4 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 80106d8:	6a3b      	ldr	r3, [r7, #32]
 80106da:	0018      	movs	r0, r3
 80106dc:	f000 fac6 	bl	8010c6c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80106e0:	e000      	b.n	80106e4 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80106e2:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80106e4:	4b08      	ldr	r3, [pc, #32]	; (8010708 <prvProcessReceivedCommands+0x12c>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2208      	movs	r2, #8
 80106ea:	18b9      	adds	r1, r7, r2
 80106ec:	2200      	movs	r2, #0
 80106ee:	0018      	movs	r0, r3
 80106f0:	f7fe fa63 	bl	800ebba <xQueueReceive>
 80106f4:	1e03      	subs	r3, r0, #0
 80106f6:	d000      	beq.n	80106fa <prvProcessReceivedCommands+0x11e>
 80106f8:	e774      	b.n	80105e4 <prvProcessReceivedCommands+0x8>
	}
}
 80106fa:	46c0      	nop			; (mov r8, r8)
 80106fc:	46c0      	nop			; (mov r8, r8)
 80106fe:	46bd      	mov	sp, r7
 8010700:	b00b      	add	sp, #44	; 0x2c
 8010702:	bd90      	pop	{r4, r7, pc}
 8010704:	080133e0 	.word	0x080133e0
 8010708:	200012a8 	.word	0x200012a8

0801070c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b088      	sub	sp, #32
 8010710:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010712:	e03e      	b.n	8010792 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010714:	4b28      	ldr	r3, [pc, #160]	; (80107b8 <prvSwitchTimerLists+0xac>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	68db      	ldr	r3, [r3, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801071e:	4b26      	ldr	r3, [pc, #152]	; (80107b8 <prvSwitchTimerLists+0xac>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	68db      	ldr	r3, [r3, #12]
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	3304      	adds	r3, #4
 801072c:	0018      	movs	r0, r3
 801072e:	f7fd ff3a 	bl	800e5a6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010736:	68fa      	ldr	r2, [r7, #12]
 8010738:	0010      	movs	r0, r2
 801073a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	69db      	ldr	r3, [r3, #28]
 8010740:	2b01      	cmp	r3, #1
 8010742:	d126      	bne.n	8010792 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	699b      	ldr	r3, [r3, #24]
 8010748:	693a      	ldr	r2, [r7, #16]
 801074a:	18d3      	adds	r3, r2, r3
 801074c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801074e:	68ba      	ldr	r2, [r7, #8]
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	429a      	cmp	r2, r3
 8010754:	d90e      	bls.n	8010774 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	68ba      	ldr	r2, [r7, #8]
 801075a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	68fa      	ldr	r2, [r7, #12]
 8010760:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010762:	4b15      	ldr	r3, [pc, #84]	; (80107b8 <prvSwitchTimerLists+0xac>)
 8010764:	681a      	ldr	r2, [r3, #0]
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	3304      	adds	r3, #4
 801076a:	0019      	movs	r1, r3
 801076c:	0010      	movs	r0, r2
 801076e:	f7fd fee4 	bl	800e53a <vListInsert>
 8010772:	e00e      	b.n	8010792 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010774:	693a      	ldr	r2, [r7, #16]
 8010776:	68f8      	ldr	r0, [r7, #12]
 8010778:	2300      	movs	r3, #0
 801077a:	9300      	str	r3, [sp, #0]
 801077c:	2300      	movs	r3, #0
 801077e:	2100      	movs	r1, #0
 8010780:	f7ff fdce 	bl	8010320 <xTimerGenericCommand>
 8010784:	0003      	movs	r3, r0
 8010786:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d101      	bne.n	8010792 <prvSwitchTimerLists+0x86>
 801078e:	b672      	cpsid	i
 8010790:	e7fe      	b.n	8010790 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010792:	4b09      	ldr	r3, [pc, #36]	; (80107b8 <prvSwitchTimerLists+0xac>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d1bb      	bne.n	8010714 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801079c:	4b06      	ldr	r3, [pc, #24]	; (80107b8 <prvSwitchTimerLists+0xac>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80107a2:	4b06      	ldr	r3, [pc, #24]	; (80107bc <prvSwitchTimerLists+0xb0>)
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	4b04      	ldr	r3, [pc, #16]	; (80107b8 <prvSwitchTimerLists+0xac>)
 80107a8:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80107aa:	4b04      	ldr	r3, [pc, #16]	; (80107bc <prvSwitchTimerLists+0xb0>)
 80107ac:	697a      	ldr	r2, [r7, #20]
 80107ae:	601a      	str	r2, [r3, #0]
}
 80107b0:	46c0      	nop			; (mov r8, r8)
 80107b2:	46bd      	mov	sp, r7
 80107b4:	b006      	add	sp, #24
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	200012a0 	.word	0x200012a0
 80107bc:	200012a4 	.word	0x200012a4

080107c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80107c6:	f000 f913 	bl	80109f0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80107ca:	4b16      	ldr	r3, [pc, #88]	; (8010824 <prvCheckForValidListAndQueue+0x64>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d123      	bne.n	801081a <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80107d2:	4b15      	ldr	r3, [pc, #84]	; (8010828 <prvCheckForValidListAndQueue+0x68>)
 80107d4:	0018      	movs	r0, r3
 80107d6:	f7fd fe65 	bl	800e4a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80107da:	4b14      	ldr	r3, [pc, #80]	; (801082c <prvCheckForValidListAndQueue+0x6c>)
 80107dc:	0018      	movs	r0, r3
 80107de:	f7fd fe61 	bl	800e4a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80107e2:	4b13      	ldr	r3, [pc, #76]	; (8010830 <prvCheckForValidListAndQueue+0x70>)
 80107e4:	4a10      	ldr	r2, [pc, #64]	; (8010828 <prvCheckForValidListAndQueue+0x68>)
 80107e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80107e8:	4b12      	ldr	r3, [pc, #72]	; (8010834 <prvCheckForValidListAndQueue+0x74>)
 80107ea:	4a10      	ldr	r2, [pc, #64]	; (801082c <prvCheckForValidListAndQueue+0x6c>)
 80107ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80107ee:	4b12      	ldr	r3, [pc, #72]	; (8010838 <prvCheckForValidListAndQueue+0x78>)
 80107f0:	4a12      	ldr	r2, [pc, #72]	; (801083c <prvCheckForValidListAndQueue+0x7c>)
 80107f2:	2100      	movs	r1, #0
 80107f4:	9100      	str	r1, [sp, #0]
 80107f6:	2110      	movs	r1, #16
 80107f8:	200a      	movs	r0, #10
 80107fa:	f7fd ff50 	bl	800e69e <xQueueGenericCreateStatic>
 80107fe:	0002      	movs	r2, r0
 8010800:	4b08      	ldr	r3, [pc, #32]	; (8010824 <prvCheckForValidListAndQueue+0x64>)
 8010802:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010804:	4b07      	ldr	r3, [pc, #28]	; (8010824 <prvCheckForValidListAndQueue+0x64>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d006      	beq.n	801081a <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801080c:	4b05      	ldr	r3, [pc, #20]	; (8010824 <prvCheckForValidListAndQueue+0x64>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4a0b      	ldr	r2, [pc, #44]	; (8010840 <prvCheckForValidListAndQueue+0x80>)
 8010812:	0011      	movs	r1, r2
 8010814:	0018      	movs	r0, r3
 8010816:	f7fe fc93 	bl	800f140 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801081a:	f000 f8fb 	bl	8010a14 <vPortExitCritical>
}
 801081e:	46c0      	nop			; (mov r8, r8)
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	200012a8 	.word	0x200012a8
 8010828:	20001278 	.word	0x20001278
 801082c:	2000128c 	.word	0x2000128c
 8010830:	200012a0 	.word	0x200012a0
 8010834:	200012a4 	.word	0x200012a4
 8010838:	20001354 	.word	0x20001354
 801083c:	200012b4 	.word	0x200012b4
 8010840:	08013230 	.word	0x08013230

08010844 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b084      	sub	sp, #16
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d101      	bne.n	801085a <pvTimerGetTimerID+0x16>
 8010856:	b672      	cpsid	i
 8010858:	e7fe      	b.n	8010858 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 801085a:	f000 f8c9 	bl	80109f0 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	6a1b      	ldr	r3, [r3, #32]
 8010862:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8010864:	f000 f8d6 	bl	8010a14 <vPortExitCritical>

	return pvReturn;
 8010868:	68bb      	ldr	r3, [r7, #8]
}
 801086a:	0018      	movs	r0, r3
 801086c:	46bd      	mov	sp, r7
 801086e:	b004      	add	sp, #16
 8010870:	bd80      	pop	{r7, pc}
	...

08010874 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010874:	b580      	push	{r7, lr}
 8010876:	b08a      	sub	sp, #40	; 0x28
 8010878:	af00      	add	r7, sp, #0
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	607a      	str	r2, [r7, #4]
 8010880:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8010882:	2114      	movs	r1, #20
 8010884:	187b      	adds	r3, r7, r1
 8010886:	2202      	movs	r2, #2
 8010888:	4252      	negs	r2, r2
 801088a:	601a      	str	r2, [r3, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801088c:	187b      	adds	r3, r7, r1
 801088e:	68fa      	ldr	r2, [r7, #12]
 8010890:	605a      	str	r2, [r3, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010892:	187b      	adds	r3, r7, r1
 8010894:	68ba      	ldr	r2, [r7, #8]
 8010896:	609a      	str	r2, [r3, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010898:	187b      	adds	r3, r7, r1
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	60da      	str	r2, [r3, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801089e:	4b07      	ldr	r3, [pc, #28]	; (80108bc <xTimerPendFunctionCallFromISR+0x48>)
 80108a0:	6818      	ldr	r0, [r3, #0]
 80108a2:	683a      	ldr	r2, [r7, #0]
 80108a4:	1879      	adds	r1, r7, r1
 80108a6:	2300      	movs	r3, #0
 80108a8:	f7fe f916 	bl	800ead8 <xQueueGenericSendFromISR>
 80108ac:	0003      	movs	r3, r0
 80108ae:	627b      	str	r3, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80108b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80108b2:	0018      	movs	r0, r3
 80108b4:	46bd      	mov	sp, r7
 80108b6:	b00a      	add	sp, #40	; 0x28
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	46c0      	nop			; (mov r8, r8)
 80108bc:	200012a8 	.word	0x200012a8

080108c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	3b04      	subs	r3, #4
 80108d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2280      	movs	r2, #128	; 0x80
 80108d6:	0452      	lsls	r2, r2, #17
 80108d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	3b04      	subs	r3, #4
 80108de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80108e0:	68ba      	ldr	r2, [r7, #8]
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	3b04      	subs	r3, #4
 80108ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80108ec:	4a08      	ldr	r2, [pc, #32]	; (8010910 <pxPortInitialiseStack+0x50>)
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	3b14      	subs	r3, #20
 80108f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80108f8:	687a      	ldr	r2, [r7, #4]
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	3b20      	subs	r3, #32
 8010902:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010904:	68fb      	ldr	r3, [r7, #12]
}
 8010906:	0018      	movs	r0, r3
 8010908:	46bd      	mov	sp, r7
 801090a:	b004      	add	sp, #16
 801090c:	bd80      	pop	{r7, pc}
 801090e:	46c0      	nop			; (mov r8, r8)
 8010910:	08010915 	.word	0x08010915

08010914 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801091a:	2300      	movs	r3, #0
 801091c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801091e:	4b08      	ldr	r3, [pc, #32]	; (8010940 <prvTaskExitError+0x2c>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	3301      	adds	r3, #1
 8010924:	d001      	beq.n	801092a <prvTaskExitError+0x16>
 8010926:	b672      	cpsid	i
 8010928:	e7fe      	b.n	8010928 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 801092a:	b672      	cpsid	i
	while( ulDummy == 0 )
 801092c:	46c0      	nop			; (mov r8, r8)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d0fc      	beq.n	801092e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010934:	46c0      	nop			; (mov r8, r8)
 8010936:	46c0      	nop			; (mov r8, r8)
 8010938:	46bd      	mov	sp, r7
 801093a:	b002      	add	sp, #8
 801093c:	bd80      	pop	{r7, pc}
 801093e:	46c0      	nop			; (mov r8, r8)
 8010940:	20000174 	.word	0x20000174

08010944 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8010948:	46c0      	nop			; (mov r8, r8)
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}
	...

08010950 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010950:	4a0b      	ldr	r2, [pc, #44]	; (8010980 <pxCurrentTCBConst2>)
 8010952:	6813      	ldr	r3, [r2, #0]
 8010954:	6818      	ldr	r0, [r3, #0]
 8010956:	3020      	adds	r0, #32
 8010958:	f380 8809 	msr	PSP, r0
 801095c:	2002      	movs	r0, #2
 801095e:	f380 8814 	msr	CONTROL, r0
 8010962:	f3bf 8f6f 	isb	sy
 8010966:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8010968:	46ae      	mov	lr, r5
 801096a:	bc08      	pop	{r3}
 801096c:	bc04      	pop	{r2}
 801096e:	b662      	cpsie	i
 8010970:	4718      	bx	r3
 8010972:	46c0      	nop			; (mov r8, r8)
 8010974:	46c0      	nop			; (mov r8, r8)
 8010976:	46c0      	nop			; (mov r8, r8)
 8010978:	46c0      	nop			; (mov r8, r8)
 801097a:	46c0      	nop			; (mov r8, r8)
 801097c:	46c0      	nop			; (mov r8, r8)
 801097e:	46c0      	nop			; (mov r8, r8)

08010980 <pxCurrentTCBConst2>:
 8010980:	20000d78 	.word	0x20000d78
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8010984:	46c0      	nop			; (mov r8, r8)
 8010986:	46c0      	nop			; (mov r8, r8)

08010988 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010988:	b580      	push	{r7, lr}
 801098a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 801098c:	4b0e      	ldr	r3, [pc, #56]	; (80109c8 <xPortStartScheduler+0x40>)
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	4b0d      	ldr	r3, [pc, #52]	; (80109c8 <xPortStartScheduler+0x40>)
 8010992:	21ff      	movs	r1, #255	; 0xff
 8010994:	0409      	lsls	r1, r1, #16
 8010996:	430a      	orrs	r2, r1
 8010998:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 801099a:	4b0b      	ldr	r3, [pc, #44]	; (80109c8 <xPortStartScheduler+0x40>)
 801099c:	681a      	ldr	r2, [r3, #0]
 801099e:	4b0a      	ldr	r3, [pc, #40]	; (80109c8 <xPortStartScheduler+0x40>)
 80109a0:	21ff      	movs	r1, #255	; 0xff
 80109a2:	0609      	lsls	r1, r1, #24
 80109a4:	430a      	orrs	r2, r1
 80109a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80109a8:	f000 f898 	bl	8010adc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80109ac:	4b07      	ldr	r3, [pc, #28]	; (80109cc <xPortStartScheduler+0x44>)
 80109ae:	2200      	movs	r2, #0
 80109b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80109b2:	f7ff ffcd 	bl	8010950 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80109b6:	f7fe ff6b 	bl	800f890 <vTaskSwitchContext>
	prvTaskExitError();
 80109ba:	f7ff ffab 	bl	8010914 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80109be:	2300      	movs	r3, #0
}
 80109c0:	0018      	movs	r0, r3
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	46c0      	nop			; (mov r8, r8)
 80109c8:	e000ed20 	.word	0xe000ed20
 80109cc:	20000174 	.word	0x20000174

080109d0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80109d4:	4b05      	ldr	r3, [pc, #20]	; (80109ec <vPortYield+0x1c>)
 80109d6:	2280      	movs	r2, #128	; 0x80
 80109d8:	0552      	lsls	r2, r2, #21
 80109da:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80109dc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80109e0:	f3bf 8f6f 	isb	sy
}
 80109e4:	46c0      	nop			; (mov r8, r8)
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	46c0      	nop			; (mov r8, r8)
 80109ec:	e000ed04 	.word	0xe000ed04

080109f0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80109f4:	b672      	cpsid	i
    uxCriticalNesting++;
 80109f6:	4b06      	ldr	r3, [pc, #24]	; (8010a10 <vPortEnterCritical+0x20>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	1c5a      	adds	r2, r3, #1
 80109fc:	4b04      	ldr	r3, [pc, #16]	; (8010a10 <vPortEnterCritical+0x20>)
 80109fe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8010a00:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010a04:	f3bf 8f6f 	isb	sy
}
 8010a08:	46c0      	nop			; (mov r8, r8)
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	46c0      	nop			; (mov r8, r8)
 8010a10:	20000174 	.word	0x20000174

08010a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010a18:	4b09      	ldr	r3, [pc, #36]	; (8010a40 <vPortExitCritical+0x2c>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d101      	bne.n	8010a24 <vPortExitCritical+0x10>
 8010a20:	b672      	cpsid	i
 8010a22:	e7fe      	b.n	8010a22 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8010a24:	4b06      	ldr	r3, [pc, #24]	; (8010a40 <vPortExitCritical+0x2c>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	1e5a      	subs	r2, r3, #1
 8010a2a:	4b05      	ldr	r3, [pc, #20]	; (8010a40 <vPortExitCritical+0x2c>)
 8010a2c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8010a2e:	4b04      	ldr	r3, [pc, #16]	; (8010a40 <vPortExitCritical+0x2c>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d100      	bne.n	8010a38 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8010a36:	b662      	cpsie	i
    }
}
 8010a38:	46c0      	nop			; (mov r8, r8)
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
 8010a3e:	46c0      	nop			; (mov r8, r8)
 8010a40:	20000174 	.word	0x20000174

08010a44 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8010a44:	f3ef 8010 	mrs	r0, PRIMASK
 8010a48:	b672      	cpsid	i
 8010a4a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8010a4c:	46c0      	nop			; (mov r8, r8)
 8010a4e:	0018      	movs	r0, r3

08010a50 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8010a50:	f380 8810 	msr	PRIMASK, r0
 8010a54:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8010a56:	46c0      	nop			; (mov r8, r8)
	...

08010a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010a60:	f3ef 8009 	mrs	r0, PSP
 8010a64:	4b0e      	ldr	r3, [pc, #56]	; (8010aa0 <pxCurrentTCBConst>)
 8010a66:	681a      	ldr	r2, [r3, #0]
 8010a68:	3820      	subs	r0, #32
 8010a6a:	6010      	str	r0, [r2, #0]
 8010a6c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010a6e:	4644      	mov	r4, r8
 8010a70:	464d      	mov	r5, r9
 8010a72:	4656      	mov	r6, sl
 8010a74:	465f      	mov	r7, fp
 8010a76:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010a78:	b508      	push	{r3, lr}
 8010a7a:	b672      	cpsid	i
 8010a7c:	f7fe ff08 	bl	800f890 <vTaskSwitchContext>
 8010a80:	b662      	cpsie	i
 8010a82:	bc0c      	pop	{r2, r3}
 8010a84:	6811      	ldr	r1, [r2, #0]
 8010a86:	6808      	ldr	r0, [r1, #0]
 8010a88:	3010      	adds	r0, #16
 8010a8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010a8c:	46a0      	mov	r8, r4
 8010a8e:	46a9      	mov	r9, r5
 8010a90:	46b2      	mov	sl, r6
 8010a92:	46bb      	mov	fp, r7
 8010a94:	f380 8809 	msr	PSP, r0
 8010a98:	3820      	subs	r0, #32
 8010a9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010a9c:	4718      	bx	r3
 8010a9e:	46c0      	nop			; (mov r8, r8)

08010aa0 <pxCurrentTCBConst>:
 8010aa0:	20000d78 	.word	0x20000d78
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8010aa4:	46c0      	nop			; (mov r8, r8)
 8010aa6:	46c0      	nop			; (mov r8, r8)

08010aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8010aae:	f7ff ffc9 	bl	8010a44 <ulSetInterruptMaskFromISR>
 8010ab2:	0003      	movs	r3, r0
 8010ab4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010ab6:	f7fe fe37 	bl	800f728 <xTaskIncrementTick>
 8010aba:	1e03      	subs	r3, r0, #0
 8010abc:	d003      	beq.n	8010ac6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8010abe:	4b06      	ldr	r3, [pc, #24]	; (8010ad8 <SysTick_Handler+0x30>)
 8010ac0:	2280      	movs	r2, #128	; 0x80
 8010ac2:	0552      	lsls	r2, r2, #21
 8010ac4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	0018      	movs	r0, r3
 8010aca:	f7ff ffc1 	bl	8010a50 <vClearInterruptMaskFromISR>
}
 8010ace:	46c0      	nop			; (mov r8, r8)
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	b002      	add	sp, #8
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	46c0      	nop			; (mov r8, r8)
 8010ad8:	e000ed04 	.word	0xe000ed04

08010adc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8010ae0:	4b0b      	ldr	r3, [pc, #44]	; (8010b10 <prvSetupTimerInterrupt+0x34>)
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8010ae6:	4b0b      	ldr	r3, [pc, #44]	; (8010b14 <prvSetupTimerInterrupt+0x38>)
 8010ae8:	2200      	movs	r2, #0
 8010aea:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010aec:	4b0a      	ldr	r3, [pc, #40]	; (8010b18 <prvSetupTimerInterrupt+0x3c>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	22fa      	movs	r2, #250	; 0xfa
 8010af2:	0091      	lsls	r1, r2, #2
 8010af4:	0018      	movs	r0, r3
 8010af6:	f7ef fb11 	bl	800011c <__udivsi3>
 8010afa:	0003      	movs	r3, r0
 8010afc:	001a      	movs	r2, r3
 8010afe:	4b07      	ldr	r3, [pc, #28]	; (8010b1c <prvSetupTimerInterrupt+0x40>)
 8010b00:	3a01      	subs	r2, #1
 8010b02:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8010b04:	4b02      	ldr	r3, [pc, #8]	; (8010b10 <prvSetupTimerInterrupt+0x34>)
 8010b06:	2207      	movs	r2, #7
 8010b08:	601a      	str	r2, [r3, #0]
}
 8010b0a:	46c0      	nop			; (mov r8, r8)
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}
 8010b10:	e000e010 	.word	0xe000e010
 8010b14:	e000e018 	.word	0xe000e018
 8010b18:	20000000 	.word	0x20000000
 8010b1c:	e000e014 	.word	0xe000e014

08010b20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b086      	sub	sp, #24
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8010b2c:	f7fe fd56 	bl	800f5dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010b30:	4b49      	ldr	r3, [pc, #292]	; (8010c58 <pvPortMalloc+0x138>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d101      	bne.n	8010b3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010b38:	f000 f8e0 	bl	8010cfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010b3c:	4b47      	ldr	r3, [pc, #284]	; (8010c5c <pvPortMalloc+0x13c>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	687a      	ldr	r2, [r7, #4]
 8010b42:	4013      	ands	r3, r2
 8010b44:	d000      	beq.n	8010b48 <pvPortMalloc+0x28>
 8010b46:	e079      	b.n	8010c3c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d012      	beq.n	8010b74 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8010b4e:	2208      	movs	r2, #8
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	189b      	adds	r3, r3, r2
 8010b54:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2207      	movs	r2, #7
 8010b5a:	4013      	ands	r3, r2
 8010b5c:	d00a      	beq.n	8010b74 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2207      	movs	r2, #7
 8010b62:	4393      	bics	r3, r2
 8010b64:	3308      	adds	r3, #8
 8010b66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2207      	movs	r2, #7
 8010b6c:	4013      	ands	r3, r2
 8010b6e:	d001      	beq.n	8010b74 <pvPortMalloc+0x54>
 8010b70:	b672      	cpsid	i
 8010b72:	e7fe      	b.n	8010b72 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d060      	beq.n	8010c3c <pvPortMalloc+0x11c>
 8010b7a:	4b39      	ldr	r3, [pc, #228]	; (8010c60 <pvPortMalloc+0x140>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	687a      	ldr	r2, [r7, #4]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d85b      	bhi.n	8010c3c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010b84:	4b37      	ldr	r3, [pc, #220]	; (8010c64 <pvPortMalloc+0x144>)
 8010b86:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8010b88:	4b36      	ldr	r3, [pc, #216]	; (8010c64 <pvPortMalloc+0x144>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010b8e:	e004      	b.n	8010b9a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d903      	bls.n	8010bac <pvPortMalloc+0x8c>
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d1f1      	bne.n	8010b90 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010bac:	4b2a      	ldr	r3, [pc, #168]	; (8010c58 <pvPortMalloc+0x138>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	697a      	ldr	r2, [r7, #20]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d042      	beq.n	8010c3c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	2208      	movs	r2, #8
 8010bbc:	189b      	adds	r3, r3, r2
 8010bbe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	681a      	ldr	r2, [r3, #0]
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	685a      	ldr	r2, [r3, #4]
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	1ad2      	subs	r2, r2, r3
 8010bd0:	2308      	movs	r3, #8
 8010bd2:	005b      	lsls	r3, r3, #1
 8010bd4:	429a      	cmp	r2, r3
 8010bd6:	d916      	bls.n	8010c06 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010bd8:	697a      	ldr	r2, [r7, #20]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	18d3      	adds	r3, r2, r3
 8010bde:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	2207      	movs	r2, #7
 8010be4:	4013      	ands	r3, r2
 8010be6:	d001      	beq.n	8010bec <pvPortMalloc+0xcc>
 8010be8:	b672      	cpsid	i
 8010bea:	e7fe      	b.n	8010bea <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	685a      	ldr	r2, [r3, #4]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	1ad2      	subs	r2, r2, r3
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	0018      	movs	r0, r3
 8010c02:	f000 f8db 	bl	8010dbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010c06:	4b16      	ldr	r3, [pc, #88]	; (8010c60 <pvPortMalloc+0x140>)
 8010c08:	681a      	ldr	r2, [r3, #0]
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	685b      	ldr	r3, [r3, #4]
 8010c0e:	1ad2      	subs	r2, r2, r3
 8010c10:	4b13      	ldr	r3, [pc, #76]	; (8010c60 <pvPortMalloc+0x140>)
 8010c12:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010c14:	4b12      	ldr	r3, [pc, #72]	; (8010c60 <pvPortMalloc+0x140>)
 8010c16:	681a      	ldr	r2, [r3, #0]
 8010c18:	4b13      	ldr	r3, [pc, #76]	; (8010c68 <pvPortMalloc+0x148>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d203      	bcs.n	8010c28 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010c20:	4b0f      	ldr	r3, [pc, #60]	; (8010c60 <pvPortMalloc+0x140>)
 8010c22:	681a      	ldr	r2, [r3, #0]
 8010c24:	4b10      	ldr	r3, [pc, #64]	; (8010c68 <pvPortMalloc+0x148>)
 8010c26:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	685a      	ldr	r2, [r3, #4]
 8010c2c:	4b0b      	ldr	r3, [pc, #44]	; (8010c5c <pvPortMalloc+0x13c>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	431a      	orrs	r2, r3
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	2200      	movs	r2, #0
 8010c3a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010c3c:	f7fe fcda 	bl	800f5f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	2207      	movs	r2, #7
 8010c44:	4013      	ands	r3, r2
 8010c46:	d001      	beq.n	8010c4c <pvPortMalloc+0x12c>
 8010c48:	b672      	cpsid	i
 8010c4a:	e7fe      	b.n	8010c4a <pvPortMalloc+0x12a>
	return pvReturn;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
}
 8010c4e:	0018      	movs	r0, r3
 8010c50:	46bd      	mov	sp, r7
 8010c52:	b006      	add	sp, #24
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	46c0      	nop			; (mov r8, r8)
 8010c58:	20001fac 	.word	0x20001fac
 8010c5c:	20001fb8 	.word	0x20001fb8
 8010c60:	20001fb0 	.word	0x20001fb0
 8010c64:	20001fa4 	.word	0x20001fa4
 8010c68:	20001fb4 	.word	0x20001fb4

08010c6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b084      	sub	sp, #16
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d035      	beq.n	8010cea <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010c7e:	2308      	movs	r3, #8
 8010c80:	425b      	negs	r3, r3
 8010c82:	68fa      	ldr	r2, [r7, #12]
 8010c84:	18d3      	adds	r3, r2, r3
 8010c86:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	685a      	ldr	r2, [r3, #4]
 8010c90:	4b18      	ldr	r3, [pc, #96]	; (8010cf4 <vPortFree+0x88>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	4013      	ands	r3, r2
 8010c96:	d101      	bne.n	8010c9c <vPortFree+0x30>
 8010c98:	b672      	cpsid	i
 8010c9a:	e7fe      	b.n	8010c9a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d001      	beq.n	8010ca8 <vPortFree+0x3c>
 8010ca4:	b672      	cpsid	i
 8010ca6:	e7fe      	b.n	8010ca6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	685a      	ldr	r2, [r3, #4]
 8010cac:	4b11      	ldr	r3, [pc, #68]	; (8010cf4 <vPortFree+0x88>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	4013      	ands	r3, r2
 8010cb2:	d01a      	beq.n	8010cea <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d116      	bne.n	8010cea <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	685a      	ldr	r2, [r3, #4]
 8010cc0:	4b0c      	ldr	r3, [pc, #48]	; (8010cf4 <vPortFree+0x88>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	43db      	mvns	r3, r3
 8010cc6:	401a      	ands	r2, r3
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010ccc:	f7fe fc86 	bl	800f5dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	685a      	ldr	r2, [r3, #4]
 8010cd4:	4b08      	ldr	r3, [pc, #32]	; (8010cf8 <vPortFree+0x8c>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	18d2      	adds	r2, r2, r3
 8010cda:	4b07      	ldr	r3, [pc, #28]	; (8010cf8 <vPortFree+0x8c>)
 8010cdc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	0018      	movs	r0, r3
 8010ce2:	f000 f86b 	bl	8010dbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010ce6:	f7fe fc85 	bl	800f5f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010cea:	46c0      	nop			; (mov r8, r8)
 8010cec:	46bd      	mov	sp, r7
 8010cee:	b004      	add	sp, #16
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	46c0      	nop			; (mov r8, r8)
 8010cf4:	20001fb8 	.word	0x20001fb8
 8010cf8:	20001fb0 	.word	0x20001fb0

08010cfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b084      	sub	sp, #16
 8010d00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010d02:	23c0      	movs	r3, #192	; 0xc0
 8010d04:	011b      	lsls	r3, r3, #4
 8010d06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010d08:	4b26      	ldr	r3, [pc, #152]	; (8010da4 <prvHeapInit+0xa8>)
 8010d0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	2207      	movs	r2, #7
 8010d10:	4013      	ands	r3, r2
 8010d12:	d00c      	beq.n	8010d2e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	3307      	adds	r3, #7
 8010d18:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	2207      	movs	r2, #7
 8010d1e:	4393      	bics	r3, r2
 8010d20:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010d22:	68ba      	ldr	r2, [r7, #8]
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	1ad2      	subs	r2, r2, r3
 8010d28:	4b1e      	ldr	r3, [pc, #120]	; (8010da4 <prvHeapInit+0xa8>)
 8010d2a:	18d3      	adds	r3, r2, r3
 8010d2c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010d32:	4b1d      	ldr	r3, [pc, #116]	; (8010da8 <prvHeapInit+0xac>)
 8010d34:	687a      	ldr	r2, [r7, #4]
 8010d36:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010d38:	4b1b      	ldr	r3, [pc, #108]	; (8010da8 <prvHeapInit+0xac>)
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	68ba      	ldr	r2, [r7, #8]
 8010d42:	18d3      	adds	r3, r2, r3
 8010d44:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010d46:	2208      	movs	r2, #8
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	1a9b      	subs	r3, r3, r2
 8010d4c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	2207      	movs	r2, #7
 8010d52:	4393      	bics	r3, r2
 8010d54:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010d56:	68fa      	ldr	r2, [r7, #12]
 8010d58:	4b14      	ldr	r3, [pc, #80]	; (8010dac <prvHeapInit+0xb0>)
 8010d5a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8010d5c:	4b13      	ldr	r3, [pc, #76]	; (8010dac <prvHeapInit+0xb0>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	2200      	movs	r2, #0
 8010d62:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010d64:	4b11      	ldr	r3, [pc, #68]	; (8010dac <prvHeapInit+0xb0>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	68fa      	ldr	r2, [r7, #12]
 8010d74:	1ad2      	subs	r2, r2, r3
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010d7a:	4b0c      	ldr	r3, [pc, #48]	; (8010dac <prvHeapInit+0xb0>)
 8010d7c:	681a      	ldr	r2, [r3, #0]
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	685a      	ldr	r2, [r3, #4]
 8010d86:	4b0a      	ldr	r3, [pc, #40]	; (8010db0 <prvHeapInit+0xb4>)
 8010d88:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	685a      	ldr	r2, [r3, #4]
 8010d8e:	4b09      	ldr	r3, [pc, #36]	; (8010db4 <prvHeapInit+0xb8>)
 8010d90:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010d92:	4b09      	ldr	r3, [pc, #36]	; (8010db8 <prvHeapInit+0xbc>)
 8010d94:	2280      	movs	r2, #128	; 0x80
 8010d96:	0612      	lsls	r2, r2, #24
 8010d98:	601a      	str	r2, [r3, #0]
}
 8010d9a:	46c0      	nop			; (mov r8, r8)
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	b004      	add	sp, #16
 8010da0:	bd80      	pop	{r7, pc}
 8010da2:	46c0      	nop			; (mov r8, r8)
 8010da4:	200013a4 	.word	0x200013a4
 8010da8:	20001fa4 	.word	0x20001fa4
 8010dac:	20001fac 	.word	0x20001fac
 8010db0:	20001fb4 	.word	0x20001fb4
 8010db4:	20001fb0 	.word	0x20001fb0
 8010db8:	20001fb8 	.word	0x20001fb8

08010dbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010dc4:	4b27      	ldr	r3, [pc, #156]	; (8010e64 <prvInsertBlockIntoFreeList+0xa8>)
 8010dc6:	60fb      	str	r3, [r7, #12]
 8010dc8:	e002      	b.n	8010dd0 <prvInsertBlockIntoFreeList+0x14>
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	60fb      	str	r3, [r7, #12]
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d8f7      	bhi.n	8010dca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	68ba      	ldr	r2, [r7, #8]
 8010de4:	18d3      	adds	r3, r2, r3
 8010de6:	687a      	ldr	r2, [r7, #4]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d108      	bne.n	8010dfe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	685a      	ldr	r2, [r3, #4]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	18d2      	adds	r2, r2, r3
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	68ba      	ldr	r2, [r7, #8]
 8010e08:	18d2      	adds	r2, r2, r3
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d118      	bne.n	8010e44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	4b14      	ldr	r3, [pc, #80]	; (8010e68 <prvInsertBlockIntoFreeList+0xac>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d00d      	beq.n	8010e3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	685a      	ldr	r2, [r3, #4]
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	685b      	ldr	r3, [r3, #4]
 8010e28:	18d2      	adds	r2, r2, r3
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	681a      	ldr	r2, [r3, #0]
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	601a      	str	r2, [r3, #0]
 8010e38:	e008      	b.n	8010e4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010e3a:	4b0b      	ldr	r3, [pc, #44]	; (8010e68 <prvInsertBlockIntoFreeList+0xac>)
 8010e3c:	681a      	ldr	r2, [r3, #0]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	601a      	str	r2, [r3, #0]
 8010e42:	e003      	b.n	8010e4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	681a      	ldr	r2, [r3, #0]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010e4c:	68fa      	ldr	r2, [r7, #12]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d002      	beq.n	8010e5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e5a:	46c0      	nop			; (mov r8, r8)
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	b004      	add	sp, #16
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	46c0      	nop			; (mov r8, r8)
 8010e64:	20001fa4 	.word	0x20001fa4
 8010e68:	20001fac 	.word	0x20001fac

08010e6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010e70:	4914      	ldr	r1, [pc, #80]	; (8010ec4 <MX_USB_DEVICE_Init+0x58>)
 8010e72:	4b15      	ldr	r3, [pc, #84]	; (8010ec8 <MX_USB_DEVICE_Init+0x5c>)
 8010e74:	2200      	movs	r2, #0
 8010e76:	0018      	movs	r0, r3
 8010e78:	f7fb fae3 	bl	800c442 <USBD_Init>
 8010e7c:	1e03      	subs	r3, r0, #0
 8010e7e:	d001      	beq.n	8010e84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010e80:	f7ef fef0 	bl	8000c64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010e84:	4a11      	ldr	r2, [pc, #68]	; (8010ecc <MX_USB_DEVICE_Init+0x60>)
 8010e86:	4b10      	ldr	r3, [pc, #64]	; (8010ec8 <MX_USB_DEVICE_Init+0x5c>)
 8010e88:	0011      	movs	r1, r2
 8010e8a:	0018      	movs	r0, r3
 8010e8c:	f7fb fb0a 	bl	800c4a4 <USBD_RegisterClass>
 8010e90:	1e03      	subs	r3, r0, #0
 8010e92:	d001      	beq.n	8010e98 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8010e94:	f7ef fee6 	bl	8000c64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010e98:	4a0d      	ldr	r2, [pc, #52]	; (8010ed0 <MX_USB_DEVICE_Init+0x64>)
 8010e9a:	4b0b      	ldr	r3, [pc, #44]	; (8010ec8 <MX_USB_DEVICE_Init+0x5c>)
 8010e9c:	0011      	movs	r1, r2
 8010e9e:	0018      	movs	r0, r3
 8010ea0:	f7fb fa56 	bl	800c350 <USBD_CDC_RegisterInterface>
 8010ea4:	1e03      	subs	r3, r0, #0
 8010ea6:	d001      	beq.n	8010eac <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8010ea8:	f7ef fedc 	bl	8000c64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010eac:	4b06      	ldr	r3, [pc, #24]	; (8010ec8 <MX_USB_DEVICE_Init+0x5c>)
 8010eae:	0018      	movs	r0, r3
 8010eb0:	f7fb fb18 	bl	800c4e4 <USBD_Start>
 8010eb4:	1e03      	subs	r3, r0, #0
 8010eb6:	d001      	beq.n	8010ebc <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8010eb8:	f7ef fed4 	bl	8000c64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010ebc:	46c0      	nop			; (mov r8, r8)
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}
 8010ec2:	46c0      	nop			; (mov r8, r8)
 8010ec4:	20000188 	.word	0x20000188
 8010ec8:	20002808 	.word	0x20002808
 8010ecc:	20000070 	.word	0x20000070
 8010ed0:	20000178 	.word	0x20000178

08010ed4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010ed8:	4907      	ldr	r1, [pc, #28]	; (8010ef8 <CDC_Init_FS+0x24>)
 8010eda:	4b08      	ldr	r3, [pc, #32]	; (8010efc <CDC_Init_FS+0x28>)
 8010edc:	2200      	movs	r2, #0
 8010ede:	0018      	movs	r0, r3
 8010ee0:	f7fb fa51 	bl	800c386 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010ee4:	4a06      	ldr	r2, [pc, #24]	; (8010f00 <CDC_Init_FS+0x2c>)
 8010ee6:	4b05      	ldr	r3, [pc, #20]	; (8010efc <CDC_Init_FS+0x28>)
 8010ee8:	0011      	movs	r1, r2
 8010eea:	0018      	movs	r0, r3
 8010eec:	f7fb fa67 	bl	800c3be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010ef0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010ef2:	0018      	movs	r0, r3
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}
 8010ef8:	20002eb4 	.word	0x20002eb4
 8010efc:	20002808 	.word	0x20002808
 8010f00:	20002acc 	.word	0x20002acc

08010f04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010f08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010f0a:	0018      	movs	r0, r3
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6039      	str	r1, [r7, #0]
 8010f18:	0011      	movs	r1, r2
 8010f1a:	1dfb      	adds	r3, r7, #7
 8010f1c:	1c02      	adds	r2, r0, #0
 8010f1e:	701a      	strb	r2, [r3, #0]
 8010f20:	1d3b      	adds	r3, r7, #4
 8010f22:	1c0a      	adds	r2, r1, #0
 8010f24:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010f26:	1dfb      	adds	r3, r7, #7
 8010f28:	781b      	ldrb	r3, [r3, #0]
 8010f2a:	2b23      	cmp	r3, #35	; 0x23
 8010f2c:	d804      	bhi.n	8010f38 <CDC_Control_FS+0x28>
 8010f2e:	009a      	lsls	r2, r3, #2
 8010f30:	4b04      	ldr	r3, [pc, #16]	; (8010f44 <CDC_Control_FS+0x34>)
 8010f32:	18d3      	adds	r3, r2, r3
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010f38:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8010f3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010f3c:	0018      	movs	r0, r3
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	b002      	add	sp, #8
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	08013408 	.word	0x08013408

08010f48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010f52:	687a      	ldr	r2, [r7, #4]
 8010f54:	4b06      	ldr	r3, [pc, #24]	; (8010f70 <CDC_Receive_FS+0x28>)
 8010f56:	0011      	movs	r1, r2
 8010f58:	0018      	movs	r0, r3
 8010f5a:	f7fb fa30 	bl	800c3be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010f5e:	4b04      	ldr	r3, [pc, #16]	; (8010f70 <CDC_Receive_FS+0x28>)
 8010f60:	0018      	movs	r0, r3
 8010f62:	f7fb fa40 	bl	800c3e6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010f66:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010f68:	0018      	movs	r0, r3
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	b002      	add	sp, #8
 8010f6e:	bd80      	pop	{r7, pc}
 8010f70:	20002808 	.word	0x20002808

08010f74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b082      	sub	sp, #8
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	0002      	movs	r2, r0
 8010f7c:	6039      	str	r1, [r7, #0]
 8010f7e:	1dfb      	adds	r3, r7, #7
 8010f80:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	2212      	movs	r2, #18
 8010f86:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010f88:	4b02      	ldr	r3, [pc, #8]	; (8010f94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010f8a:	0018      	movs	r0, r3
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	b002      	add	sp, #8
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	46c0      	nop			; (mov r8, r8)
 8010f94:	200001a4 	.word	0x200001a4

08010f98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	0002      	movs	r2, r0
 8010fa0:	6039      	str	r1, [r7, #0]
 8010fa2:	1dfb      	adds	r3, r7, #7
 8010fa4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	2204      	movs	r2, #4
 8010faa:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010fac:	4b02      	ldr	r3, [pc, #8]	; (8010fb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010fae:	0018      	movs	r0, r3
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	b002      	add	sp, #8
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	46c0      	nop			; (mov r8, r8)
 8010fb8:	200001b8 	.word	0x200001b8

08010fbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	0002      	movs	r2, r0
 8010fc4:	6039      	str	r1, [r7, #0]
 8010fc6:	1dfb      	adds	r3, r7, #7
 8010fc8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8010fca:	1dfb      	adds	r3, r7, #7
 8010fcc:	781b      	ldrb	r3, [r3, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d106      	bne.n	8010fe0 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010fd2:	683a      	ldr	r2, [r7, #0]
 8010fd4:	4908      	ldr	r1, [pc, #32]	; (8010ff8 <USBD_FS_ProductStrDescriptor+0x3c>)
 8010fd6:	4b09      	ldr	r3, [pc, #36]	; (8010ffc <USBD_FS_ProductStrDescriptor+0x40>)
 8010fd8:	0018      	movs	r0, r3
 8010fda:	f7fc fb44 	bl	800d666 <USBD_GetString>
 8010fde:	e005      	b.n	8010fec <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010fe0:	683a      	ldr	r2, [r7, #0]
 8010fe2:	4905      	ldr	r1, [pc, #20]	; (8010ff8 <USBD_FS_ProductStrDescriptor+0x3c>)
 8010fe4:	4b05      	ldr	r3, [pc, #20]	; (8010ffc <USBD_FS_ProductStrDescriptor+0x40>)
 8010fe6:	0018      	movs	r0, r3
 8010fe8:	f7fc fb3d 	bl	800d666 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010fec:	4b02      	ldr	r3, [pc, #8]	; (8010ff8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8010fee:	0018      	movs	r0, r3
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	b002      	add	sp, #8
 8010ff4:	bd80      	pop	{r7, pc}
 8010ff6:	46c0      	nop			; (mov r8, r8)
 8010ff8:	2000329c 	.word	0x2000329c
 8010ffc:	08013238 	.word	0x08013238

08011000 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b082      	sub	sp, #8
 8011004:	af00      	add	r7, sp, #0
 8011006:	0002      	movs	r2, r0
 8011008:	6039      	str	r1, [r7, #0]
 801100a:	1dfb      	adds	r3, r7, #7
 801100c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801100e:	683a      	ldr	r2, [r7, #0]
 8011010:	4904      	ldr	r1, [pc, #16]	; (8011024 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011012:	4b05      	ldr	r3, [pc, #20]	; (8011028 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8011014:	0018      	movs	r0, r3
 8011016:	f7fc fb26 	bl	800d666 <USBD_GetString>
  return USBD_StrDesc;
 801101a:	4b02      	ldr	r3, [pc, #8]	; (8011024 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801101c:	0018      	movs	r0, r3
 801101e:	46bd      	mov	sp, r7
 8011020:	b002      	add	sp, #8
 8011022:	bd80      	pop	{r7, pc}
 8011024:	2000329c 	.word	0x2000329c
 8011028:	08013250 	.word	0x08013250

0801102c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	0002      	movs	r2, r0
 8011034:	6039      	str	r1, [r7, #0]
 8011036:	1dfb      	adds	r3, r7, #7
 8011038:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	221a      	movs	r2, #26
 801103e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011040:	f000 f84c 	bl	80110dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011044:	4b02      	ldr	r3, [pc, #8]	; (8011050 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8011046:	0018      	movs	r0, r3
 8011048:	46bd      	mov	sp, r7
 801104a:	b002      	add	sp, #8
 801104c:	bd80      	pop	{r7, pc}
 801104e:	46c0      	nop			; (mov r8, r8)
 8011050:	200001bc 	.word	0x200001bc

08011054 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b082      	sub	sp, #8
 8011058:	af00      	add	r7, sp, #0
 801105a:	0002      	movs	r2, r0
 801105c:	6039      	str	r1, [r7, #0]
 801105e:	1dfb      	adds	r3, r7, #7
 8011060:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8011062:	1dfb      	adds	r3, r7, #7
 8011064:	781b      	ldrb	r3, [r3, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d106      	bne.n	8011078 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801106a:	683a      	ldr	r2, [r7, #0]
 801106c:	4908      	ldr	r1, [pc, #32]	; (8011090 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801106e:	4b09      	ldr	r3, [pc, #36]	; (8011094 <USBD_FS_ConfigStrDescriptor+0x40>)
 8011070:	0018      	movs	r0, r3
 8011072:	f7fc faf8 	bl	800d666 <USBD_GetString>
 8011076:	e005      	b.n	8011084 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011078:	683a      	ldr	r2, [r7, #0]
 801107a:	4905      	ldr	r1, [pc, #20]	; (8011090 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801107c:	4b05      	ldr	r3, [pc, #20]	; (8011094 <USBD_FS_ConfigStrDescriptor+0x40>)
 801107e:	0018      	movs	r0, r3
 8011080:	f7fc faf1 	bl	800d666 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011084:	4b02      	ldr	r3, [pc, #8]	; (8011090 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8011086:	0018      	movs	r0, r3
 8011088:	46bd      	mov	sp, r7
 801108a:	b002      	add	sp, #8
 801108c:	bd80      	pop	{r7, pc}
 801108e:	46c0      	nop			; (mov r8, r8)
 8011090:	2000329c 	.word	0x2000329c
 8011094:	08013264 	.word	0x08013264

08011098 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b082      	sub	sp, #8
 801109c:	af00      	add	r7, sp, #0
 801109e:	0002      	movs	r2, r0
 80110a0:	6039      	str	r1, [r7, #0]
 80110a2:	1dfb      	adds	r3, r7, #7
 80110a4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80110a6:	1dfb      	adds	r3, r7, #7
 80110a8:	781b      	ldrb	r3, [r3, #0]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d106      	bne.n	80110bc <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80110ae:	683a      	ldr	r2, [r7, #0]
 80110b0:	4908      	ldr	r1, [pc, #32]	; (80110d4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80110b2:	4b09      	ldr	r3, [pc, #36]	; (80110d8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80110b4:	0018      	movs	r0, r3
 80110b6:	f7fc fad6 	bl	800d666 <USBD_GetString>
 80110ba:	e005      	b.n	80110c8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80110bc:	683a      	ldr	r2, [r7, #0]
 80110be:	4905      	ldr	r1, [pc, #20]	; (80110d4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80110c0:	4b05      	ldr	r3, [pc, #20]	; (80110d8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80110c2:	0018      	movs	r0, r3
 80110c4:	f7fc facf 	bl	800d666 <USBD_GetString>
  }
  return USBD_StrDesc;
 80110c8:	4b02      	ldr	r3, [pc, #8]	; (80110d4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80110ca:	0018      	movs	r0, r3
 80110cc:	46bd      	mov	sp, r7
 80110ce:	b002      	add	sp, #8
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	46c0      	nop			; (mov r8, r8)
 80110d4:	2000329c 	.word	0x2000329c
 80110d8:	08013270 	.word	0x08013270

080110dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b084      	sub	sp, #16
 80110e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80110e2:	4b10      	ldr	r3, [pc, #64]	; (8011124 <Get_SerialNum+0x48>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80110e8:	4b0f      	ldr	r3, [pc, #60]	; (8011128 <Get_SerialNum+0x4c>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80110ee:	4b0f      	ldr	r3, [pc, #60]	; (801112c <Get_SerialNum+0x50>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80110f4:	68fa      	ldr	r2, [r7, #12]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	18d3      	adds	r3, r2, r3
 80110fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d00b      	beq.n	801111a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011102:	490b      	ldr	r1, [pc, #44]	; (8011130 <Get_SerialNum+0x54>)
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	2208      	movs	r2, #8
 8011108:	0018      	movs	r0, r3
 801110a:	f000 f815 	bl	8011138 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801110e:	4909      	ldr	r1, [pc, #36]	; (8011134 <Get_SerialNum+0x58>)
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	2204      	movs	r2, #4
 8011114:	0018      	movs	r0, r3
 8011116:	f000 f80f 	bl	8011138 <IntToUnicode>
  }
}
 801111a:	46c0      	nop			; (mov r8, r8)
 801111c:	46bd      	mov	sp, r7
 801111e:	b004      	add	sp, #16
 8011120:	bd80      	pop	{r7, pc}
 8011122:	46c0      	nop			; (mov r8, r8)
 8011124:	1ffff7ac 	.word	0x1ffff7ac
 8011128:	1ffff7b0 	.word	0x1ffff7b0
 801112c:	1ffff7b4 	.word	0x1ffff7b4
 8011130:	200001be 	.word	0x200001be
 8011134:	200001ce 	.word	0x200001ce

08011138 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b086      	sub	sp, #24
 801113c:	af00      	add	r7, sp, #0
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	1dfb      	adds	r3, r7, #7
 8011144:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8011146:	2117      	movs	r1, #23
 8011148:	187b      	adds	r3, r7, r1
 801114a:	2200      	movs	r2, #0
 801114c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801114e:	187b      	adds	r3, r7, r1
 8011150:	2200      	movs	r2, #0
 8011152:	701a      	strb	r2, [r3, #0]
 8011154:	e02f      	b.n	80111b6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	0f1b      	lsrs	r3, r3, #28
 801115a:	2b09      	cmp	r3, #9
 801115c:	d80d      	bhi.n	801117a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	0f1b      	lsrs	r3, r3, #28
 8011162:	b2da      	uxtb	r2, r3
 8011164:	2317      	movs	r3, #23
 8011166:	18fb      	adds	r3, r7, r3
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	005b      	lsls	r3, r3, #1
 801116c:	0019      	movs	r1, r3
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	185b      	adds	r3, r3, r1
 8011172:	3230      	adds	r2, #48	; 0x30
 8011174:	b2d2      	uxtb	r2, r2
 8011176:	701a      	strb	r2, [r3, #0]
 8011178:	e00c      	b.n	8011194 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	0f1b      	lsrs	r3, r3, #28
 801117e:	b2da      	uxtb	r2, r3
 8011180:	2317      	movs	r3, #23
 8011182:	18fb      	adds	r3, r7, r3
 8011184:	781b      	ldrb	r3, [r3, #0]
 8011186:	005b      	lsls	r3, r3, #1
 8011188:	0019      	movs	r1, r3
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	185b      	adds	r3, r3, r1
 801118e:	3237      	adds	r2, #55	; 0x37
 8011190:	b2d2      	uxtb	r2, r2
 8011192:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	011b      	lsls	r3, r3, #4
 8011198:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801119a:	2117      	movs	r1, #23
 801119c:	187b      	adds	r3, r7, r1
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	005b      	lsls	r3, r3, #1
 80111a2:	3301      	adds	r3, #1
 80111a4:	68ba      	ldr	r2, [r7, #8]
 80111a6:	18d3      	adds	r3, r2, r3
 80111a8:	2200      	movs	r2, #0
 80111aa:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80111ac:	187b      	adds	r3, r7, r1
 80111ae:	781a      	ldrb	r2, [r3, #0]
 80111b0:	187b      	adds	r3, r7, r1
 80111b2:	3201      	adds	r2, #1
 80111b4:	701a      	strb	r2, [r3, #0]
 80111b6:	2317      	movs	r3, #23
 80111b8:	18fa      	adds	r2, r7, r3
 80111ba:	1dfb      	adds	r3, r7, #7
 80111bc:	7812      	ldrb	r2, [r2, #0]
 80111be:	781b      	ldrb	r3, [r3, #0]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d3c8      	bcc.n	8011156 <IntToUnicode+0x1e>
  }
}
 80111c4:	46c0      	nop			; (mov r8, r8)
 80111c6:	46c0      	nop			; (mov r8, r8)
 80111c8:	46bd      	mov	sp, r7
 80111ca:	b006      	add	sp, #24
 80111cc:	bd80      	pop	{r7, pc}
	...

080111d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b084      	sub	sp, #16
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	4a0e      	ldr	r2, [pc, #56]	; (8011218 <HAL_PCD_MspInit+0x48>)
 80111de:	4293      	cmp	r3, r2
 80111e0:	d115      	bne.n	801120e <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80111e2:	4b0e      	ldr	r3, [pc, #56]	; (801121c <HAL_PCD_MspInit+0x4c>)
 80111e4:	69da      	ldr	r2, [r3, #28]
 80111e6:	4b0d      	ldr	r3, [pc, #52]	; (801121c <HAL_PCD_MspInit+0x4c>)
 80111e8:	2180      	movs	r1, #128	; 0x80
 80111ea:	0409      	lsls	r1, r1, #16
 80111ec:	430a      	orrs	r2, r1
 80111ee:	61da      	str	r2, [r3, #28]
 80111f0:	4b0a      	ldr	r3, [pc, #40]	; (801121c <HAL_PCD_MspInit+0x4c>)
 80111f2:	69da      	ldr	r2, [r3, #28]
 80111f4:	2380      	movs	r3, #128	; 0x80
 80111f6:	041b      	lsls	r3, r3, #16
 80111f8:	4013      	ands	r3, r2
 80111fa:	60fb      	str	r3, [r7, #12]
 80111fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 3, 0);
 80111fe:	2200      	movs	r2, #0
 8011200:	2103      	movs	r1, #3
 8011202:	201f      	movs	r0, #31
 8011204:	f7f2 f8b4 	bl	8003370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8011208:	201f      	movs	r0, #31
 801120a:	f7f2 f8c6 	bl	800339a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801120e:	46c0      	nop			; (mov r8, r8)
 8011210:	46bd      	mov	sp, r7
 8011212:	b004      	add	sp, #16
 8011214:	bd80      	pop	{r7, pc}
 8011216:	46c0      	nop			; (mov r8, r8)
 8011218:	40005c00 	.word	0x40005c00
 801121c:	40021000 	.word	0x40021000

08011220 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011228:	687a      	ldr	r2, [r7, #4]
 801122a:	23bc      	movs	r3, #188	; 0xbc
 801122c:	009b      	lsls	r3, r3, #2
 801122e:	58d2      	ldr	r2, [r2, r3]
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	21ac      	movs	r1, #172	; 0xac
 8011234:	0089      	lsls	r1, r1, #2
 8011236:	468c      	mov	ip, r1
 8011238:	4463      	add	r3, ip
 801123a:	0019      	movs	r1, r3
 801123c:	0010      	movs	r0, r2
 801123e:	f7fb f9a5 	bl	800c58c <USBD_LL_SetupStage>
}
 8011242:	46c0      	nop			; (mov r8, r8)
 8011244:	46bd      	mov	sp, r7
 8011246:	b002      	add	sp, #8
 8011248:	bd80      	pop	{r7, pc}

0801124a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801124a:	b590      	push	{r4, r7, lr}
 801124c:	b083      	sub	sp, #12
 801124e:	af00      	add	r7, sp, #0
 8011250:	6078      	str	r0, [r7, #4]
 8011252:	000a      	movs	r2, r1
 8011254:	1cfb      	adds	r3, r7, #3
 8011256:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011258:	687a      	ldr	r2, [r7, #4]
 801125a:	23bc      	movs	r3, #188	; 0xbc
 801125c:	009b      	lsls	r3, r3, #2
 801125e:	58d4      	ldr	r4, [r2, r3]
 8011260:	1cfb      	adds	r3, r7, #3
 8011262:	781a      	ldrb	r2, [r3, #0]
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	23be      	movs	r3, #190	; 0xbe
 8011268:	0059      	lsls	r1, r3, #1
 801126a:	0013      	movs	r3, r2
 801126c:	009b      	lsls	r3, r3, #2
 801126e:	189b      	adds	r3, r3, r2
 8011270:	00db      	lsls	r3, r3, #3
 8011272:	18c3      	adds	r3, r0, r3
 8011274:	185b      	adds	r3, r3, r1
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	1cfb      	adds	r3, r7, #3
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	0019      	movs	r1, r3
 801127e:	0020      	movs	r0, r4
 8011280:	f7fb f9e2 	bl	800c648 <USBD_LL_DataOutStage>
}
 8011284:	46c0      	nop			; (mov r8, r8)
 8011286:	46bd      	mov	sp, r7
 8011288:	b003      	add	sp, #12
 801128a:	bd90      	pop	{r4, r7, pc}

0801128c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	000a      	movs	r2, r1
 8011296:	1cfb      	adds	r3, r7, #3
 8011298:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	23bc      	movs	r3, #188	; 0xbc
 801129e:	009b      	lsls	r3, r3, #2
 80112a0:	58d0      	ldr	r0, [r2, r3]
 80112a2:	1cfb      	adds	r3, r7, #3
 80112a4:	781a      	ldrb	r2, [r3, #0]
 80112a6:	6879      	ldr	r1, [r7, #4]
 80112a8:	0013      	movs	r3, r2
 80112aa:	009b      	lsls	r3, r3, #2
 80112ac:	189b      	adds	r3, r3, r2
 80112ae:	00db      	lsls	r3, r3, #3
 80112b0:	18cb      	adds	r3, r1, r3
 80112b2:	333c      	adds	r3, #60	; 0x3c
 80112b4:	681a      	ldr	r2, [r3, #0]
 80112b6:	1cfb      	adds	r3, r7, #3
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	0019      	movs	r1, r3
 80112bc:	f7fb fa46 	bl	800c74c <USBD_LL_DataInStage>
}
 80112c0:	46c0      	nop			; (mov r8, r8)
 80112c2:	46bd      	mov	sp, r7
 80112c4:	b002      	add	sp, #8
 80112c6:	bd80      	pop	{r7, pc}

080112c8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80112d0:	687a      	ldr	r2, [r7, #4]
 80112d2:	23bc      	movs	r3, #188	; 0xbc
 80112d4:	009b      	lsls	r3, r3, #2
 80112d6:	58d3      	ldr	r3, [r2, r3]
 80112d8:	0018      	movs	r0, r3
 80112da:	f7fb fb7d 	bl	800c9d8 <USBD_LL_SOF>
}
 80112de:	46c0      	nop			; (mov r8, r8)
 80112e0:	46bd      	mov	sp, r7
 80112e2:	b002      	add	sp, #8
 80112e4:	bd80      	pop	{r7, pc}

080112e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112e6:	b580      	push	{r7, lr}
 80112e8:	b084      	sub	sp, #16
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80112ee:	230f      	movs	r3, #15
 80112f0:	18fb      	adds	r3, r7, r3
 80112f2:	2201      	movs	r2, #1
 80112f4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	689b      	ldr	r3, [r3, #8]
 80112fa:	2b02      	cmp	r3, #2
 80112fc:	d001      	beq.n	8011302 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80112fe:	f7ef fcb1 	bl	8000c64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011302:	687a      	ldr	r2, [r7, #4]
 8011304:	23bc      	movs	r3, #188	; 0xbc
 8011306:	009b      	lsls	r3, r3, #2
 8011308:	58d2      	ldr	r2, [r2, r3]
 801130a:	230f      	movs	r3, #15
 801130c:	18fb      	adds	r3, r7, r3
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	0019      	movs	r1, r3
 8011312:	0010      	movs	r0, r2
 8011314:	f7fb fb1f 	bl	800c956 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011318:	687a      	ldr	r2, [r7, #4]
 801131a:	23bc      	movs	r3, #188	; 0xbc
 801131c:	009b      	lsls	r3, r3, #2
 801131e:	58d3      	ldr	r3, [r2, r3]
 8011320:	0018      	movs	r0, r3
 8011322:	f7fb fad0 	bl	800c8c6 <USBD_LL_Reset>
}
 8011326:	46c0      	nop			; (mov r8, r8)
 8011328:	46bd      	mov	sp, r7
 801132a:	b004      	add	sp, #16
 801132c:	bd80      	pop	{r7, pc}
	...

08011330 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b082      	sub	sp, #8
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011338:	687a      	ldr	r2, [r7, #4]
 801133a:	23bc      	movs	r3, #188	; 0xbc
 801133c:	009b      	lsls	r3, r3, #2
 801133e:	58d3      	ldr	r3, [r2, r3]
 8011340:	0018      	movs	r0, r3
 8011342:	f7fb fb19 	bl	800c978 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	699b      	ldr	r3, [r3, #24]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d005      	beq.n	801135a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801134e:	4b05      	ldr	r3, [pc, #20]	; (8011364 <HAL_PCD_SuspendCallback+0x34>)
 8011350:	691a      	ldr	r2, [r3, #16]
 8011352:	4b04      	ldr	r3, [pc, #16]	; (8011364 <HAL_PCD_SuspendCallback+0x34>)
 8011354:	2106      	movs	r1, #6
 8011356:	430a      	orrs	r2, r1
 8011358:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801135a:	46c0      	nop			; (mov r8, r8)
 801135c:	46bd      	mov	sp, r7
 801135e:	b002      	add	sp, #8
 8011360:	bd80      	pop	{r7, pc}
 8011362:	46c0      	nop			; (mov r8, r8)
 8011364:	e000ed00 	.word	0xe000ed00

08011368 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	699b      	ldr	r3, [r3, #24]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d007      	beq.n	8011388 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011378:	4b09      	ldr	r3, [pc, #36]	; (80113a0 <HAL_PCD_ResumeCallback+0x38>)
 801137a:	691a      	ldr	r2, [r3, #16]
 801137c:	4b08      	ldr	r3, [pc, #32]	; (80113a0 <HAL_PCD_ResumeCallback+0x38>)
 801137e:	2106      	movs	r1, #6
 8011380:	438a      	bics	r2, r1
 8011382:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8011384:	f000 fa44 	bl	8011810 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011388:	687a      	ldr	r2, [r7, #4]
 801138a:	23bc      	movs	r3, #188	; 0xbc
 801138c:	009b      	lsls	r3, r3, #2
 801138e:	58d3      	ldr	r3, [r2, r3]
 8011390:	0018      	movs	r0, r3
 8011392:	f7fb fb09 	bl	800c9a8 <USBD_LL_Resume>
}
 8011396:	46c0      	nop			; (mov r8, r8)
 8011398:	46bd      	mov	sp, r7
 801139a:	b002      	add	sp, #8
 801139c:	bd80      	pop	{r7, pc}
 801139e:	46c0      	nop			; (mov r8, r8)
 80113a0:	e000ed00 	.word	0xe000ed00

080113a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b082      	sub	sp, #8
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80113ac:	4a2d      	ldr	r2, [pc, #180]	; (8011464 <USBD_LL_Init+0xc0>)
 80113ae:	23bc      	movs	r3, #188	; 0xbc
 80113b0:	009b      	lsls	r3, r3, #2
 80113b2:	6879      	ldr	r1, [r7, #4]
 80113b4:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80113b6:	687a      	ldr	r2, [r7, #4]
 80113b8:	23b0      	movs	r3, #176	; 0xb0
 80113ba:	009b      	lsls	r3, r3, #2
 80113bc:	4929      	ldr	r1, [pc, #164]	; (8011464 <USBD_LL_Init+0xc0>)
 80113be:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80113c0:	4b28      	ldr	r3, [pc, #160]	; (8011464 <USBD_LL_Init+0xc0>)
 80113c2:	4a29      	ldr	r2, [pc, #164]	; (8011468 <USBD_LL_Init+0xc4>)
 80113c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80113c6:	4b27      	ldr	r3, [pc, #156]	; (8011464 <USBD_LL_Init+0xc0>)
 80113c8:	2208      	movs	r2, #8
 80113ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80113cc:	4b25      	ldr	r3, [pc, #148]	; (8011464 <USBD_LL_Init+0xc0>)
 80113ce:	2202      	movs	r2, #2
 80113d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80113d2:	4b24      	ldr	r3, [pc, #144]	; (8011464 <USBD_LL_Init+0xc0>)
 80113d4:	2202      	movs	r2, #2
 80113d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80113d8:	4b22      	ldr	r3, [pc, #136]	; (8011464 <USBD_LL_Init+0xc0>)
 80113da:	2200      	movs	r2, #0
 80113dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80113de:	4b21      	ldr	r3, [pc, #132]	; (8011464 <USBD_LL_Init+0xc0>)
 80113e0:	2200      	movs	r2, #0
 80113e2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80113e4:	4b1f      	ldr	r3, [pc, #124]	; (8011464 <USBD_LL_Init+0xc0>)
 80113e6:	2200      	movs	r2, #0
 80113e8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80113ea:	4b1e      	ldr	r3, [pc, #120]	; (8011464 <USBD_LL_Init+0xc0>)
 80113ec:	0018      	movs	r0, r3
 80113ee:	f7f3 f8a5 	bl	800453c <HAL_PCD_Init>
 80113f2:	1e03      	subs	r3, r0, #0
 80113f4:	d001      	beq.n	80113fa <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80113f6:	f7ef fc35 	bl	8000c64 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80113fa:	687a      	ldr	r2, [r7, #4]
 80113fc:	23b0      	movs	r3, #176	; 0xb0
 80113fe:	009b      	lsls	r3, r3, #2
 8011400:	58d0      	ldr	r0, [r2, r3]
 8011402:	2318      	movs	r3, #24
 8011404:	2200      	movs	r2, #0
 8011406:	2100      	movs	r1, #0
 8011408:	f7f4 fe86 	bl	8006118 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801140c:	687a      	ldr	r2, [r7, #4]
 801140e:	23b0      	movs	r3, #176	; 0xb0
 8011410:	009b      	lsls	r3, r3, #2
 8011412:	58d0      	ldr	r0, [r2, r3]
 8011414:	2358      	movs	r3, #88	; 0x58
 8011416:	2200      	movs	r2, #0
 8011418:	2180      	movs	r1, #128	; 0x80
 801141a:	f7f4 fe7d 	bl	8006118 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	23b0      	movs	r3, #176	; 0xb0
 8011422:	009b      	lsls	r3, r3, #2
 8011424:	58d0      	ldr	r0, [r2, r3]
 8011426:	23c0      	movs	r3, #192	; 0xc0
 8011428:	2200      	movs	r2, #0
 801142a:	2181      	movs	r1, #129	; 0x81
 801142c:	f7f4 fe74 	bl	8006118 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011430:	687a      	ldr	r2, [r7, #4]
 8011432:	23b0      	movs	r3, #176	; 0xb0
 8011434:	009b      	lsls	r3, r3, #2
 8011436:	58d0      	ldr	r0, [r2, r3]
 8011438:	2388      	movs	r3, #136	; 0x88
 801143a:	005b      	lsls	r3, r3, #1
 801143c:	2200      	movs	r2, #0
 801143e:	2101      	movs	r1, #1
 8011440:	f7f4 fe6a 	bl	8006118 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011444:	687a      	ldr	r2, [r7, #4]
 8011446:	23b0      	movs	r3, #176	; 0xb0
 8011448:	009b      	lsls	r3, r3, #2
 801144a:	58d0      	ldr	r0, [r2, r3]
 801144c:	2380      	movs	r3, #128	; 0x80
 801144e:	005b      	lsls	r3, r3, #1
 8011450:	2200      	movs	r2, #0
 8011452:	2182      	movs	r1, #130	; 0x82
 8011454:	f7f4 fe60 	bl	8006118 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011458:	2300      	movs	r3, #0
}
 801145a:	0018      	movs	r0, r3
 801145c:	46bd      	mov	sp, r7
 801145e:	b002      	add	sp, #8
 8011460:	bd80      	pop	{r7, pc}
 8011462:	46c0      	nop			; (mov r8, r8)
 8011464:	2000349c 	.word	0x2000349c
 8011468:	40005c00 	.word	0x40005c00

0801146c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801146e:	b085      	sub	sp, #20
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011474:	210f      	movs	r1, #15
 8011476:	187b      	adds	r3, r7, r1
 8011478:	2200      	movs	r2, #0
 801147a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801147c:	260e      	movs	r6, #14
 801147e:	19bb      	adds	r3, r7, r6
 8011480:	2200      	movs	r2, #0
 8011482:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011484:	687a      	ldr	r2, [r7, #4]
 8011486:	23b0      	movs	r3, #176	; 0xb0
 8011488:	009b      	lsls	r3, r3, #2
 801148a:	58d3      	ldr	r3, [r2, r3]
 801148c:	000d      	movs	r5, r1
 801148e:	187c      	adds	r4, r7, r1
 8011490:	0018      	movs	r0, r3
 8011492:	f7f3 f963 	bl	800475c <HAL_PCD_Start>
 8011496:	0003      	movs	r3, r0
 8011498:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801149a:	19bc      	adds	r4, r7, r6
 801149c:	197b      	adds	r3, r7, r5
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	0018      	movs	r0, r3
 80114a2:	f000 f9bc 	bl	801181e <USBD_Get_USB_Status>
 80114a6:	0003      	movs	r3, r0
 80114a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80114aa:	19bb      	adds	r3, r7, r6
 80114ac:	781b      	ldrb	r3, [r3, #0]
}
 80114ae:	0018      	movs	r0, r3
 80114b0:	46bd      	mov	sp, r7
 80114b2:	b005      	add	sp, #20
 80114b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080114b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80114b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114b8:	b085      	sub	sp, #20
 80114ba:	af00      	add	r7, sp, #0
 80114bc:	6078      	str	r0, [r7, #4]
 80114be:	000c      	movs	r4, r1
 80114c0:	0010      	movs	r0, r2
 80114c2:	0019      	movs	r1, r3
 80114c4:	1cfb      	adds	r3, r7, #3
 80114c6:	1c22      	adds	r2, r4, #0
 80114c8:	701a      	strb	r2, [r3, #0]
 80114ca:	1cbb      	adds	r3, r7, #2
 80114cc:	1c02      	adds	r2, r0, #0
 80114ce:	701a      	strb	r2, [r3, #0]
 80114d0:	003b      	movs	r3, r7
 80114d2:	1c0a      	adds	r2, r1, #0
 80114d4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114d6:	260f      	movs	r6, #15
 80114d8:	19bb      	adds	r3, r7, r6
 80114da:	2200      	movs	r2, #0
 80114dc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114de:	250e      	movs	r5, #14
 80114e0:	197b      	adds	r3, r7, r5
 80114e2:	2200      	movs	r2, #0
 80114e4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80114e6:	687a      	ldr	r2, [r7, #4]
 80114e8:	23b0      	movs	r3, #176	; 0xb0
 80114ea:	009b      	lsls	r3, r3, #2
 80114ec:	58d0      	ldr	r0, [r2, r3]
 80114ee:	19bc      	adds	r4, r7, r6
 80114f0:	1cbb      	adds	r3, r7, #2
 80114f2:	781d      	ldrb	r5, [r3, #0]
 80114f4:	003b      	movs	r3, r7
 80114f6:	881a      	ldrh	r2, [r3, #0]
 80114f8:	1cfb      	adds	r3, r7, #3
 80114fa:	7819      	ldrb	r1, [r3, #0]
 80114fc:	002b      	movs	r3, r5
 80114fe:	f7f3 fafa 	bl	8004af6 <HAL_PCD_EP_Open>
 8011502:	0003      	movs	r3, r0
 8011504:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011506:	250e      	movs	r5, #14
 8011508:	197c      	adds	r4, r7, r5
 801150a:	19bb      	adds	r3, r7, r6
 801150c:	781b      	ldrb	r3, [r3, #0]
 801150e:	0018      	movs	r0, r3
 8011510:	f000 f985 	bl	801181e <USBD_Get_USB_Status>
 8011514:	0003      	movs	r3, r0
 8011516:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011518:	197b      	adds	r3, r7, r5
 801151a:	781b      	ldrb	r3, [r3, #0]
}
 801151c:	0018      	movs	r0, r3
 801151e:	46bd      	mov	sp, r7
 8011520:	b005      	add	sp, #20
 8011522:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011524 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011526:	b085      	sub	sp, #20
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	000a      	movs	r2, r1
 801152e:	1cfb      	adds	r3, r7, #3
 8011530:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011532:	210f      	movs	r1, #15
 8011534:	187b      	adds	r3, r7, r1
 8011536:	2200      	movs	r2, #0
 8011538:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801153a:	260e      	movs	r6, #14
 801153c:	19bb      	adds	r3, r7, r6
 801153e:	2200      	movs	r2, #0
 8011540:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011542:	687a      	ldr	r2, [r7, #4]
 8011544:	23b0      	movs	r3, #176	; 0xb0
 8011546:	009b      	lsls	r3, r3, #2
 8011548:	58d2      	ldr	r2, [r2, r3]
 801154a:	000d      	movs	r5, r1
 801154c:	187c      	adds	r4, r7, r1
 801154e:	1cfb      	adds	r3, r7, #3
 8011550:	781b      	ldrb	r3, [r3, #0]
 8011552:	0019      	movs	r1, r3
 8011554:	0010      	movs	r0, r2
 8011556:	f7f3 fb46 	bl	8004be6 <HAL_PCD_EP_Close>
 801155a:	0003      	movs	r3, r0
 801155c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801155e:	19bc      	adds	r4, r7, r6
 8011560:	197b      	adds	r3, r7, r5
 8011562:	781b      	ldrb	r3, [r3, #0]
 8011564:	0018      	movs	r0, r3
 8011566:	f000 f95a 	bl	801181e <USBD_Get_USB_Status>
 801156a:	0003      	movs	r3, r0
 801156c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801156e:	19bb      	adds	r3, r7, r6
 8011570:	781b      	ldrb	r3, [r3, #0]
}
 8011572:	0018      	movs	r0, r3
 8011574:	46bd      	mov	sp, r7
 8011576:	b005      	add	sp, #20
 8011578:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801157a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801157a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801157c:	b085      	sub	sp, #20
 801157e:	af00      	add	r7, sp, #0
 8011580:	6078      	str	r0, [r7, #4]
 8011582:	000a      	movs	r2, r1
 8011584:	1cfb      	adds	r3, r7, #3
 8011586:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011588:	210f      	movs	r1, #15
 801158a:	187b      	adds	r3, r7, r1
 801158c:	2200      	movs	r2, #0
 801158e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011590:	260e      	movs	r6, #14
 8011592:	19bb      	adds	r3, r7, r6
 8011594:	2200      	movs	r2, #0
 8011596:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011598:	687a      	ldr	r2, [r7, #4]
 801159a:	23b0      	movs	r3, #176	; 0xb0
 801159c:	009b      	lsls	r3, r3, #2
 801159e:	58d2      	ldr	r2, [r2, r3]
 80115a0:	000d      	movs	r5, r1
 80115a2:	187c      	adds	r4, r7, r1
 80115a4:	1cfb      	adds	r3, r7, #3
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	0019      	movs	r1, r3
 80115aa:	0010      	movs	r0, r2
 80115ac:	f7f3 fc12 	bl	8004dd4 <HAL_PCD_EP_SetStall>
 80115b0:	0003      	movs	r3, r0
 80115b2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115b4:	19bc      	adds	r4, r7, r6
 80115b6:	197b      	adds	r3, r7, r5
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	0018      	movs	r0, r3
 80115bc:	f000 f92f 	bl	801181e <USBD_Get_USB_Status>
 80115c0:	0003      	movs	r3, r0
 80115c2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80115c4:	19bb      	adds	r3, r7, r6
 80115c6:	781b      	ldrb	r3, [r3, #0]
}
 80115c8:	0018      	movs	r0, r3
 80115ca:	46bd      	mov	sp, r7
 80115cc:	b005      	add	sp, #20
 80115ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080115d0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115d2:	b085      	sub	sp, #20
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
 80115d8:	000a      	movs	r2, r1
 80115da:	1cfb      	adds	r3, r7, #3
 80115dc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115de:	210f      	movs	r1, #15
 80115e0:	187b      	adds	r3, r7, r1
 80115e2:	2200      	movs	r2, #0
 80115e4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115e6:	260e      	movs	r6, #14
 80115e8:	19bb      	adds	r3, r7, r6
 80115ea:	2200      	movs	r2, #0
 80115ec:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80115ee:	687a      	ldr	r2, [r7, #4]
 80115f0:	23b0      	movs	r3, #176	; 0xb0
 80115f2:	009b      	lsls	r3, r3, #2
 80115f4:	58d2      	ldr	r2, [r2, r3]
 80115f6:	000d      	movs	r5, r1
 80115f8:	187c      	adds	r4, r7, r1
 80115fa:	1cfb      	adds	r3, r7, #3
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	0019      	movs	r1, r3
 8011600:	0010      	movs	r0, r2
 8011602:	f7f3 fc43 	bl	8004e8c <HAL_PCD_EP_ClrStall>
 8011606:	0003      	movs	r3, r0
 8011608:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801160a:	19bc      	adds	r4, r7, r6
 801160c:	197b      	adds	r3, r7, r5
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	0018      	movs	r0, r3
 8011612:	f000 f904 	bl	801181e <USBD_Get_USB_Status>
 8011616:	0003      	movs	r3, r0
 8011618:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801161a:	19bb      	adds	r3, r7, r6
 801161c:	781b      	ldrb	r3, [r3, #0]
}
 801161e:	0018      	movs	r0, r3
 8011620:	46bd      	mov	sp, r7
 8011622:	b005      	add	sp, #20
 8011624:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011626 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011626:	b580      	push	{r7, lr}
 8011628:	b084      	sub	sp, #16
 801162a:	af00      	add	r7, sp, #0
 801162c:	6078      	str	r0, [r7, #4]
 801162e:	000a      	movs	r2, r1
 8011630:	1cfb      	adds	r3, r7, #3
 8011632:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011634:	687a      	ldr	r2, [r7, #4]
 8011636:	23b0      	movs	r3, #176	; 0xb0
 8011638:	009b      	lsls	r3, r3, #2
 801163a:	58d3      	ldr	r3, [r2, r3]
 801163c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801163e:	1cfb      	adds	r3, r7, #3
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	b25b      	sxtb	r3, r3
 8011644:	2b00      	cmp	r3, #0
 8011646:	da0d      	bge.n	8011664 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011648:	1cfb      	adds	r3, r7, #3
 801164a:	781b      	ldrb	r3, [r3, #0]
 801164c:	227f      	movs	r2, #127	; 0x7f
 801164e:	4013      	ands	r3, r2
 8011650:	68f9      	ldr	r1, [r7, #12]
 8011652:	1c5a      	adds	r2, r3, #1
 8011654:	0013      	movs	r3, r2
 8011656:	009b      	lsls	r3, r3, #2
 8011658:	189b      	adds	r3, r3, r2
 801165a:	00db      	lsls	r3, r3, #3
 801165c:	18cb      	adds	r3, r1, r3
 801165e:	3302      	adds	r3, #2
 8011660:	781b      	ldrb	r3, [r3, #0]
 8011662:	e00d      	b.n	8011680 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011664:	1cfb      	adds	r3, r7, #3
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	227f      	movs	r2, #127	; 0x7f
 801166a:	401a      	ands	r2, r3
 801166c:	68f8      	ldr	r0, [r7, #12]
 801166e:	23b5      	movs	r3, #181	; 0xb5
 8011670:	0059      	lsls	r1, r3, #1
 8011672:	0013      	movs	r3, r2
 8011674:	009b      	lsls	r3, r3, #2
 8011676:	189b      	adds	r3, r3, r2
 8011678:	00db      	lsls	r3, r3, #3
 801167a:	18c3      	adds	r3, r0, r3
 801167c:	185b      	adds	r3, r3, r1
 801167e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011680:	0018      	movs	r0, r3
 8011682:	46bd      	mov	sp, r7
 8011684:	b004      	add	sp, #16
 8011686:	bd80      	pop	{r7, pc}

08011688 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801168a:	b085      	sub	sp, #20
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
 8011690:	000a      	movs	r2, r1
 8011692:	1cfb      	adds	r3, r7, #3
 8011694:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011696:	210f      	movs	r1, #15
 8011698:	187b      	adds	r3, r7, r1
 801169a:	2200      	movs	r2, #0
 801169c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801169e:	260e      	movs	r6, #14
 80116a0:	19bb      	adds	r3, r7, r6
 80116a2:	2200      	movs	r2, #0
 80116a4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80116a6:	687a      	ldr	r2, [r7, #4]
 80116a8:	23b0      	movs	r3, #176	; 0xb0
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	58d2      	ldr	r2, [r2, r3]
 80116ae:	000d      	movs	r5, r1
 80116b0:	187c      	adds	r4, r7, r1
 80116b2:	1cfb      	adds	r3, r7, #3
 80116b4:	781b      	ldrb	r3, [r3, #0]
 80116b6:	0019      	movs	r1, r3
 80116b8:	0010      	movs	r0, r2
 80116ba:	f7f3 f9f1 	bl	8004aa0 <HAL_PCD_SetAddress>
 80116be:	0003      	movs	r3, r0
 80116c0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116c2:	19bc      	adds	r4, r7, r6
 80116c4:	197b      	adds	r3, r7, r5
 80116c6:	781b      	ldrb	r3, [r3, #0]
 80116c8:	0018      	movs	r0, r3
 80116ca:	f000 f8a8 	bl	801181e <USBD_Get_USB_Status>
 80116ce:	0003      	movs	r3, r0
 80116d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80116d2:	19bb      	adds	r3, r7, r6
 80116d4:	781b      	ldrb	r3, [r3, #0]
}
 80116d6:	0018      	movs	r0, r3
 80116d8:	46bd      	mov	sp, r7
 80116da:	b005      	add	sp, #20
 80116dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080116de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80116de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116e0:	b087      	sub	sp, #28
 80116e2:	af00      	add	r7, sp, #0
 80116e4:	60f8      	str	r0, [r7, #12]
 80116e6:	0008      	movs	r0, r1
 80116e8:	607a      	str	r2, [r7, #4]
 80116ea:	0019      	movs	r1, r3
 80116ec:	230b      	movs	r3, #11
 80116ee:	18fb      	adds	r3, r7, r3
 80116f0:	1c02      	adds	r2, r0, #0
 80116f2:	701a      	strb	r2, [r3, #0]
 80116f4:	2408      	movs	r4, #8
 80116f6:	193b      	adds	r3, r7, r4
 80116f8:	1c0a      	adds	r2, r1, #0
 80116fa:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116fc:	2117      	movs	r1, #23
 80116fe:	187b      	adds	r3, r7, r1
 8011700:	2200      	movs	r2, #0
 8011702:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011704:	2516      	movs	r5, #22
 8011706:	197b      	adds	r3, r7, r5
 8011708:	2200      	movs	r2, #0
 801170a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801170c:	68fa      	ldr	r2, [r7, #12]
 801170e:	23b0      	movs	r3, #176	; 0xb0
 8011710:	009b      	lsls	r3, r3, #2
 8011712:	58d0      	ldr	r0, [r2, r3]
 8011714:	193b      	adds	r3, r7, r4
 8011716:	881d      	ldrh	r5, [r3, #0]
 8011718:	000e      	movs	r6, r1
 801171a:	187c      	adds	r4, r7, r1
 801171c:	687a      	ldr	r2, [r7, #4]
 801171e:	230b      	movs	r3, #11
 8011720:	18fb      	adds	r3, r7, r3
 8011722:	7819      	ldrb	r1, [r3, #0]
 8011724:	002b      	movs	r3, r5
 8011726:	f7f3 fb0c 	bl	8004d42 <HAL_PCD_EP_Transmit>
 801172a:	0003      	movs	r3, r0
 801172c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801172e:	2516      	movs	r5, #22
 8011730:	197c      	adds	r4, r7, r5
 8011732:	19bb      	adds	r3, r7, r6
 8011734:	781b      	ldrb	r3, [r3, #0]
 8011736:	0018      	movs	r0, r3
 8011738:	f000 f871 	bl	801181e <USBD_Get_USB_Status>
 801173c:	0003      	movs	r3, r0
 801173e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011740:	197b      	adds	r3, r7, r5
 8011742:	781b      	ldrb	r3, [r3, #0]
}
 8011744:	0018      	movs	r0, r3
 8011746:	46bd      	mov	sp, r7
 8011748:	b007      	add	sp, #28
 801174a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801174c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801174c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801174e:	b087      	sub	sp, #28
 8011750:	af00      	add	r7, sp, #0
 8011752:	60f8      	str	r0, [r7, #12]
 8011754:	0008      	movs	r0, r1
 8011756:	607a      	str	r2, [r7, #4]
 8011758:	0019      	movs	r1, r3
 801175a:	230b      	movs	r3, #11
 801175c:	18fb      	adds	r3, r7, r3
 801175e:	1c02      	adds	r2, r0, #0
 8011760:	701a      	strb	r2, [r3, #0]
 8011762:	2408      	movs	r4, #8
 8011764:	193b      	adds	r3, r7, r4
 8011766:	1c0a      	adds	r2, r1, #0
 8011768:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801176a:	2117      	movs	r1, #23
 801176c:	187b      	adds	r3, r7, r1
 801176e:	2200      	movs	r2, #0
 8011770:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011772:	2516      	movs	r5, #22
 8011774:	197b      	adds	r3, r7, r5
 8011776:	2200      	movs	r2, #0
 8011778:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801177a:	68fa      	ldr	r2, [r7, #12]
 801177c:	23b0      	movs	r3, #176	; 0xb0
 801177e:	009b      	lsls	r3, r3, #2
 8011780:	58d0      	ldr	r0, [r2, r3]
 8011782:	193b      	adds	r3, r7, r4
 8011784:	881d      	ldrh	r5, [r3, #0]
 8011786:	000e      	movs	r6, r1
 8011788:	187c      	adds	r4, r7, r1
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	230b      	movs	r3, #11
 801178e:	18fb      	adds	r3, r7, r3
 8011790:	7819      	ldrb	r1, [r3, #0]
 8011792:	002b      	movs	r3, r5
 8011794:	f7f3 fa78 	bl	8004c88 <HAL_PCD_EP_Receive>
 8011798:	0003      	movs	r3, r0
 801179a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801179c:	2516      	movs	r5, #22
 801179e:	197c      	adds	r4, r7, r5
 80117a0:	19bb      	adds	r3, r7, r6
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	0018      	movs	r0, r3
 80117a6:	f000 f83a 	bl	801181e <USBD_Get_USB_Status>
 80117aa:	0003      	movs	r3, r0
 80117ac:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80117ae:	197b      	adds	r3, r7, r5
 80117b0:	781b      	ldrb	r3, [r3, #0]
}
 80117b2:	0018      	movs	r0, r3
 80117b4:	46bd      	mov	sp, r7
 80117b6:	b007      	add	sp, #28
 80117b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080117ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117ba:	b580      	push	{r7, lr}
 80117bc:	b082      	sub	sp, #8
 80117be:	af00      	add	r7, sp, #0
 80117c0:	6078      	str	r0, [r7, #4]
 80117c2:	000a      	movs	r2, r1
 80117c4:	1cfb      	adds	r3, r7, #3
 80117c6:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80117c8:	687a      	ldr	r2, [r7, #4]
 80117ca:	23b0      	movs	r3, #176	; 0xb0
 80117cc:	009b      	lsls	r3, r3, #2
 80117ce:	58d2      	ldr	r2, [r2, r3]
 80117d0:	1cfb      	adds	r3, r7, #3
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	0019      	movs	r1, r3
 80117d6:	0010      	movs	r0, r2
 80117d8:	f7f3 fa9a 	bl	8004d10 <HAL_PCD_EP_GetRxCount>
 80117dc:	0003      	movs	r3, r0
}
 80117de:	0018      	movs	r0, r3
 80117e0:	46bd      	mov	sp, r7
 80117e2:	b002      	add	sp, #8
 80117e4:	bd80      	pop	{r7, pc}
	...

080117e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80117f0:	4b02      	ldr	r3, [pc, #8]	; (80117fc <USBD_static_malloc+0x14>)
}
 80117f2:	0018      	movs	r0, r3
 80117f4:	46bd      	mov	sp, r7
 80117f6:	b002      	add	sp, #8
 80117f8:	bd80      	pop	{r7, pc}
 80117fa:	46c0      	nop			; (mov r8, r8)
 80117fc:	20001fbc 	.word	0x20001fbc

08011800 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b082      	sub	sp, #8
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]

}
 8011808:	46c0      	nop			; (mov r8, r8)
 801180a:	46bd      	mov	sp, r7
 801180c:	b002      	add	sp, #8
 801180e:	bd80      	pop	{r7, pc}

08011810 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011814:	f7ef f88e 	bl	8000934 <SystemClock_Config>
}
 8011818:	46c0      	nop			; (mov r8, r8)
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}

0801181e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801181e:	b580      	push	{r7, lr}
 8011820:	b084      	sub	sp, #16
 8011822:	af00      	add	r7, sp, #0
 8011824:	0002      	movs	r2, r0
 8011826:	1dfb      	adds	r3, r7, #7
 8011828:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801182a:	230f      	movs	r3, #15
 801182c:	18fb      	adds	r3, r7, r3
 801182e:	2200      	movs	r2, #0
 8011830:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8011832:	1dfb      	adds	r3, r7, #7
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	2b03      	cmp	r3, #3
 8011838:	d017      	beq.n	801186a <USBD_Get_USB_Status+0x4c>
 801183a:	dc1b      	bgt.n	8011874 <USBD_Get_USB_Status+0x56>
 801183c:	2b02      	cmp	r3, #2
 801183e:	d00f      	beq.n	8011860 <USBD_Get_USB_Status+0x42>
 8011840:	dc18      	bgt.n	8011874 <USBD_Get_USB_Status+0x56>
 8011842:	2b00      	cmp	r3, #0
 8011844:	d002      	beq.n	801184c <USBD_Get_USB_Status+0x2e>
 8011846:	2b01      	cmp	r3, #1
 8011848:	d005      	beq.n	8011856 <USBD_Get_USB_Status+0x38>
 801184a:	e013      	b.n	8011874 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801184c:	230f      	movs	r3, #15
 801184e:	18fb      	adds	r3, r7, r3
 8011850:	2200      	movs	r2, #0
 8011852:	701a      	strb	r2, [r3, #0]
    break;
 8011854:	e013      	b.n	801187e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011856:	230f      	movs	r3, #15
 8011858:	18fb      	adds	r3, r7, r3
 801185a:	2202      	movs	r2, #2
 801185c:	701a      	strb	r2, [r3, #0]
    break;
 801185e:	e00e      	b.n	801187e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011860:	230f      	movs	r3, #15
 8011862:	18fb      	adds	r3, r7, r3
 8011864:	2201      	movs	r2, #1
 8011866:	701a      	strb	r2, [r3, #0]
    break;
 8011868:	e009      	b.n	801187e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801186a:	230f      	movs	r3, #15
 801186c:	18fb      	adds	r3, r7, r3
 801186e:	2202      	movs	r2, #2
 8011870:	701a      	strb	r2, [r3, #0]
    break;
 8011872:	e004      	b.n	801187e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8011874:	230f      	movs	r3, #15
 8011876:	18fb      	adds	r3, r7, r3
 8011878:	2202      	movs	r2, #2
 801187a:	701a      	strb	r2, [r3, #0]
    break;
 801187c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 801187e:	230f      	movs	r3, #15
 8011880:	18fb      	adds	r3, r7, r3
 8011882:	781b      	ldrb	r3, [r3, #0]
}
 8011884:	0018      	movs	r0, r3
 8011886:	46bd      	mov	sp, r7
 8011888:	b004      	add	sp, #16
 801188a:	bd80      	pop	{r7, pc}

0801188c <_ZdlPvj>:
 801188c:	b510      	push	{r4, lr}
 801188e:	f000 f804 	bl	801189a <_ZdlPv>
 8011892:	bd10      	pop	{r4, pc}

08011894 <__cxa_pure_virtual>:
 8011894:	b510      	push	{r4, lr}
 8011896:	f000 f809 	bl	80118ac <_ZSt9terminatev>

0801189a <_ZdlPv>:
 801189a:	b510      	push	{r4, lr}
 801189c:	f000 f86e 	bl	801197c <free>
 80118a0:	bd10      	pop	{r4, pc}

080118a2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80118a2:	b510      	push	{r4, lr}
 80118a4:	4780      	blx	r0
 80118a6:	f000 f809 	bl	80118bc <abort>
	...

080118ac <_ZSt9terminatev>:
 80118ac:	4b02      	ldr	r3, [pc, #8]	; (80118b8 <_ZSt9terminatev+0xc>)
 80118ae:	b510      	push	{r4, lr}
 80118b0:	6818      	ldr	r0, [r3, #0]
 80118b2:	f7ff fff6 	bl	80118a2 <_ZN10__cxxabiv111__terminateEPFvvE>
 80118b6:	46c0      	nop			; (mov r8, r8)
 80118b8:	200001d8 	.word	0x200001d8

080118bc <abort>:
 80118bc:	2006      	movs	r0, #6
 80118be:	b510      	push	{r4, lr}
 80118c0:	f000 fc4a 	bl	8012158 <raise>
 80118c4:	2001      	movs	r0, #1
 80118c6:	f7ef fb49 	bl	8000f5c <_exit>
	...

080118cc <__assert_func>:
 80118cc:	b530      	push	{r4, r5, lr}
 80118ce:	0014      	movs	r4, r2
 80118d0:	001a      	movs	r2, r3
 80118d2:	4b09      	ldr	r3, [pc, #36]	; (80118f8 <__assert_func+0x2c>)
 80118d4:	0005      	movs	r5, r0
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	b085      	sub	sp, #20
 80118da:	68d8      	ldr	r0, [r3, #12]
 80118dc:	4b07      	ldr	r3, [pc, #28]	; (80118fc <__assert_func+0x30>)
 80118de:	2c00      	cmp	r4, #0
 80118e0:	d101      	bne.n	80118e6 <__assert_func+0x1a>
 80118e2:	4b07      	ldr	r3, [pc, #28]	; (8011900 <__assert_func+0x34>)
 80118e4:	001c      	movs	r4, r3
 80118e6:	9301      	str	r3, [sp, #4]
 80118e8:	9100      	str	r1, [sp, #0]
 80118ea:	002b      	movs	r3, r5
 80118ec:	4905      	ldr	r1, [pc, #20]	; (8011904 <__assert_func+0x38>)
 80118ee:	9402      	str	r4, [sp, #8]
 80118f0:	f000 f810 	bl	8011914 <fiprintf>
 80118f4:	f7ff ffe2 	bl	80118bc <abort>
 80118f8:	200001dc 	.word	0x200001dc
 80118fc:	08013498 	.word	0x08013498
 8011900:	080134d3 	.word	0x080134d3
 8011904:	080134a5 	.word	0x080134a5

08011908 <__errno>:
 8011908:	4b01      	ldr	r3, [pc, #4]	; (8011910 <__errno+0x8>)
 801190a:	6818      	ldr	r0, [r3, #0]
 801190c:	4770      	bx	lr
 801190e:	46c0      	nop			; (mov r8, r8)
 8011910:	200001dc 	.word	0x200001dc

08011914 <fiprintf>:
 8011914:	b40e      	push	{r1, r2, r3}
 8011916:	b503      	push	{r0, r1, lr}
 8011918:	0001      	movs	r1, r0
 801191a:	ab03      	add	r3, sp, #12
 801191c:	4804      	ldr	r0, [pc, #16]	; (8011930 <fiprintf+0x1c>)
 801191e:	cb04      	ldmia	r3!, {r2}
 8011920:	6800      	ldr	r0, [r0, #0]
 8011922:	9301      	str	r3, [sp, #4]
 8011924:	f000 f920 	bl	8011b68 <_vfiprintf_r>
 8011928:	b002      	add	sp, #8
 801192a:	bc08      	pop	{r3}
 801192c:	b003      	add	sp, #12
 801192e:	4718      	bx	r3
 8011930:	200001dc 	.word	0x200001dc

08011934 <__libc_init_array>:
 8011934:	b570      	push	{r4, r5, r6, lr}
 8011936:	2600      	movs	r6, #0
 8011938:	4d0c      	ldr	r5, [pc, #48]	; (801196c <__libc_init_array+0x38>)
 801193a:	4c0d      	ldr	r4, [pc, #52]	; (8011970 <__libc_init_array+0x3c>)
 801193c:	1b64      	subs	r4, r4, r5
 801193e:	10a4      	asrs	r4, r4, #2
 8011940:	42a6      	cmp	r6, r4
 8011942:	d109      	bne.n	8011958 <__libc_init_array+0x24>
 8011944:	2600      	movs	r6, #0
 8011946:	f001 f801 	bl	801294c <_init>
 801194a:	4d0a      	ldr	r5, [pc, #40]	; (8011974 <__libc_init_array+0x40>)
 801194c:	4c0a      	ldr	r4, [pc, #40]	; (8011978 <__libc_init_array+0x44>)
 801194e:	1b64      	subs	r4, r4, r5
 8011950:	10a4      	asrs	r4, r4, #2
 8011952:	42a6      	cmp	r6, r4
 8011954:	d105      	bne.n	8011962 <__libc_init_array+0x2e>
 8011956:	bd70      	pop	{r4, r5, r6, pc}
 8011958:	00b3      	lsls	r3, r6, #2
 801195a:	58eb      	ldr	r3, [r5, r3]
 801195c:	4798      	blx	r3
 801195e:	3601      	adds	r6, #1
 8011960:	e7ee      	b.n	8011940 <__libc_init_array+0xc>
 8011962:	00b3      	lsls	r3, r6, #2
 8011964:	58eb      	ldr	r3, [r5, r3]
 8011966:	4798      	blx	r3
 8011968:	3601      	adds	r6, #1
 801196a:	e7f2      	b.n	8011952 <__libc_init_array+0x1e>
 801196c:	0801356c 	.word	0x0801356c
 8011970:	0801356c 	.word	0x0801356c
 8011974:	0801356c 	.word	0x0801356c
 8011978:	08013574 	.word	0x08013574

0801197c <free>:
 801197c:	b510      	push	{r4, lr}
 801197e:	4b03      	ldr	r3, [pc, #12]	; (801198c <free+0x10>)
 8011980:	0001      	movs	r1, r0
 8011982:	6818      	ldr	r0, [r3, #0]
 8011984:	f000 f820 	bl	80119c8 <_free_r>
 8011988:	bd10      	pop	{r4, pc}
 801198a:	46c0      	nop			; (mov r8, r8)
 801198c:	200001dc 	.word	0x200001dc

08011990 <memchr>:
 8011990:	b2c9      	uxtb	r1, r1
 8011992:	1882      	adds	r2, r0, r2
 8011994:	4290      	cmp	r0, r2
 8011996:	d101      	bne.n	801199c <memchr+0xc>
 8011998:	2000      	movs	r0, #0
 801199a:	4770      	bx	lr
 801199c:	7803      	ldrb	r3, [r0, #0]
 801199e:	428b      	cmp	r3, r1
 80119a0:	d0fb      	beq.n	801199a <memchr+0xa>
 80119a2:	3001      	adds	r0, #1
 80119a4:	e7f6      	b.n	8011994 <memchr+0x4>

080119a6 <memcpy>:
 80119a6:	2300      	movs	r3, #0
 80119a8:	b510      	push	{r4, lr}
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d100      	bne.n	80119b0 <memcpy+0xa>
 80119ae:	bd10      	pop	{r4, pc}
 80119b0:	5ccc      	ldrb	r4, [r1, r3]
 80119b2:	54c4      	strb	r4, [r0, r3]
 80119b4:	3301      	adds	r3, #1
 80119b6:	e7f8      	b.n	80119aa <memcpy+0x4>

080119b8 <memset>:
 80119b8:	0003      	movs	r3, r0
 80119ba:	1882      	adds	r2, r0, r2
 80119bc:	4293      	cmp	r3, r2
 80119be:	d100      	bne.n	80119c2 <memset+0xa>
 80119c0:	4770      	bx	lr
 80119c2:	7019      	strb	r1, [r3, #0]
 80119c4:	3301      	adds	r3, #1
 80119c6:	e7f9      	b.n	80119bc <memset+0x4>

080119c8 <_free_r>:
 80119c8:	b570      	push	{r4, r5, r6, lr}
 80119ca:	0005      	movs	r5, r0
 80119cc:	2900      	cmp	r1, #0
 80119ce:	d010      	beq.n	80119f2 <_free_r+0x2a>
 80119d0:	1f0c      	subs	r4, r1, #4
 80119d2:	6823      	ldr	r3, [r4, #0]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	da00      	bge.n	80119da <_free_r+0x12>
 80119d8:	18e4      	adds	r4, r4, r3
 80119da:	0028      	movs	r0, r5
 80119dc:	f000 fee8 	bl	80127b0 <__malloc_lock>
 80119e0:	4a1d      	ldr	r2, [pc, #116]	; (8011a58 <_free_r+0x90>)
 80119e2:	6813      	ldr	r3, [r2, #0]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d105      	bne.n	80119f4 <_free_r+0x2c>
 80119e8:	6063      	str	r3, [r4, #4]
 80119ea:	6014      	str	r4, [r2, #0]
 80119ec:	0028      	movs	r0, r5
 80119ee:	f000 fee7 	bl	80127c0 <__malloc_unlock>
 80119f2:	bd70      	pop	{r4, r5, r6, pc}
 80119f4:	42a3      	cmp	r3, r4
 80119f6:	d908      	bls.n	8011a0a <_free_r+0x42>
 80119f8:	6821      	ldr	r1, [r4, #0]
 80119fa:	1860      	adds	r0, r4, r1
 80119fc:	4283      	cmp	r3, r0
 80119fe:	d1f3      	bne.n	80119e8 <_free_r+0x20>
 8011a00:	6818      	ldr	r0, [r3, #0]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	1841      	adds	r1, r0, r1
 8011a06:	6021      	str	r1, [r4, #0]
 8011a08:	e7ee      	b.n	80119e8 <_free_r+0x20>
 8011a0a:	001a      	movs	r2, r3
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d001      	beq.n	8011a16 <_free_r+0x4e>
 8011a12:	42a3      	cmp	r3, r4
 8011a14:	d9f9      	bls.n	8011a0a <_free_r+0x42>
 8011a16:	6811      	ldr	r1, [r2, #0]
 8011a18:	1850      	adds	r0, r2, r1
 8011a1a:	42a0      	cmp	r0, r4
 8011a1c:	d10b      	bne.n	8011a36 <_free_r+0x6e>
 8011a1e:	6820      	ldr	r0, [r4, #0]
 8011a20:	1809      	adds	r1, r1, r0
 8011a22:	1850      	adds	r0, r2, r1
 8011a24:	6011      	str	r1, [r2, #0]
 8011a26:	4283      	cmp	r3, r0
 8011a28:	d1e0      	bne.n	80119ec <_free_r+0x24>
 8011a2a:	6818      	ldr	r0, [r3, #0]
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	1841      	adds	r1, r0, r1
 8011a30:	6011      	str	r1, [r2, #0]
 8011a32:	6053      	str	r3, [r2, #4]
 8011a34:	e7da      	b.n	80119ec <_free_r+0x24>
 8011a36:	42a0      	cmp	r0, r4
 8011a38:	d902      	bls.n	8011a40 <_free_r+0x78>
 8011a3a:	230c      	movs	r3, #12
 8011a3c:	602b      	str	r3, [r5, #0]
 8011a3e:	e7d5      	b.n	80119ec <_free_r+0x24>
 8011a40:	6821      	ldr	r1, [r4, #0]
 8011a42:	1860      	adds	r0, r4, r1
 8011a44:	4283      	cmp	r3, r0
 8011a46:	d103      	bne.n	8011a50 <_free_r+0x88>
 8011a48:	6818      	ldr	r0, [r3, #0]
 8011a4a:	685b      	ldr	r3, [r3, #4]
 8011a4c:	1841      	adds	r1, r0, r1
 8011a4e:	6021      	str	r1, [r4, #0]
 8011a50:	6063      	str	r3, [r4, #4]
 8011a52:	6054      	str	r4, [r2, #4]
 8011a54:	e7ca      	b.n	80119ec <_free_r+0x24>
 8011a56:	46c0      	nop			; (mov r8, r8)
 8011a58:	200021dc 	.word	0x200021dc

08011a5c <_malloc_r>:
 8011a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a5e:	2303      	movs	r3, #3
 8011a60:	1ccd      	adds	r5, r1, #3
 8011a62:	439d      	bics	r5, r3
 8011a64:	3508      	adds	r5, #8
 8011a66:	0006      	movs	r6, r0
 8011a68:	2d0c      	cmp	r5, #12
 8011a6a:	d21f      	bcs.n	8011aac <_malloc_r+0x50>
 8011a6c:	250c      	movs	r5, #12
 8011a6e:	42a9      	cmp	r1, r5
 8011a70:	d81e      	bhi.n	8011ab0 <_malloc_r+0x54>
 8011a72:	0030      	movs	r0, r6
 8011a74:	f000 fe9c 	bl	80127b0 <__malloc_lock>
 8011a78:	4925      	ldr	r1, [pc, #148]	; (8011b10 <_malloc_r+0xb4>)
 8011a7a:	680a      	ldr	r2, [r1, #0]
 8011a7c:	0014      	movs	r4, r2
 8011a7e:	2c00      	cmp	r4, #0
 8011a80:	d11a      	bne.n	8011ab8 <_malloc_r+0x5c>
 8011a82:	4f24      	ldr	r7, [pc, #144]	; (8011b14 <_malloc_r+0xb8>)
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d104      	bne.n	8011a94 <_malloc_r+0x38>
 8011a8a:	0021      	movs	r1, r4
 8011a8c:	0030      	movs	r0, r6
 8011a8e:	f000 fb27 	bl	80120e0 <_sbrk_r>
 8011a92:	6038      	str	r0, [r7, #0]
 8011a94:	0029      	movs	r1, r5
 8011a96:	0030      	movs	r0, r6
 8011a98:	f000 fb22 	bl	80120e0 <_sbrk_r>
 8011a9c:	1c43      	adds	r3, r0, #1
 8011a9e:	d12b      	bne.n	8011af8 <_malloc_r+0x9c>
 8011aa0:	230c      	movs	r3, #12
 8011aa2:	0030      	movs	r0, r6
 8011aa4:	6033      	str	r3, [r6, #0]
 8011aa6:	f000 fe8b 	bl	80127c0 <__malloc_unlock>
 8011aaa:	e003      	b.n	8011ab4 <_malloc_r+0x58>
 8011aac:	2d00      	cmp	r5, #0
 8011aae:	dade      	bge.n	8011a6e <_malloc_r+0x12>
 8011ab0:	230c      	movs	r3, #12
 8011ab2:	6033      	str	r3, [r6, #0]
 8011ab4:	2000      	movs	r0, #0
 8011ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ab8:	6823      	ldr	r3, [r4, #0]
 8011aba:	1b5b      	subs	r3, r3, r5
 8011abc:	d419      	bmi.n	8011af2 <_malloc_r+0x96>
 8011abe:	2b0b      	cmp	r3, #11
 8011ac0:	d903      	bls.n	8011aca <_malloc_r+0x6e>
 8011ac2:	6023      	str	r3, [r4, #0]
 8011ac4:	18e4      	adds	r4, r4, r3
 8011ac6:	6025      	str	r5, [r4, #0]
 8011ac8:	e003      	b.n	8011ad2 <_malloc_r+0x76>
 8011aca:	6863      	ldr	r3, [r4, #4]
 8011acc:	42a2      	cmp	r2, r4
 8011ace:	d10e      	bne.n	8011aee <_malloc_r+0x92>
 8011ad0:	600b      	str	r3, [r1, #0]
 8011ad2:	0030      	movs	r0, r6
 8011ad4:	f000 fe74 	bl	80127c0 <__malloc_unlock>
 8011ad8:	0020      	movs	r0, r4
 8011ada:	2207      	movs	r2, #7
 8011adc:	300b      	adds	r0, #11
 8011ade:	1d23      	adds	r3, r4, #4
 8011ae0:	4390      	bics	r0, r2
 8011ae2:	1ac2      	subs	r2, r0, r3
 8011ae4:	4298      	cmp	r0, r3
 8011ae6:	d0e6      	beq.n	8011ab6 <_malloc_r+0x5a>
 8011ae8:	1a1b      	subs	r3, r3, r0
 8011aea:	50a3      	str	r3, [r4, r2]
 8011aec:	e7e3      	b.n	8011ab6 <_malloc_r+0x5a>
 8011aee:	6053      	str	r3, [r2, #4]
 8011af0:	e7ef      	b.n	8011ad2 <_malloc_r+0x76>
 8011af2:	0022      	movs	r2, r4
 8011af4:	6864      	ldr	r4, [r4, #4]
 8011af6:	e7c2      	b.n	8011a7e <_malloc_r+0x22>
 8011af8:	2303      	movs	r3, #3
 8011afa:	1cc4      	adds	r4, r0, #3
 8011afc:	439c      	bics	r4, r3
 8011afe:	42a0      	cmp	r0, r4
 8011b00:	d0e1      	beq.n	8011ac6 <_malloc_r+0x6a>
 8011b02:	1a21      	subs	r1, r4, r0
 8011b04:	0030      	movs	r0, r6
 8011b06:	f000 faeb 	bl	80120e0 <_sbrk_r>
 8011b0a:	1c43      	adds	r3, r0, #1
 8011b0c:	d1db      	bne.n	8011ac6 <_malloc_r+0x6a>
 8011b0e:	e7c7      	b.n	8011aa0 <_malloc_r+0x44>
 8011b10:	200021dc 	.word	0x200021dc
 8011b14:	200021e0 	.word	0x200021e0

08011b18 <__sfputc_r>:
 8011b18:	6893      	ldr	r3, [r2, #8]
 8011b1a:	b510      	push	{r4, lr}
 8011b1c:	3b01      	subs	r3, #1
 8011b1e:	6093      	str	r3, [r2, #8]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	da04      	bge.n	8011b2e <__sfputc_r+0x16>
 8011b24:	6994      	ldr	r4, [r2, #24]
 8011b26:	42a3      	cmp	r3, r4
 8011b28:	db07      	blt.n	8011b3a <__sfputc_r+0x22>
 8011b2a:	290a      	cmp	r1, #10
 8011b2c:	d005      	beq.n	8011b3a <__sfputc_r+0x22>
 8011b2e:	6813      	ldr	r3, [r2, #0]
 8011b30:	1c58      	adds	r0, r3, #1
 8011b32:	6010      	str	r0, [r2, #0]
 8011b34:	7019      	strb	r1, [r3, #0]
 8011b36:	0008      	movs	r0, r1
 8011b38:	bd10      	pop	{r4, pc}
 8011b3a:	f000 fb2d 	bl	8012198 <__swbuf_r>
 8011b3e:	0001      	movs	r1, r0
 8011b40:	e7f9      	b.n	8011b36 <__sfputc_r+0x1e>

08011b42 <__sfputs_r>:
 8011b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b44:	0006      	movs	r6, r0
 8011b46:	000f      	movs	r7, r1
 8011b48:	0014      	movs	r4, r2
 8011b4a:	18d5      	adds	r5, r2, r3
 8011b4c:	42ac      	cmp	r4, r5
 8011b4e:	d101      	bne.n	8011b54 <__sfputs_r+0x12>
 8011b50:	2000      	movs	r0, #0
 8011b52:	e007      	b.n	8011b64 <__sfputs_r+0x22>
 8011b54:	7821      	ldrb	r1, [r4, #0]
 8011b56:	003a      	movs	r2, r7
 8011b58:	0030      	movs	r0, r6
 8011b5a:	f7ff ffdd 	bl	8011b18 <__sfputc_r>
 8011b5e:	3401      	adds	r4, #1
 8011b60:	1c43      	adds	r3, r0, #1
 8011b62:	d1f3      	bne.n	8011b4c <__sfputs_r+0xa>
 8011b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011b68 <_vfiprintf_r>:
 8011b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b6a:	b0a1      	sub	sp, #132	; 0x84
 8011b6c:	0006      	movs	r6, r0
 8011b6e:	000c      	movs	r4, r1
 8011b70:	001f      	movs	r7, r3
 8011b72:	9203      	str	r2, [sp, #12]
 8011b74:	2800      	cmp	r0, #0
 8011b76:	d004      	beq.n	8011b82 <_vfiprintf_r+0x1a>
 8011b78:	6983      	ldr	r3, [r0, #24]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d101      	bne.n	8011b82 <_vfiprintf_r+0x1a>
 8011b7e:	f000 fd07 	bl	8012590 <__sinit>
 8011b82:	4b8e      	ldr	r3, [pc, #568]	; (8011dbc <_vfiprintf_r+0x254>)
 8011b84:	429c      	cmp	r4, r3
 8011b86:	d11c      	bne.n	8011bc2 <_vfiprintf_r+0x5a>
 8011b88:	6874      	ldr	r4, [r6, #4]
 8011b8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b8c:	07db      	lsls	r3, r3, #31
 8011b8e:	d405      	bmi.n	8011b9c <_vfiprintf_r+0x34>
 8011b90:	89a3      	ldrh	r3, [r4, #12]
 8011b92:	059b      	lsls	r3, r3, #22
 8011b94:	d402      	bmi.n	8011b9c <_vfiprintf_r+0x34>
 8011b96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b98:	f000 fd9b 	bl	80126d2 <__retarget_lock_acquire_recursive>
 8011b9c:	89a3      	ldrh	r3, [r4, #12]
 8011b9e:	071b      	lsls	r3, r3, #28
 8011ba0:	d502      	bpl.n	8011ba8 <_vfiprintf_r+0x40>
 8011ba2:	6923      	ldr	r3, [r4, #16]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d11d      	bne.n	8011be4 <_vfiprintf_r+0x7c>
 8011ba8:	0021      	movs	r1, r4
 8011baa:	0030      	movs	r0, r6
 8011bac:	f000 fb4a 	bl	8012244 <__swsetup_r>
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	d017      	beq.n	8011be4 <_vfiprintf_r+0x7c>
 8011bb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011bb6:	07db      	lsls	r3, r3, #31
 8011bb8:	d50d      	bpl.n	8011bd6 <_vfiprintf_r+0x6e>
 8011bba:	2001      	movs	r0, #1
 8011bbc:	4240      	negs	r0, r0
 8011bbe:	b021      	add	sp, #132	; 0x84
 8011bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bc2:	4b7f      	ldr	r3, [pc, #508]	; (8011dc0 <_vfiprintf_r+0x258>)
 8011bc4:	429c      	cmp	r4, r3
 8011bc6:	d101      	bne.n	8011bcc <_vfiprintf_r+0x64>
 8011bc8:	68b4      	ldr	r4, [r6, #8]
 8011bca:	e7de      	b.n	8011b8a <_vfiprintf_r+0x22>
 8011bcc:	4b7d      	ldr	r3, [pc, #500]	; (8011dc4 <_vfiprintf_r+0x25c>)
 8011bce:	429c      	cmp	r4, r3
 8011bd0:	d1db      	bne.n	8011b8a <_vfiprintf_r+0x22>
 8011bd2:	68f4      	ldr	r4, [r6, #12]
 8011bd4:	e7d9      	b.n	8011b8a <_vfiprintf_r+0x22>
 8011bd6:	89a3      	ldrh	r3, [r4, #12]
 8011bd8:	059b      	lsls	r3, r3, #22
 8011bda:	d4ee      	bmi.n	8011bba <_vfiprintf_r+0x52>
 8011bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bde:	f000 fd79 	bl	80126d4 <__retarget_lock_release_recursive>
 8011be2:	e7ea      	b.n	8011bba <_vfiprintf_r+0x52>
 8011be4:	2300      	movs	r3, #0
 8011be6:	ad08      	add	r5, sp, #32
 8011be8:	616b      	str	r3, [r5, #20]
 8011bea:	3320      	adds	r3, #32
 8011bec:	766b      	strb	r3, [r5, #25]
 8011bee:	3310      	adds	r3, #16
 8011bf0:	76ab      	strb	r3, [r5, #26]
 8011bf2:	9707      	str	r7, [sp, #28]
 8011bf4:	9f03      	ldr	r7, [sp, #12]
 8011bf6:	783b      	ldrb	r3, [r7, #0]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d001      	beq.n	8011c00 <_vfiprintf_r+0x98>
 8011bfc:	2b25      	cmp	r3, #37	; 0x25
 8011bfe:	d14e      	bne.n	8011c9e <_vfiprintf_r+0x136>
 8011c00:	9b03      	ldr	r3, [sp, #12]
 8011c02:	1afb      	subs	r3, r7, r3
 8011c04:	9305      	str	r3, [sp, #20]
 8011c06:	9b03      	ldr	r3, [sp, #12]
 8011c08:	429f      	cmp	r7, r3
 8011c0a:	d00d      	beq.n	8011c28 <_vfiprintf_r+0xc0>
 8011c0c:	9b05      	ldr	r3, [sp, #20]
 8011c0e:	0021      	movs	r1, r4
 8011c10:	0030      	movs	r0, r6
 8011c12:	9a03      	ldr	r2, [sp, #12]
 8011c14:	f7ff ff95 	bl	8011b42 <__sfputs_r>
 8011c18:	1c43      	adds	r3, r0, #1
 8011c1a:	d100      	bne.n	8011c1e <_vfiprintf_r+0xb6>
 8011c1c:	e0b5      	b.n	8011d8a <_vfiprintf_r+0x222>
 8011c1e:	696a      	ldr	r2, [r5, #20]
 8011c20:	9b05      	ldr	r3, [sp, #20]
 8011c22:	4694      	mov	ip, r2
 8011c24:	4463      	add	r3, ip
 8011c26:	616b      	str	r3, [r5, #20]
 8011c28:	783b      	ldrb	r3, [r7, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d100      	bne.n	8011c30 <_vfiprintf_r+0xc8>
 8011c2e:	e0ac      	b.n	8011d8a <_vfiprintf_r+0x222>
 8011c30:	2201      	movs	r2, #1
 8011c32:	1c7b      	adds	r3, r7, #1
 8011c34:	9303      	str	r3, [sp, #12]
 8011c36:	2300      	movs	r3, #0
 8011c38:	4252      	negs	r2, r2
 8011c3a:	606a      	str	r2, [r5, #4]
 8011c3c:	a904      	add	r1, sp, #16
 8011c3e:	3254      	adds	r2, #84	; 0x54
 8011c40:	1852      	adds	r2, r2, r1
 8011c42:	602b      	str	r3, [r5, #0]
 8011c44:	60eb      	str	r3, [r5, #12]
 8011c46:	60ab      	str	r3, [r5, #8]
 8011c48:	7013      	strb	r3, [r2, #0]
 8011c4a:	65ab      	str	r3, [r5, #88]	; 0x58
 8011c4c:	9b03      	ldr	r3, [sp, #12]
 8011c4e:	2205      	movs	r2, #5
 8011c50:	7819      	ldrb	r1, [r3, #0]
 8011c52:	485d      	ldr	r0, [pc, #372]	; (8011dc8 <_vfiprintf_r+0x260>)
 8011c54:	f7ff fe9c 	bl	8011990 <memchr>
 8011c58:	9b03      	ldr	r3, [sp, #12]
 8011c5a:	1c5f      	adds	r7, r3, #1
 8011c5c:	2800      	cmp	r0, #0
 8011c5e:	d120      	bne.n	8011ca2 <_vfiprintf_r+0x13a>
 8011c60:	682a      	ldr	r2, [r5, #0]
 8011c62:	06d3      	lsls	r3, r2, #27
 8011c64:	d504      	bpl.n	8011c70 <_vfiprintf_r+0x108>
 8011c66:	2353      	movs	r3, #83	; 0x53
 8011c68:	a904      	add	r1, sp, #16
 8011c6a:	185b      	adds	r3, r3, r1
 8011c6c:	2120      	movs	r1, #32
 8011c6e:	7019      	strb	r1, [r3, #0]
 8011c70:	0713      	lsls	r3, r2, #28
 8011c72:	d504      	bpl.n	8011c7e <_vfiprintf_r+0x116>
 8011c74:	2353      	movs	r3, #83	; 0x53
 8011c76:	a904      	add	r1, sp, #16
 8011c78:	185b      	adds	r3, r3, r1
 8011c7a:	212b      	movs	r1, #43	; 0x2b
 8011c7c:	7019      	strb	r1, [r3, #0]
 8011c7e:	9b03      	ldr	r3, [sp, #12]
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	2b2a      	cmp	r3, #42	; 0x2a
 8011c84:	d016      	beq.n	8011cb4 <_vfiprintf_r+0x14c>
 8011c86:	2100      	movs	r1, #0
 8011c88:	68eb      	ldr	r3, [r5, #12]
 8011c8a:	9f03      	ldr	r7, [sp, #12]
 8011c8c:	783a      	ldrb	r2, [r7, #0]
 8011c8e:	1c78      	adds	r0, r7, #1
 8011c90:	3a30      	subs	r2, #48	; 0x30
 8011c92:	4684      	mov	ip, r0
 8011c94:	2a09      	cmp	r2, #9
 8011c96:	d94f      	bls.n	8011d38 <_vfiprintf_r+0x1d0>
 8011c98:	2900      	cmp	r1, #0
 8011c9a:	d111      	bne.n	8011cc0 <_vfiprintf_r+0x158>
 8011c9c:	e017      	b.n	8011cce <_vfiprintf_r+0x166>
 8011c9e:	3701      	adds	r7, #1
 8011ca0:	e7a9      	b.n	8011bf6 <_vfiprintf_r+0x8e>
 8011ca2:	4b49      	ldr	r3, [pc, #292]	; (8011dc8 <_vfiprintf_r+0x260>)
 8011ca4:	682a      	ldr	r2, [r5, #0]
 8011ca6:	1ac0      	subs	r0, r0, r3
 8011ca8:	2301      	movs	r3, #1
 8011caa:	4083      	lsls	r3, r0
 8011cac:	4313      	orrs	r3, r2
 8011cae:	602b      	str	r3, [r5, #0]
 8011cb0:	9703      	str	r7, [sp, #12]
 8011cb2:	e7cb      	b.n	8011c4c <_vfiprintf_r+0xe4>
 8011cb4:	9b07      	ldr	r3, [sp, #28]
 8011cb6:	1d19      	adds	r1, r3, #4
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	9107      	str	r1, [sp, #28]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	db01      	blt.n	8011cc4 <_vfiprintf_r+0x15c>
 8011cc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8011cc2:	e004      	b.n	8011cce <_vfiprintf_r+0x166>
 8011cc4:	425b      	negs	r3, r3
 8011cc6:	60eb      	str	r3, [r5, #12]
 8011cc8:	2302      	movs	r3, #2
 8011cca:	4313      	orrs	r3, r2
 8011ccc:	602b      	str	r3, [r5, #0]
 8011cce:	783b      	ldrb	r3, [r7, #0]
 8011cd0:	2b2e      	cmp	r3, #46	; 0x2e
 8011cd2:	d10a      	bne.n	8011cea <_vfiprintf_r+0x182>
 8011cd4:	787b      	ldrb	r3, [r7, #1]
 8011cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8011cd8:	d137      	bne.n	8011d4a <_vfiprintf_r+0x1e2>
 8011cda:	9b07      	ldr	r3, [sp, #28]
 8011cdc:	3702      	adds	r7, #2
 8011cde:	1d1a      	adds	r2, r3, #4
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	9207      	str	r2, [sp, #28]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	db2d      	blt.n	8011d44 <_vfiprintf_r+0x1dc>
 8011ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8011cea:	2203      	movs	r2, #3
 8011cec:	7839      	ldrb	r1, [r7, #0]
 8011cee:	4837      	ldr	r0, [pc, #220]	; (8011dcc <_vfiprintf_r+0x264>)
 8011cf0:	f7ff fe4e 	bl	8011990 <memchr>
 8011cf4:	2800      	cmp	r0, #0
 8011cf6:	d007      	beq.n	8011d08 <_vfiprintf_r+0x1a0>
 8011cf8:	4b34      	ldr	r3, [pc, #208]	; (8011dcc <_vfiprintf_r+0x264>)
 8011cfa:	682a      	ldr	r2, [r5, #0]
 8011cfc:	1ac0      	subs	r0, r0, r3
 8011cfe:	2340      	movs	r3, #64	; 0x40
 8011d00:	4083      	lsls	r3, r0
 8011d02:	4313      	orrs	r3, r2
 8011d04:	3701      	adds	r7, #1
 8011d06:	602b      	str	r3, [r5, #0]
 8011d08:	7839      	ldrb	r1, [r7, #0]
 8011d0a:	1c7b      	adds	r3, r7, #1
 8011d0c:	2206      	movs	r2, #6
 8011d0e:	4830      	ldr	r0, [pc, #192]	; (8011dd0 <_vfiprintf_r+0x268>)
 8011d10:	9303      	str	r3, [sp, #12]
 8011d12:	7629      	strb	r1, [r5, #24]
 8011d14:	f7ff fe3c 	bl	8011990 <memchr>
 8011d18:	2800      	cmp	r0, #0
 8011d1a:	d045      	beq.n	8011da8 <_vfiprintf_r+0x240>
 8011d1c:	4b2d      	ldr	r3, [pc, #180]	; (8011dd4 <_vfiprintf_r+0x26c>)
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d127      	bne.n	8011d72 <_vfiprintf_r+0x20a>
 8011d22:	2207      	movs	r2, #7
 8011d24:	9b07      	ldr	r3, [sp, #28]
 8011d26:	3307      	adds	r3, #7
 8011d28:	4393      	bics	r3, r2
 8011d2a:	3308      	adds	r3, #8
 8011d2c:	9307      	str	r3, [sp, #28]
 8011d2e:	696b      	ldr	r3, [r5, #20]
 8011d30:	9a04      	ldr	r2, [sp, #16]
 8011d32:	189b      	adds	r3, r3, r2
 8011d34:	616b      	str	r3, [r5, #20]
 8011d36:	e75d      	b.n	8011bf4 <_vfiprintf_r+0x8c>
 8011d38:	210a      	movs	r1, #10
 8011d3a:	434b      	muls	r3, r1
 8011d3c:	4667      	mov	r7, ip
 8011d3e:	189b      	adds	r3, r3, r2
 8011d40:	3909      	subs	r1, #9
 8011d42:	e7a3      	b.n	8011c8c <_vfiprintf_r+0x124>
 8011d44:	2301      	movs	r3, #1
 8011d46:	425b      	negs	r3, r3
 8011d48:	e7ce      	b.n	8011ce8 <_vfiprintf_r+0x180>
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	001a      	movs	r2, r3
 8011d4e:	3701      	adds	r7, #1
 8011d50:	606b      	str	r3, [r5, #4]
 8011d52:	7839      	ldrb	r1, [r7, #0]
 8011d54:	1c78      	adds	r0, r7, #1
 8011d56:	3930      	subs	r1, #48	; 0x30
 8011d58:	4684      	mov	ip, r0
 8011d5a:	2909      	cmp	r1, #9
 8011d5c:	d903      	bls.n	8011d66 <_vfiprintf_r+0x1fe>
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d0c3      	beq.n	8011cea <_vfiprintf_r+0x182>
 8011d62:	9209      	str	r2, [sp, #36]	; 0x24
 8011d64:	e7c1      	b.n	8011cea <_vfiprintf_r+0x182>
 8011d66:	230a      	movs	r3, #10
 8011d68:	435a      	muls	r2, r3
 8011d6a:	4667      	mov	r7, ip
 8011d6c:	1852      	adds	r2, r2, r1
 8011d6e:	3b09      	subs	r3, #9
 8011d70:	e7ef      	b.n	8011d52 <_vfiprintf_r+0x1ea>
 8011d72:	ab07      	add	r3, sp, #28
 8011d74:	9300      	str	r3, [sp, #0]
 8011d76:	0022      	movs	r2, r4
 8011d78:	0029      	movs	r1, r5
 8011d7a:	0030      	movs	r0, r6
 8011d7c:	4b16      	ldr	r3, [pc, #88]	; (8011dd8 <_vfiprintf_r+0x270>)
 8011d7e:	e000      	b.n	8011d82 <_vfiprintf_r+0x21a>
 8011d80:	bf00      	nop
 8011d82:	9004      	str	r0, [sp, #16]
 8011d84:	9b04      	ldr	r3, [sp, #16]
 8011d86:	3301      	adds	r3, #1
 8011d88:	d1d1      	bne.n	8011d2e <_vfiprintf_r+0x1c6>
 8011d8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011d8c:	07db      	lsls	r3, r3, #31
 8011d8e:	d405      	bmi.n	8011d9c <_vfiprintf_r+0x234>
 8011d90:	89a3      	ldrh	r3, [r4, #12]
 8011d92:	059b      	lsls	r3, r3, #22
 8011d94:	d402      	bmi.n	8011d9c <_vfiprintf_r+0x234>
 8011d96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d98:	f000 fc9c 	bl	80126d4 <__retarget_lock_release_recursive>
 8011d9c:	89a3      	ldrh	r3, [r4, #12]
 8011d9e:	065b      	lsls	r3, r3, #25
 8011da0:	d500      	bpl.n	8011da4 <_vfiprintf_r+0x23c>
 8011da2:	e70a      	b.n	8011bba <_vfiprintf_r+0x52>
 8011da4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011da6:	e70a      	b.n	8011bbe <_vfiprintf_r+0x56>
 8011da8:	ab07      	add	r3, sp, #28
 8011daa:	9300      	str	r3, [sp, #0]
 8011dac:	0022      	movs	r2, r4
 8011dae:	0029      	movs	r1, r5
 8011db0:	0030      	movs	r0, r6
 8011db2:	4b09      	ldr	r3, [pc, #36]	; (8011dd8 <_vfiprintf_r+0x270>)
 8011db4:	f000 f882 	bl	8011ebc <_printf_i>
 8011db8:	e7e3      	b.n	8011d82 <_vfiprintf_r+0x21a>
 8011dba:	46c0      	nop			; (mov r8, r8)
 8011dbc:	0801352c 	.word	0x0801352c
 8011dc0:	0801354c 	.word	0x0801354c
 8011dc4:	0801350c 	.word	0x0801350c
 8011dc8:	080134d8 	.word	0x080134d8
 8011dcc:	080134de 	.word	0x080134de
 8011dd0:	080134e2 	.word	0x080134e2
 8011dd4:	00000000 	.word	0x00000000
 8011dd8:	08011b43 	.word	0x08011b43

08011ddc <_printf_common>:
 8011ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011dde:	0015      	movs	r5, r2
 8011de0:	9301      	str	r3, [sp, #4]
 8011de2:	688a      	ldr	r2, [r1, #8]
 8011de4:	690b      	ldr	r3, [r1, #16]
 8011de6:	000c      	movs	r4, r1
 8011de8:	9000      	str	r0, [sp, #0]
 8011dea:	4293      	cmp	r3, r2
 8011dec:	da00      	bge.n	8011df0 <_printf_common+0x14>
 8011dee:	0013      	movs	r3, r2
 8011df0:	0022      	movs	r2, r4
 8011df2:	602b      	str	r3, [r5, #0]
 8011df4:	3243      	adds	r2, #67	; 0x43
 8011df6:	7812      	ldrb	r2, [r2, #0]
 8011df8:	2a00      	cmp	r2, #0
 8011dfa:	d001      	beq.n	8011e00 <_printf_common+0x24>
 8011dfc:	3301      	adds	r3, #1
 8011dfe:	602b      	str	r3, [r5, #0]
 8011e00:	6823      	ldr	r3, [r4, #0]
 8011e02:	069b      	lsls	r3, r3, #26
 8011e04:	d502      	bpl.n	8011e0c <_printf_common+0x30>
 8011e06:	682b      	ldr	r3, [r5, #0]
 8011e08:	3302      	adds	r3, #2
 8011e0a:	602b      	str	r3, [r5, #0]
 8011e0c:	6822      	ldr	r2, [r4, #0]
 8011e0e:	2306      	movs	r3, #6
 8011e10:	0017      	movs	r7, r2
 8011e12:	401f      	ands	r7, r3
 8011e14:	421a      	tst	r2, r3
 8011e16:	d027      	beq.n	8011e68 <_printf_common+0x8c>
 8011e18:	0023      	movs	r3, r4
 8011e1a:	3343      	adds	r3, #67	; 0x43
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	1e5a      	subs	r2, r3, #1
 8011e20:	4193      	sbcs	r3, r2
 8011e22:	6822      	ldr	r2, [r4, #0]
 8011e24:	0692      	lsls	r2, r2, #26
 8011e26:	d430      	bmi.n	8011e8a <_printf_common+0xae>
 8011e28:	0022      	movs	r2, r4
 8011e2a:	9901      	ldr	r1, [sp, #4]
 8011e2c:	9800      	ldr	r0, [sp, #0]
 8011e2e:	9e08      	ldr	r6, [sp, #32]
 8011e30:	3243      	adds	r2, #67	; 0x43
 8011e32:	47b0      	blx	r6
 8011e34:	1c43      	adds	r3, r0, #1
 8011e36:	d025      	beq.n	8011e84 <_printf_common+0xa8>
 8011e38:	2306      	movs	r3, #6
 8011e3a:	6820      	ldr	r0, [r4, #0]
 8011e3c:	682a      	ldr	r2, [r5, #0]
 8011e3e:	68e1      	ldr	r1, [r4, #12]
 8011e40:	2500      	movs	r5, #0
 8011e42:	4003      	ands	r3, r0
 8011e44:	2b04      	cmp	r3, #4
 8011e46:	d103      	bne.n	8011e50 <_printf_common+0x74>
 8011e48:	1a8d      	subs	r5, r1, r2
 8011e4a:	43eb      	mvns	r3, r5
 8011e4c:	17db      	asrs	r3, r3, #31
 8011e4e:	401d      	ands	r5, r3
 8011e50:	68a3      	ldr	r3, [r4, #8]
 8011e52:	6922      	ldr	r2, [r4, #16]
 8011e54:	4293      	cmp	r3, r2
 8011e56:	dd01      	ble.n	8011e5c <_printf_common+0x80>
 8011e58:	1a9b      	subs	r3, r3, r2
 8011e5a:	18ed      	adds	r5, r5, r3
 8011e5c:	2700      	movs	r7, #0
 8011e5e:	42bd      	cmp	r5, r7
 8011e60:	d120      	bne.n	8011ea4 <_printf_common+0xc8>
 8011e62:	2000      	movs	r0, #0
 8011e64:	e010      	b.n	8011e88 <_printf_common+0xac>
 8011e66:	3701      	adds	r7, #1
 8011e68:	68e3      	ldr	r3, [r4, #12]
 8011e6a:	682a      	ldr	r2, [r5, #0]
 8011e6c:	1a9b      	subs	r3, r3, r2
 8011e6e:	42bb      	cmp	r3, r7
 8011e70:	ddd2      	ble.n	8011e18 <_printf_common+0x3c>
 8011e72:	0022      	movs	r2, r4
 8011e74:	2301      	movs	r3, #1
 8011e76:	9901      	ldr	r1, [sp, #4]
 8011e78:	9800      	ldr	r0, [sp, #0]
 8011e7a:	9e08      	ldr	r6, [sp, #32]
 8011e7c:	3219      	adds	r2, #25
 8011e7e:	47b0      	blx	r6
 8011e80:	1c43      	adds	r3, r0, #1
 8011e82:	d1f0      	bne.n	8011e66 <_printf_common+0x8a>
 8011e84:	2001      	movs	r0, #1
 8011e86:	4240      	negs	r0, r0
 8011e88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011e8a:	2030      	movs	r0, #48	; 0x30
 8011e8c:	18e1      	adds	r1, r4, r3
 8011e8e:	3143      	adds	r1, #67	; 0x43
 8011e90:	7008      	strb	r0, [r1, #0]
 8011e92:	0021      	movs	r1, r4
 8011e94:	1c5a      	adds	r2, r3, #1
 8011e96:	3145      	adds	r1, #69	; 0x45
 8011e98:	7809      	ldrb	r1, [r1, #0]
 8011e9a:	18a2      	adds	r2, r4, r2
 8011e9c:	3243      	adds	r2, #67	; 0x43
 8011e9e:	3302      	adds	r3, #2
 8011ea0:	7011      	strb	r1, [r2, #0]
 8011ea2:	e7c1      	b.n	8011e28 <_printf_common+0x4c>
 8011ea4:	0022      	movs	r2, r4
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	9901      	ldr	r1, [sp, #4]
 8011eaa:	9800      	ldr	r0, [sp, #0]
 8011eac:	9e08      	ldr	r6, [sp, #32]
 8011eae:	321a      	adds	r2, #26
 8011eb0:	47b0      	blx	r6
 8011eb2:	1c43      	adds	r3, r0, #1
 8011eb4:	d0e6      	beq.n	8011e84 <_printf_common+0xa8>
 8011eb6:	3701      	adds	r7, #1
 8011eb8:	e7d1      	b.n	8011e5e <_printf_common+0x82>
	...

08011ebc <_printf_i>:
 8011ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ebe:	b08b      	sub	sp, #44	; 0x2c
 8011ec0:	9206      	str	r2, [sp, #24]
 8011ec2:	000a      	movs	r2, r1
 8011ec4:	3243      	adds	r2, #67	; 0x43
 8011ec6:	9307      	str	r3, [sp, #28]
 8011ec8:	9005      	str	r0, [sp, #20]
 8011eca:	9204      	str	r2, [sp, #16]
 8011ecc:	7e0a      	ldrb	r2, [r1, #24]
 8011ece:	000c      	movs	r4, r1
 8011ed0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ed2:	2a78      	cmp	r2, #120	; 0x78
 8011ed4:	d806      	bhi.n	8011ee4 <_printf_i+0x28>
 8011ed6:	2a62      	cmp	r2, #98	; 0x62
 8011ed8:	d808      	bhi.n	8011eec <_printf_i+0x30>
 8011eda:	2a00      	cmp	r2, #0
 8011edc:	d100      	bne.n	8011ee0 <_printf_i+0x24>
 8011ede:	e0c0      	b.n	8012062 <_printf_i+0x1a6>
 8011ee0:	2a58      	cmp	r2, #88	; 0x58
 8011ee2:	d052      	beq.n	8011f8a <_printf_i+0xce>
 8011ee4:	0026      	movs	r6, r4
 8011ee6:	3642      	adds	r6, #66	; 0x42
 8011ee8:	7032      	strb	r2, [r6, #0]
 8011eea:	e022      	b.n	8011f32 <_printf_i+0x76>
 8011eec:	0010      	movs	r0, r2
 8011eee:	3863      	subs	r0, #99	; 0x63
 8011ef0:	2815      	cmp	r0, #21
 8011ef2:	d8f7      	bhi.n	8011ee4 <_printf_i+0x28>
 8011ef4:	f7ee f908 	bl	8000108 <__gnu_thumb1_case_shi>
 8011ef8:	001f0016 	.word	0x001f0016
 8011efc:	fff6fff6 	.word	0xfff6fff6
 8011f00:	fff6fff6 	.word	0xfff6fff6
 8011f04:	fff6001f 	.word	0xfff6001f
 8011f08:	fff6fff6 	.word	0xfff6fff6
 8011f0c:	00a8fff6 	.word	0x00a8fff6
 8011f10:	009a0036 	.word	0x009a0036
 8011f14:	fff6fff6 	.word	0xfff6fff6
 8011f18:	fff600b9 	.word	0xfff600b9
 8011f1c:	fff60036 	.word	0xfff60036
 8011f20:	009efff6 	.word	0x009efff6
 8011f24:	0026      	movs	r6, r4
 8011f26:	681a      	ldr	r2, [r3, #0]
 8011f28:	3642      	adds	r6, #66	; 0x42
 8011f2a:	1d11      	adds	r1, r2, #4
 8011f2c:	6019      	str	r1, [r3, #0]
 8011f2e:	6813      	ldr	r3, [r2, #0]
 8011f30:	7033      	strb	r3, [r6, #0]
 8011f32:	2301      	movs	r3, #1
 8011f34:	e0a7      	b.n	8012086 <_printf_i+0x1ca>
 8011f36:	6808      	ldr	r0, [r1, #0]
 8011f38:	6819      	ldr	r1, [r3, #0]
 8011f3a:	1d0a      	adds	r2, r1, #4
 8011f3c:	0605      	lsls	r5, r0, #24
 8011f3e:	d50b      	bpl.n	8011f58 <_printf_i+0x9c>
 8011f40:	680d      	ldr	r5, [r1, #0]
 8011f42:	601a      	str	r2, [r3, #0]
 8011f44:	2d00      	cmp	r5, #0
 8011f46:	da03      	bge.n	8011f50 <_printf_i+0x94>
 8011f48:	232d      	movs	r3, #45	; 0x2d
 8011f4a:	9a04      	ldr	r2, [sp, #16]
 8011f4c:	426d      	negs	r5, r5
 8011f4e:	7013      	strb	r3, [r2, #0]
 8011f50:	4b61      	ldr	r3, [pc, #388]	; (80120d8 <_printf_i+0x21c>)
 8011f52:	270a      	movs	r7, #10
 8011f54:	9303      	str	r3, [sp, #12]
 8011f56:	e032      	b.n	8011fbe <_printf_i+0x102>
 8011f58:	680d      	ldr	r5, [r1, #0]
 8011f5a:	601a      	str	r2, [r3, #0]
 8011f5c:	0641      	lsls	r1, r0, #25
 8011f5e:	d5f1      	bpl.n	8011f44 <_printf_i+0x88>
 8011f60:	b22d      	sxth	r5, r5
 8011f62:	e7ef      	b.n	8011f44 <_printf_i+0x88>
 8011f64:	680d      	ldr	r5, [r1, #0]
 8011f66:	6819      	ldr	r1, [r3, #0]
 8011f68:	1d08      	adds	r0, r1, #4
 8011f6a:	6018      	str	r0, [r3, #0]
 8011f6c:	062e      	lsls	r6, r5, #24
 8011f6e:	d501      	bpl.n	8011f74 <_printf_i+0xb8>
 8011f70:	680d      	ldr	r5, [r1, #0]
 8011f72:	e003      	b.n	8011f7c <_printf_i+0xc0>
 8011f74:	066d      	lsls	r5, r5, #25
 8011f76:	d5fb      	bpl.n	8011f70 <_printf_i+0xb4>
 8011f78:	680d      	ldr	r5, [r1, #0]
 8011f7a:	b2ad      	uxth	r5, r5
 8011f7c:	4b56      	ldr	r3, [pc, #344]	; (80120d8 <_printf_i+0x21c>)
 8011f7e:	270a      	movs	r7, #10
 8011f80:	9303      	str	r3, [sp, #12]
 8011f82:	2a6f      	cmp	r2, #111	; 0x6f
 8011f84:	d117      	bne.n	8011fb6 <_printf_i+0xfa>
 8011f86:	2708      	movs	r7, #8
 8011f88:	e015      	b.n	8011fb6 <_printf_i+0xfa>
 8011f8a:	3145      	adds	r1, #69	; 0x45
 8011f8c:	700a      	strb	r2, [r1, #0]
 8011f8e:	4a52      	ldr	r2, [pc, #328]	; (80120d8 <_printf_i+0x21c>)
 8011f90:	9203      	str	r2, [sp, #12]
 8011f92:	681a      	ldr	r2, [r3, #0]
 8011f94:	6821      	ldr	r1, [r4, #0]
 8011f96:	ca20      	ldmia	r2!, {r5}
 8011f98:	601a      	str	r2, [r3, #0]
 8011f9a:	0608      	lsls	r0, r1, #24
 8011f9c:	d550      	bpl.n	8012040 <_printf_i+0x184>
 8011f9e:	07cb      	lsls	r3, r1, #31
 8011fa0:	d502      	bpl.n	8011fa8 <_printf_i+0xec>
 8011fa2:	2320      	movs	r3, #32
 8011fa4:	4319      	orrs	r1, r3
 8011fa6:	6021      	str	r1, [r4, #0]
 8011fa8:	2710      	movs	r7, #16
 8011faa:	2d00      	cmp	r5, #0
 8011fac:	d103      	bne.n	8011fb6 <_printf_i+0xfa>
 8011fae:	2320      	movs	r3, #32
 8011fb0:	6822      	ldr	r2, [r4, #0]
 8011fb2:	439a      	bics	r2, r3
 8011fb4:	6022      	str	r2, [r4, #0]
 8011fb6:	0023      	movs	r3, r4
 8011fb8:	2200      	movs	r2, #0
 8011fba:	3343      	adds	r3, #67	; 0x43
 8011fbc:	701a      	strb	r2, [r3, #0]
 8011fbe:	6863      	ldr	r3, [r4, #4]
 8011fc0:	60a3      	str	r3, [r4, #8]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	db03      	blt.n	8011fce <_printf_i+0x112>
 8011fc6:	2204      	movs	r2, #4
 8011fc8:	6821      	ldr	r1, [r4, #0]
 8011fca:	4391      	bics	r1, r2
 8011fcc:	6021      	str	r1, [r4, #0]
 8011fce:	2d00      	cmp	r5, #0
 8011fd0:	d102      	bne.n	8011fd8 <_printf_i+0x11c>
 8011fd2:	9e04      	ldr	r6, [sp, #16]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d00c      	beq.n	8011ff2 <_printf_i+0x136>
 8011fd8:	9e04      	ldr	r6, [sp, #16]
 8011fda:	0028      	movs	r0, r5
 8011fdc:	0039      	movs	r1, r7
 8011fde:	f7ee f923 	bl	8000228 <__aeabi_uidivmod>
 8011fe2:	9b03      	ldr	r3, [sp, #12]
 8011fe4:	3e01      	subs	r6, #1
 8011fe6:	5c5b      	ldrb	r3, [r3, r1]
 8011fe8:	7033      	strb	r3, [r6, #0]
 8011fea:	002b      	movs	r3, r5
 8011fec:	0005      	movs	r5, r0
 8011fee:	429f      	cmp	r7, r3
 8011ff0:	d9f3      	bls.n	8011fda <_printf_i+0x11e>
 8011ff2:	2f08      	cmp	r7, #8
 8011ff4:	d109      	bne.n	801200a <_printf_i+0x14e>
 8011ff6:	6823      	ldr	r3, [r4, #0]
 8011ff8:	07db      	lsls	r3, r3, #31
 8011ffa:	d506      	bpl.n	801200a <_printf_i+0x14e>
 8011ffc:	6863      	ldr	r3, [r4, #4]
 8011ffe:	6922      	ldr	r2, [r4, #16]
 8012000:	4293      	cmp	r3, r2
 8012002:	dc02      	bgt.n	801200a <_printf_i+0x14e>
 8012004:	2330      	movs	r3, #48	; 0x30
 8012006:	3e01      	subs	r6, #1
 8012008:	7033      	strb	r3, [r6, #0]
 801200a:	9b04      	ldr	r3, [sp, #16]
 801200c:	1b9b      	subs	r3, r3, r6
 801200e:	6123      	str	r3, [r4, #16]
 8012010:	9b07      	ldr	r3, [sp, #28]
 8012012:	0021      	movs	r1, r4
 8012014:	9300      	str	r3, [sp, #0]
 8012016:	9805      	ldr	r0, [sp, #20]
 8012018:	9b06      	ldr	r3, [sp, #24]
 801201a:	aa09      	add	r2, sp, #36	; 0x24
 801201c:	f7ff fede 	bl	8011ddc <_printf_common>
 8012020:	1c43      	adds	r3, r0, #1
 8012022:	d135      	bne.n	8012090 <_printf_i+0x1d4>
 8012024:	2001      	movs	r0, #1
 8012026:	4240      	negs	r0, r0
 8012028:	b00b      	add	sp, #44	; 0x2c
 801202a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801202c:	2220      	movs	r2, #32
 801202e:	6809      	ldr	r1, [r1, #0]
 8012030:	430a      	orrs	r2, r1
 8012032:	6022      	str	r2, [r4, #0]
 8012034:	0022      	movs	r2, r4
 8012036:	2178      	movs	r1, #120	; 0x78
 8012038:	3245      	adds	r2, #69	; 0x45
 801203a:	7011      	strb	r1, [r2, #0]
 801203c:	4a27      	ldr	r2, [pc, #156]	; (80120dc <_printf_i+0x220>)
 801203e:	e7a7      	b.n	8011f90 <_printf_i+0xd4>
 8012040:	0648      	lsls	r0, r1, #25
 8012042:	d5ac      	bpl.n	8011f9e <_printf_i+0xe2>
 8012044:	b2ad      	uxth	r5, r5
 8012046:	e7aa      	b.n	8011f9e <_printf_i+0xe2>
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	680d      	ldr	r5, [r1, #0]
 801204c:	1d10      	adds	r0, r2, #4
 801204e:	6949      	ldr	r1, [r1, #20]
 8012050:	6018      	str	r0, [r3, #0]
 8012052:	6813      	ldr	r3, [r2, #0]
 8012054:	062e      	lsls	r6, r5, #24
 8012056:	d501      	bpl.n	801205c <_printf_i+0x1a0>
 8012058:	6019      	str	r1, [r3, #0]
 801205a:	e002      	b.n	8012062 <_printf_i+0x1a6>
 801205c:	066d      	lsls	r5, r5, #25
 801205e:	d5fb      	bpl.n	8012058 <_printf_i+0x19c>
 8012060:	8019      	strh	r1, [r3, #0]
 8012062:	2300      	movs	r3, #0
 8012064:	9e04      	ldr	r6, [sp, #16]
 8012066:	6123      	str	r3, [r4, #16]
 8012068:	e7d2      	b.n	8012010 <_printf_i+0x154>
 801206a:	681a      	ldr	r2, [r3, #0]
 801206c:	1d11      	adds	r1, r2, #4
 801206e:	6019      	str	r1, [r3, #0]
 8012070:	6816      	ldr	r6, [r2, #0]
 8012072:	2100      	movs	r1, #0
 8012074:	0030      	movs	r0, r6
 8012076:	6862      	ldr	r2, [r4, #4]
 8012078:	f7ff fc8a 	bl	8011990 <memchr>
 801207c:	2800      	cmp	r0, #0
 801207e:	d001      	beq.n	8012084 <_printf_i+0x1c8>
 8012080:	1b80      	subs	r0, r0, r6
 8012082:	6060      	str	r0, [r4, #4]
 8012084:	6863      	ldr	r3, [r4, #4]
 8012086:	6123      	str	r3, [r4, #16]
 8012088:	2300      	movs	r3, #0
 801208a:	9a04      	ldr	r2, [sp, #16]
 801208c:	7013      	strb	r3, [r2, #0]
 801208e:	e7bf      	b.n	8012010 <_printf_i+0x154>
 8012090:	6923      	ldr	r3, [r4, #16]
 8012092:	0032      	movs	r2, r6
 8012094:	9906      	ldr	r1, [sp, #24]
 8012096:	9805      	ldr	r0, [sp, #20]
 8012098:	9d07      	ldr	r5, [sp, #28]
 801209a:	47a8      	blx	r5
 801209c:	1c43      	adds	r3, r0, #1
 801209e:	d0c1      	beq.n	8012024 <_printf_i+0x168>
 80120a0:	6823      	ldr	r3, [r4, #0]
 80120a2:	079b      	lsls	r3, r3, #30
 80120a4:	d415      	bmi.n	80120d2 <_printf_i+0x216>
 80120a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120a8:	68e0      	ldr	r0, [r4, #12]
 80120aa:	4298      	cmp	r0, r3
 80120ac:	dabc      	bge.n	8012028 <_printf_i+0x16c>
 80120ae:	0018      	movs	r0, r3
 80120b0:	e7ba      	b.n	8012028 <_printf_i+0x16c>
 80120b2:	0022      	movs	r2, r4
 80120b4:	2301      	movs	r3, #1
 80120b6:	9906      	ldr	r1, [sp, #24]
 80120b8:	9805      	ldr	r0, [sp, #20]
 80120ba:	9e07      	ldr	r6, [sp, #28]
 80120bc:	3219      	adds	r2, #25
 80120be:	47b0      	blx	r6
 80120c0:	1c43      	adds	r3, r0, #1
 80120c2:	d0af      	beq.n	8012024 <_printf_i+0x168>
 80120c4:	3501      	adds	r5, #1
 80120c6:	68e3      	ldr	r3, [r4, #12]
 80120c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120ca:	1a9b      	subs	r3, r3, r2
 80120cc:	42ab      	cmp	r3, r5
 80120ce:	dcf0      	bgt.n	80120b2 <_printf_i+0x1f6>
 80120d0:	e7e9      	b.n	80120a6 <_printf_i+0x1ea>
 80120d2:	2500      	movs	r5, #0
 80120d4:	e7f7      	b.n	80120c6 <_printf_i+0x20a>
 80120d6:	46c0      	nop			; (mov r8, r8)
 80120d8:	080134e9 	.word	0x080134e9
 80120dc:	080134fa 	.word	0x080134fa

080120e0 <_sbrk_r>:
 80120e0:	2300      	movs	r3, #0
 80120e2:	b570      	push	{r4, r5, r6, lr}
 80120e4:	4d06      	ldr	r5, [pc, #24]	; (8012100 <_sbrk_r+0x20>)
 80120e6:	0004      	movs	r4, r0
 80120e8:	0008      	movs	r0, r1
 80120ea:	602b      	str	r3, [r5, #0]
 80120ec:	f7ee ffa8 	bl	8001040 <_sbrk>
 80120f0:	1c43      	adds	r3, r0, #1
 80120f2:	d103      	bne.n	80120fc <_sbrk_r+0x1c>
 80120f4:	682b      	ldr	r3, [r5, #0]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d000      	beq.n	80120fc <_sbrk_r+0x1c>
 80120fa:	6023      	str	r3, [r4, #0]
 80120fc:	bd70      	pop	{r4, r5, r6, pc}
 80120fe:	46c0      	nop			; (mov r8, r8)
 8012100:	2000379c 	.word	0x2000379c

08012104 <_raise_r>:
 8012104:	b570      	push	{r4, r5, r6, lr}
 8012106:	0004      	movs	r4, r0
 8012108:	000d      	movs	r5, r1
 801210a:	291f      	cmp	r1, #31
 801210c:	d904      	bls.n	8012118 <_raise_r+0x14>
 801210e:	2316      	movs	r3, #22
 8012110:	6003      	str	r3, [r0, #0]
 8012112:	2001      	movs	r0, #1
 8012114:	4240      	negs	r0, r0
 8012116:	bd70      	pop	{r4, r5, r6, pc}
 8012118:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801211a:	2b00      	cmp	r3, #0
 801211c:	d004      	beq.n	8012128 <_raise_r+0x24>
 801211e:	008a      	lsls	r2, r1, #2
 8012120:	189b      	adds	r3, r3, r2
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	2a00      	cmp	r2, #0
 8012126:	d108      	bne.n	801213a <_raise_r+0x36>
 8012128:	0020      	movs	r0, r4
 801212a:	f000 f831 	bl	8012190 <_getpid_r>
 801212e:	002a      	movs	r2, r5
 8012130:	0001      	movs	r1, r0
 8012132:	0020      	movs	r0, r4
 8012134:	f000 f81a 	bl	801216c <_kill_r>
 8012138:	e7ed      	b.n	8012116 <_raise_r+0x12>
 801213a:	2000      	movs	r0, #0
 801213c:	2a01      	cmp	r2, #1
 801213e:	d0ea      	beq.n	8012116 <_raise_r+0x12>
 8012140:	1c51      	adds	r1, r2, #1
 8012142:	d103      	bne.n	801214c <_raise_r+0x48>
 8012144:	2316      	movs	r3, #22
 8012146:	3001      	adds	r0, #1
 8012148:	6023      	str	r3, [r4, #0]
 801214a:	e7e4      	b.n	8012116 <_raise_r+0x12>
 801214c:	2400      	movs	r4, #0
 801214e:	0028      	movs	r0, r5
 8012150:	601c      	str	r4, [r3, #0]
 8012152:	4790      	blx	r2
 8012154:	0020      	movs	r0, r4
 8012156:	e7de      	b.n	8012116 <_raise_r+0x12>

08012158 <raise>:
 8012158:	b510      	push	{r4, lr}
 801215a:	4b03      	ldr	r3, [pc, #12]	; (8012168 <raise+0x10>)
 801215c:	0001      	movs	r1, r0
 801215e:	6818      	ldr	r0, [r3, #0]
 8012160:	f7ff ffd0 	bl	8012104 <_raise_r>
 8012164:	bd10      	pop	{r4, pc}
 8012166:	46c0      	nop			; (mov r8, r8)
 8012168:	200001dc 	.word	0x200001dc

0801216c <_kill_r>:
 801216c:	2300      	movs	r3, #0
 801216e:	b570      	push	{r4, r5, r6, lr}
 8012170:	4d06      	ldr	r5, [pc, #24]	; (801218c <_kill_r+0x20>)
 8012172:	0004      	movs	r4, r0
 8012174:	0008      	movs	r0, r1
 8012176:	0011      	movs	r1, r2
 8012178:	602b      	str	r3, [r5, #0]
 801217a:	f7ee fedf 	bl	8000f3c <_kill>
 801217e:	1c43      	adds	r3, r0, #1
 8012180:	d103      	bne.n	801218a <_kill_r+0x1e>
 8012182:	682b      	ldr	r3, [r5, #0]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d000      	beq.n	801218a <_kill_r+0x1e>
 8012188:	6023      	str	r3, [r4, #0]
 801218a:	bd70      	pop	{r4, r5, r6, pc}
 801218c:	2000379c 	.word	0x2000379c

08012190 <_getpid_r>:
 8012190:	b510      	push	{r4, lr}
 8012192:	f7ee fecd 	bl	8000f30 <_getpid>
 8012196:	bd10      	pop	{r4, pc}

08012198 <__swbuf_r>:
 8012198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801219a:	0005      	movs	r5, r0
 801219c:	000e      	movs	r6, r1
 801219e:	0014      	movs	r4, r2
 80121a0:	2800      	cmp	r0, #0
 80121a2:	d004      	beq.n	80121ae <__swbuf_r+0x16>
 80121a4:	6983      	ldr	r3, [r0, #24]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d101      	bne.n	80121ae <__swbuf_r+0x16>
 80121aa:	f000 f9f1 	bl	8012590 <__sinit>
 80121ae:	4b22      	ldr	r3, [pc, #136]	; (8012238 <__swbuf_r+0xa0>)
 80121b0:	429c      	cmp	r4, r3
 80121b2:	d12e      	bne.n	8012212 <__swbuf_r+0x7a>
 80121b4:	686c      	ldr	r4, [r5, #4]
 80121b6:	69a3      	ldr	r3, [r4, #24]
 80121b8:	60a3      	str	r3, [r4, #8]
 80121ba:	89a3      	ldrh	r3, [r4, #12]
 80121bc:	071b      	lsls	r3, r3, #28
 80121be:	d532      	bpl.n	8012226 <__swbuf_r+0x8e>
 80121c0:	6923      	ldr	r3, [r4, #16]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d02f      	beq.n	8012226 <__swbuf_r+0x8e>
 80121c6:	6823      	ldr	r3, [r4, #0]
 80121c8:	6922      	ldr	r2, [r4, #16]
 80121ca:	b2f7      	uxtb	r7, r6
 80121cc:	1a98      	subs	r0, r3, r2
 80121ce:	6963      	ldr	r3, [r4, #20]
 80121d0:	b2f6      	uxtb	r6, r6
 80121d2:	4283      	cmp	r3, r0
 80121d4:	dc05      	bgt.n	80121e2 <__swbuf_r+0x4a>
 80121d6:	0021      	movs	r1, r4
 80121d8:	0028      	movs	r0, r5
 80121da:	f000 f937 	bl	801244c <_fflush_r>
 80121de:	2800      	cmp	r0, #0
 80121e0:	d127      	bne.n	8012232 <__swbuf_r+0x9a>
 80121e2:	68a3      	ldr	r3, [r4, #8]
 80121e4:	3001      	adds	r0, #1
 80121e6:	3b01      	subs	r3, #1
 80121e8:	60a3      	str	r3, [r4, #8]
 80121ea:	6823      	ldr	r3, [r4, #0]
 80121ec:	1c5a      	adds	r2, r3, #1
 80121ee:	6022      	str	r2, [r4, #0]
 80121f0:	701f      	strb	r7, [r3, #0]
 80121f2:	6963      	ldr	r3, [r4, #20]
 80121f4:	4283      	cmp	r3, r0
 80121f6:	d004      	beq.n	8012202 <__swbuf_r+0x6a>
 80121f8:	89a3      	ldrh	r3, [r4, #12]
 80121fa:	07db      	lsls	r3, r3, #31
 80121fc:	d507      	bpl.n	801220e <__swbuf_r+0x76>
 80121fe:	2e0a      	cmp	r6, #10
 8012200:	d105      	bne.n	801220e <__swbuf_r+0x76>
 8012202:	0021      	movs	r1, r4
 8012204:	0028      	movs	r0, r5
 8012206:	f000 f921 	bl	801244c <_fflush_r>
 801220a:	2800      	cmp	r0, #0
 801220c:	d111      	bne.n	8012232 <__swbuf_r+0x9a>
 801220e:	0030      	movs	r0, r6
 8012210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012212:	4b0a      	ldr	r3, [pc, #40]	; (801223c <__swbuf_r+0xa4>)
 8012214:	429c      	cmp	r4, r3
 8012216:	d101      	bne.n	801221c <__swbuf_r+0x84>
 8012218:	68ac      	ldr	r4, [r5, #8]
 801221a:	e7cc      	b.n	80121b6 <__swbuf_r+0x1e>
 801221c:	4b08      	ldr	r3, [pc, #32]	; (8012240 <__swbuf_r+0xa8>)
 801221e:	429c      	cmp	r4, r3
 8012220:	d1c9      	bne.n	80121b6 <__swbuf_r+0x1e>
 8012222:	68ec      	ldr	r4, [r5, #12]
 8012224:	e7c7      	b.n	80121b6 <__swbuf_r+0x1e>
 8012226:	0021      	movs	r1, r4
 8012228:	0028      	movs	r0, r5
 801222a:	f000 f80b 	bl	8012244 <__swsetup_r>
 801222e:	2800      	cmp	r0, #0
 8012230:	d0c9      	beq.n	80121c6 <__swbuf_r+0x2e>
 8012232:	2601      	movs	r6, #1
 8012234:	4276      	negs	r6, r6
 8012236:	e7ea      	b.n	801220e <__swbuf_r+0x76>
 8012238:	0801352c 	.word	0x0801352c
 801223c:	0801354c 	.word	0x0801354c
 8012240:	0801350c 	.word	0x0801350c

08012244 <__swsetup_r>:
 8012244:	4b37      	ldr	r3, [pc, #220]	; (8012324 <__swsetup_r+0xe0>)
 8012246:	b570      	push	{r4, r5, r6, lr}
 8012248:	681d      	ldr	r5, [r3, #0]
 801224a:	0006      	movs	r6, r0
 801224c:	000c      	movs	r4, r1
 801224e:	2d00      	cmp	r5, #0
 8012250:	d005      	beq.n	801225e <__swsetup_r+0x1a>
 8012252:	69ab      	ldr	r3, [r5, #24]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d102      	bne.n	801225e <__swsetup_r+0x1a>
 8012258:	0028      	movs	r0, r5
 801225a:	f000 f999 	bl	8012590 <__sinit>
 801225e:	4b32      	ldr	r3, [pc, #200]	; (8012328 <__swsetup_r+0xe4>)
 8012260:	429c      	cmp	r4, r3
 8012262:	d10f      	bne.n	8012284 <__swsetup_r+0x40>
 8012264:	686c      	ldr	r4, [r5, #4]
 8012266:	230c      	movs	r3, #12
 8012268:	5ee2      	ldrsh	r2, [r4, r3]
 801226a:	b293      	uxth	r3, r2
 801226c:	0711      	lsls	r1, r2, #28
 801226e:	d42d      	bmi.n	80122cc <__swsetup_r+0x88>
 8012270:	06d9      	lsls	r1, r3, #27
 8012272:	d411      	bmi.n	8012298 <__swsetup_r+0x54>
 8012274:	2309      	movs	r3, #9
 8012276:	2001      	movs	r0, #1
 8012278:	6033      	str	r3, [r6, #0]
 801227a:	3337      	adds	r3, #55	; 0x37
 801227c:	4313      	orrs	r3, r2
 801227e:	81a3      	strh	r3, [r4, #12]
 8012280:	4240      	negs	r0, r0
 8012282:	bd70      	pop	{r4, r5, r6, pc}
 8012284:	4b29      	ldr	r3, [pc, #164]	; (801232c <__swsetup_r+0xe8>)
 8012286:	429c      	cmp	r4, r3
 8012288:	d101      	bne.n	801228e <__swsetup_r+0x4a>
 801228a:	68ac      	ldr	r4, [r5, #8]
 801228c:	e7eb      	b.n	8012266 <__swsetup_r+0x22>
 801228e:	4b28      	ldr	r3, [pc, #160]	; (8012330 <__swsetup_r+0xec>)
 8012290:	429c      	cmp	r4, r3
 8012292:	d1e8      	bne.n	8012266 <__swsetup_r+0x22>
 8012294:	68ec      	ldr	r4, [r5, #12]
 8012296:	e7e6      	b.n	8012266 <__swsetup_r+0x22>
 8012298:	075b      	lsls	r3, r3, #29
 801229a:	d513      	bpl.n	80122c4 <__swsetup_r+0x80>
 801229c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801229e:	2900      	cmp	r1, #0
 80122a0:	d008      	beq.n	80122b4 <__swsetup_r+0x70>
 80122a2:	0023      	movs	r3, r4
 80122a4:	3344      	adds	r3, #68	; 0x44
 80122a6:	4299      	cmp	r1, r3
 80122a8:	d002      	beq.n	80122b0 <__swsetup_r+0x6c>
 80122aa:	0030      	movs	r0, r6
 80122ac:	f7ff fb8c 	bl	80119c8 <_free_r>
 80122b0:	2300      	movs	r3, #0
 80122b2:	6363      	str	r3, [r4, #52]	; 0x34
 80122b4:	2224      	movs	r2, #36	; 0x24
 80122b6:	89a3      	ldrh	r3, [r4, #12]
 80122b8:	4393      	bics	r3, r2
 80122ba:	81a3      	strh	r3, [r4, #12]
 80122bc:	2300      	movs	r3, #0
 80122be:	6063      	str	r3, [r4, #4]
 80122c0:	6923      	ldr	r3, [r4, #16]
 80122c2:	6023      	str	r3, [r4, #0]
 80122c4:	2308      	movs	r3, #8
 80122c6:	89a2      	ldrh	r2, [r4, #12]
 80122c8:	4313      	orrs	r3, r2
 80122ca:	81a3      	strh	r3, [r4, #12]
 80122cc:	6923      	ldr	r3, [r4, #16]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d10b      	bne.n	80122ea <__swsetup_r+0xa6>
 80122d2:	21a0      	movs	r1, #160	; 0xa0
 80122d4:	2280      	movs	r2, #128	; 0x80
 80122d6:	89a3      	ldrh	r3, [r4, #12]
 80122d8:	0089      	lsls	r1, r1, #2
 80122da:	0092      	lsls	r2, r2, #2
 80122dc:	400b      	ands	r3, r1
 80122de:	4293      	cmp	r3, r2
 80122e0:	d003      	beq.n	80122ea <__swsetup_r+0xa6>
 80122e2:	0021      	movs	r1, r4
 80122e4:	0030      	movs	r0, r6
 80122e6:	f000 fa1f 	bl	8012728 <__smakebuf_r>
 80122ea:	220c      	movs	r2, #12
 80122ec:	5ea3      	ldrsh	r3, [r4, r2]
 80122ee:	2001      	movs	r0, #1
 80122f0:	001a      	movs	r2, r3
 80122f2:	b299      	uxth	r1, r3
 80122f4:	4002      	ands	r2, r0
 80122f6:	4203      	tst	r3, r0
 80122f8:	d00f      	beq.n	801231a <__swsetup_r+0xd6>
 80122fa:	2200      	movs	r2, #0
 80122fc:	60a2      	str	r2, [r4, #8]
 80122fe:	6962      	ldr	r2, [r4, #20]
 8012300:	4252      	negs	r2, r2
 8012302:	61a2      	str	r2, [r4, #24]
 8012304:	2000      	movs	r0, #0
 8012306:	6922      	ldr	r2, [r4, #16]
 8012308:	4282      	cmp	r2, r0
 801230a:	d1ba      	bne.n	8012282 <__swsetup_r+0x3e>
 801230c:	060a      	lsls	r2, r1, #24
 801230e:	d5b8      	bpl.n	8012282 <__swsetup_r+0x3e>
 8012310:	2240      	movs	r2, #64	; 0x40
 8012312:	4313      	orrs	r3, r2
 8012314:	81a3      	strh	r3, [r4, #12]
 8012316:	3801      	subs	r0, #1
 8012318:	e7b3      	b.n	8012282 <__swsetup_r+0x3e>
 801231a:	0788      	lsls	r0, r1, #30
 801231c:	d400      	bmi.n	8012320 <__swsetup_r+0xdc>
 801231e:	6962      	ldr	r2, [r4, #20]
 8012320:	60a2      	str	r2, [r4, #8]
 8012322:	e7ef      	b.n	8012304 <__swsetup_r+0xc0>
 8012324:	200001dc 	.word	0x200001dc
 8012328:	0801352c 	.word	0x0801352c
 801232c:	0801354c 	.word	0x0801354c
 8012330:	0801350c 	.word	0x0801350c

08012334 <__sflush_r>:
 8012334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012336:	898b      	ldrh	r3, [r1, #12]
 8012338:	0005      	movs	r5, r0
 801233a:	000c      	movs	r4, r1
 801233c:	071a      	lsls	r2, r3, #28
 801233e:	d45f      	bmi.n	8012400 <__sflush_r+0xcc>
 8012340:	684a      	ldr	r2, [r1, #4]
 8012342:	2a00      	cmp	r2, #0
 8012344:	dc04      	bgt.n	8012350 <__sflush_r+0x1c>
 8012346:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8012348:	2a00      	cmp	r2, #0
 801234a:	dc01      	bgt.n	8012350 <__sflush_r+0x1c>
 801234c:	2000      	movs	r0, #0
 801234e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012350:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012352:	2f00      	cmp	r7, #0
 8012354:	d0fa      	beq.n	801234c <__sflush_r+0x18>
 8012356:	2200      	movs	r2, #0
 8012358:	2180      	movs	r1, #128	; 0x80
 801235a:	682e      	ldr	r6, [r5, #0]
 801235c:	602a      	str	r2, [r5, #0]
 801235e:	001a      	movs	r2, r3
 8012360:	0149      	lsls	r1, r1, #5
 8012362:	400a      	ands	r2, r1
 8012364:	420b      	tst	r3, r1
 8012366:	d034      	beq.n	80123d2 <__sflush_r+0x9e>
 8012368:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801236a:	89a3      	ldrh	r3, [r4, #12]
 801236c:	075b      	lsls	r3, r3, #29
 801236e:	d506      	bpl.n	801237e <__sflush_r+0x4a>
 8012370:	6863      	ldr	r3, [r4, #4]
 8012372:	1ac0      	subs	r0, r0, r3
 8012374:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012376:	2b00      	cmp	r3, #0
 8012378:	d001      	beq.n	801237e <__sflush_r+0x4a>
 801237a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801237c:	1ac0      	subs	r0, r0, r3
 801237e:	0002      	movs	r2, r0
 8012380:	6a21      	ldr	r1, [r4, #32]
 8012382:	2300      	movs	r3, #0
 8012384:	0028      	movs	r0, r5
 8012386:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012388:	47b8      	blx	r7
 801238a:	89a1      	ldrh	r1, [r4, #12]
 801238c:	1c43      	adds	r3, r0, #1
 801238e:	d106      	bne.n	801239e <__sflush_r+0x6a>
 8012390:	682b      	ldr	r3, [r5, #0]
 8012392:	2b1d      	cmp	r3, #29
 8012394:	d831      	bhi.n	80123fa <__sflush_r+0xc6>
 8012396:	4a2c      	ldr	r2, [pc, #176]	; (8012448 <__sflush_r+0x114>)
 8012398:	40da      	lsrs	r2, r3
 801239a:	07d3      	lsls	r3, r2, #31
 801239c:	d52d      	bpl.n	80123fa <__sflush_r+0xc6>
 801239e:	2300      	movs	r3, #0
 80123a0:	6063      	str	r3, [r4, #4]
 80123a2:	6923      	ldr	r3, [r4, #16]
 80123a4:	6023      	str	r3, [r4, #0]
 80123a6:	04cb      	lsls	r3, r1, #19
 80123a8:	d505      	bpl.n	80123b6 <__sflush_r+0x82>
 80123aa:	1c43      	adds	r3, r0, #1
 80123ac:	d102      	bne.n	80123b4 <__sflush_r+0x80>
 80123ae:	682b      	ldr	r3, [r5, #0]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d100      	bne.n	80123b6 <__sflush_r+0x82>
 80123b4:	6560      	str	r0, [r4, #84]	; 0x54
 80123b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123b8:	602e      	str	r6, [r5, #0]
 80123ba:	2900      	cmp	r1, #0
 80123bc:	d0c6      	beq.n	801234c <__sflush_r+0x18>
 80123be:	0023      	movs	r3, r4
 80123c0:	3344      	adds	r3, #68	; 0x44
 80123c2:	4299      	cmp	r1, r3
 80123c4:	d002      	beq.n	80123cc <__sflush_r+0x98>
 80123c6:	0028      	movs	r0, r5
 80123c8:	f7ff fafe 	bl	80119c8 <_free_r>
 80123cc:	2000      	movs	r0, #0
 80123ce:	6360      	str	r0, [r4, #52]	; 0x34
 80123d0:	e7bd      	b.n	801234e <__sflush_r+0x1a>
 80123d2:	2301      	movs	r3, #1
 80123d4:	0028      	movs	r0, r5
 80123d6:	6a21      	ldr	r1, [r4, #32]
 80123d8:	47b8      	blx	r7
 80123da:	1c43      	adds	r3, r0, #1
 80123dc:	d1c5      	bne.n	801236a <__sflush_r+0x36>
 80123de:	682b      	ldr	r3, [r5, #0]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d0c2      	beq.n	801236a <__sflush_r+0x36>
 80123e4:	2b1d      	cmp	r3, #29
 80123e6:	d001      	beq.n	80123ec <__sflush_r+0xb8>
 80123e8:	2b16      	cmp	r3, #22
 80123ea:	d101      	bne.n	80123f0 <__sflush_r+0xbc>
 80123ec:	602e      	str	r6, [r5, #0]
 80123ee:	e7ad      	b.n	801234c <__sflush_r+0x18>
 80123f0:	2340      	movs	r3, #64	; 0x40
 80123f2:	89a2      	ldrh	r2, [r4, #12]
 80123f4:	4313      	orrs	r3, r2
 80123f6:	81a3      	strh	r3, [r4, #12]
 80123f8:	e7a9      	b.n	801234e <__sflush_r+0x1a>
 80123fa:	2340      	movs	r3, #64	; 0x40
 80123fc:	430b      	orrs	r3, r1
 80123fe:	e7fa      	b.n	80123f6 <__sflush_r+0xc2>
 8012400:	690f      	ldr	r7, [r1, #16]
 8012402:	2f00      	cmp	r7, #0
 8012404:	d0a2      	beq.n	801234c <__sflush_r+0x18>
 8012406:	680a      	ldr	r2, [r1, #0]
 8012408:	600f      	str	r7, [r1, #0]
 801240a:	1bd2      	subs	r2, r2, r7
 801240c:	9201      	str	r2, [sp, #4]
 801240e:	2200      	movs	r2, #0
 8012410:	079b      	lsls	r3, r3, #30
 8012412:	d100      	bne.n	8012416 <__sflush_r+0xe2>
 8012414:	694a      	ldr	r2, [r1, #20]
 8012416:	60a2      	str	r2, [r4, #8]
 8012418:	9b01      	ldr	r3, [sp, #4]
 801241a:	2b00      	cmp	r3, #0
 801241c:	dc00      	bgt.n	8012420 <__sflush_r+0xec>
 801241e:	e795      	b.n	801234c <__sflush_r+0x18>
 8012420:	003a      	movs	r2, r7
 8012422:	0028      	movs	r0, r5
 8012424:	9b01      	ldr	r3, [sp, #4]
 8012426:	6a21      	ldr	r1, [r4, #32]
 8012428:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801242a:	47b0      	blx	r6
 801242c:	2800      	cmp	r0, #0
 801242e:	dc06      	bgt.n	801243e <__sflush_r+0x10a>
 8012430:	2340      	movs	r3, #64	; 0x40
 8012432:	2001      	movs	r0, #1
 8012434:	89a2      	ldrh	r2, [r4, #12]
 8012436:	4240      	negs	r0, r0
 8012438:	4313      	orrs	r3, r2
 801243a:	81a3      	strh	r3, [r4, #12]
 801243c:	e787      	b.n	801234e <__sflush_r+0x1a>
 801243e:	9b01      	ldr	r3, [sp, #4]
 8012440:	183f      	adds	r7, r7, r0
 8012442:	1a1b      	subs	r3, r3, r0
 8012444:	9301      	str	r3, [sp, #4]
 8012446:	e7e7      	b.n	8012418 <__sflush_r+0xe4>
 8012448:	20400001 	.word	0x20400001

0801244c <_fflush_r>:
 801244c:	690b      	ldr	r3, [r1, #16]
 801244e:	b570      	push	{r4, r5, r6, lr}
 8012450:	0005      	movs	r5, r0
 8012452:	000c      	movs	r4, r1
 8012454:	2b00      	cmp	r3, #0
 8012456:	d102      	bne.n	801245e <_fflush_r+0x12>
 8012458:	2500      	movs	r5, #0
 801245a:	0028      	movs	r0, r5
 801245c:	bd70      	pop	{r4, r5, r6, pc}
 801245e:	2800      	cmp	r0, #0
 8012460:	d004      	beq.n	801246c <_fflush_r+0x20>
 8012462:	6983      	ldr	r3, [r0, #24]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d101      	bne.n	801246c <_fflush_r+0x20>
 8012468:	f000 f892 	bl	8012590 <__sinit>
 801246c:	4b14      	ldr	r3, [pc, #80]	; (80124c0 <_fflush_r+0x74>)
 801246e:	429c      	cmp	r4, r3
 8012470:	d11b      	bne.n	80124aa <_fflush_r+0x5e>
 8012472:	686c      	ldr	r4, [r5, #4]
 8012474:	220c      	movs	r2, #12
 8012476:	5ea3      	ldrsh	r3, [r4, r2]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d0ed      	beq.n	8012458 <_fflush_r+0xc>
 801247c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801247e:	07d2      	lsls	r2, r2, #31
 8012480:	d404      	bmi.n	801248c <_fflush_r+0x40>
 8012482:	059b      	lsls	r3, r3, #22
 8012484:	d402      	bmi.n	801248c <_fflush_r+0x40>
 8012486:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012488:	f000 f923 	bl	80126d2 <__retarget_lock_acquire_recursive>
 801248c:	0028      	movs	r0, r5
 801248e:	0021      	movs	r1, r4
 8012490:	f7ff ff50 	bl	8012334 <__sflush_r>
 8012494:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012496:	0005      	movs	r5, r0
 8012498:	07db      	lsls	r3, r3, #31
 801249a:	d4de      	bmi.n	801245a <_fflush_r+0xe>
 801249c:	89a3      	ldrh	r3, [r4, #12]
 801249e:	059b      	lsls	r3, r3, #22
 80124a0:	d4db      	bmi.n	801245a <_fflush_r+0xe>
 80124a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124a4:	f000 f916 	bl	80126d4 <__retarget_lock_release_recursive>
 80124a8:	e7d7      	b.n	801245a <_fflush_r+0xe>
 80124aa:	4b06      	ldr	r3, [pc, #24]	; (80124c4 <_fflush_r+0x78>)
 80124ac:	429c      	cmp	r4, r3
 80124ae:	d101      	bne.n	80124b4 <_fflush_r+0x68>
 80124b0:	68ac      	ldr	r4, [r5, #8]
 80124b2:	e7df      	b.n	8012474 <_fflush_r+0x28>
 80124b4:	4b04      	ldr	r3, [pc, #16]	; (80124c8 <_fflush_r+0x7c>)
 80124b6:	429c      	cmp	r4, r3
 80124b8:	d1dc      	bne.n	8012474 <_fflush_r+0x28>
 80124ba:	68ec      	ldr	r4, [r5, #12]
 80124bc:	e7da      	b.n	8012474 <_fflush_r+0x28>
 80124be:	46c0      	nop			; (mov r8, r8)
 80124c0:	0801352c 	.word	0x0801352c
 80124c4:	0801354c 	.word	0x0801354c
 80124c8:	0801350c 	.word	0x0801350c

080124cc <std>:
 80124cc:	2300      	movs	r3, #0
 80124ce:	b510      	push	{r4, lr}
 80124d0:	0004      	movs	r4, r0
 80124d2:	6003      	str	r3, [r0, #0]
 80124d4:	6043      	str	r3, [r0, #4]
 80124d6:	6083      	str	r3, [r0, #8]
 80124d8:	8181      	strh	r1, [r0, #12]
 80124da:	6643      	str	r3, [r0, #100]	; 0x64
 80124dc:	0019      	movs	r1, r3
 80124de:	81c2      	strh	r2, [r0, #14]
 80124e0:	6103      	str	r3, [r0, #16]
 80124e2:	6143      	str	r3, [r0, #20]
 80124e4:	6183      	str	r3, [r0, #24]
 80124e6:	2208      	movs	r2, #8
 80124e8:	305c      	adds	r0, #92	; 0x5c
 80124ea:	f7ff fa65 	bl	80119b8 <memset>
 80124ee:	4b05      	ldr	r3, [pc, #20]	; (8012504 <std+0x38>)
 80124f0:	6263      	str	r3, [r4, #36]	; 0x24
 80124f2:	4b05      	ldr	r3, [pc, #20]	; (8012508 <std+0x3c>)
 80124f4:	6224      	str	r4, [r4, #32]
 80124f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80124f8:	4b04      	ldr	r3, [pc, #16]	; (801250c <std+0x40>)
 80124fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80124fc:	4b04      	ldr	r3, [pc, #16]	; (8012510 <std+0x44>)
 80124fe:	6323      	str	r3, [r4, #48]	; 0x30
 8012500:	bd10      	pop	{r4, pc}
 8012502:	46c0      	nop			; (mov r8, r8)
 8012504:	080127d1 	.word	0x080127d1
 8012508:	080127f9 	.word	0x080127f9
 801250c:	08012831 	.word	0x08012831
 8012510:	0801285d 	.word	0x0801285d

08012514 <_cleanup_r>:
 8012514:	b510      	push	{r4, lr}
 8012516:	4902      	ldr	r1, [pc, #8]	; (8012520 <_cleanup_r+0xc>)
 8012518:	f000 f8ba 	bl	8012690 <_fwalk_reent>
 801251c:	bd10      	pop	{r4, pc}
 801251e:	46c0      	nop			; (mov r8, r8)
 8012520:	0801244d 	.word	0x0801244d

08012524 <__sfmoreglue>:
 8012524:	b570      	push	{r4, r5, r6, lr}
 8012526:	2568      	movs	r5, #104	; 0x68
 8012528:	1e4a      	subs	r2, r1, #1
 801252a:	4355      	muls	r5, r2
 801252c:	000e      	movs	r6, r1
 801252e:	0029      	movs	r1, r5
 8012530:	3174      	adds	r1, #116	; 0x74
 8012532:	f7ff fa93 	bl	8011a5c <_malloc_r>
 8012536:	1e04      	subs	r4, r0, #0
 8012538:	d008      	beq.n	801254c <__sfmoreglue+0x28>
 801253a:	2100      	movs	r1, #0
 801253c:	002a      	movs	r2, r5
 801253e:	6001      	str	r1, [r0, #0]
 8012540:	6046      	str	r6, [r0, #4]
 8012542:	300c      	adds	r0, #12
 8012544:	60a0      	str	r0, [r4, #8]
 8012546:	3268      	adds	r2, #104	; 0x68
 8012548:	f7ff fa36 	bl	80119b8 <memset>
 801254c:	0020      	movs	r0, r4
 801254e:	bd70      	pop	{r4, r5, r6, pc}

08012550 <__sfp_lock_acquire>:
 8012550:	b510      	push	{r4, lr}
 8012552:	4802      	ldr	r0, [pc, #8]	; (801255c <__sfp_lock_acquire+0xc>)
 8012554:	f000 f8bd 	bl	80126d2 <__retarget_lock_acquire_recursive>
 8012558:	bd10      	pop	{r4, pc}
 801255a:	46c0      	nop			; (mov r8, r8)
 801255c:	20003798 	.word	0x20003798

08012560 <__sfp_lock_release>:
 8012560:	b510      	push	{r4, lr}
 8012562:	4802      	ldr	r0, [pc, #8]	; (801256c <__sfp_lock_release+0xc>)
 8012564:	f000 f8b6 	bl	80126d4 <__retarget_lock_release_recursive>
 8012568:	bd10      	pop	{r4, pc}
 801256a:	46c0      	nop			; (mov r8, r8)
 801256c:	20003798 	.word	0x20003798

08012570 <__sinit_lock_acquire>:
 8012570:	b510      	push	{r4, lr}
 8012572:	4802      	ldr	r0, [pc, #8]	; (801257c <__sinit_lock_acquire+0xc>)
 8012574:	f000 f8ad 	bl	80126d2 <__retarget_lock_acquire_recursive>
 8012578:	bd10      	pop	{r4, pc}
 801257a:	46c0      	nop			; (mov r8, r8)
 801257c:	20003793 	.word	0x20003793

08012580 <__sinit_lock_release>:
 8012580:	b510      	push	{r4, lr}
 8012582:	4802      	ldr	r0, [pc, #8]	; (801258c <__sinit_lock_release+0xc>)
 8012584:	f000 f8a6 	bl	80126d4 <__retarget_lock_release_recursive>
 8012588:	bd10      	pop	{r4, pc}
 801258a:	46c0      	nop			; (mov r8, r8)
 801258c:	20003793 	.word	0x20003793

08012590 <__sinit>:
 8012590:	b513      	push	{r0, r1, r4, lr}
 8012592:	0004      	movs	r4, r0
 8012594:	f7ff ffec 	bl	8012570 <__sinit_lock_acquire>
 8012598:	69a3      	ldr	r3, [r4, #24]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d002      	beq.n	80125a4 <__sinit+0x14>
 801259e:	f7ff ffef 	bl	8012580 <__sinit_lock_release>
 80125a2:	bd13      	pop	{r0, r1, r4, pc}
 80125a4:	64a3      	str	r3, [r4, #72]	; 0x48
 80125a6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80125a8:	6523      	str	r3, [r4, #80]	; 0x50
 80125aa:	4b13      	ldr	r3, [pc, #76]	; (80125f8 <__sinit+0x68>)
 80125ac:	4a13      	ldr	r2, [pc, #76]	; (80125fc <__sinit+0x6c>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80125b2:	9301      	str	r3, [sp, #4]
 80125b4:	42a3      	cmp	r3, r4
 80125b6:	d101      	bne.n	80125bc <__sinit+0x2c>
 80125b8:	2301      	movs	r3, #1
 80125ba:	61a3      	str	r3, [r4, #24]
 80125bc:	0020      	movs	r0, r4
 80125be:	f000 f81f 	bl	8012600 <__sfp>
 80125c2:	6060      	str	r0, [r4, #4]
 80125c4:	0020      	movs	r0, r4
 80125c6:	f000 f81b 	bl	8012600 <__sfp>
 80125ca:	60a0      	str	r0, [r4, #8]
 80125cc:	0020      	movs	r0, r4
 80125ce:	f000 f817 	bl	8012600 <__sfp>
 80125d2:	2200      	movs	r2, #0
 80125d4:	2104      	movs	r1, #4
 80125d6:	60e0      	str	r0, [r4, #12]
 80125d8:	6860      	ldr	r0, [r4, #4]
 80125da:	f7ff ff77 	bl	80124cc <std>
 80125de:	2201      	movs	r2, #1
 80125e0:	2109      	movs	r1, #9
 80125e2:	68a0      	ldr	r0, [r4, #8]
 80125e4:	f7ff ff72 	bl	80124cc <std>
 80125e8:	2202      	movs	r2, #2
 80125ea:	2112      	movs	r1, #18
 80125ec:	68e0      	ldr	r0, [r4, #12]
 80125ee:	f7ff ff6d 	bl	80124cc <std>
 80125f2:	2301      	movs	r3, #1
 80125f4:	61a3      	str	r3, [r4, #24]
 80125f6:	e7d2      	b.n	801259e <__sinit+0xe>
 80125f8:	080134d4 	.word	0x080134d4
 80125fc:	08012515 	.word	0x08012515

08012600 <__sfp>:
 8012600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012602:	0007      	movs	r7, r0
 8012604:	f7ff ffa4 	bl	8012550 <__sfp_lock_acquire>
 8012608:	4b1f      	ldr	r3, [pc, #124]	; (8012688 <__sfp+0x88>)
 801260a:	681e      	ldr	r6, [r3, #0]
 801260c:	69b3      	ldr	r3, [r6, #24]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d102      	bne.n	8012618 <__sfp+0x18>
 8012612:	0030      	movs	r0, r6
 8012614:	f7ff ffbc 	bl	8012590 <__sinit>
 8012618:	3648      	adds	r6, #72	; 0x48
 801261a:	68b4      	ldr	r4, [r6, #8]
 801261c:	6873      	ldr	r3, [r6, #4]
 801261e:	3b01      	subs	r3, #1
 8012620:	d504      	bpl.n	801262c <__sfp+0x2c>
 8012622:	6833      	ldr	r3, [r6, #0]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d022      	beq.n	801266e <__sfp+0x6e>
 8012628:	6836      	ldr	r6, [r6, #0]
 801262a:	e7f6      	b.n	801261a <__sfp+0x1a>
 801262c:	220c      	movs	r2, #12
 801262e:	5ea5      	ldrsh	r5, [r4, r2]
 8012630:	2d00      	cmp	r5, #0
 8012632:	d11a      	bne.n	801266a <__sfp+0x6a>
 8012634:	0020      	movs	r0, r4
 8012636:	4b15      	ldr	r3, [pc, #84]	; (801268c <__sfp+0x8c>)
 8012638:	3058      	adds	r0, #88	; 0x58
 801263a:	60e3      	str	r3, [r4, #12]
 801263c:	6665      	str	r5, [r4, #100]	; 0x64
 801263e:	f000 f847 	bl	80126d0 <__retarget_lock_init_recursive>
 8012642:	f7ff ff8d 	bl	8012560 <__sfp_lock_release>
 8012646:	0020      	movs	r0, r4
 8012648:	2208      	movs	r2, #8
 801264a:	0029      	movs	r1, r5
 801264c:	6025      	str	r5, [r4, #0]
 801264e:	60a5      	str	r5, [r4, #8]
 8012650:	6065      	str	r5, [r4, #4]
 8012652:	6125      	str	r5, [r4, #16]
 8012654:	6165      	str	r5, [r4, #20]
 8012656:	61a5      	str	r5, [r4, #24]
 8012658:	305c      	adds	r0, #92	; 0x5c
 801265a:	f7ff f9ad 	bl	80119b8 <memset>
 801265e:	6365      	str	r5, [r4, #52]	; 0x34
 8012660:	63a5      	str	r5, [r4, #56]	; 0x38
 8012662:	64a5      	str	r5, [r4, #72]	; 0x48
 8012664:	64e5      	str	r5, [r4, #76]	; 0x4c
 8012666:	0020      	movs	r0, r4
 8012668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801266a:	3468      	adds	r4, #104	; 0x68
 801266c:	e7d7      	b.n	801261e <__sfp+0x1e>
 801266e:	2104      	movs	r1, #4
 8012670:	0038      	movs	r0, r7
 8012672:	f7ff ff57 	bl	8012524 <__sfmoreglue>
 8012676:	1e04      	subs	r4, r0, #0
 8012678:	6030      	str	r0, [r6, #0]
 801267a:	d1d5      	bne.n	8012628 <__sfp+0x28>
 801267c:	f7ff ff70 	bl	8012560 <__sfp_lock_release>
 8012680:	230c      	movs	r3, #12
 8012682:	603b      	str	r3, [r7, #0]
 8012684:	e7ef      	b.n	8012666 <__sfp+0x66>
 8012686:	46c0      	nop			; (mov r8, r8)
 8012688:	080134d4 	.word	0x080134d4
 801268c:	ffff0001 	.word	0xffff0001

08012690 <_fwalk_reent>:
 8012690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012692:	0004      	movs	r4, r0
 8012694:	0006      	movs	r6, r0
 8012696:	2700      	movs	r7, #0
 8012698:	9101      	str	r1, [sp, #4]
 801269a:	3448      	adds	r4, #72	; 0x48
 801269c:	6863      	ldr	r3, [r4, #4]
 801269e:	68a5      	ldr	r5, [r4, #8]
 80126a0:	9300      	str	r3, [sp, #0]
 80126a2:	9b00      	ldr	r3, [sp, #0]
 80126a4:	3b01      	subs	r3, #1
 80126a6:	9300      	str	r3, [sp, #0]
 80126a8:	d504      	bpl.n	80126b4 <_fwalk_reent+0x24>
 80126aa:	6824      	ldr	r4, [r4, #0]
 80126ac:	2c00      	cmp	r4, #0
 80126ae:	d1f5      	bne.n	801269c <_fwalk_reent+0xc>
 80126b0:	0038      	movs	r0, r7
 80126b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80126b4:	89ab      	ldrh	r3, [r5, #12]
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	d908      	bls.n	80126cc <_fwalk_reent+0x3c>
 80126ba:	220e      	movs	r2, #14
 80126bc:	5eab      	ldrsh	r3, [r5, r2]
 80126be:	3301      	adds	r3, #1
 80126c0:	d004      	beq.n	80126cc <_fwalk_reent+0x3c>
 80126c2:	0029      	movs	r1, r5
 80126c4:	0030      	movs	r0, r6
 80126c6:	9b01      	ldr	r3, [sp, #4]
 80126c8:	4798      	blx	r3
 80126ca:	4307      	orrs	r7, r0
 80126cc:	3568      	adds	r5, #104	; 0x68
 80126ce:	e7e8      	b.n	80126a2 <_fwalk_reent+0x12>

080126d0 <__retarget_lock_init_recursive>:
 80126d0:	4770      	bx	lr

080126d2 <__retarget_lock_acquire_recursive>:
 80126d2:	4770      	bx	lr

080126d4 <__retarget_lock_release_recursive>:
 80126d4:	4770      	bx	lr
	...

080126d8 <__swhatbuf_r>:
 80126d8:	b570      	push	{r4, r5, r6, lr}
 80126da:	000e      	movs	r6, r1
 80126dc:	001d      	movs	r5, r3
 80126de:	230e      	movs	r3, #14
 80126e0:	5ec9      	ldrsh	r1, [r1, r3]
 80126e2:	0014      	movs	r4, r2
 80126e4:	b096      	sub	sp, #88	; 0x58
 80126e6:	2900      	cmp	r1, #0
 80126e8:	da07      	bge.n	80126fa <__swhatbuf_r+0x22>
 80126ea:	2300      	movs	r3, #0
 80126ec:	602b      	str	r3, [r5, #0]
 80126ee:	89b3      	ldrh	r3, [r6, #12]
 80126f0:	061b      	lsls	r3, r3, #24
 80126f2:	d411      	bmi.n	8012718 <__swhatbuf_r+0x40>
 80126f4:	2380      	movs	r3, #128	; 0x80
 80126f6:	00db      	lsls	r3, r3, #3
 80126f8:	e00f      	b.n	801271a <__swhatbuf_r+0x42>
 80126fa:	466a      	mov	r2, sp
 80126fc:	f000 f8da 	bl	80128b4 <_fstat_r>
 8012700:	2800      	cmp	r0, #0
 8012702:	dbf2      	blt.n	80126ea <__swhatbuf_r+0x12>
 8012704:	23f0      	movs	r3, #240	; 0xf0
 8012706:	9901      	ldr	r1, [sp, #4]
 8012708:	021b      	lsls	r3, r3, #8
 801270a:	4019      	ands	r1, r3
 801270c:	4b05      	ldr	r3, [pc, #20]	; (8012724 <__swhatbuf_r+0x4c>)
 801270e:	18c9      	adds	r1, r1, r3
 8012710:	424b      	negs	r3, r1
 8012712:	4159      	adcs	r1, r3
 8012714:	6029      	str	r1, [r5, #0]
 8012716:	e7ed      	b.n	80126f4 <__swhatbuf_r+0x1c>
 8012718:	2340      	movs	r3, #64	; 0x40
 801271a:	2000      	movs	r0, #0
 801271c:	6023      	str	r3, [r4, #0]
 801271e:	b016      	add	sp, #88	; 0x58
 8012720:	bd70      	pop	{r4, r5, r6, pc}
 8012722:	46c0      	nop			; (mov r8, r8)
 8012724:	ffffe000 	.word	0xffffe000

08012728 <__smakebuf_r>:
 8012728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801272a:	2602      	movs	r6, #2
 801272c:	898b      	ldrh	r3, [r1, #12]
 801272e:	0005      	movs	r5, r0
 8012730:	000c      	movs	r4, r1
 8012732:	4233      	tst	r3, r6
 8012734:	d006      	beq.n	8012744 <__smakebuf_r+0x1c>
 8012736:	0023      	movs	r3, r4
 8012738:	3347      	adds	r3, #71	; 0x47
 801273a:	6023      	str	r3, [r4, #0]
 801273c:	6123      	str	r3, [r4, #16]
 801273e:	2301      	movs	r3, #1
 8012740:	6163      	str	r3, [r4, #20]
 8012742:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012744:	466a      	mov	r2, sp
 8012746:	ab01      	add	r3, sp, #4
 8012748:	f7ff ffc6 	bl	80126d8 <__swhatbuf_r>
 801274c:	9900      	ldr	r1, [sp, #0]
 801274e:	0007      	movs	r7, r0
 8012750:	0028      	movs	r0, r5
 8012752:	f7ff f983 	bl	8011a5c <_malloc_r>
 8012756:	2800      	cmp	r0, #0
 8012758:	d108      	bne.n	801276c <__smakebuf_r+0x44>
 801275a:	220c      	movs	r2, #12
 801275c:	5ea3      	ldrsh	r3, [r4, r2]
 801275e:	059a      	lsls	r2, r3, #22
 8012760:	d4ef      	bmi.n	8012742 <__smakebuf_r+0x1a>
 8012762:	2203      	movs	r2, #3
 8012764:	4393      	bics	r3, r2
 8012766:	431e      	orrs	r6, r3
 8012768:	81a6      	strh	r6, [r4, #12]
 801276a:	e7e4      	b.n	8012736 <__smakebuf_r+0xe>
 801276c:	4b0f      	ldr	r3, [pc, #60]	; (80127ac <__smakebuf_r+0x84>)
 801276e:	62ab      	str	r3, [r5, #40]	; 0x28
 8012770:	2380      	movs	r3, #128	; 0x80
 8012772:	89a2      	ldrh	r2, [r4, #12]
 8012774:	6020      	str	r0, [r4, #0]
 8012776:	4313      	orrs	r3, r2
 8012778:	81a3      	strh	r3, [r4, #12]
 801277a:	9b00      	ldr	r3, [sp, #0]
 801277c:	6120      	str	r0, [r4, #16]
 801277e:	6163      	str	r3, [r4, #20]
 8012780:	9b01      	ldr	r3, [sp, #4]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d00d      	beq.n	80127a2 <__smakebuf_r+0x7a>
 8012786:	0028      	movs	r0, r5
 8012788:	230e      	movs	r3, #14
 801278a:	5ee1      	ldrsh	r1, [r4, r3]
 801278c:	f000 f8a4 	bl	80128d8 <_isatty_r>
 8012790:	2800      	cmp	r0, #0
 8012792:	d006      	beq.n	80127a2 <__smakebuf_r+0x7a>
 8012794:	2203      	movs	r2, #3
 8012796:	89a3      	ldrh	r3, [r4, #12]
 8012798:	4393      	bics	r3, r2
 801279a:	001a      	movs	r2, r3
 801279c:	2301      	movs	r3, #1
 801279e:	4313      	orrs	r3, r2
 80127a0:	81a3      	strh	r3, [r4, #12]
 80127a2:	89a0      	ldrh	r0, [r4, #12]
 80127a4:	4307      	orrs	r7, r0
 80127a6:	81a7      	strh	r7, [r4, #12]
 80127a8:	e7cb      	b.n	8012742 <__smakebuf_r+0x1a>
 80127aa:	46c0      	nop			; (mov r8, r8)
 80127ac:	08012515 	.word	0x08012515

080127b0 <__malloc_lock>:
 80127b0:	b510      	push	{r4, lr}
 80127b2:	4802      	ldr	r0, [pc, #8]	; (80127bc <__malloc_lock+0xc>)
 80127b4:	f7ff ff8d 	bl	80126d2 <__retarget_lock_acquire_recursive>
 80127b8:	bd10      	pop	{r4, pc}
 80127ba:	46c0      	nop			; (mov r8, r8)
 80127bc:	20003794 	.word	0x20003794

080127c0 <__malloc_unlock>:
 80127c0:	b510      	push	{r4, lr}
 80127c2:	4802      	ldr	r0, [pc, #8]	; (80127cc <__malloc_unlock+0xc>)
 80127c4:	f7ff ff86 	bl	80126d4 <__retarget_lock_release_recursive>
 80127c8:	bd10      	pop	{r4, pc}
 80127ca:	46c0      	nop			; (mov r8, r8)
 80127cc:	20003794 	.word	0x20003794

080127d0 <__sread>:
 80127d0:	b570      	push	{r4, r5, r6, lr}
 80127d2:	000c      	movs	r4, r1
 80127d4:	250e      	movs	r5, #14
 80127d6:	5f49      	ldrsh	r1, [r1, r5]
 80127d8:	f000 f8a4 	bl	8012924 <_read_r>
 80127dc:	2800      	cmp	r0, #0
 80127de:	db03      	blt.n	80127e8 <__sread+0x18>
 80127e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80127e2:	181b      	adds	r3, r3, r0
 80127e4:	6563      	str	r3, [r4, #84]	; 0x54
 80127e6:	bd70      	pop	{r4, r5, r6, pc}
 80127e8:	89a3      	ldrh	r3, [r4, #12]
 80127ea:	4a02      	ldr	r2, [pc, #8]	; (80127f4 <__sread+0x24>)
 80127ec:	4013      	ands	r3, r2
 80127ee:	81a3      	strh	r3, [r4, #12]
 80127f0:	e7f9      	b.n	80127e6 <__sread+0x16>
 80127f2:	46c0      	nop			; (mov r8, r8)
 80127f4:	ffffefff 	.word	0xffffefff

080127f8 <__swrite>:
 80127f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127fa:	001f      	movs	r7, r3
 80127fc:	898b      	ldrh	r3, [r1, #12]
 80127fe:	0005      	movs	r5, r0
 8012800:	000c      	movs	r4, r1
 8012802:	0016      	movs	r6, r2
 8012804:	05db      	lsls	r3, r3, #23
 8012806:	d505      	bpl.n	8012814 <__swrite+0x1c>
 8012808:	230e      	movs	r3, #14
 801280a:	5ec9      	ldrsh	r1, [r1, r3]
 801280c:	2200      	movs	r2, #0
 801280e:	2302      	movs	r3, #2
 8012810:	f000 f874 	bl	80128fc <_lseek_r>
 8012814:	89a3      	ldrh	r3, [r4, #12]
 8012816:	4a05      	ldr	r2, [pc, #20]	; (801282c <__swrite+0x34>)
 8012818:	0028      	movs	r0, r5
 801281a:	4013      	ands	r3, r2
 801281c:	81a3      	strh	r3, [r4, #12]
 801281e:	0032      	movs	r2, r6
 8012820:	230e      	movs	r3, #14
 8012822:	5ee1      	ldrsh	r1, [r4, r3]
 8012824:	003b      	movs	r3, r7
 8012826:	f000 f81f 	bl	8012868 <_write_r>
 801282a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801282c:	ffffefff 	.word	0xffffefff

08012830 <__sseek>:
 8012830:	b570      	push	{r4, r5, r6, lr}
 8012832:	000c      	movs	r4, r1
 8012834:	250e      	movs	r5, #14
 8012836:	5f49      	ldrsh	r1, [r1, r5]
 8012838:	f000 f860 	bl	80128fc <_lseek_r>
 801283c:	89a3      	ldrh	r3, [r4, #12]
 801283e:	1c42      	adds	r2, r0, #1
 8012840:	d103      	bne.n	801284a <__sseek+0x1a>
 8012842:	4a05      	ldr	r2, [pc, #20]	; (8012858 <__sseek+0x28>)
 8012844:	4013      	ands	r3, r2
 8012846:	81a3      	strh	r3, [r4, #12]
 8012848:	bd70      	pop	{r4, r5, r6, pc}
 801284a:	2280      	movs	r2, #128	; 0x80
 801284c:	0152      	lsls	r2, r2, #5
 801284e:	4313      	orrs	r3, r2
 8012850:	81a3      	strh	r3, [r4, #12]
 8012852:	6560      	str	r0, [r4, #84]	; 0x54
 8012854:	e7f8      	b.n	8012848 <__sseek+0x18>
 8012856:	46c0      	nop			; (mov r8, r8)
 8012858:	ffffefff 	.word	0xffffefff

0801285c <__sclose>:
 801285c:	b510      	push	{r4, lr}
 801285e:	230e      	movs	r3, #14
 8012860:	5ec9      	ldrsh	r1, [r1, r3]
 8012862:	f000 f815 	bl	8012890 <_close_r>
 8012866:	bd10      	pop	{r4, pc}

08012868 <_write_r>:
 8012868:	b570      	push	{r4, r5, r6, lr}
 801286a:	0004      	movs	r4, r0
 801286c:	0008      	movs	r0, r1
 801286e:	0011      	movs	r1, r2
 8012870:	001a      	movs	r2, r3
 8012872:	2300      	movs	r3, #0
 8012874:	4d05      	ldr	r5, [pc, #20]	; (801288c <_write_r+0x24>)
 8012876:	602b      	str	r3, [r5, #0]
 8012878:	f7ee fb99 	bl	8000fae <_write>
 801287c:	1c43      	adds	r3, r0, #1
 801287e:	d103      	bne.n	8012888 <_write_r+0x20>
 8012880:	682b      	ldr	r3, [r5, #0]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d000      	beq.n	8012888 <_write_r+0x20>
 8012886:	6023      	str	r3, [r4, #0]
 8012888:	bd70      	pop	{r4, r5, r6, pc}
 801288a:	46c0      	nop			; (mov r8, r8)
 801288c:	2000379c 	.word	0x2000379c

08012890 <_close_r>:
 8012890:	2300      	movs	r3, #0
 8012892:	b570      	push	{r4, r5, r6, lr}
 8012894:	4d06      	ldr	r5, [pc, #24]	; (80128b0 <_close_r+0x20>)
 8012896:	0004      	movs	r4, r0
 8012898:	0008      	movs	r0, r1
 801289a:	602b      	str	r3, [r5, #0]
 801289c:	f7ee fba3 	bl	8000fe6 <_close>
 80128a0:	1c43      	adds	r3, r0, #1
 80128a2:	d103      	bne.n	80128ac <_close_r+0x1c>
 80128a4:	682b      	ldr	r3, [r5, #0]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d000      	beq.n	80128ac <_close_r+0x1c>
 80128aa:	6023      	str	r3, [r4, #0]
 80128ac:	bd70      	pop	{r4, r5, r6, pc}
 80128ae:	46c0      	nop			; (mov r8, r8)
 80128b0:	2000379c 	.word	0x2000379c

080128b4 <_fstat_r>:
 80128b4:	2300      	movs	r3, #0
 80128b6:	b570      	push	{r4, r5, r6, lr}
 80128b8:	4d06      	ldr	r5, [pc, #24]	; (80128d4 <_fstat_r+0x20>)
 80128ba:	0004      	movs	r4, r0
 80128bc:	0008      	movs	r0, r1
 80128be:	0011      	movs	r1, r2
 80128c0:	602b      	str	r3, [r5, #0]
 80128c2:	f7ee fb9a 	bl	8000ffa <_fstat>
 80128c6:	1c43      	adds	r3, r0, #1
 80128c8:	d103      	bne.n	80128d2 <_fstat_r+0x1e>
 80128ca:	682b      	ldr	r3, [r5, #0]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d000      	beq.n	80128d2 <_fstat_r+0x1e>
 80128d0:	6023      	str	r3, [r4, #0]
 80128d2:	bd70      	pop	{r4, r5, r6, pc}
 80128d4:	2000379c 	.word	0x2000379c

080128d8 <_isatty_r>:
 80128d8:	2300      	movs	r3, #0
 80128da:	b570      	push	{r4, r5, r6, lr}
 80128dc:	4d06      	ldr	r5, [pc, #24]	; (80128f8 <_isatty_r+0x20>)
 80128de:	0004      	movs	r4, r0
 80128e0:	0008      	movs	r0, r1
 80128e2:	602b      	str	r3, [r5, #0]
 80128e4:	f7ee fb97 	bl	8001016 <_isatty>
 80128e8:	1c43      	adds	r3, r0, #1
 80128ea:	d103      	bne.n	80128f4 <_isatty_r+0x1c>
 80128ec:	682b      	ldr	r3, [r5, #0]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d000      	beq.n	80128f4 <_isatty_r+0x1c>
 80128f2:	6023      	str	r3, [r4, #0]
 80128f4:	bd70      	pop	{r4, r5, r6, pc}
 80128f6:	46c0      	nop			; (mov r8, r8)
 80128f8:	2000379c 	.word	0x2000379c

080128fc <_lseek_r>:
 80128fc:	b570      	push	{r4, r5, r6, lr}
 80128fe:	0004      	movs	r4, r0
 8012900:	0008      	movs	r0, r1
 8012902:	0011      	movs	r1, r2
 8012904:	001a      	movs	r2, r3
 8012906:	2300      	movs	r3, #0
 8012908:	4d05      	ldr	r5, [pc, #20]	; (8012920 <_lseek_r+0x24>)
 801290a:	602b      	str	r3, [r5, #0]
 801290c:	f7ee fb8c 	bl	8001028 <_lseek>
 8012910:	1c43      	adds	r3, r0, #1
 8012912:	d103      	bne.n	801291c <_lseek_r+0x20>
 8012914:	682b      	ldr	r3, [r5, #0]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d000      	beq.n	801291c <_lseek_r+0x20>
 801291a:	6023      	str	r3, [r4, #0]
 801291c:	bd70      	pop	{r4, r5, r6, pc}
 801291e:	46c0      	nop			; (mov r8, r8)
 8012920:	2000379c 	.word	0x2000379c

08012924 <_read_r>:
 8012924:	b570      	push	{r4, r5, r6, lr}
 8012926:	0004      	movs	r4, r0
 8012928:	0008      	movs	r0, r1
 801292a:	0011      	movs	r1, r2
 801292c:	001a      	movs	r2, r3
 801292e:	2300      	movs	r3, #0
 8012930:	4d05      	ldr	r5, [pc, #20]	; (8012948 <_read_r+0x24>)
 8012932:	602b      	str	r3, [r5, #0]
 8012934:	f7ee fb1e 	bl	8000f74 <_read>
 8012938:	1c43      	adds	r3, r0, #1
 801293a:	d103      	bne.n	8012944 <_read_r+0x20>
 801293c:	682b      	ldr	r3, [r5, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d000      	beq.n	8012944 <_read_r+0x20>
 8012942:	6023      	str	r3, [r4, #0]
 8012944:	bd70      	pop	{r4, r5, r6, pc}
 8012946:	46c0      	nop			; (mov r8, r8)
 8012948:	2000379c 	.word	0x2000379c

0801294c <_init>:
 801294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801294e:	46c0      	nop			; (mov r8, r8)
 8012950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012952:	bc08      	pop	{r3}
 8012954:	469e      	mov	lr, r3
 8012956:	4770      	bx	lr

08012958 <_fini>:
 8012958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801295a:	46c0      	nop			; (mov r8, r8)
 801295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801295e:	bc08      	pop	{r3}
 8012960:	469e      	mov	lr, r3
 8012962:	4770      	bx	lr
